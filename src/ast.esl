// Copyright (c) 2009-2018, Brian G. Lucas.  See LICENSE file.

package ast
{
    type Op:
    (
	NULL,
	NOP,
	FILE,		// source file boundary
	PACKAGE,	// package boundary
	DCLVAR,		// variable declaration
	DCLCON,		// constant declaration (for aggregates)
	CONST,	FCON,	SCON,	CLIST,	CRANGE,
	FIELD,
	VAR,
	OFFSET,	INDEX,	SLICE,	BYREF,
	CAST,
	CALL,	CALLI,	ASM,
	SET,	COPY,	MOVE,	AEQ,	ANE,	// record and array ops
	GETRV,
	LOAD,
	STORE,		// assignment
	// unary ops
	ZEXT,   SEXT,   TRUNC,	BSWAP,	BITREV,
	CLZ,	CLZNZ,	CTZ,	CTZNZ,	POP,
	NEG,	NOT,	ABS,
	SQRT,	ZLEN,
	FNEG,   FCVTL,  FCVTS,
	CVTUF,	CVTIF,  CVTFU,	CVTFI,
	// binary ops
	AND,    OR,     XOR,
	ADD,    SUB,	MUL,    DIV,    MOD,
	UMIN,	UMAX,	SMIN,	SMAX,		 // expand in llvm
	LSL,    LSR,	ASL,    ASR,	ROL,    ROR,
	EQ,     NE,	ULT,    UGT,    ULE,    UGE,
			SLT,    SGT,    SLE,    SGE,
	FEQ,    FNE,    FLT,    FGT,    FLE,    FGE,
	FADD,	FSUB,	FMUL,	FDIV,	FREM,
	FMIN,   FMAX, 				// expand in llvm
	BAND,   BOR,	BNOT,
	IFEXPR,		// select expression
	SEQ,		// sequence
	LOOP,
	EXIT,
	IF,		// one or two arm if
	SEL,		// select, multi-arm if
	IS,		// one arm of a select
	RET,		// return value
	PROC,		// procedure
	ASSERT		// assertion
    );
    const NumChildDefault: [Op]0..255 =
    {   [NULL]=	  0,
	[NOP]=	  1,
	[FILE]=   1,	[PACKAGE]=1,
	[DCLVAR]= 1,
	[DCLCON]= 1,
	[CONST]=  0,	[FCON]=   0,	[SCON]=   0,
	[CLIST]=  8,	[CRANGE]= 2,
	[FIELD]=  2,    [VAR]=    0,
	[OFFSET]= 1,	[INDEX]=  2,	[SLICE]=  3,	[BYREF]=  1,
	[CAST]=   1,
	[CALL]=   4,	[CALLI]=  5,	[ASM]=    5,
	[SET]=    4,
	[COPY]=   4,	[MOVE]=  4,	[AEQ]=    4,	[ANE]=    4,
	[GETRV]=  1,	[LOAD]=   1,	[STORE]=  2,
	[ZEXT]=   1,	[SEXT]=   1,	[TRUNC]=  1,
	[BSWAP]=  1,    [BITREV]= 1,
	[NEG]=    1,	[NOT]=    1,
	[ABS]=	  3,	// will convert into IFEXPR
	[FNEG]=   1,    [FCVTL]=  1,    [FCVTS]=  1,
	[CVTUF]=  1,	[CVTIF]=  1,	[CVTFU]=  1,	[CVTFI]=  1,
	[CLZ]=    1,	[CLZNZ]=  1,	[CTZ]=    1,	[CTZNZ]=  1,
	[POP]=    1,    [ZLEN]=   2,
	[ROL]=    2,    [ROR]=    2,
	[ADD]=	  2,	[SUB]=    2,
	[MUL]=	  2,    [DIV]=	  2,    [MOD]=	  2,
	[EQ]=	  2,    [NE]=     2,
	[ULT]=	  2,    [UGT]=	  2,    [ULE]=	  2,    [UGE]=	  2,
	[SLT]=	  2,	[SGT]=	  2,    [SLE]=	  2,    [SGE]=	  2,
	[FEQ]=    2,    [FNE]=    2,
	[FLT]=	  2,	[FGT]=	  2,    [FLE]=	  2,    [FGE]=	  2,
	[UMIN]=   3,	[UMAX]=   3,	[SMIN]=   3,	[SMAX]=   3,
	[FMIN]=   3,	[FMAX]=   3,
	[LSL]=	  2,    [LSR]=	  2,	[ASL]=	  2,    [ASR]=	  2,
	[AND]=	  2,    [OR]=	  2,	[XOR]=	  2,
	[BAND]=	  2,	[BOR]=	  2,	[BNOT]=	  2,
	[FADD]=   2,	[FSUB]=   2,
	[FMUL]=   2,	[FDIV]=   2,	[FREM]=   2,
	[IFEXPR]= 3,
	[SEQ]=    8,	[LOOP]=   1,	[EXIT]=   2,
	[IF]=     3,	[SEL]=    8,	[IS]=     4,
	[RET]=    1,
	[PROC]=   3,    [ASSERT]= 1
    };
    type NSubNodes: 0..0xFFFF;
    type AstNode:
    {
	op:	Op;		// what kind of node is this
	num:	NSubNodes;	// number of subnodes
	max:	NSubNodes;	// maximum allocated slots for subnode
	fscale: _int16;		// see below
	lineno:	_uint16;	// source code line number
	seqno:	_uint16;	// used by LLVM
	width:	type.BitSize;	// current width in bits
	type:	Type;
	symb:	Symb;
	valu:	type.Valu;
	child:	[]@AstNode;
    };
    // fscale is the decimal scaling for floating point constants,
    // or binary scaling for fixed point constants.

    type Ast: @AstNode;

    var Null: Ast;

    proc Alloc(op:Op, nc:NSubNodes): Ast
    {   var pa: Ast;

	pa = Ast(sys.zalloc(AstNode?size + nc * Ast?size));
	pa@.op = op;
	pa@.lineno = lex.Lineno();
	pa@.num = 0;
	pa@.max = nc;
	return pa;
    }

    proc Dup(from: Ast): Ast
    {   var pa: Ast;
	var i: _uint;

	pa = Ast(sys.zalloc(AstNode?size + from@.max * Ast?size));
	pa@ = from@;	// record copy
	i = 0;
	while i < from@.num do
	{   pa@.child[i] = from@.child[i];
	    i += 1;
	}
	pa@.lineno = lex.Lineno();
	return pa;
    }

    proc Expand(po: Ast, newsize:NSubNodes): Ast
    {   var pn: Ast;
	var size, i: NSubNodes;

	size = po@.max;
	while size < newsize do
	{   if size >= 16 then
		size += 16;
	    else
		size = 2 * size;
	}
	pn = Alloc(po@.op, size);
	// Record copy?
	pn@.op =    po@.op;
	pn@.width = po@.width;
	pn@.fscale= po@.fscale;
	pn@.lineno= po@.lineno;
	pn@.num =   po@.num;
	pn@.seqno = po@.seqno;
	pn@.valu =  po@.valu;
	pn@.type =  po@.type;
	pn@.symb =  po@.symb;
	i = 0;
	while i < po@.max do
	{   pn@.child[i] = po@.child[i];
	    i += 1;
	}
	pn@.max =   size;
	return pn;
    }

    proc New(op:Op, t:type.Type): Ast
    {   var pa: Ast;

	pa = Alloc(op, NumChildDefault[op]);
	pa@.type = t;
	if t != 0 then
	    pa@.width = t@.width;
	return pa;
    }

    proc New1(op:Op, t:type.Type, pc0:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 1 then
	    n = 1;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.num = 1;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New2(op:Op, t:type.Type, pc0:Ast, pc1:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 2 then
	    n = 2;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.num = 2;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New3(op:Op, t:type.Type, pc0:Ast, pc1:Ast, pc2:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 3 then
	    n = 3;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.child[2] = pc2;
	pa@.num = 3;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New4(op:Op, t:type.Type, pc0:Ast, pc1:Ast, pc2:Ast, pc3: Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 4 then
	    n = 4;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.child[2] = pc2;
	pa@.child[3] = pc3;
	pa@.num = 4;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc Child(pp:Ast, pc:Ast): Ast
    {   var n: NSubNodes;

	if pp != 0 then
	{   n = pp@.num + 1;
	    if n > pp@.max then
		pp = Expand(pp, n);
	    pp@.child[pp@.num] = pc;
	    pp@.num = n;
	}
	return pp;
    }

    proc ChildIndexed(pp:Ast, n:NSubNodes, pc:Ast): Ast
    {
	n += 1;
	if n > pp@.max then
	    pp = Expand(pp, n);
	pp@.child[n-1] = pc;
	if n > pp@.num then
	    pp@.num = n;
	return pp;
    }

    proc Const(t: Type, value: type.Valu): Ast
    {   var pa: Ast;

	if t@.kind == FLOAT then
	    pa = New(FCON, t);
	else
	    pa = New(CONST, t);
	pa@.valu = value;
	if t != 0 then
	    pa@.width = t@.width;
	return pa;
    }

    proc ConstW(value: type.Valu): Ast
    {   var pa: Ast;

	pa = New(CONST, type.wordtype);
	pa@.valu = value;
	pa@.width = type.wordtype@.width;
	return pa;
    }

    proc OpIfExpr(ctree: Ast, ttree: Ast, ftree: Ast, t: Type): Ast
    {   var tree: Ast;

	if ctree@.op == CONST then
	{   if ctree@.valu != 0 then
		tree = ttree;
	    else
		tree = ftree;
	}
	else
	    tree = New3(IFEXPR, ttree@.type, ctree, ttree, ftree);
	tree@.width = t@.width;
	return tree;
    }

    proc CheckConstTruncate(node: Ast, size: type.BitSize)
    {
	// assert node@.op == CONST
	if size >= type.Valu?bits then return;
	if node@.type@.kind
	is SINT then
	{   if type.SValu(node@.valu) < 0 then
	    {   if type.SValu(node@.valu) >> (size+1) != -1 then
		    lex.Error(TRUNC);
	    }
	    else
	    {   if node@.valu >> (size+1) != 0 then
		    lex.Error(TRUNC);
	    }
	}
	is FLOAT then {}    // just ignore for now
	else
	{   if node@.valu >> size != 0 then
		lex.Error(TRUNC);
	}
    }

    proc Trunc(tree: Ast, t: Type): Ast
    {
	tree = New1(TRUNC, t, tree);
	tree@.width = t@.size;
        return tree;
    }

    // Warning: if node is CONST and is referenced more than once in
    // the DAG, bad things may happen.
    proc Extend(tree: Ast, size: type.BitSize, iscast: boolean): Ast
    {
	if tree@.width < size then
	{   if tree@.op != CONST && tree@.op != FCON then
	    {   if tree@.type@.kind
		is FLOAT then
		    tree = New1(FCVTL, tree@.type, tree);
		is SINT then
		    tree = New1(SEXT, tree@.type, tree);
		else
		    tree = New1(ZEXT, tree@.type, tree);
	    }
	    tree@.width = size;
	}
	else if tree@.width > size then
	{
	    if tree@.op != CONST && tree@.op != FCON then
	    {   if tree@.type@.kind == FLOAT then
		    tree = New1(FCVTS, tree@.type, tree);
		else
		    tree = New1(TRUNC, tree@.type, tree);
		if feature.trunc && !iscast then lex.Error(TRUNC);
	    }
	    else
		CheckConstTruncate(tree, size);
	    tree@.width = size;
	}
	return tree;
    }

    proc ExtendT(tree: Ast, t: Type): Ast
    {   var scale: _int;

	tree = Extend(tree, t@.width, false);
	tree@.type = t;
	return tree;
    }

    proc ExtendCast(tree: Ast, t: Type): Ast
    {
	tree = Extend(tree, t@.width, true);
	tree@.type = t;
	return tree;
    }

    proc Cast(tree: Ast, to: Type): Ast
    {
	if tree == 0 then return tree;
	if to@.kind
	is ENUM then
	{   if tree@.type@.kind
	    is ENUM, UINT then			// ENUM, UINT -> ENUM
		tree = ExtendCast(tree, to);
	    else
		lex.Error(BADCAST);
	}
	is UINT then
	{   if tree@.type@.kind
	    is ENUM, UINT, SINT then		// ENUM|UINT|SINT -> UINT
		tree = ExtendCast(tree, to);
	    is REF then				// REF -> UINT
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.size;	// FIXME: width?
	    }
	    is RECORD, ARRAY then		// PACKED -> UINT
	    {   if tree@.type@.packed && tree@.width == to@.size then
		    tree@.type = to;
		else
		    lex.Error(BADCAST);
	    }
	    is FLOAT then
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.width;
	    }
	    else
		lex.Error(BADCAST);
	}
	is SINT then
	{   if tree@.type@.kind
	    is UINT, SINT then			// UINT|SINT -> SINT
		tree = ExtendCast(tree, to);
	    else
		lex.Error(BADCAST);
	}
	is FLOAT then
	{   if tree@.type@.kind == UINT then
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.width;
	    }
	    else
		lex.Error(BADCAST);
	}
	is REF then
	{   if tree@.type@.kind
	    is REF then				// REF -> REF
	    {   tree = New1(CAST, to, tree);
		tree@.width = Target.ptr.size;
	    }
	    is UINT then			// UINT -> REF
	    {   if tree@.width != Target.ptr.size then lex.Error(BADINTPTR);
		tree = New1(CAST, to, tree);
		tree@.width = to@.size;	// FIXME: width?
	    }
	    is ARRAY then	// cast from slice of memory
	    {   if tree@.op == LOAD then
		    tree = tree@.child[0];	// undo load
		// Should check for large enough slice?
		if tree@.op == SLICE && tree@.type@.base@.base == type.bytetype then
		{   tree = New1(CAST, to, tree);
		    tree@.width = to@.size;	// width?
		}
		else
		    lex.Error(BADCAST);
	    }
	    else
		lex.Error(BADCAST);
	}
	is RECORD, ARRAY then
	{   if to@.packed && tree@.type@.kind == UINT then
		tree = ExtendCast(tree, to);
	    else
		lex.Error(BADCAST);
	}
	return tree;
    }

    proc ForceBoolean(tree: Ast): Ast
    {
	if tree@.type != 0 && !type.Compat(tree@.type, type.booltype) then
	    lex.Error(WANTBOOL);
	if tree@.width > 1 then		// llvm wants a 1-bit boolean
	{   if tree@.op != CONST then
		tree = New2(NE, type.booltype, tree, Const(tree@.type, 0));
	    tree@.width = 1;
	}
	return tree;
    }

    // Until all hosts have the popcnt instruction
    proc popcnt(x: type.Valu): _uint
    {   var n: _uint;

	n = 0;
	while x != 0 do
	{   n += 1;
	    x = x & (x-1);
	}
	return n;
    }

    proc OpUnary(op:Op, rhs:Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if rhs != 0 then
	{   if rhs@.op == CONST then	// constant folding
	    {   if op
		is NEG  then rhs@.valu = type.Valu(-rhs@.valu);
		is NOT  then rhs@.valu = ~rhs@.valu;
		is BNOT then rhs@.valu = rhs@.valu ^ 1;
		is ABS  then
		{   if rhs@.type@.kind == SINT && type.SValu(rhs@.valu) < 0 then
			rhs@.valu = type.Valu(-type.SValu(rhs@.valu));
		}
		is CLZ, CLZNZ  then
		{   if rhs@.valu == 0 then
			rhs@.valu = rhs@.width;
		    else
			rhs@.valu = _clznz(rhs@.valu) -
			    (Valu?size*target.ByteSize - rhs@.width);
		}
		is CTZ, CTZNZ  then
		{   if rhs@.valu == 0 then
			rhs@.valu = 0;
		    else
			rhs@.valu = _ctznz(rhs@.valu);
		}
		is POP  then rhs@.valu = popcnt(rhs@.valu);
		else lex.ErrorS(COMPILER, "Unhandled unary operation");
		tree = rhs;
	    }
	    elif rhs@.op == FCON && op == FNEG then
	    {   rhs@.valu = type.Valu(-rhs@.valu);
		tree =  rhs;
	    }
	    else
		tree = New1(op, rhs@.type, rhs);
	}
	return tree;
    }

    // BAND, BOR
    proc OpBool(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   lhs = ForceBoolean(lhs);
	    rhs = ForceBoolean(rhs);
	    if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is BOR  then tree@.valu = tree@.valu | rhs@.valu;
		is BAND then tree@.valu = tree@.valu & rhs@.valu;
	    }
	    else
		tree = New2(op, type.booltype, lhs, rhs);
	}
	return tree;
    }

    proc OpBinary(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {
	var sl, sr: type.BitSize;

	sl = lhs@.width;
	sr = rhs@.width;
	// make LHS as wide as result wants it
	if t != 0 && t@.width > sl then
	{  lhs = ExtendT(lhs, t);
	   sl = t@.width;
	}
	if sl > sr then
	    rhs = Extend(rhs, sl, false);
	else if sr > sl then
	    lhs = Extend(lhs, sr, false);
	return New2(op, lhs@.type, lhs, rhs);
    }

    proc AdjustFixed(tree: Ast, t: Type): Ast;      // forward

    // ADD, SUB
    proc OpAdd(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var scale: _int;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if t == 0 then t = lhs@.type;
	    scale = t@.scale;
//err.str("OpAdd scale: lhs="); err.uint16(lhs.type.scale);
//err.str(" rhs="); err.uint16(rhs.type.scale);
//err.str(" to="); err.uint16(scale); err.nl();
	    if lhs@.type.scale != scale then
		lhs = AdjustFixed(lhs, t);
	    if rhs@.type.scale != scale then
		rhs = AdjustFixed(rhs, t);
	    if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
		if op
		is ADD then lhs@.valu += rhs@.valu;
		is SUB then lhs@.valu -= rhs@.valu;
		tree = Dup(lhs);
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	    tree@.type = t;
	}
	return tree;
    }

    proc OpShfL(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var result: Valu;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        tree@.valu = tree@.valu << rhs@.valu;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	}
	return tree;
    }

    proc OpShfR(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var result: Valu;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is LSR then tree@.valu = tree@.valu >> rhs@.valu;
		is ASR then tree@.valu = Valu(type.SValu(tree@.valu) >> rhs@.valu);
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	}
	return tree;
    }

    proc OpMul(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var scale, tscale: _int;
	var twidth: _uint;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if t == 0 then t = lhs@.type;
	    scale = t@.scale;
	    tscale = lhs.type.scale + rhs.type.scale;   // what MUL produces
	    twidth = lhs.type.size + rhs.type.size;   // what MUL produces
//err.str("OpMul scale: lhs="); err.uint16(lhs.type.scale);
//err.str(" rhs="); err.uint16(rhs.type.scale);
//err.str(" to="); err.uint16(scale); err.nl();
	    if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is MUL then tree@.valu = tree@.valu * rhs@.valu;
		is LSL,ASL then tree@.valu = tree@.valu << rhs@.valu;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	    if tscale != scale then
	    {   tree@.type =
		  type.MakeFixed(tree@.type@.kind, twidth, tscale);
		tree = AdjustFixed(tree, t);
	    }
	    tree@.type = t;
	}
	return tree;
    }

    proc OpDiv(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is DIV then tree@.valu = tree@.valu / rhs@.valu;
		is MOD then tree@.valu = tree@.valu % rhs@.valu;
		is LSR then tree@.valu = tree@.valu >> rhs@.valu;
		is ASR then tree@.valu = Valu(type.SValu(tree@.valu) << rhs@.valu);
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);   // FIXME - widen not needed
//		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // MIN, MAX
    proc OpMinMax(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared, assume LHS
		tree = ast.Const(lhs@.type, lhs@.valu);
		if op
		is UMIN then
		{   if rhs@.valu < lhs.valu then tree.valu = rhs.valu;
		}
		is UMAX then
		{   if rhs@.valu > lhs.valu then tree.valu = rhs.valu;
		}
		is SMIN then
		{   if type.SValu(rhs@.valu) < type.SValu(lhs.valu) then
			tree.valu = rhs.valu;
		}
		is SMAX then
		{   if type.SValu(rhs@.valu) > type.SValu(lhs.valu) then
			tree.valu = rhs.valu;
		}
	    }
	    else
		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }


    // AND, OR, XOR
    proc OpLogic(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared, assume LHS
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is OR then  tree@.valu = tree@.valu | rhs@.valu;
		is XOR then tree@.valu = tree@.valu ^ rhs@.valu;
		is AND then tree@.valu = tree@.valu & rhs@.valu;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // EQ, NE, ULT, UGT, ULE, UGE, SLT, SGT, SLE, SGE
    proc OpCompare(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared, assume LHS
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is EQ then  tree@.valu = _uint(tree@.valu == rhs@.valu);
		is NE then  tree@.valu = _uint(tree@.valu != rhs@.valu);
		is ULT then tree@.valu = _uint(tree@.valu < rhs@.valu);
		is UGT then tree@.valu = _uint(tree@.valu > rhs@.valu);
		is ULE then tree@.valu = _uint(tree@.valu <= rhs@.valu);
		is UGE then tree@.valu = _uint(tree@.valu >= rhs@.valu);
		is SLT then
		    tree@.valu = _uint(type.SValu(tree@.valu) < type.SValu(rhs@.valu));
		is SGT then
		    tree@.valu = _uint(type.SValu(tree@.valu) > type.SValu(rhs@.valu));
		is SLE then
		    tree@.valu = _uint(type.SValu(tree@.valu) <= type.SValu(rhs@.valu));
		is SGE then
		    tree@.valu = _uint(type.SValu(tree@.valu) >= type.SValu(rhs@.valu));
	    }
	    else
	    {   // FIXME: all the kinds should be examined for legality
		// for the various ops
		if lhs@.type@.kind == REF || lhs@.type@.kind == REFPROC then
		{   if rhs@.op == CONST then
		    {   if op == EQ || op == NE then
			    rhs@.width = Target.ptr.size;
		    }
		}
		tree = OpBinary(op, lhs, rhs, 0);
	    }
	    tree@.type = type.booltype;
	    tree@.width = 1;
	}
	return tree;
    }

    // FADD, FSUB, FMUL, FDIV, FREM, FMIN, FMAX
    proc OpFloat(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var sl, sr: type.BitSize;

	// LHS known to be FLOAT, so must the RHS
	if rhs@.type@.kind != FLOAT then
	{   lex.ErrorS(OPTYPE, "floating point operation");
	    return lhs;
	}
	tree = 0;
	// FIXME - constant folding
	sl = lhs@.width;
	sr = rhs@.width;
	// make LHS as wide as result wants it
	if t != 0 && t@.width > sl then
	{   lhs = ExtendT(lhs, t);
	    sl = t@.width;
	}
	// if lhs is FCON then change width to that of rhs
	if lhs@.op == FCON then
	{   lhs@.width = rhs@.width;
	    sl = lhs@.width;
	}
	if sl > sr then
	    rhs = ExtendT(rhs, lhs@.type);
	else if sr > sl then
	    lhs = ExtendT(lhs, rhs@.type);
	return New2(op, lhs@.type, lhs, rhs);
    }

    proc CheckRefAttributes(to: Type, fm: Type): boolean
    {
	if to == 0 || fm == 0 then return false;
	// Check endian
	if to@.memorder != fm@.memorder then
	    return false;
	// Check alignment
	if to@.align > fm.align then
	    return false;
	if to@.kind == REF && fm@.kind == REF then
	    return CheckRefAttributes(to@.base, fm@.base);
	return true;
    }

    proc CoerceToRef(tree: Ast): Ast
    {
	if tree@.op == LOAD then
	    tree = tree@.child[0];		// undo the load
	else if tree@.op == BSWAP && tree@.child[0]@.op == LOAD then
	    tree = tree@.child[0]@.child[0];
	// FIXME: this is very likely wrong
	if tree@.op
	is SCON, CLIST then
	    tree = New1(BYREF, type.MakeRef(tree@.type), tree);
	is VAR then
	    {}
	else
	    tree = New1(BYREF, tree@.type, tree);
	return tree;
    }

    proc AdjustFixedConst(node: Ast, to: Type): Ast
    {   var n, m, r: _uint64;
	var fms, tos, fmi, toi, k: _uint;
	var round: type.RoundT;
	var issigned, isneg: boolean;
	type WYX: 0..0b111; // w is bit just left of rounding point
			    // y is bit just right of rounding point
			    // x is 1 if any bits right of y are non-zero
	var wyx: WYX;
	const adjpos: [WYX][type.RoundT]0..1 =
	{ // DN, UP, TZ, FZ, NS, NL, NE, NO        wyx
	   {  0,  0,  0,  0,  0,  0,  0,  0 },  // 000
	   {  0,  1,  0,  1,  0,  0,  0,  0 },  // 001
	   {  0,  1,  0,  1,  0,  1,  0,  1 },  // 010
	   {  0,  1,  0,  1,  1,  1,  1,  1 },  // 011
	   {  0,  0,  0,  0,  0,  0,  0,  0 },  // 100
	   {  0,  1,  0,  1,  0,  0,  0,  0 },  // 101
	   {  0,  1,  0,  1,  0,  1,  1,  0 },  // 110
	   {  0,  1,  0,  1,  1,  1,  1,  1 }   // 111
	};
	const adjneg: [WYX][type.RoundT]0..1 =
	{ // DN, UP, TZ, FZ, NS, NL, NE, NO        wyx
	   {  0,  0,  0,  0,  0,  0,  0,  0 },  // 000
	   {  0,  1,  1,  0,  1,  1,  1,  1 },  // 001
	   {  0,  1,  1,  0,  1,  0,  1,  0 },  // 010
	   {  0,  1,  1,  0,  0,  0,  0,  0 },  // 011
	   {  0,  0,  0,  0,  0,  0,  0,  0 },  // 100
	   {  0,  1,  1,  0,  1,  1,  1,  1 },  // 101
	   {  0,  1,  1,  0,  1,  0,  0,  1 },  // 110
	   {  0,  1,  1,  0,  0,  0,  0,  0 }   // 111
	};
const db: boolean = false;
	// FIXME - should we dup node in case multiple references?
        n = node@.valu;
        // assert node@.fscale >= 0;
	fms = _uint(node@.fscale);  // from fractional size
	if to@.scale < 0 then
	{   lex.ErrorS(NOTIMPL, "negative fixed point scale");
	    return node;
	}
	tos = to@.scale;	    // to fractional size
	toi = to@.size - tos;		    // to integer size
	fmi = node@.width - fms;	    // from integer size
	issigned = node@.type@.kind == SINT;
	isneg = false;
	if issigned then
	{   if type.SValu(node@.valu) < 0 then
	    {   isneg = true;
		n = _uint64(-_int64(n));
	    }
	    // allow for sign bit
	    toi -= 1;  fmi -= 1;
	}
if db then {
err.str("AdjustFixedConst: to=(");
err.uint(to@.size); err.chr(','); err.int(tos);
err.str(") fm=("); err.uint(node@.type@.size); err.chr(','); err.int(fms);
err.str(") n="); err.hex64(n); err.nl();
err.str("\ttoi="); err.uint(toi); err.str(" fmi="); err.uint(fmi); err.nl();
}
	if tos >= fms then
	{   if tos == fms then
		return node;
	    lex.ErrorS(NOTIMPL, "Larger fixed point fraction\n");
	}
	else	// fraction size decreases
	{
	    k = fms - tos;      // decrease in scale
	    if k > 0 then
	    {   wyx = ((n >> (k-1)) & 0x3) << 1;
		if (n & ((1 << (k-1)) - 1)) != 0 then
		    wyx += 1;
	    }
	    else
		wyx = 0;
	    round = to@.round;
if db then {
err.str("\tk="); err.uint(k); err.str(" wyx="); err.uint8(wyx);
err.str(" round="); err.uint8(_uint8(round)); err.nl();
}
	    if !issigned || !isneg then       // unsigned rounding
	    {
		r = _uint64(adjpos[wyx][round]);
		n = n >> k;	    // final shift
		n += r;
		// check for integer part overflow, must be done after rounding
		m = 1 << (tos+toi);
if db then {
err.str("\tn2="); err.hex64(n); err.str(" r="); err.uint64(r);
err.str(" m="); err.hex64(m); err.nl();
}
		if n >= m then       // integer part too large
		{   if n == m then   // OK, but adjust
			n -= 1;
		    else
			lex.Error(TRUNC);
		}
	    }
	    else		// signed rounding
	    {   var v: _int64;
		r = _uint64(adjneg[wyx][round]);
		v = -_int64(n);	// restore its negativity
		v = v >> k;	    // final shift
		v += r;
		n = _uint64(v);
		// check for integer part overflow, must be done after rounding
		m = _uint64?max << (tos+toi);
if db then {
err.str("\tn2="); err.hex64(n); err.str(" r="); err.uint64(r);
err.str(" m="); err.hex64(m); err.nl();
}
		if n != 0 && n < m then
		    lex.Error(TRUNC);
	    }
	}
	node@.valu = n;
	node@.fscale = tos;
	node@.type = to;
	node@.width = to@.width;
	return node;
    }

    proc AdjustFixed(tree: Ast, to: Type): Ast
    {   var fmscale, toscale: _uint;
	var issigned: boolean;
	var op: Op;
	var shf: _uint;
const db: boolean = false;

	if tree@.op == CONST && tree@.fscale != 0  then
	    return AdjustFixedConst(tree, to);
        issigned = to@.kind == SINT;
        fmscale = tree@.type@.scale;
        toscale = to@.scale;
if db then {
err.str("AdjustFixed fm=");  err.uint(tree@.type@.width);
err.chr(','); err.uint(fmscale);
err.str(" to="); err.uint(to@.width);
err.chr(','); err.uint(toscale);  err.nl();
}
	if to@.width > tree@.width then
	    tree = ExtendT(tree, to);
        if toscale > fmscale then
        {   // loss of most significant bits, possible truncation
	    shf = toscale - fmscale;
//err.str(" shf="); err.uint(shf); err.nl();
	    op = ASL;
	    if !issigned then op = LSL;
	    tree = New2(op, to, tree,
		Const(type.wordtype, shf));
        }
        else
        {   // loss of least significant bits, may require rounding
	    shf = fmscale - toscale;
//err.str(" shf="); err.uint(shf); err.nl();
	    if !issigned then   // unsigned rounding
	    {   if to@.round
		is DN, TZ then {}       // truncation
		is UP, FZ then
		    tree = OpBinary(ADD, tree,
			    Const(to, (1 << (shf))-1), to);
		is NS then
		    tree = OpBinary(ADD, tree,
			    Const(to, (1 << (shf-1))-1), to);
		is NL then
		    tree = OpBinary(ADD, tree,
			    Const(to, 1 << (shf-1)), to);
		else
		    lex.ErrorS(NOTIMPL, "Fixed point rounding mode");
		op = LSR;
	    }
	    else		// signed rounding
	    {   if to@.round
		is DN then {}       // truncation
		is UP then
		    tree = OpBinary(ADD, tree,
			    Const(to, (1 << (shf))-1), to);
		is TZ then
		    tree = OpIfExpr(
			    OpCompare(SLT, tree, Const(tree@.type, 0)),
			    OpBinary(ADD, tree,
			     Const(to, (1 << (shf))-1), to),
			    tree, to);
		is FZ then
		    tree = OpIfExpr(
			    OpCompare(SLT, tree, Const(tree@.type, 0)),
			    tree,
			    OpBinary(ADD, tree,
			     Const(to, (1 << (shf))-1), to), to);
		is NS then
		    tree = OpIfExpr(
			    OpCompare(SLT, tree, Const(tree@.type, 0)),
			    OpBinary(ADD, tree,
			     Const(to, 1 << (shf-1)), to),
			    OpBinary(ADD, tree,
			     Const(to, (1 << (shf-1))-1), to), to);
		is NL then
		    tree = OpIfExpr(
			    OpCompare(SLT, tree, Const(tree@.type, 0)),
			    OpBinary(ADD, tree,
			     Const(to, (1 << (shf-1))-1), to),
			    OpBinary(ADD, tree,
			     Const(to, 1 << (shf-1)), to), to);
		else
		    lex.ErrorS(NOTIMPL, "Fixed point rounding mode");
		op = ASR;
	    }
	    tree = OpShfR(op, tree,
		    Const(type.bytetype, shf), to);
        }
	if to@.width != tree@.width then
	    tree = ExtendT(tree, to);
	return tree;
    }

    proc Adjust(tree: Ast, to: Type): Ast
    {   var fm: Type;
	var ok: boolean;

	fm = tree@.type;
	if fm == 0 then		// undefined type
	    return tree;
	ok = true;
	if to@.kind
	is REF then
	{   if to@.base != 0 then
	    {   if fm@.kind == REF && (to@.base == type.memtype || type.Compat(to, fm)) then
		{   if fm@.base != to@.base then
		    {   tree = Cast(tree, to);
			fm = tree@.type;
		    }
		}
		else
		{   tree = CoerceToRef(tree);
		    fm = tree@.type;
		    // Coerce to REF memtype is always OK
		    if to@.base == type.memtype || type.Compat(to, fm) then
		    {   if fm != to then
			{   tree = Cast(tree, to);
			    fm = tree@.type;
			}
		    }
		    else ok = false;
		}
		// Fix types when formal is a flex
		if to@.flex && !fm@.flex then
		    tree = New1(CAST, to, tree);
		// Check attributes
		if ok && !CheckRefAttributes(to, fm) then
		    lex.ErrorS(NOTIMPL, "Ref alignment or endian mismatch\n");
	    }
	}
	is REFPROC then
	{   ok = type.Compat(to, fm);
	}
	is ENUM then
	{   ok = type.Compat(fm, to);
	    if to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is UINT then
	{   ok = type.Compat(fm, to);
	    if !ok then
	    {   if fm.kind == SINT then
		{   if feature.trunc then lex.Error(TOUNSIGN);
		    ok = true;
		}
	    }
	    if tree@.fscale != 0 || to@.scale != fm@.scale then
		tree = AdjustFixed(tree, to);
	    elif to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is SINT then
	{   ok = type.Compat(fm, to);
	    if !ok && fm.kind == UINT then
	    {   if feature.trunc then lex.Error(TOSIGNED);
		ok = true;
	    }
	    if tree@.fscale != 0 || to@.scale != fm@.scale then
		tree = AdjustFixed(tree, to);
	    elif to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is FLOAT then
	{
	    if to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is RECORD, ARRAY then
	{   if fm.packed && to.packed then
	    {   ok = type.Compat(fm, to);
	        if ok && to@.width != tree@.width then
		    tree = ExtendT(tree, to);
	    }
	}
	if !ok then
{
	    lex.Error(TYPEASSIGN);
err.str("fm="); type.DumpT(fm, false);
err.str("\nto="); type.DumpT(to, false);
err.nl();
}
//	tree = CheckSwap(lhs, tree);    // FIXME - do for parms and retv?
	return tree;
    }

    proc Init()
    {
	Null = New(NULL, type.unkntype);
    }

    const OpName: [Op]@[]Char =
    {   [NULL]=  "NULL",
	[NOP]=   "NOP",
	[FILE]=  "FILE",
	[PACKAGE]="PACKAGE",
	[DCLVAR]="DCLVAR",
	[DCLCON]="DCLCON",
	[CONST]= "CONST",
	[FCON]=  "FCONST",
	[SCON]=  "STRCON",
	[FIELD]= "FIELD",
	[VAR]=   "VAR",
	[CALL]=  "CALL",
	[CALLI]= "CALLI",
	[ASM]=   "ASM",
	[CRANGE]="CRANGE",
	[CLIST]= "CLIST",
	[CAST]=  "CAST",
	[OFFSET]="OFFSET",
	[INDEX]= "INDEX",
	[SLICE]= "SLICE",
	[BYREF]= "BYREF",
	[SET]=   "SET",
	[COPY]=  "COPY",
	[MOVE]=  "MOVE",
	[AEQ]=   "AEQ",
	[ANE]=   "ANE",
	[GETRV]= "GETRV",
	[LOAD]=  "LOAD",
	[STORE]= "STORE",
	[ZEXT]=  "ZEXT",
	[SEXT]=  "SEXT",
	[TRUNC]= "TRUNC",
	[BSWAP]= "BSWAP",
	[NEG]=   "NEG",		[NOT]=   "NOT",		[ABS]=   "ABS",
	[SQRT]=  "SQRT",
	[FNEG]=  "FNEG",	[FCVTL]= "FCVTL",       [FCVTS]= "FCVTS",
	[CVTUF]= "CVTUF",	[CVTIF]= "CVTIF",
	[CVTFU]= "CVTFU",	[CVTFI]= "CVTFI",
	[CLZ]=   "CLZ",		[CLZNZ]= "CLZNZ",
	[CTZ]=   "CTZ",		[CTZNZ]= "CTZNZ",
	[POP]=   "POP",		[ZLEN]=  "ZLEN",
	[ROL]=   "ROL",		[ROR]=   "ROR",
	[ADD]=   "ADD",		[SUB]=   "SUB",
	[MUL]=   "MUL",		[DIV]=   "DIV",		[MOD]=   "MOD",
	[EQ]=    "EQ",		[NE]=    "NE",
	[ULT]=   "ULT",		[UGT]=   "UGT",
	[ULE]=   "ULE",		[UGE]=   "UGE",
	[SLT]=   "SLT",		[SGT]=   "SGT",
	[SLE]=   "SLE",		[SGE]=   "SGE",
	[FEQ]=   "FEQ",		[FNE]=   "FNE",
	[FLT]=   "FLT",		[FGT]=   "FGT",
	[FLE]=   "FLE",		[FGE]=   "FGE",
	[UMIN]=  "UMIN",	[UMAX]=  "UMAX",
	[SMIN]=  "SMIN",	[SMAX]=  "SMAX",
	[FMIN]=  "FMIN",	[FMAX]=  "FMAX",
	[LSL]=   "LSL",		[LSR]=   "LSR",
	[ASL]=   "ASL",		[ASR]=   "ASR",
	[AND]=   "AND",		[OR]=    "OR",		[XOR]=   "XOR",
	[BAND]=  "BAND",	[BOR]=   "BOR",		[BNOT]=  "BNOT",
	[FADD]=  "FADD",	[FSUB]=  "FSUB",
	[FMUL]=  "FMUL",	[FDIV]=  "FDIV",	[FREM]=  "FREM",
	[IFEXPR]="IFEXPR",
	[SEQ]=   "SEQ",
	[LOOP]=  "LOOP",
	[EXIT]=  "EXIT",
	[IF]=    "IF",
	[SEL]=   "SEL",
	[IS]=    "IS",
	[RET]=   "RET",
	[PROC]=  "PROC",	[ASSERT]="ASSERT"
    };

    proc Print(node: Ast)
    {   var s: Symb;
	var t: Type;

	t = node@.type;
	if node@.op == ASM then t = 0;	// ASM overloads to point to typelist
	err.str(OpName[node@.op]);
	err.str("(sz=");
	err.uint(node@.width);
	err.str(" ln=");
	err.uint(node@.lineno);
	err.str(" nc=");
	err.uint(node@.num);
	if node@.op
	is OFFSET, COPY, GETRV, CLZ, CTZ then
	{   err.str(" val=");
	    err.uint64(node@.valu);
	}
	is CONST then
	{   err.str(" val=");
	    if node@.type@.kind == SINT then
		err.int64(_int64(node@.valu));
	    else
		err.uint64(node@.valu);
	    if node@.fscale != 0 then
	    {   err.str(" scl=");
		err.int16(node@.fscale);
	    }
	}
	is FCON then
	{   err.str(" val=");
	    err.uint64(node@.valu);
	    err.str(" scl=");
	    err.int16(node@.fscale);
	}
	is SCON then
	{   err.str(" id ");
	    err.uint32(_uint32(node@.valu));
	    err.str(" val=\"");
	    err.strn(node@.symb@.ident, node@.type.Span()-1);
	    err.chr('"');
	}
	is DCLVAR, VAR, PROC, CALL, FILE, PACKAGE then
	{
	    err.str(" name=");
	    s = node@.symb;
	    if s != 0 then
		err.str(s@.ident);
	    else
		err.str("*NULL*");
	}
	is FIELD then
	{   err.str(" bits=");
	    err.uint64(node@.valu);
	}
	err.chr(')');
	if t != 0 then
	{   err.chr(':');
	    type.DumpT(t, false);
	}
	err.nl();
    }

    const blanks:[]_byte =
	"                                                                ";

    proc DumpSub(tree: Ast, level:_uint)
    {   var i: NSubNodes;

	sys.write(2, blanks, level);
	if tree == 0 then
	    err.str("*NULL*\n");
	else
	{   Print(tree);
	    i = 0;
	    while i < tree@.num do
	    {
		DumpSub(tree@.child[i], level+1);
		i += 1;
	    }
	}
    }

    proc Dump(tree: Ast)
    {
	DumpSub(tree, 0);
    }

}
// vim: ts=8 sw=4 noet nowrap

