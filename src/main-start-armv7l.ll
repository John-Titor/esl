target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64"
target triple = "arm-unknown-linux-gnueabihf"
%A.1 = type {i8, i8, i8, i8}
%A.2 = type {%A.1, i8, i8, [10 x i8]}
@debug = global %A.2 zeroinitializer, align 1
%A.3 = type {i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8}
@feature = global %A.3 zeroinitializer, align 1
@sys_O_RDONLY = internal constant i32 0, align 4
@sys_O_WRONLY = internal constant i32 1, align 4
@sys_O_RDWR = internal constant i32 2, align 4
@sys_O_CREAT = internal constant i32 64, align 4
@sys_O_TRUNC = internal constant i32 512, align 4
declare external [0 x i8]* @malloc(i32)
declare external void @memset([0 x i8]*, i32, i32)
define internal [0 x i8]* @sys_zalloc(i32 %nbytes$) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%nbytes = alloca i32
	store i32 %nbytes$, i32* %nbytes
	%ptr = alloca [0 x i8]*
	%0 = load i32, i32* %nbytes
	%1 = call [0 x i8]* @malloc(i32 %0)
	store [0 x i8]* %1, [0 x i8]** %ptr
	%2 = load [0 x i8]*, [0 x i8]** %ptr
	%3 = load i32, i32* %nbytes
	call void @memset([0 x i8]* %2, i32 0, i32 %3)
	%4 = load [0 x i8]*, [0 x i8]** %ptr
	store [0 x i8]* %4, [0 x i8]** %rv.0
	br label %return
return:
	%5 = load [0 x i8]*, [0 x i8]** %rv.0
	ret [0 x i8]* %5
}
declare external void @memcpy([0 x i8]*, [0 x i8]*, i32)
define internal [0 x i8]* @sys_memdup([0 x i8]* %fm$, i32 %len$) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%fm = alloca [0 x i8]*
	store [0 x i8]* %fm$, [0 x i8]** %fm
	%len = alloca i32
	store i32 %len$, i32* %len
	%ptr = alloca [0 x i8]*
	%0 = load i32, i32* %len
	%1 = call [0 x i8]* @malloc(i32 %0)
	store [0 x i8]* %1, [0 x i8]** %ptr
	%2 = load [0 x i8]*, [0 x i8]** %ptr
	%3 = load [0 x i8]*, [0 x i8]** %fm
	%4 = load i32, i32* %len
	call void @memcpy([0 x i8]* %2, [0 x i8]* %3, i32 %4)
	%5 = load [0 x i8]*, [0 x i8]** %ptr
	store [0 x i8]* %5, [0 x i8]** %rv.0
	br label %return
return:
	%6 = load [0 x i8]*, [0 x i8]** %rv.0
	ret [0 x i8]* %6
}
define internal zeroext i8 @zstr_eq([0 x i8]* %s1$, [0 x i8]* %s2$, i32 %max$) nounwind {
L.0:
	%rv.0 = alloca i8
	%s1 = alloca [0 x i8]*
	store [0 x i8]* %s1$, [0 x i8]** %s1
	%s2 = alloca [0 x i8]*
	store [0 x i8]* %s2$, [0 x i8]** %s2
	%max = alloca i32
	store i32 %max$, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %i
	%1 = load i32, i32* %max
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = load [0 x i8]*, [0 x i8]** %s1
	%4 = load i32, i32* %i
	%5 = getelementptr [0 x i8], [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8, i8* %5
	%7 = load [0 x i8]*, [0 x i8]** %s2
	%8 = load i32, i32* %i
	%9 = getelementptr [0 x i8], [0 x i8]* %7, i32 0, i32 %8
	%10 = load i8, i8* %9
	%11 = icmp eq i8 %6, %10
	br label %L.5
L.5:
	%12 = phi i1 [ false, %L.1 ], [ %11, %L.4 ]
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = load [0 x i8]*, [0 x i8]** %s1
	%15 = load i32, i32* %i
	%16 = getelementptr [0 x i8], [0 x i8]* %14, i32 0, i32 %15
	%17 = load i8, i8* %16
	%18 = icmp eq i8 %17, 0
	br i1 %18, label %L.7, label %L.6
L.7:
	store i8 1, i8* %rv.0
	br label %return
L.6:
	%19 = load i32, i32* %i
	%20 = add i32 %19, 1
	store i32 %20, i32* %i
	br label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
return:
	%21 = load i8, i8* %rv.0
	ret i8 %21
}
define internal i32 @zstr_len([0 x i8]* %s$, i32 %max$) nounwind {
L.0:
	%rv.0 = alloca i32
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%max = alloca i32
	store i32 %max$, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %i
	%1 = load i32, i32* %max
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = load [0 x i8]*, [0 x i8]** %s
	%4 = load i32, i32* %i
	%5 = getelementptr [0 x i8], [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8, i8* %5
	%7 = icmp ne i8 %6, 0
	br label %L.5
L.5:
	%8 = phi i1 [ false, %L.1 ], [ %7, %L.4 ]
	%9 = xor i1 %8, true
	br i1 %9, label %L.2, label %L.3
L.3:
	%10 = load i32, i32* %i
	%11 = add i32 %10, 1
	store i32 %11, i32* %i
	br label %L.1
L.2:
	%12 = load i32, i32* %i
	store i32 %12, i32* %rv.0
	br label %return
return:
	%13 = load i32, i32* %rv.0
	ret i32 %13
}
define internal i32 @zstr_find([0 x i8]* %s$, i8 zeroext %c$, i32 %max$) nounwind {
L.0:
	%rv.0 = alloca i32
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%c = alloca i8
	store i8 %c$, i8* %c
	%max = alloca i32
	store i32 %max$, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %i
	%1 = load i32, i32* %max
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.6, label %L.7
L.6:
	%3 = load [0 x i8]*, [0 x i8]** %s
	%4 = load i32, i32* %i
	%5 = getelementptr [0 x i8], [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8, i8* %5
	%7 = load i8, i8* %c
	%8 = icmp ne i8 %6, %7
	br label %L.7
L.7:
	%9 = phi i1 [ false, %L.1 ], [ %8, %L.6 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load [0 x i8]*, [0 x i8]** %s
	%11 = load i32, i32* %i
	%12 = getelementptr [0 x i8], [0 x i8]* %10, i32 0, i32 %11
	%13 = load i8, i8* %12
	%14 = icmp ne i8 %13, 0
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.7 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i32, i32* %i
	%18 = add i32 %17, 1
	store i32 %18, i32* %i
	br label %L.1
L.2:
	%19 = load i32, i32* %i
	store i32 %19, i32* %rv.0
	br label %return
return:
	%20 = load i32, i32* %rv.0
	ret i32 %20
}
define internal i32 @zstr_rfind([0 x i8]* %s$, i8 zeroext %c$, i32 %max$) nounwind {
L.0:
	%rv.0 = alloca i32
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%c = alloca i8
	store i8 %c$, i8* %c
	%max = alloca i32
	store i32 %max$, i32* %max
	%i = alloca i32
	%0 = load [0 x i8]*, [0 x i8]** %s
	%1 = load i32, i32* %max
	%2 = call i32 @zstr_len([0 x i8]* %0, i32 %1)
	store i32 %2, i32* %i
	br label %L.1
L.1:
	%3 = load [0 x i8]*, [0 x i8]** %s
	%4 = load i32, i32* %i
	%5 = getelementptr [0 x i8], [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8, i8* %5
	%7 = load i8, i8* %c
	%8 = icmp ne i8 %6, %7
	%9 = xor i1 %8, true
	br i1 %9, label %L.2, label %L.3
L.3:
	%10 = load i32, i32* %i
	%11 = icmp eq i32 %10, 0
	br i1 %11, label %L.5, label %L.4
L.5:
	%12 = load i32, i32* %max
	store i32 %12, i32* %i
	br label %L.2
L.4:
	%13 = load i32, i32* %i
	%14 = sub i32 %13, 1
	store i32 %14, i32* %i
	br label %L.1
L.2:
	%15 = load i32, i32* %i
	store i32 %15, i32* %rv.0
	br label %return
return:
	%16 = load i32, i32* %rv.0
	ret i32 %16
}
define internal void @zstr_copy([0 x i8]* %to$, [0 x i8]* %fm$, i32 %max$) nounwind {
L.0:
	%to = alloca [0 x i8]*
	store [0 x i8]* %to$, [0 x i8]** %to
	%fm = alloca [0 x i8]*
	store [0 x i8]* %fm$, [0 x i8]** %fm
	%max = alloca i32
	store i32 %max$, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %i
	%1 = load i32, i32* %max
	%2 = icmp ult i32 %0, %1
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load [0 x i8]*, [0 x i8]** %fm
	%5 = load i32, i32* %i
	%6 = getelementptr [0 x i8], [0 x i8]* %4, i32 0, i32 %5
	%7 = load i8, i8* %6
	%8 = load [0 x i8]*, [0 x i8]** %to
	%9 = load i32, i32* %i
	%10 = getelementptr [0 x i8], [0 x i8]* %8, i32 0, i32 %9
	store i8 %7, i8* %10
	%11 = load [0 x i8]*, [0 x i8]** %fm
	%12 = load i32, i32* %i
	%13 = getelementptr [0 x i8], [0 x i8]* %11, i32 0, i32 %12
	%14 = load i8, i8* %13
	%15 = icmp eq i8 %14, 0
	br i1 %15, label %L.2, label %L.4
L.4:
	%16 = load i32, i32* %i
	%17 = add i32 %16, 1
	store i32 %17, i32* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
define internal void @zstr_cat([0 x i8]* %to$, [0 x i8]* %fm$, i32 %max$) nounwind {
L.0:
	%to = alloca [0 x i8]*
	store [0 x i8]* %to$, [0 x i8]** %to
	%fm = alloca [0 x i8]*
	store [0 x i8]* %fm$, [0 x i8]** %fm
	%max = alloca i32
	store i32 %max$, i32* %max
	%i = alloca i32
	%j = alloca i32
	%0 = load [0 x i8]*, [0 x i8]** %to
	%1 = load i32, i32* %max
	%2 = call i32 @zstr_len([0 x i8]* %0, i32 %1)
	store i32 %2, i32* %i
	store i32 0, i32* %j
	br label %L.1
L.1:
	%3 = load i32, i32* %i
	%4 = load i32, i32* %max
	%5 = icmp ult i32 %3, %4
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load [0 x i8]*, [0 x i8]** %fm
	%8 = load i32, i32* %j
	%9 = getelementptr [0 x i8], [0 x i8]* %7, i32 0, i32 %8
	%10 = load i8, i8* %9
	%11 = load [0 x i8]*, [0 x i8]** %to
	%12 = load i32, i32* %i
	%13 = getelementptr [0 x i8], [0 x i8]* %11, i32 0, i32 %12
	store i8 %10, i8* %13
	%14 = load [0 x i8]*, [0 x i8]** %fm
	%15 = load i32, i32* %j
	%16 = getelementptr [0 x i8], [0 x i8]* %14, i32 0, i32 %15
	%17 = load i8, i8* %16
	%18 = icmp eq i8 %17, 0
	br i1 %18, label %L.2, label %L.4
L.4:
	%19 = load i32, i32* %i
	%20 = add i32 %19, 1
	store i32 %20, i32* %i
	%21 = load i32, i32* %j
	%22 = add i32 %21, 1
	store i32 %22, i32* %j
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
declare external i32 @write(i32, [0 x i8]*, i32)
@S.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
define internal void @sys_fildes_nl(i32 %o$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%0 = load i32, i32* %o
	%1 = getelementptr [2 x i8], [2 x i8]* @S.1
	%2 = bitcast [2 x i8]* %1 to [0 x i8]*
	%3 = call i32 @write(i32 %0, [0 x i8]* %2, i32 1)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_chr(i32 %o$, i8 zeroext %c$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%c = alloca i8
	store i8 %c$, i8* %c
	%buf = alloca [1 x i8]
	%0 = load i8, i8* %c
	%1 = getelementptr [1 x i8], [1 x i8]* %buf, i32 0, i32 0
	store i8 %0, i8* %1
	%2 = load i32, i32* %o
	%3 = bitcast [1 x i8]* %buf to [0 x i8]*
	%4 = call i32 @write(i32 %2, [0 x i8]* %3, i32 1)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_str(i32 %o$, [0 x i8]* %s$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%n = alloca i32
	%0 = load [0 x i8]*, [0 x i8]** %s
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i32 @zstr_len([0 x i8]* %1, i32 65535)
	store i32 %2, i32* %n
	%3 = load i32, i32* %o
	%4 = load [0 x i8]*, [0 x i8]** %s
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = load i32, i32* %n
	%7 = call i32 @write(i32 %3, [0 x i8]* %5, i32 %6)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_strn(i32 %o$, [0 x i8]* %s$, i32 %len$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%len = alloca i32
	store i32 %len$, i32* %len
	%0 = load i32, i32* %o
	%1 = load [0 x i8]*, [0 x i8]** %s
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	%3 = load i32, i32* %len
	%4 = call i32 @write(i32 %0, [0 x i8]* %2, i32 %3)
	br label %return
return:
	ret void
}
@out_hexchr = internal constant [16 x i8] [ i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70 ], align 1
define internal void @sys_fildes_hex8(i32 %o$, i8 zeroext %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i8
	store i8 %in$, i8* %in
	%buf = alloca [2 x i8]
	%0 = load i8, i8* %in
	%1 = zext i8 %0 to i32
	%2 = lshr i32 %1, 4
	%3 = and i32 %2, 15
	%4 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %3
	%5 = load i8, i8* %4
	%6 = getelementptr [2 x i8], [2 x i8]* %buf, i32 0, i32 0
	store i8 %5, i8* %6
	%7 = load i8, i8* %in
	%8 = and i8 %7, 15
	%9 = zext i8 %8 to i32
	%10 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %9
	%11 = load i8, i8* %10
	%12 = getelementptr [2 x i8], [2 x i8]* %buf, i32 0, i32 1
	store i8 %11, i8* %12
	%13 = load i32, i32* %o
	%14 = bitcast [2 x i8]* %buf to [0 x i8]*
	%15 = call i32 @write(i32 %13, [0 x i8]* %14, i32 2)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_hex16(i32 %o$, i16 zeroext %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i16
	store i16 %in$, i16* %in
	%buf = alloca [4 x i8]
	%0 = load i16, i16* %in
	%1 = zext i16 %0 to i32
	%2 = lshr i32 %1, 12
	%3 = and i32 %2, 15
	%4 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %3
	%5 = load i8, i8* %4
	%6 = getelementptr [4 x i8], [4 x i8]* %buf, i32 0, i32 0
	store i8 %5, i8* %6
	%7 = load i16, i16* %in
	%8 = zext i16 %7 to i32
	%9 = lshr i32 %8, 8
	%10 = and i32 %9, 15
	%11 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %10
	%12 = load i8, i8* %11
	%13 = getelementptr [4 x i8], [4 x i8]* %buf, i32 0, i32 1
	store i8 %12, i8* %13
	%14 = load i16, i16* %in
	%15 = zext i16 %14 to i32
	%16 = lshr i32 %15, 4
	%17 = and i32 %16, 15
	%18 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %17
	%19 = load i8, i8* %18
	%20 = getelementptr [4 x i8], [4 x i8]* %buf, i32 0, i32 2
	store i8 %19, i8* %20
	%21 = load i16, i16* %in
	%22 = and i16 %21, 15
	%23 = zext i16 %22 to i32
	%24 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %23
	%25 = load i8, i8* %24
	%26 = getelementptr [4 x i8], [4 x i8]* %buf, i32 0, i32 3
	store i8 %25, i8* %26
	%27 = load i32, i32* %o
	%28 = bitcast [4 x i8]* %buf to [0 x i8]*
	%29 = call i32 @write(i32 %27, [0 x i8]* %28, i32 4)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_hex32(i32 %o$, i32 %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i32
	store i32 %in$, i32* %in
	%buf = alloca [8 x i8]
	%i = alloca i32
	store i32 7, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %in
	%1 = and i32 %0, 15
	%2 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %1
	%3 = load i8, i8* %2
	%4 = load i32, i32* %i
	%5 = getelementptr [8 x i8], [8 x i8]* %buf, i32 0, i32 %4
	store i8 %3, i8* %5
	%6 = load i32, i32* %i
	%7 = icmp eq i32 %6, 0
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load i32, i32* %i
	%9 = sub i32 %8, 1
	store i32 %9, i32* %i
	%10 = load i32, i32* %in
	%11 = lshr i32 %10, 4
	store i32 %11, i32* %in
	br label %L.1
L.2:
	%12 = load i32, i32* %o
	%13 = bitcast [8 x i8]* %buf to [0 x i8]*
	%14 = call i32 @write(i32 %12, [0 x i8]* %13, i32 8)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_hex64(i32 %o$, i64 %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i64
	store i64 %in$, i64* %in
	%buf = alloca [16 x i8]
	%i = alloca i8
	store i8 15, i8* %i
	br label %L.1
L.1:
	%0 = load i64, i64* %in
	%1 = trunc i64 %0 to i32
	%2 = and i32 %1, 15
	%3 = getelementptr [16 x i8], [16 x i8]* @out_hexchr, i32 0, i32 %2
	%4 = load i8, i8* %3
	%5 = load i8, i8* %i
	%6 = zext i8 %5 to i32
	%7 = getelementptr [16 x i8], [16 x i8]* %buf, i32 0, i32 %6
	store i8 %4, i8* %7
	%8 = load i8, i8* %i
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %L.2, label %L.3
L.3:
	%10 = load i8, i8* %i
	%11 = sub i8 %10, 1
	store i8 %11, i8* %i
	%12 = load i64, i64* %in
	%13 = lshr i64 %12, 4
	store i64 %13, i64* %in
	br label %L.1
L.2:
	%14 = load i32, i32* %o
	%15 = bitcast [16 x i8]* %buf to [0 x i8]*
	%16 = call i32 @write(i32 %14, [0 x i8]* %15, i32 16)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_hex(i32 %o$, i32 %in$) alwaysinline nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i32
	store i32 %in$, i32* %in
	%0 = load i32, i32* %o
	%1 = load i32, i32* %in
	call void @sys_fildes_hex32(i32 %0, i32 %1)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_uint64(i32 %o$, i64 %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i64
	store i64 %in$, i64* %in
	%i = alloca i32
	%buf = alloca [20 x i8]
	store i32 20, i32* %i
	%0 = load i64, i64* %in
	%1 = icmp eq i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %i
	%3 = sub i32 %2, 1
	store i32 %3, i32* %i
	%4 = load i32, i32* %i
	%5 = getelementptr [20 x i8], [20 x i8]* %buf, i32 0, i32 %4
	store i8 48, i8* %5
	br label %L.1
L.3:
	br label %L.4
L.4:
	%6 = load i64, i64* %in
	%7 = icmp ne i64 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.5, label %L.6
L.6:
	%9 = load i32, i32* %i
	%10 = sub i32 %9, 1
	store i32 %10, i32* %i
	%11 = load i64, i64* %in
	%12 = urem i64 %11, 10
	%13 = add i64 %12, 48
	%14 = trunc i64 %13 to i8
	%15 = load i32, i32* %i
	%16 = getelementptr [20 x i8], [20 x i8]* %buf, i32 0, i32 %15
	store i8 %14, i8* %16
	%17 = load i64, i64* %in
	%18 = udiv i64 %17, 10
	store i64 %18, i64* %in
	br label %L.4
L.5:
	br label %L.1
L.1:
	%19 = load i32, i32* %o
	%20 = load i32, i32* %i
	%21 = getelementptr [20 x i8], [20 x i8]* %buf, i32 0, i32 %20
	%22 = bitcast i8* %21 to [20 x i8]*
	%23 = getelementptr [20 x i8], [20 x i8]* %22
	%24 = bitcast [20 x i8]* %23 to [0 x i8]*
	%25 = load i32, i32* %i
	%26 = sub i32 20, %25
	%27 = call i32 @write(i32 %19, [0 x i8]* %24, i32 %26)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_uint32(i32 %o$, i32 %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i32
	store i32 %in$, i32* %in
	%i = alloca i32
	%buf = alloca [10 x i8]
	store i32 10, i32* %i
	%0 = load i32, i32* %in
	%1 = icmp eq i32 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %i
	%3 = sub i32 %2, 1
	store i32 %3, i32* %i
	%4 = load i32, i32* %i
	%5 = getelementptr [10 x i8], [10 x i8]* %buf, i32 0, i32 %4
	store i8 48, i8* %5
	br label %L.1
L.3:
	br label %L.4
L.4:
	%6 = load i32, i32* %in
	%7 = icmp ne i32 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.5, label %L.6
L.6:
	%9 = load i32, i32* %i
	%10 = sub i32 %9, 1
	store i32 %10, i32* %i
	%11 = load i32, i32* %in
	%12 = urem i32 %11, 10
	%13 = add i32 %12, 48
	%14 = trunc i32 %13 to i8
	%15 = load i32, i32* %i
	%16 = getelementptr [10 x i8], [10 x i8]* %buf, i32 0, i32 %15
	store i8 %14, i8* %16
	%17 = load i32, i32* %in
	%18 = udiv i32 %17, 10
	store i32 %18, i32* %in
	br label %L.4
L.5:
	br label %L.1
L.1:
	%19 = load i32, i32* %o
	%20 = load i32, i32* %i
	%21 = getelementptr [10 x i8], [10 x i8]* %buf, i32 0, i32 %20
	%22 = bitcast i8* %21 to [10 x i8]*
	%23 = getelementptr [10 x i8], [10 x i8]* %22
	%24 = bitcast [10 x i8]* %23 to [0 x i8]*
	%25 = load i32, i32* %i
	%26 = sub i32 10, %25
	%27 = call i32 @write(i32 %19, [0 x i8]* %24, i32 %26)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_uint16(i32 %o$, i16 zeroext %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i16
	store i16 %in$, i16* %in
	%0 = load i32, i32* %o
	%1 = load i16, i16* %in
	%2 = zext i16 %1 to i32
	call void @sys_fildes_uint32(i32 %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_uint8(i32 %o$, i8 zeroext %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i8
	store i8 %in$, i8* %in
	%0 = load i32, i32* %o
	%1 = load i8, i8* %in
	%2 = zext i8 %1 to i32
	call void @sys_fildes_uint32(i32 %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_uint(i32 %o$, i32 %in$) alwaysinline nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i32
	store i32 %in$, i32* %in
	%0 = load i32, i32* %o
	%1 = load i32, i32* %in
	call void @sys_fildes_uint32(i32 %0, i32 %1)
	br label %return
return:
	ret void
}
@S.3 = private unnamed_addr constant [2 x i8] c"-\00"
define internal void @sys_fildes_int64(i32 %o$, i64 %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i64
	store i64 %in$, i64* %in
	%ui = alloca i64
	%0 = load i64, i64* %in
	%1 = icmp slt i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %o
	%3 = getelementptr [2 x i8], [2 x i8]* @S.3
	%4 = bitcast [2 x i8]* %3 to [0 x i8]*
	%5 = call i32 @write(i32 %2, [0 x i8]* %4, i32 1)
	%6 = load i64, i64* %in
	%7 = sub i64 0, %6
	store i64 %7, i64* %ui
	br label %L.1
L.3:
	%8 = load i64, i64* %in
	store i64 %8, i64* %ui
	br label %L.1
L.1:
	%9 = load i32, i32* %o
	%10 = load i64, i64* %ui
	call void @sys_fildes_uint64(i32 %9, i64 %10)
	br label %return
return:
	ret void
}
@S.4 = private unnamed_addr constant [2 x i8] c"-\00"
define internal void @sys_fildes_int32(i32 %o$, i32 %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i32
	store i32 %in$, i32* %in
	%ui = alloca i32
	%0 = load i32, i32* %in
	%1 = icmp slt i32 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %o
	%3 = getelementptr [2 x i8], [2 x i8]* @S.4
	%4 = bitcast [2 x i8]* %3 to [0 x i8]*
	%5 = call i32 @write(i32 %2, [0 x i8]* %4, i32 1)
	%6 = load i32, i32* %in
	%7 = sub i32 0, %6
	%8 = sext i32 %7 to i64
	%9 = trunc i64 %8 to i32
	store i32 %9, i32* %ui
	br label %L.1
L.3:
	%10 = load i32, i32* %in
	%11 = sext i32 %10 to i64
	%12 = trunc i64 %11 to i32
	store i32 %12, i32* %ui
	br label %L.1
L.1:
	%13 = load i32, i32* %o
	%14 = load i32, i32* %ui
	call void @sys_fildes_uint32(i32 %13, i32 %14)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_int16(i32 %o$, i16 signext %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i16
	store i16 %in$, i16* %in
	%0 = load i32, i32* %o
	%1 = load i16, i16* %in
	%2 = sext i16 %1 to i32
	call void @sys_fildes_int32(i32 %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_int8(i32 %o$, i8 signext %in$) nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i8
	store i8 %in$, i8* %in
	%0 = load i32, i32* %o
	%1 = load i8, i8* %in
	%2 = sext i8 %1 to i32
	call void @sys_fildes_int32(i32 %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @sys_fildes_int(i32 %o$, i32 %in$) alwaysinline nounwind {
L.0:
	%o = alloca i32
	store i32 %o$, i32* %o
	%in = alloca i32
	store i32 %in$, i32* %in
	%0 = load i32, i32* %o
	%1 = load i32, i32* %in
	call void @sys_fildes_int32(i32 %0, i32 %1)
	br label %return
return:
	ret void
}
@err = constant i32 2, align 4
@msg = constant i32 1, align 4
@lex_FirstError = internal constant i8 10, align 1
@S.6 = private unnamed_addr constant [30 x i8] c"Feature not yet implemented: \00"
@S.7 = private unnamed_addr constant [26 x i8] c"Feature is experimental: \00"
@S.8 = private unnamed_addr constant [31 x i8] c"Attribute not valid for type: \00"
@S.9 = private unnamed_addr constant [45 x i8] c"Depricated syntax for multiple return values\00"
@S.10 = private unnamed_addr constant [34 x i8] c"Truncation may cause loss of data\00"
@S.11 = private unnamed_addr constant [38 x i8] c"Converting unsigned to signed integer\00"
@S.12 = private unnamed_addr constant [38 x i8] c"Converting signed to unsigned integer\00"
@S.13 = private unnamed_addr constant [42 x i8] c"Pointer converted from wrong size integer\00"
@S.14 = private unnamed_addr constant [33 x i8] c"Use of identifier is ambiguous: \00"
@S.15 = private unnamed_addr constant [49 x i8] c"Size of zero assumed for flex size specification\00"
@S.16 = private unnamed_addr constant [44 x i8] c"End of line in string or character constant\00"
@S.17 = private unnamed_addr constant [28 x i8] c"Illegal character in source\00"
@S.18 = private unnamed_addr constant [30 x i8] c"Illegal byte in UTF8 sequence\00"
@S.19 = private unnamed_addr constant [23 x i8] c"End of file in comment\00"
@S.20 = private unnamed_addr constant [23 x i8] c"Unexpected end of file\00"
@S.21 = private unnamed_addr constant [29 x i8] c"Malformed character constant\00"
@S.22 = private unnamed_addr constant [53 x i8] c"Malformed hex escape in string or character constant\00"
@S.23 = private unnamed_addr constant [25 x i8] c"Malformed unicode escape\00"
@S.24 = private unnamed_addr constant [20 x i8] c"Identifier too long\00"
@S.25 = private unnamed_addr constant [16 x i8] c"String too long\00"
@S.26 = private unnamed_addr constant [11 x i8] c"Expected: \00"
@S.27 = private unnamed_addr constant [20 x i8] c"Expected identifier\00"
@S.28 = private unnamed_addr constant [23 x i8] c"Undefined identifier: \00"
@S.29 = private unnamed_addr constant [28 x i8] c"Identifier already in use: \00"
@S.30 = private unnamed_addr constant [18 x i8] c"Undefined field: \00"
@S.31 = private unnamed_addr constant [24 x i8] c"Unexpected identifier: \00"
@S.32 = private unnamed_addr constant [35 x i8] c"Cannot dereference incomplete type\00"
@S.33 = private unnamed_addr constant [28 x i8] c"Illegal index specification\00"
@S.34 = private unnamed_addr constant [25 x i8] c"Identifier has no type: \00"
@S.35 = private unnamed_addr constant [25 x i8] c"Expected type identifier\00"
@S.36 = private unnamed_addr constant [25 x i8] c"Error in type definition\00"
@S.37 = private unnamed_addr constant [26 x i8] c"Enumeration type required\00"
@S.38 = private unnamed_addr constant [33 x i8] c"Illegal use of type identifier: \00"
@S.39 = private unnamed_addr constant [36 x i8] c"Type not suppported for operation: \00"
@S.40 = private unnamed_addr constant [25 x i8] c"Error in type definition\00"
@S.41 = private unnamed_addr constant [20 x i8] c"Unknown attribute: \00"
@S.42 = private unnamed_addr constant [45 x i8] c"Statement begins with undefined identifier: \00"
@S.43 = private unnamed_addr constant [49 x i8] c"Statement begins with inappropriate identifier: \00"
@S.44 = private unnamed_addr constant [44 x i8] c"Statement begins with inappropriate token: \00"
@S.45 = private unnamed_addr constant [37 x i8] c"Illegal comparison, bad type perhaps\00"
@S.46 = private unnamed_addr constant [46 x i8] c"Syntax error in possible assignment statement\00"
@S.47 = private unnamed_addr constant [19 x i8] c"Illegal assignment\00"
@S.48 = private unnamed_addr constant [26 x i8] c"Illegal lhs in assignment\00"
@S.49 = private unnamed_addr constant [26 x i8] c"Illegal rhs in assignment\00"
@S.50 = private unnamed_addr constant [28 x i8] c"Type mismatch in assignment\00"
@S.51 = private unnamed_addr constant [36 x i8] c"Not enough rhs values in assignment\00"
@S.52 = private unnamed_addr constant [34 x i8] c"Too many rhs values in assignment\00"
@S.53 = private unnamed_addr constant [38 x i8] c"Call of undefined forward procedure: \00"
@S.54 = private unnamed_addr constant [51 x i8] c"Parameter types changed from forward declaration: \00"
@S.55 = private unnamed_addr constant [54 x i8] c"Return value types changed from forward declaration: \00"
@S.56 = private unnamed_addr constant [28 x i8] c"Boolean expression required\00"
@S.57 = private unnamed_addr constant [32 x i8] c"Method base type must have name\00"
@S.58 = private unnamed_addr constant [37 x i8] c"Unsigned integer expression required\00"
@S.59 = private unnamed_addr constant [13 x i8] c"Illegal cast\00"
@S.60 = private unnamed_addr constant [33 x i8] c"Missing type for composite value\00"
@S.61 = private unnamed_addr constant [33 x i8] c"Illegal type for composite value\00"
@S.62 = private unnamed_addr constant [41 x i8] c"Missing or undefined property identifier\00"
@S.63 = private unnamed_addr constant [25 x i8] c"Expecting \22then\22 or \22is\22\00"
@S.64 = private unnamed_addr constant [21 x i8] c"Error in \22is\22 clause\00"
@S.65 = private unnamed_addr constant [34 x i8] c"Return statement not in procedure\00"
@S.66 = private unnamed_addr constant [29 x i8] c"Exit statement not in a loop\00"
@S.67 = private unnamed_addr constant [29 x i8] c"Unknown statement in package\00"
@S.68 = private unnamed_addr constant [14 x i8] c"Not a pointer\00"
@S.69 = private unnamed_addr constant [13 x i8] c"Not an array\00"
@S.70 = private unnamed_addr constant [33 x i8] c"Array copy with undefined length\00"
@S.71 = private unnamed_addr constant [20 x i8] c"Illegal array index\00"
@S.72 = private unnamed_addr constant [13 x i8] c"Not a record\00"
@S.73 = private unnamed_addr constant [35 x i8] c"Syntax error in record declaration\00"
@S.74 = private unnamed_addr constant [27 x i8] c"Base type must be a record\00"
@S.75 = private unnamed_addr constant [33 x i8] c"Base type must be an enumeration\00"
@S.76 = private unnamed_addr constant [41 x i8] c"Insufficient arguments to procedure call\00"
@S.77 = private unnamed_addr constant [37 x i8] c"Too many arguments to procedure call\00"
@S.78 = private unnamed_addr constant [49 x i8] c"Actual parameter type not compatible with formal\00"
@S.79 = private unnamed_addr constant [22 x i8] c"Too many initializers\00"
@S.80 = private unnamed_addr constant [32 x i8] c"Const requires a constant value\00"
@S.81 = private unnamed_addr constant [43 x i8] c"Expression must be a compile-time constant\00"
@S.82 = private unnamed_addr constant [22 x i8] c"Unable to open file: \00"
@S.83 = private unnamed_addr constant [29 x i8] c"Expected variable identifier\00"
@S.84 = private unnamed_addr constant [35 x i8] c"Flexible array must be final field\00"
@S.85 = private unnamed_addr constant [28 x i8] c"Unresolved forward symbol: \00"
@S.86 = private unnamed_addr constant [30 x i8] c"Syntax error in for statement\00"
@S.87 = private unnamed_addr constant [22 x i8] c"Expected section name\00"
@S.88 = private unnamed_addr constant [24 x i8] c"Packed record too large\00"
@S.89 = private unnamed_addr constant [23 x i8] c"Packed array too large\00"
@S.90 = private unnamed_addr constant [44 x i8] c"Can not specify size for fixed sized object\00"
@S.91 = private unnamed_addr constant [44 x i8] c"Must specify size for variable sized object\00"
@S.92 = private unnamed_addr constant [47 x i8] c"Specified size smaller that actual object size\00"
@S.93 = private unnamed_addr constant [31 x i8] c"Illegal field offset specified\00"
@S.94 = private unnamed_addr constant [22 x i8] c"Too few return values\00"
@S.95 = private unnamed_addr constant [23 x i8] c"Too many return values\00"
@S.96 = private unnamed_addr constant [43 x i8] c"Not an array or array with flexible length\00"
@S.97 = private unnamed_addr constant [19 x i8] c"Array bounds error\00"
@S.98 = private unnamed_addr constant [53 x i8] c"Arg for _packXX/_unpkXX must be array/slice of bytes\00"
@S.99 = private unnamed_addr constant [47 x i8] c"Array for _packXX/_unpkXX must have fixed size\00"
@S.100 = private unnamed_addr constant [54 x i8] c"Array for _packXX/_unpkXX to large for target machine\00"
@S.101 = private unnamed_addr constant [40 x i8] c"Scalar for _packXX must be unsigned int\00"
@S.102 = private unnamed_addr constant [26 x i8] c"Too many digits in number\00"
@S.103 = private unnamed_addr constant [35 x i8] c"Too many digits in fractional part\00"
@S.104 = private unnamed_addr constant [24 x i8] c"Program defined error: \00"
@S.105 = private unnamed_addr constant [26 x i8] c"Internal compiler error: \00"
@lex_ErrMsg = internal constant [100 x [0 x i8]*] [ [0 x i8]* bitcast( [30 x i8]* getelementptr( [30 x i8], [30 x i8]* @S.6 )  to [0 x i8]* ), [0 x i8]* bitcast( [26 x i8]* getelementptr( [26 x i8], [26 x i8]* @S.7 )  to [0 x i8]* ), [0 x i8]* bitcast( [31 x i8]* getelementptr( [31 x i8], [31 x i8]* @S.8 )  to [0 x i8]* ), [0 x i8]* bitcast( [45 x i8]* getelementptr( [45 x i8], [45 x i8]* @S.9 )  to [0 x i8]* ), [0 x i8]* bitcast( [34 x i8]* getelementptr( [34 x i8], [34 x i8]* @S.10 )  to [0 x i8]* ), [0 x i8]* bitcast( [38 x i8]* getelementptr( [38 x i8], [38 x i8]* @S.11 )  to [0 x i8]* ), [0 x i8]* bitcast( [38 x i8]* getelementptr( [38 x i8], [38 x i8]* @S.12 )  to [0 x i8]* ), [0 x i8]* bitcast( [42 x i8]* getelementptr( [42 x i8], [42 x i8]* @S.13 )  to [0 x i8]* ), [0 x i8]* bitcast( [33 x i8]* getelementptr( [33 x i8], [33 x i8]* @S.14 )  to [0 x i8]* ), [0 x i8]* bitcast( [49 x i8]* getelementptr( [49 x i8], [49 x i8]* @S.15 )  to [0 x i8]* ), [0 x i8]* bitcast( [44 x i8]* getelementptr( [44 x i8], [44 x i8]* @S.16 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.17 )  to [0 x i8]* ), [0 x i8]* bitcast( [30 x i8]* getelementptr( [30 x i8], [30 x i8]* @S.18 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.19 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.20 )  to [0 x i8]* ), [0 x i8]* bitcast( [29 x i8]* getelementptr( [29 x i8], [29 x i8]* @S.21 )  to [0 x i8]* ), [0 x i8]* bitcast( [53 x i8]* getelementptr( [53 x i8], [53 x i8]* @S.22 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.23 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.24 )  to [0 x i8]* ), [0 x i8]* bitcast( [16 x i8]* getelementptr( [16 x i8], [16 x i8]* @S.25 )  to [0 x i8]* ), [0 x i8]* bitcast( [11 x i8]* getelementptr( [11 x i8], [11 x i8]* @S.26 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.27 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.28 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.29 )  to [0 x i8]* ), [0 x i8]* bitcast( [18 x i8]* getelementptr( [18 x i8], [18 x i8]* @S.30 )  to [0 x i8]* ), [0 x i8]* bitcast( [24 x i8]* getelementptr( [24 x i8], [24 x i8]* @S.31 )  to [0 x i8]* ), [0 x i8]* bitcast( [35 x i8]* getelementptr( [35 x i8], [35 x i8]* @S.32 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.33 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.34 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.35 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.36 )  to [0 x i8]* ), [0 x i8]* bitcast( [26 x i8]* getelementptr( [26 x i8], [26 x i8]* @S.37 )  to [0 x i8]* ), [0 x i8]* bitcast( [33 x i8]* getelementptr( [33 x i8], [33 x i8]* @S.38 )  to [0 x i8]* ), [0 x i8]* bitcast( [36 x i8]* getelementptr( [36 x i8], [36 x i8]* @S.39 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.40 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.41 )  to [0 x i8]* ), [0 x i8]* bitcast( [45 x i8]* getelementptr( [45 x i8], [45 x i8]* @S.42 )  to [0 x i8]* ), [0 x i8]* bitcast( [49 x i8]* getelementptr( [49 x i8], [49 x i8]* @S.43 )  to [0 x i8]* ), [0 x i8]* bitcast( [44 x i8]* getelementptr( [44 x i8], [44 x i8]* @S.44 )  to [0 x i8]* ), [0 x i8]* bitcast( [37 x i8]* getelementptr( [37 x i8], [37 x i8]* @S.45 )  to [0 x i8]* ), [0 x i8]* bitcast( [46 x i8]* getelementptr( [46 x i8], [46 x i8]* @S.46 )  to [0 x i8]* ), [0 x i8]* bitcast( [19 x i8]* getelementptr( [19 x i8], [19 x i8]* @S.47 )  to [0 x i8]* ), [0 x i8]* bitcast( [26 x i8]* getelementptr( [26 x i8], [26 x i8]* @S.48 )  to [0 x i8]* ), [0 x i8]* bitcast( [26 x i8]* getelementptr( [26 x i8], [26 x i8]* @S.49 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.50 )  to [0 x i8]* ), [0 x i8]* bitcast( [36 x i8]* getelementptr( [36 x i8], [36 x i8]* @S.51 )  to [0 x i8]* ), [0 x i8]* bitcast( [34 x i8]* getelementptr( [34 x i8], [34 x i8]* @S.52 )  to [0 x i8]* ), [0 x i8]* bitcast( [38 x i8]* getelementptr( [38 x i8], [38 x i8]* @S.53 )  to [0 x i8]* ), [0 x i8]* bitcast( [51 x i8]* getelementptr( [51 x i8], [51 x i8]* @S.54 )  to [0 x i8]* ), [0 x i8]* bitcast( [54 x i8]* getelementptr( [54 x i8], [54 x i8]* @S.55 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.56 )  to [0 x i8]* ), [0 x i8]* bitcast( [32 x i8]* getelementptr( [32 x i8], [32 x i8]* @S.57 )  to [0 x i8]* ), [0 x i8]* bitcast( [37 x i8]* getelementptr( [37 x i8], [37 x i8]* @S.58 )  to [0 x i8]* ), [0 x i8]* bitcast( [13 x i8]* getelementptr( [13 x i8], [13 x i8]* @S.59 )  to [0 x i8]* ), [0 x i8]* bitcast( [33 x i8]* getelementptr( [33 x i8], [33 x i8]* @S.60 )  to [0 x i8]* ), [0 x i8]* bitcast( [33 x i8]* getelementptr( [33 x i8], [33 x i8]* @S.61 )  to [0 x i8]* ), [0 x i8]* bitcast( [41 x i8]* getelementptr( [41 x i8], [41 x i8]* @S.62 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.63 )  to [0 x i8]* ), [0 x i8]* bitcast( [21 x i8]* getelementptr( [21 x i8], [21 x i8]* @S.64 )  to [0 x i8]* ), [0 x i8]* bitcast( [34 x i8]* getelementptr( [34 x i8], [34 x i8]* @S.65 )  to [0 x i8]* ), [0 x i8]* bitcast( [29 x i8]* getelementptr( [29 x i8], [29 x i8]* @S.66 )  to [0 x i8]* ), [0 x i8]* bitcast( [29 x i8]* getelementptr( [29 x i8], [29 x i8]* @S.67 )  to [0 x i8]* ), [0 x i8]* bitcast( [14 x i8]* getelementptr( [14 x i8], [14 x i8]* @S.68 )  to [0 x i8]* ), [0 x i8]* bitcast( [13 x i8]* getelementptr( [13 x i8], [13 x i8]* @S.69 )  to [0 x i8]* ), [0 x i8]* bitcast( [33 x i8]* getelementptr( [33 x i8], [33 x i8]* @S.70 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.71 )  to [0 x i8]* ), [0 x i8]* bitcast( [13 x i8]* getelementptr( [13 x i8], [13 x i8]* @S.72 )  to [0 x i8]* ), [0 x i8]* bitcast( [35 x i8]* getelementptr( [35 x i8], [35 x i8]* @S.73 )  to [0 x i8]* ), [0 x i8]* bitcast( [27 x i8]* getelementptr( [27 x i8], [27 x i8]* @S.74 )  to [0 x i8]* ), [0 x i8]* bitcast( [33 x i8]* getelementptr( [33 x i8], [33 x i8]* @S.75 )  to [0 x i8]* ), [0 x i8]* bitcast( [41 x i8]* getelementptr( [41 x i8], [41 x i8]* @S.76 )  to [0 x i8]* ), [0 x i8]* bitcast( [37 x i8]* getelementptr( [37 x i8], [37 x i8]* @S.77 )  to [0 x i8]* ), [0 x i8]* bitcast( [49 x i8]* getelementptr( [49 x i8], [49 x i8]* @S.78 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.79 )  to [0 x i8]* ), [0 x i8]* bitcast( [32 x i8]* getelementptr( [32 x i8], [32 x i8]* @S.80 )  to [0 x i8]* ), [0 x i8]* bitcast( [43 x i8]* getelementptr( [43 x i8], [43 x i8]* @S.81 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.82 )  to [0 x i8]* ), [0 x i8]* bitcast( [29 x i8]* getelementptr( [29 x i8], [29 x i8]* @S.83 )  to [0 x i8]* ), [0 x i8]* bitcast( [35 x i8]* getelementptr( [35 x i8], [35 x i8]* @S.84 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.85 )  to [0 x i8]* ), [0 x i8]* bitcast( [30 x i8]* getelementptr( [30 x i8], [30 x i8]* @S.86 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.87 )  to [0 x i8]* ), [0 x i8]* bitcast( [24 x i8]* getelementptr( [24 x i8], [24 x i8]* @S.88 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.89 )  to [0 x i8]* ), [0 x i8]* bitcast( [44 x i8]* getelementptr( [44 x i8], [44 x i8]* @S.90 )  to [0 x i8]* ), [0 x i8]* bitcast( [44 x i8]* getelementptr( [44 x i8], [44 x i8]* @S.91 )  to [0 x i8]* ), [0 x i8]* bitcast( [47 x i8]* getelementptr( [47 x i8], [47 x i8]* @S.92 )  to [0 x i8]* ), [0 x i8]* bitcast( [31 x i8]* getelementptr( [31 x i8], [31 x i8]* @S.93 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.94 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.95 )  to [0 x i8]* ), [0 x i8]* bitcast( [43 x i8]* getelementptr( [43 x i8], [43 x i8]* @S.96 )  to [0 x i8]* ), [0 x i8]* bitcast( [19 x i8]* getelementptr( [19 x i8], [19 x i8]* @S.97 )  to [0 x i8]* ), [0 x i8]* bitcast( [53 x i8]* getelementptr( [53 x i8], [53 x i8]* @S.98 )  to [0 x i8]* ), [0 x i8]* bitcast( [47 x i8]* getelementptr( [47 x i8], [47 x i8]* @S.99 )  to [0 x i8]* ), [0 x i8]* bitcast( [54 x i8]* getelementptr( [54 x i8], [54 x i8]* @S.100 )  to [0 x i8]* ), [0 x i8]* bitcast( [40 x i8]* getelementptr( [40 x i8], [40 x i8]* @S.101 )  to [0 x i8]* ), [0 x i8]* bitcast( [26 x i8]* getelementptr( [26 x i8], [26 x i8]* @S.102 )  to [0 x i8]* ), [0 x i8]* bitcast( [35 x i8]* getelementptr( [35 x i8], [35 x i8]* @S.103 )  to [0 x i8]* ), [0 x i8]* bitcast( [24 x i8]* getelementptr( [24 x i8], [24 x i8]* @S.104 )  to [0 x i8]* ), [0 x i8]* bitcast( [26 x i8]* getelementptr( [26 x i8], [26 x i8]* @S.105 )  to [0 x i8]* ) ], align 4
@S.107 = private unnamed_addr constant [1 x i8] c"\00"
@S.108 = private unnamed_addr constant [10 x i8] c"ENDOFFILE\00"
@S.109 = private unnamed_addr constant [2 x i8] c".\00"
@S.110 = private unnamed_addr constant [2 x i8] c":\00"
@S.111 = private unnamed_addr constant [2 x i8] c";\00"
@S.112 = private unnamed_addr constant [2 x i8] c",\00"
@S.113 = private unnamed_addr constant [3 x i8] c"..\00"
@S.114 = private unnamed_addr constant [2 x i8] c"@\00"
@S.115 = private unnamed_addr constant [2 x i8] c"?\00"
@S.116 = private unnamed_addr constant [2 x i8] c"=\00"
@S.117 = private unnamed_addr constant [3 x i8] c"=/\00"
@S.118 = private unnamed_addr constant [3 x i8] c"+=\00"
@S.119 = private unnamed_addr constant [3 x i8] c"-=\00"
@S.120 = private unnamed_addr constant [3 x i8] c"|=\00"
@S.121 = private unnamed_addr constant [3 x i8] c"^=\00"
@S.122 = private unnamed_addr constant [3 x i8] c"&=\00"
@S.123 = private unnamed_addr constant [2 x i8] c"!\00"
@S.124 = private unnamed_addr constant [2 x i8] c"~\00"
@S.125 = private unnamed_addr constant [2 x i8] c"+\00"
@S.126 = private unnamed_addr constant [2 x i8] c"-\00"
@S.127 = private unnamed_addr constant [2 x i8] c"|\00"
@S.128 = private unnamed_addr constant [2 x i8] c"^\00"
@S.129 = private unnamed_addr constant [2 x i8] c"*\00"
@S.130 = private unnamed_addr constant [2 x i8] c"/\00"
@S.131 = private unnamed_addr constant [2 x i8] c"%\00"
@S.132 = private unnamed_addr constant [3 x i8] c"<<\00"
@S.133 = private unnamed_addr constant [3 x i8] c">>\00"
@S.134 = private unnamed_addr constant [2 x i8] c"&\00"
@S.135 = private unnamed_addr constant [3 x i8] c"==\00"
@S.136 = private unnamed_addr constant [3 x i8] c"!=\00"
@S.137 = private unnamed_addr constant [2 x i8] c"<\00"
@S.138 = private unnamed_addr constant [2 x i8] c">\00"
@S.139 = private unnamed_addr constant [3 x i8] c"<=\00"
@S.140 = private unnamed_addr constant [3 x i8] c">=\00"
@S.141 = private unnamed_addr constant [3 x i8] c"&&\00"
@S.142 = private unnamed_addr constant [3 x i8] c"||\00"
@S.143 = private unnamed_addr constant [2 x i8] c"(\00"
@S.144 = private unnamed_addr constant [2 x i8] c")\00"
@S.145 = private unnamed_addr constant [2 x i8] c"[\00"
@S.146 = private unnamed_addr constant [2 x i8] c"]\00"
@S.147 = private unnamed_addr constant [2 x i8] c"{\00"
@S.148 = private unnamed_addr constant [2 x i8] c"}\00"
@S.149 = private unnamed_addr constant [7 x i8] c"NUMBER\00"
@S.150 = private unnamed_addr constant [5 x i8] c"FNUM\00"
@S.151 = private unnamed_addr constant [5 x i8] c"ENUM\00"
@S.152 = private unnamed_addr constant [7 x i8] c"STRING\00"
@S.153 = private unnamed_addr constant [6 x i8] c"IDENT\00"
@S.154 = private unnamed_addr constant [5 x i8] c"type\00"
@S.155 = private unnamed_addr constant [4 x i8] c"var\00"
@S.156 = private unnamed_addr constant [6 x i8] c"const\00"
@S.157 = private unnamed_addr constant [7 x i8] c"import\00"
@S.158 = private unnamed_addr constant [6 x i8] c"alias\00"
@S.159 = private unnamed_addr constant [6 x i8] c"error\00"
@S.160 = private unnamed_addr constant [5 x i8] c"proc\00"
@S.161 = private unnamed_addr constant [8 x i8] c"package\00"
@S.162 = private unnamed_addr constant [4 x i8] c"asm\00"
@S.163 = private unnamed_addr constant [7 x i8] c"assert\00"
@S.164 = private unnamed_addr constant [5 x i8] c"call\00"
@S.165 = private unnamed_addr constant [7 x i8] c"return\00"
@S.166 = private unnamed_addr constant [3 x i8] c"if\00"
@S.167 = private unnamed_addr constant [6 x i8] c"while\00"
@S.168 = private unnamed_addr constant [4 x i8] c"for\00"
@S.169 = private unnamed_addr constant [5 x i8] c"loop\00"
@S.170 = private unnamed_addr constant [5 x i8] c"exit\00"
@S.171 = private unnamed_addr constant [5 x i8] c"then\00"
@S.172 = private unnamed_addr constant [5 x i8] c"elif\00"
@S.173 = private unnamed_addr constant [5 x i8] c"else\00"
@S.174 = private unnamed_addr constant [3 x i8] c"is\00"
@S.175 = private unnamed_addr constant [3 x i8] c"do\00"
@S.176 = private unnamed_addr constant [5 x i8] c"with\00"
@S.177 = private unnamed_addr constant [3 x i8] c"as\00"
@S.178 = private unnamed_addr constant [3 x i8] c"in\00"
@S.179 = private unnamed_addr constant [5 x i8] c"from\00"
@S.180 = private unnamed_addr constant [3 x i8] c"to\00"
@S.181 = private unnamed_addr constant [3 x i8] c"by\00"
@S.182 = private unnamed_addr constant [7 x i8] c"packed\00"
@S.183 = private unnamed_addr constant [6 x i8] c"nopad\00"
@S.184 = private unnamed_addr constant [4 x i8] c"lsb\00"
@S.185 = private unnamed_addr constant [4 x i8] c"msb\00"
@S.186 = private unnamed_addr constant [3 x i8] c"le\00"
@S.187 = private unnamed_addr constant [3 x i8] c"be\00"
@S.188 = private unnamed_addr constant [3 x i8] c"ro\00"
@S.189 = private unnamed_addr constant [3 x i8] c"wo\00"
@S.190 = private unnamed_addr constant [3 x i8] c"in\00"
@S.191 = private unnamed_addr constant [4 x i8] c"out\00"
@S.192 = private unnamed_addr constant [3 x i8] c"io\00"
@S.193 = private unnamed_addr constant [3 x i8] c"at\00"
@S.194 = private unnamed_addr constant [9 x i8] c"external\00"
@S.195 = private unnamed_addr constant [7 x i8] c"global\00"
@S.196 = private unnamed_addr constant [8 x i8] c"section\00"
@S.197 = private unnamed_addr constant [6 x i8] c"align\00"
@S.198 = private unnamed_addr constant [7 x i8] c"inline\00"
@S.199 = private unnamed_addr constant [9 x i8] c"noinline\00"
@S.200 = private unnamed_addr constant [10 x i8] c"interrupt\00"
@S.201 = private unnamed_addr constant [5 x i8] c"weak\00"
@S.202 = private unnamed_addr constant [4 x i8] c"min\00"
@S.203 = private unnamed_addr constant [4 x i8] c"max\00"
@S.204 = private unnamed_addr constant [5 x i8] c"bits\00"
@S.205 = private unnamed_addr constant [6 x i8] c"fbits\00"
@S.206 = private unnamed_addr constant [5 x i8] c"size\00"
@S.207 = private unnamed_addr constant [4 x i8] c"len\00"
@lex_keywords = internal constant [101 x [0 x i8]*] [ [0 x i8]* bitcast( [1 x i8]* getelementptr( [1 x i8], [1 x i8]* @S.107 )  to [0 x i8]* ), [0 x i8]* bitcast( [10 x i8]* getelementptr( [10 x i8], [10 x i8]* @S.108 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.109 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.110 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.111 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.112 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.113 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.114 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.115 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.116 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.117 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.118 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.119 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.120 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.121 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.122 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.123 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.124 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.125 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.126 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.127 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.128 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.129 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.130 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.131 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.132 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.133 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.134 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.135 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.136 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.137 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.138 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.139 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.140 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.141 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.142 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.143 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.144 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.145 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.146 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.147 )  to [0 x i8]* ), [0 x i8]* bitcast( [2 x i8]* getelementptr( [2 x i8], [2 x i8]* @S.148 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.149 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.150 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.151 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.152 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.153 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.154 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.155 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.156 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.157 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.158 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.159 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.160 )  to [0 x i8]* ), [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.161 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.162 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.163 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.164 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.165 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.166 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.167 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.168 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.169 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.170 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.171 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.172 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.173 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.174 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.175 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.176 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.177 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.178 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.179 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.180 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.181 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.182 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.183 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.184 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.185 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.186 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.187 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.188 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.189 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.190 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.191 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.192 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.193 )  to [0 x i8]* ), [0 x i8]* bitcast( [9 x i8]* getelementptr( [9 x i8], [9 x i8]* @S.194 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.195 )  to [0 x i8]* ), [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.196 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.197 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.198 )  to [0 x i8]* ), [0 x i8]* bitcast( [9 x i8]* getelementptr( [9 x i8], [9 x i8]* @S.199 )  to [0 x i8]* ), [0 x i8]* bitcast( [10 x i8]* getelementptr( [10 x i8], [10 x i8]* @S.200 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.201 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.202 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.203 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.204 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.205 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.206 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.207 )  to [0 x i8]* ) ], align 4
@lex_StringMax = internal constant i32 4095, align 4
@lex_IdentMax = internal constant i32 255, align 4
@lex_BufSize = internal constant i32 4096, align 4
@lex_PathMax = internal constant i32 1024, align 4
@lex_NameMax = internal constant i32 256, align 4
@lex_LinesMax = internal constant i32 65535, align 4
@lex_ErrorMax = internal constant i32 10, align 4
%lex_FileContext = type {%lex_FileContext*, [0 x i8]*, [0 x i8]*, i32, i16, i16, i16, [4096 x i8]}
@lex_f = internal global %lex_FileContext* zeroinitializer, align 4
@lex_ErrorCount = internal global i8 0, align 1
@lex_Token = internal global i8 0, align 1
@lex_Ident = internal global [256 x i8] zeroinitializer, align 1
@lex_Number = internal global i64 0, align 8
@lex_Scale = internal global i16 0, align 2
@lex_StringLen = internal global i16 0, align 2
@lex_StringNul = internal global i8 0, align 1
@lex_StringBuf = internal global [4096 x i8] zeroinitializer, align 1
@lex_saves = internal global i8 0, align 1
define internal zeroext i16 @lex_Lineno() nounwind {
L.0:
	%rv.0 = alloca i16
	%0 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%1 = icmp eq %lex_FileContext* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	store i16 0, i16* %rv.0
	br label %return
L.1:
	%2 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%3 = getelementptr %lex_FileContext, %lex_FileContext* %2, i32 0, i32 4
	%4 = load i16, i16* %3
	store i16 %4, i16* %rv.0
	br label %return
return:
	%5 = load i16, i16* %rv.0
	ret i16 %5
}
@S.208 = private unnamed_addr constant [3 x i8] c": \00"
@S.209 = private unnamed_addr constant [28 x i8] c"\0AToo many errors, quiting.\0A\00"
declare external void @exit(i32)
@S.210 = private unnamed_addr constant [8 x i8] c"Error: \00"
@S.211 = private unnamed_addr constant [10 x i8] c"Warning: \00"
define internal void @lex_ErrorSub(i8 zeroext %error$) nounwind {
L.0:
	%error = alloca i8
	store i8 %error$, i8* %error
	%0 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%1 = getelementptr %lex_FileContext, %lex_FileContext* %0, i32 0, i32 1
	%2 = load [0 x i8]*, [0 x i8]** %1
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%5 = getelementptr %lex_FileContext, %lex_FileContext* %4, i32 0, i32 1
	%6 = load [0 x i8]*, [0 x i8]** %5
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %7)
	call void @sys_fildes_chr(i32 2, i8 47)
	br label %L.1
L.1:
	%8 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%9 = getelementptr %lex_FileContext, %lex_FileContext* %8, i32 0, i32 2
	%10 = load [0 x i8]*, [0 x i8]** %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %11)
	call void @sys_fildes_chr(i32 2, i8 58)
	%12 = call i16 @lex_Lineno()
	%13 = zext i16 %12 to i32
	call void @sys_fildes_uint(i32 2, i32 %13)
	%14 = getelementptr [3 x i8], [3 x i8]* @S.208
	%15 = bitcast [3 x i8]* %14 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %15)
	%16 = load i8, i8* %error
	%17 = icmp uge i8 %16, 10
	br i1 %17, label %L.4, label %L.5
L.4:
	%18 = load i8, i8* @lex_ErrorCount
	%19 = add i8 %18, 1
	store i8 %19, i8* @lex_ErrorCount
	%20 = load i8, i8* @lex_ErrorCount
	%21 = icmp uge i8 %20, 10
	br i1 %21, label %L.7, label %L.6
L.7:
	%22 = getelementptr [28 x i8], [28 x i8]* @S.209
	%23 = bitcast [28 x i8]* %22 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %23)
	call void @exit(i32 1)
	br label %L.6
L.6:
	%24 = getelementptr [8 x i8], [8 x i8]* @S.210
	%25 = bitcast [8 x i8]* %24 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %25)
	br label %L.3
L.5:
	%26 = getelementptr [10 x i8], [10 x i8]* @S.211
	%27 = bitcast [10 x i8]* %26 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %27)
	br label %L.3
L.3:
	%28 = load i8, i8* %error
	%29 = zext i8 %28 to i32
	%30 = getelementptr [100 x [0 x i8]*], [100 x [0 x i8]*]* @lex_ErrMsg, i32 0, i32 %29
	%31 = load [0 x i8]*, [0 x i8]** %30
	%32 = bitcast [0 x i8]* %31 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %32)
	br label %return
return:
	ret void
}
define internal void @lex_Error(i8 zeroext %error$) nounwind {
L.0:
	%error = alloca i8
	store i8 %error$, i8* %error
	%0 = load i8, i8* %error
	call void @lex_ErrorSub(i8 %0)
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
define internal void @lex_ErrorS(i8 zeroext %error$, [0 x i8]* %msg$) nounwind {
L.0:
	%error = alloca i8
	store i8 %error$, i8* %error
	%msg = alloca [0 x i8]*
	store [0 x i8]* %msg$, [0 x i8]** %msg
	%0 = load i8, i8* %error
	call void @lex_ErrorSub(i8 %0)
	%1 = load [0 x i8]*, [0 x i8]** %msg
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %2)
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
define internal void @lex_ErrorI(i8 zeroext %error$, [0 x i8]* %ident$) nounwind {
L.0:
	%error = alloca i8
	store i8 %error$, i8* %error
	%ident = alloca [0 x i8]*
	store [0 x i8]* %ident$, [0 x i8]** %ident
	%0 = load i8, i8* %error
	call void @lex_ErrorSub(i8 %0)
	%1 = load [0 x i8]*, [0 x i8]** %ident
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %2)
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
define internal void @lex_ErrorT(i8 zeroext %error$, i8 zeroext %tok$) nounwind {
L.0:
	%error = alloca i8
	store i8 %error$, i8* %error
	%tok = alloca i8
	store i8 %tok$, i8* %tok
	%0 = load i8, i8* %error
	call void @lex_ErrorSub(i8 %0)
	call void @sys_fildes_chr(i32 2, i8 39)
	%1 = load i8, i8* %tok
	%2 = zext i8 %1 to i32
	%3 = getelementptr [101 x [0 x i8]*], [101 x [0 x i8]*]* @lex_keywords, i32 0, i32 %2
	%4 = load [0 x i8]*, [0 x i8]** %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %5)
	call void @sys_fildes_chr(i32 2, i8 39)
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
declare external void @close(i32)
@S.212 = private unnamed_addr constant [13 x i8] c"Close file \22\00"
@S.213 = private unnamed_addr constant [3 x i8] c"\22\0A\00"
define internal void @lex_FileClose() nounwind {
L.0:
	%of = alloca %lex_FileContext*
	%0 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%1 = icmp ne %lex_FileContext* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%3 = getelementptr %lex_FileContext, %lex_FileContext* %2, i32 0, i32 3
	%4 = load i32, i32* %3
	call void @close(i32 %4)
	%5 = getelementptr %A.2, %A.2* @debug, i32 0, i32 2
	%6 = load i8, i8* %5
	%7 = icmp ne i8 %6, 0
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = getelementptr [13 x i8], [13 x i8]* @S.212
	%9 = bitcast [13 x i8]* %8 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %9)
	%10 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%11 = getelementptr %lex_FileContext, %lex_FileContext* %10, i32 0, i32 1
	%12 = load [0 x i8]*, [0 x i8]** %11
	%13 = icmp ne [0 x i8]* %12, null
	br i1 %13, label %L.6, label %L.5
L.6:
	%14 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%15 = getelementptr %lex_FileContext, %lex_FileContext* %14, i32 0, i32 1
	%16 = load [0 x i8]*, [0 x i8]** %15
	%17 = bitcast [0 x i8]* %16 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %17)
	call void @sys_fildes_chr(i32 2, i8 47)
	br label %L.5
L.5:
	%18 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%19 = getelementptr %lex_FileContext, %lex_FileContext* %18, i32 0, i32 2
	%20 = load [0 x i8]*, [0 x i8]** %19
	%21 = bitcast [0 x i8]* %20 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %21)
	%22 = getelementptr [3 x i8], [3 x i8]* @S.213
	%23 = bitcast [3 x i8]* %22 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %23)
	br label %L.3
L.3:
	%24 = load %lex_FileContext*, %lex_FileContext** @lex_f
	store %lex_FileContext* %24, %lex_FileContext** %of
	%25 = load %lex_FileContext*, %lex_FileContext** %of
	%26 = getelementptr %lex_FileContext, %lex_FileContext* %25, i32 0, i32 0
	%27 = load %lex_FileContext*, %lex_FileContext** %26
	store %lex_FileContext* %27, %lex_FileContext** @lex_f
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @lex_FileOpen([0 x i8]* %name$, [0 x i8]* %path$, i32 %fd$) nounwind {
L.0:
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%path = alloca [0 x i8]*
	store [0 x i8]* %path$, [0 x i8]** %path
	%fd = alloca i32
	store i32 %fd$, i32* %fd
	%nf = alloca %lex_FileContext*
	%0 = call [0 x i8]* @malloc(i32 4120)
	%1 = bitcast [0 x i8]* %0 to %lex_FileContext*
	store %lex_FileContext* %1, %lex_FileContext** %nf
	%2 = load [0 x i8]*, [0 x i8]** %name
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	%4 = load %lex_FileContext*, %lex_FileContext** %nf
	%5 = getelementptr %lex_FileContext, %lex_FileContext* %4, i32 0, i32 2
	store [0 x i8]* %3, [0 x i8]** %5
	%6 = load [0 x i8]*, [0 x i8]** %path
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	%8 = load %lex_FileContext*, %lex_FileContext** %nf
	%9 = getelementptr %lex_FileContext, %lex_FileContext* %8, i32 0, i32 1
	store [0 x i8]* %7, [0 x i8]** %9
	%10 = load i32, i32* %fd
	%11 = load %lex_FileContext*, %lex_FileContext** %nf
	%12 = getelementptr %lex_FileContext, %lex_FileContext* %11, i32 0, i32 3
	store i32 %10, i32* %12
	%13 = load %lex_FileContext*, %lex_FileContext** %nf
	%14 = getelementptr %lex_FileContext, %lex_FileContext* %13, i32 0, i32 4
	store i16 1, i16* %14
	%15 = load %lex_FileContext*, %lex_FileContext** %nf
	%16 = getelementptr %lex_FileContext, %lex_FileContext* %15, i32 0, i32 5
	store i16 0, i16* %16
	%17 = load %lex_FileContext*, %lex_FileContext** %nf
	%18 = getelementptr %lex_FileContext, %lex_FileContext* %17, i32 0, i32 6
	store i16 0, i16* %18
	%19 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%20 = load %lex_FileContext*, %lex_FileContext** %nf
	%21 = getelementptr %lex_FileContext, %lex_FileContext* %20, i32 0, i32 0
	store %lex_FileContext* %19, %lex_FileContext** %21
	%22 = load %lex_FileContext*, %lex_FileContext** %nf
	store %lex_FileContext* %22, %lex_FileContext** @lex_f
	br label %return
return:
	ret void
}
declare external i32 @read(i32, [0 x i8]*, i32)
define internal void @lex_FillBuf() nounwind {
L.0:
	%k = alloca i32
	%0 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%1 = getelementptr %lex_FileContext, %lex_FileContext* %0, i32 0, i32 3
	%2 = load i32, i32* %1
	%3 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%4 = getelementptr %lex_FileContext, %lex_FileContext* %3, i32 0, i32 7
	%5 = getelementptr [4096 x i8], [4096 x i8]* %4
	%6 = bitcast [4096 x i8]* %5 to [0 x i8]*
	%7 = call i32 @read(i32 %2, [0 x i8]* %6, i32 4096)
	store i32 %7, i32* %k
	%8 = load i32, i32* %k
	%9 = icmp slt i32 %8, 0
	br i1 %9, label %L.2, label %L.1
L.2:
	store i32 0, i32* %k
	br label %L.1
L.1:
	%10 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%11 = getelementptr %lex_FileContext, %lex_FileContext* %10, i32 0, i32 5
	store i16 0, i16* %11
	%12 = load i32, i32* %k
	%13 = trunc i32 %12 to i16
	%14 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%15 = getelementptr %lex_FileContext, %lex_FileContext* %14, i32 0, i32 6
	store i16 %13, i16* %15
	br label %return
return:
	ret void
}
define internal double @lex_MakeFloat(i8 zeroext %hasexp$) nounwind {
L.0:
	%rv.0 = alloca double
	%hasexp = alloca i8
	store i8 %hasexp$, i8* %hasexp
	%n = alloca i64
	%t = alloca i64
	%s = alloca i16
	%i = alloca i32
	%f = alloca double
	%0 = load i64, i64* @lex_Number
	store i64 %0, i64* %n
	%1 = load i16, i16* @lex_StringLen
	%2 = icmp ugt i16 %1, 0
	br i1 %2, label %L.2, label %L.1
L.2:
	store i32 0, i32* %i
	br label %L.3
L.3:
	%3 = load i64, i64* %n
	%4 = mul i64 %3, 10
	%5 = load i32, i32* %i
	%6 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %5
	%7 = load i8, i8* %6
	%8 = zext i8 %7 to i64
	%9 = add i64 %4, %8
	store i64 %9, i64* %t
	%10 = load i64, i64* %t
	%11 = icmp ugt i64 %10, 9007199254740992
	br i1 %11, label %L.4, label %L.5
L.5:
	%12 = load i64, i64* %t
	store i64 %12, i64* %n
	%13 = load i32, i32* %i
	%14 = add i32 %13, 1
	store i32 %14, i32* %i
	%15 = load i32, i32* %i
	%16 = load i16, i16* @lex_StringLen
	%17 = zext i16 %16 to i32
	%18 = icmp eq i32 %15, %17
	br i1 %18, label %L.4, label %L.6
L.6:
	br label %L.3
L.4:
	br label %L.1
L.1:
	%19 = load i32, i32* %i
	%20 = trunc i32 %19 to i16
	store i16 %20, i16* %s
	%21 = load i8, i8* %hasexp
	%22 = icmp ne i8 %21, 0
	br i1 %22, label %L.8, label %L.7
L.8:
	%23 = load i16, i16* %s
	%24 = load i16, i16* @lex_Scale
	%25 = sub i16 %23, %24
	store i16 %25, i16* %s
	br label %L.7
L.7:
	%26 = load i64, i64* %n
	%27 = uitofp i64 %26 to double
	store double %27, double* %f
	%28 = load i16, i16* %s
	%29 = icmp sgt i16 %28, 0
	br i1 %29, label %L.10, label %L.11
L.10:
	br label %L.12
L.12:
	%30 = load double, double* %f
	%31 = fdiv double %30, 0x4024000000000000
	store double %31, double* %f
	%32 = load i16, i16* %s
	%33 = sub i16 %32, 1
	store i16 %33, i16* %s
	%34 = load i16, i16* %s
	%35 = icmp ne i16 %34, 0
	%36 = xor i1 %35, true
	br i1 %36, label %L.13, label %L.14
L.14:
	br label %L.12
L.13:
	br label %L.9
L.11:
	%37 = load i16, i16* %s
	%38 = icmp slt i16 %37, 0
	br i1 %38, label %L.16, label %L.15
L.16:
	br label %L.17
L.17:
	%39 = load double, double* %f
	%40 = fmul double %39, 0x4024000000000000
	store double %40, double* %f
	%41 = load i16, i16* %s
	%42 = add i16 %41, 1
	store i16 %42, i16* %s
	%43 = load i16, i16* %s
	%44 = icmp ne i16 %43, 0
	%45 = xor i1 %44, true
	br i1 %45, label %L.18, label %L.19
L.19:
	br label %L.17
L.18:
	br label %L.15
L.15:
	br label %L.9
L.9:
	%46 = load double, double* %f
	store double %46, double* %rv.0
	br label %return
return:
	%47 = load double, double* %rv.0
	ret double %47
}
define internal void @lex_MakeNum(i32 %k$, i32 %base$) nounwind {
L.0:
	%k = alloca i32
	store i32 %k$, i32* %k
	%base = alloca i32
	store i32 %base$, i32* %base
	%n = alloca i64
	%t = alloca i64
	%i = alloca i32
	store i64 0, i64* %n
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %i
	%1 = load i32, i32* %k
	%2 = icmp ult i32 %0, %1
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load i64, i64* %n
	%5 = load i32, i32* %base
	%6 = zext i32 %5 to i64
	%7 = mul i64 %4, %6
	%8 = load i32, i32* %i
	%9 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %8
	%10 = load i8, i8* %9
	%11 = zext i8 %10 to i64
	%12 = add i64 %7, %11
	store i64 %12, i64* %t
	%13 = load i64, i64* %t
	%14 = load i64, i64* %n
	%15 = icmp ult i64 %13, %14
	br i1 %15, label %L.5, label %L.4
L.5:
	call void @lex_Error(i8 96)
	store i64 1, i64* %t
	br label %L.4
L.4:
	%16 = load i64, i64* %t
	store i64 %16, i64* %n
	%17 = load i32, i32* %i
	%18 = add i32 %17, 1
	store i32 %18, i32* %i
	br label %L.1
L.2:
	%19 = load i64, i64* %n
	store i64 %19, i64* @lex_Number
	br label %return
return:
	ret void
}
define internal zeroext i8 @lex_EscChar(i8 zeroext %c$) nounwind {
L.0:
	%rv.0 = alloca i8
	%c = alloca i8
	store i8 %c$, i8* %c
	%0 = load i8, i8* %c
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 110, label %L.3
		i32 114, label %L.4
		i32 116, label %L.5
		i32 98, label %L.6
		i32 118, label %L.7
		i32 102, label %L.8
	]
L.3:
	store i8 10, i8* %c
	br label %L.2
L.4:
	store i8 13, i8* %c
	br label %L.2
L.5:
	store i8 9, i8* %c
	br label %L.2
L.6:
	store i8 8, i8* %c
	br label %L.2
L.7:
	store i8 11, i8* %c
	br label %L.2
L.8:
	store i8 12, i8* %c
	br label %L.2
L.1:
	br label %L.2
L.2:
	%2 = load i8, i8* %c
	store i8 %2, i8* %rv.0
	br label %return
return:
	%3 = load i8, i8* %rv.0
	ret i8 %3
}
define internal i32 @lex_EscHex(i8 zeroext %c$, i32 %h$) nounwind {
L.0:
	%rv.0 = alloca i32
	%c = alloca i8
	store i8 %c$, i8* %c
	%h = alloca i32
	store i32 %h$, i32* %h
	%0 = load i8, i8* %c
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 48, label %L.3
		i32 49, label %L.3
		i32 50, label %L.3
		i32 51, label %L.3
		i32 52, label %L.3
		i32 53, label %L.3
		i32 54, label %L.3
		i32 55, label %L.3
		i32 56, label %L.3
		i32 57, label %L.3
		i32 65, label %L.4
		i32 66, label %L.4
		i32 67, label %L.4
		i32 68, label %L.4
		i32 69, label %L.4
		i32 70, label %L.4
		i32 97, label %L.5
		i32 98, label %L.5
		i32 99, label %L.5
		i32 100, label %L.5
		i32 101, label %L.5
		i32 102, label %L.5
	]
L.3:
	%2 = load i8, i8* %c
	%3 = sub i8 %2, 48
	store i8 %3, i8* %c
	br label %L.2
L.4:
	%4 = load i8, i8* %c
	%5 = sub i8 %4, 65
	%6 = add i8 %5, 10
	store i8 %6, i8* %c
	br label %L.2
L.5:
	%7 = load i8, i8* %c
	%8 = sub i8 %7, 97
	%9 = add i8 %8, 10
	store i8 %9, i8* %c
	br label %L.2
L.1:
	call void @lex_Error(i8 16)
	%10 = load i32, i32* %h
	store i32 %10, i32* %rv.0
	br label %return
L.2:
	%11 = load i32, i32* %h
	%12 = shl i32 %11, 4
	%13 = load i8, i8* %c
	%14 = zext i8 %13 to i32
	%15 = or i32 %12, %14
	store i32 %15, i32* %rv.0
	br label %return
return:
	%16 = load i32, i32* %rv.0
	ret i32 %16
}
@lex_unicodemax = internal constant [4 x i32] [ i32 127, i32 2047, i32 65535, i32 1114111 ], align 4
@lex_utf8pfx = internal constant [5 x i8] [ i8 0, i8 192, i8 224, i8 240, i8 248 ], align 1
define internal i32 @lex_EscUTF8(i32 %unicode$, i32 %j$) nounwind {
L.0:
	%rv.0 = alloca i32
	%unicode = alloca i32
	store i32 %unicode$, i32* %unicode
	%j = alloca i32
	store i32 %j$, i32* %j
	%n = alloca i32
	%i = alloca i32
	%k = alloca i32
	store i32 0, i32* %n
	br label %L.1
L.1:
	%0 = load i32, i32* %unicode
	%1 = load i32, i32* %n
	%2 = getelementptr [4 x i32], [4 x i32]* @lex_unicodemax, i32 0, i32 %1
	%3 = load i32, i32* %2
	%4 = icmp ule i32 %0, %3
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load i32, i32* %n
	%6 = add i32 %5, 1
	store i32 %6, i32* %n
	%7 = load i32, i32* %n
	%8 = icmp ugt i32 %7, 3
	br i1 %8, label %L.2, label %L.4
L.4:
	br label %L.1
L.2:
	%9 = load i32, i32* %n
	%10 = icmp uge i32 %9, 4
	br i1 %10, label %L.6, label %L.7
L.6:
	call void @lex_Error(i8 17)
	store i32 0, i32* %rv.0
	br label %return
L.7:
	%11 = load i32, i32* %j
	%12 = load i32, i32* %n
	%13 = add i32 %11, %12
	%14 = add i32 %13, 1
	store i32 %14, i32* %k
	%15 = load i32, i32* %k
	%16 = icmp uge i32 %15, 4095
	br i1 %16, label %L.9, label %L.8
L.9:
	call void @lex_Error(i8 19)
	store i32 0, i32* %rv.0
	br label %return
L.8:
	%17 = load i32, i32* %n
	store i32 %17, i32* %i
	br label %L.10
L.10:
	%18 = load i32, i32* %i
	%19 = icmp ugt i32 %18, 0
	%20 = xor i1 %19, true
	br i1 %20, label %L.11, label %L.12
L.12:
	%21 = load i32, i32* %unicode
	%22 = trunc i32 %21 to i8
	%23 = and i8 63, %22
	%24 = or i8 128, %23
	%25 = load i32, i32* %j
	%26 = load i32, i32* %i
	%27 = add i32 %25, %26
	%28 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %27
	store i8 %24, i8* %28
	%29 = load i32, i32* %unicode
	%30 = lshr i32 %29, 6
	store i32 %30, i32* %unicode
	%31 = load i32, i32* %i
	%32 = sub i32 %31, 1
	store i32 %32, i32* %i
	br label %L.10
L.11:
	%33 = load i32, i32* %n
	%34 = getelementptr [5 x i8], [5 x i8]* @lex_utf8pfx, i32 0, i32 %33
	%35 = load i8, i8* %34
	%36 = load i32, i32* %unicode
	%37 = trunc i32 %36 to i8
	%38 = or i8 %35, %37
	%39 = load i32, i32* %j
	%40 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %39
	store i8 %38, i8* %40
	br label %L.5
L.5:
	%41 = load i32, i32* %k
	store i32 %41, i32* %rv.0
	br label %return
return:
	%42 = load i32, i32* %rv.0
	ret i32 %42
}
define internal zeroext i8 @lex_Next() nounwind {
L.0:
	%rv.0 = alloca i8
	%state = alloca i8
	%c = alloca i8
	%tok = alloca i8
	%i = alloca i16
	%e = alloca i16
	%k = alloca i16
	%str = alloca i8
	%neg = alloca i8
	%h = alloca i32
	store i8 0, i8* %state
	%0 = load i8, i8* @lex_saves
	%1 = icmp ne i8 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* @lex_saves
	store i8 %2, i8* %state
	store i8 0, i8* @lex_saves
	br label %L.1
L.1:
	store i8 0, i8* %tok
	%3 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%4 = getelementptr %lex_FileContext, %lex_FileContext* %3, i32 0, i32 5
	%5 = load i16, i16* %4
	store i16 %5, i16* %i
	%6 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%7 = getelementptr %lex_FileContext, %lex_FileContext* %6, i32 0, i32 6
	%8 = load i16, i16* %7
	store i16 %8, i16* %e
	store i16 0, i16* %k
	br label %L.3
L.3:
	%9 = load i16, i16* %i
	%10 = load i16, i16* %e
	%11 = icmp uge i16 %9, %10
	br i1 %11, label %L.6, label %L.5
L.6:
	call void @lex_FillBuf()
	%12 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%13 = getelementptr %lex_FileContext, %lex_FileContext* %12, i32 0, i32 5
	%14 = load i16, i16* %13
	store i16 %14, i16* %i
	%15 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%16 = getelementptr %lex_FileContext, %lex_FileContext* %15, i32 0, i32 6
	%17 = load i16, i16* %16
	store i16 %17, i16* %e
	%18 = load i16, i16* %e
	%19 = icmp eq i16 %18, 0
	br i1 %19, label %L.8, label %L.7
L.8:
	%20 = load i8, i8* %state
	%21 = zext i8 %20 to i32
	switch i32 %21, label %L.9 [
		i32 0, label %L.11
		i32 2, label %L.12
		i32 3, label %L.12
		i32 4, label %L.12
	]
L.11:
	br label %L.10
L.12:
	call void @lex_Error(i8 13)
	br label %L.10
L.9:
	call void @lex_Error(i8 14)
	br label %L.10
L.10:
	store i8 1, i8* %tok
	br label %L.4
L.7:
	br label %L.5
L.5:
	%22 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%23 = getelementptr %lex_FileContext, %lex_FileContext* %22, i32 0, i32 7
	%24 = load i16, i16* %i
	%25 = zext i16 %24 to i32
	%26 = getelementptr [4096 x i8], [4096 x i8]* %23, i32 0, i32 %25
	%27 = load i8, i8* %26
	store i8 %27, i8* %c
	%28 = load i8, i8* %state
	%29 = zext i8 %28 to i32
	switch i32 %29, label %L.13 [
		i32 0, label %L.15
		i32 24, label %L.16
		i32 25, label %L.17
		i32 26, label %L.17
		i32 27, label %L.17
		i32 1, label %L.18
		i32 2, label %L.19
		i32 3, label %L.20
		i32 4, label %L.21
		i32 5, label %L.22
		i32 6, label %L.23
		i32 7, label %L.24
		i32 8, label %L.25
		i32 9, label %L.26
		i32 10, label %L.27
		i32 11, label %L.28
		i32 12, label %L.29
		i32 13, label %L.30
		i32 14, label %L.31
		i32 15, label %L.32
		i32 16, label %L.33
		i32 17, label %L.34
		i32 18, label %L.35
		i32 19, label %L.36
		i32 20, label %L.37
		i32 21, label %L.38
		i32 22, label %L.39
		i32 23, label %L.40
		i32 28, label %L.41
		i32 29, label %L.42
		i32 30, label %L.43
		i32 31, label %L.44
		i32 33, label %L.44
		i32 34, label %L.44
		i32 35, label %L.44
		i32 37, label %L.44
		i32 38, label %L.44
		i32 39, label %L.44
		i32 40, label %L.44
		i32 41, label %L.44
		i32 42, label %L.44
		i32 43, label %L.44
		i32 32, label %L.45
		i32 36, label %L.46
		i32 44, label %L.46
	]
L.15:
	%30 = load i8, i8* %c
	%31 = zext i8 %30 to i32
	switch i32 %31, label %L.47 [
		i32 58, label %L.49
		i32 59, label %L.50
		i32 44, label %L.51
		i32 64, label %L.52
		i32 126, label %L.53
		i32 42, label %L.54
		i32 37, label %L.55
		i32 40, label %L.56
		i32 41, label %L.57
		i32 123, label %L.58
		i32 125, label %L.59
		i32 63, label %L.60
		i32 91, label %L.61
		i32 93, label %L.62
		i32 46, label %L.63
		i32 47, label %L.64
		i32 33, label %L.65
		i32 60, label %L.66
		i32 62, label %L.67
		i32 61, label %L.68
		i32 43, label %L.69
		i32 45, label %L.70
		i32 38, label %L.71
		i32 124, label %L.72
		i32 94, label %L.73
		i32 48, label %L.74
		i32 49, label %L.75
		i32 50, label %L.75
		i32 51, label %L.75
		i32 52, label %L.75
		i32 53, label %L.75
		i32 54, label %L.75
		i32 55, label %L.75
		i32 56, label %L.75
		i32 57, label %L.75
		i32 39, label %L.76
		i32 34, label %L.77
		i32 32, label %L.78
		i32 9, label %L.78
		i32 10, label %L.78
		i32 13, label %L.78
		i32 12, label %L.78
		i32 65, label %L.79
		i32 66, label %L.79
		i32 67, label %L.79
		i32 68, label %L.79
		i32 69, label %L.79
		i32 70, label %L.79
		i32 71, label %L.79
		i32 72, label %L.79
		i32 73, label %L.79
		i32 74, label %L.79
		i32 75, label %L.79
		i32 76, label %L.79
		i32 77, label %L.79
		i32 78, label %L.79
		i32 79, label %L.79
		i32 80, label %L.79
		i32 81, label %L.79
		i32 82, label %L.79
		i32 83, label %L.79
		i32 84, label %L.79
		i32 85, label %L.79
		i32 86, label %L.79
		i32 87, label %L.79
		i32 88, label %L.79
		i32 89, label %L.79
		i32 90, label %L.79
		i32 97, label %L.79
		i32 98, label %L.79
		i32 99, label %L.79
		i32 100, label %L.79
		i32 101, label %L.79
		i32 102, label %L.79
		i32 103, label %L.79
		i32 104, label %L.79
		i32 105, label %L.79
		i32 106, label %L.79
		i32 107, label %L.79
		i32 108, label %L.79
		i32 109, label %L.79
		i32 110, label %L.79
		i32 111, label %L.79
		i32 112, label %L.79
		i32 113, label %L.79
		i32 114, label %L.79
		i32 115, label %L.79
		i32 116, label %L.79
		i32 117, label %L.79
		i32 118, label %L.79
		i32 119, label %L.79
		i32 120, label %L.79
		i32 121, label %L.79
		i32 122, label %L.79
		i32 95, label %L.79
		i32 194, label %L.80
		i32 195, label %L.80
		i32 196, label %L.80
		i32 197, label %L.80
		i32 198, label %L.80
		i32 199, label %L.80
		i32 200, label %L.80
		i32 201, label %L.80
		i32 202, label %L.80
		i32 203, label %L.80
		i32 204, label %L.80
		i32 205, label %L.80
		i32 206, label %L.80
		i32 207, label %L.80
		i32 208, label %L.80
		i32 209, label %L.80
		i32 210, label %L.80
		i32 211, label %L.80
		i32 212, label %L.80
		i32 213, label %L.80
		i32 214, label %L.80
		i32 215, label %L.80
		i32 216, label %L.80
		i32 217, label %L.80
		i32 218, label %L.80
		i32 219, label %L.80
		i32 220, label %L.80
		i32 221, label %L.80
		i32 222, label %L.80
		i32 223, label %L.80
		i32 224, label %L.81
		i32 225, label %L.81
		i32 226, label %L.81
		i32 227, label %L.81
		i32 228, label %L.81
		i32 229, label %L.81
		i32 230, label %L.81
		i32 231, label %L.81
		i32 232, label %L.81
		i32 233, label %L.81
		i32 234, label %L.81
		i32 235, label %L.81
		i32 236, label %L.81
		i32 237, label %L.81
		i32 238, label %L.81
		i32 239, label %L.81
		i32 240, label %L.82
		i32 241, label %L.82
		i32 242, label %L.82
		i32 243, label %L.82
		i32 244, label %L.82
	]
L.49:
	store i8 3, i8* %tok
	%32 = load i16, i16* %i
	%33 = add i16 %32, 1
	store i16 %33, i16* %i
	br label %L.48
L.50:
	store i8 4, i8* %tok
	%34 = load i16, i16* %i
	%35 = add i16 %34, 1
	store i16 %35, i16* %i
	br label %L.48
L.51:
	store i8 5, i8* %tok
	%36 = load i16, i16* %i
	%37 = add i16 %36, 1
	store i16 %37, i16* %i
	br label %L.48
L.52:
	store i8 7, i8* %tok
	%38 = load i16, i16* %i
	%39 = add i16 %38, 1
	store i16 %39, i16* %i
	br label %L.48
L.53:
	store i8 17, i8* %tok
	%40 = load i16, i16* %i
	%41 = add i16 %40, 1
	store i16 %41, i16* %i
	br label %L.48
L.54:
	store i8 22, i8* %tok
	%42 = load i16, i16* %i
	%43 = add i16 %42, 1
	store i16 %43, i16* %i
	br label %L.48
L.55:
	store i8 24, i8* %tok
	%44 = load i16, i16* %i
	%45 = add i16 %44, 1
	store i16 %45, i16* %i
	br label %L.48
L.56:
	store i8 36, i8* %tok
	%46 = load i16, i16* %i
	%47 = add i16 %46, 1
	store i16 %47, i16* %i
	br label %L.48
L.57:
	store i8 37, i8* %tok
	%48 = load i16, i16* %i
	%49 = add i16 %48, 1
	store i16 %49, i16* %i
	br label %L.48
L.58:
	store i8 40, i8* %tok
	%50 = load i16, i16* %i
	%51 = add i16 %50, 1
	store i16 %51, i16* %i
	br label %L.48
L.59:
	store i8 41, i8* %tok
	%52 = load i16, i16* %i
	%53 = add i16 %52, 1
	store i16 %53, i16* %i
	br label %L.48
L.60:
	store i8 8, i8* %tok
	%54 = load i16, i16* %i
	%55 = add i16 %54, 1
	store i16 %55, i16* %i
	br label %L.48
L.61:
	store i8 38, i8* %tok
	%56 = load i16, i16* %i
	%57 = add i16 %56, 1
	store i16 %57, i16* %i
	br label %L.48
L.62:
	store i8 39, i8* %tok
	%58 = load i16, i16* %i
	%59 = add i16 %58, 1
	store i16 %59, i16* %i
	br label %L.48
L.63:
	store i8 5, i8* %state
	br label %L.48
L.64:
	store i8 1, i8* %state
	br label %L.48
L.65:
	store i8 11, i8* %state
	br label %L.48
L.66:
	store i8 8, i8* %state
	br label %L.48
L.67:
	store i8 9, i8* %state
	br label %L.48
L.68:
	store i8 10, i8* %state
	br label %L.48
L.69:
	store i8 6, i8* %state
	br label %L.48
L.70:
	store i8 7, i8* %state
	br label %L.48
L.71:
	store i8 12, i8* %state
	br label %L.48
L.72:
	store i8 13, i8* %state
	br label %L.48
L.73:
	store i8 14, i8* %state
	br label %L.48
L.74:
	store i8 15, i8* %state
	br label %L.48
L.75:
	%60 = load i8, i8* %c
	%61 = sub i8 %60, 48
	%62 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 0
	store i8 %61, i8* %62
	store i16 1, i16* %k
	store i8 19, i8* %state
	br label %L.48
L.76:
	store i8 28, i8* %state
	br label %L.48
L.77:
	store i16 0, i16* %k
	store i8 29, i8* %state
	br label %L.48
L.78:
	br label %L.48
L.79:
	%63 = load i8, i8* %c
	%64 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 0
	store i8 %63, i8* %64
	store i16 1, i16* %k
	store i8 24, i8* %state
	br label %L.48
L.80:
	%65 = load i8, i8* %c
	%66 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 0
	store i8 %65, i8* %66
	store i16 1, i16* %k
	store i8 25, i8* %state
	br label %L.48
L.81:
	%67 = load i8, i8* %c
	%68 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 0
	store i8 %67, i8* %68
	store i16 1, i16* %k
	store i8 26, i8* %state
	br label %L.48
L.82:
	%69 = load i8, i8* %c
	%70 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 0
	store i8 %69, i8* %70
	store i16 1, i16* %k
	store i8 27, i8* %state
	br label %L.48
L.47:
	call void @lex_Error(i8 11)
	br label %L.48
L.48:
	br label %L.14
L.16:
	%71 = load i8, i8* %c
	%72 = zext i8 %71 to i32
	switch i32 %72, label %L.83 [
		i32 65, label %L.85
		i32 66, label %L.85
		i32 67, label %L.85
		i32 68, label %L.85
		i32 69, label %L.85
		i32 70, label %L.85
		i32 71, label %L.85
		i32 72, label %L.85
		i32 73, label %L.85
		i32 74, label %L.85
		i32 75, label %L.85
		i32 76, label %L.85
		i32 77, label %L.85
		i32 78, label %L.85
		i32 79, label %L.85
		i32 80, label %L.85
		i32 81, label %L.85
		i32 82, label %L.85
		i32 83, label %L.85
		i32 84, label %L.85
		i32 85, label %L.85
		i32 86, label %L.85
		i32 87, label %L.85
		i32 88, label %L.85
		i32 89, label %L.85
		i32 90, label %L.85
		i32 97, label %L.85
		i32 98, label %L.85
		i32 99, label %L.85
		i32 100, label %L.85
		i32 101, label %L.85
		i32 102, label %L.85
		i32 103, label %L.85
		i32 104, label %L.85
		i32 105, label %L.85
		i32 106, label %L.85
		i32 107, label %L.85
		i32 108, label %L.85
		i32 109, label %L.85
		i32 110, label %L.85
		i32 111, label %L.85
		i32 112, label %L.85
		i32 113, label %L.85
		i32 114, label %L.85
		i32 115, label %L.85
		i32 116, label %L.85
		i32 117, label %L.85
		i32 118, label %L.85
		i32 119, label %L.85
		i32 120, label %L.85
		i32 121, label %L.85
		i32 122, label %L.85
		i32 48, label %L.85
		i32 49, label %L.85
		i32 50, label %L.85
		i32 51, label %L.85
		i32 52, label %L.85
		i32 53, label %L.85
		i32 54, label %L.85
		i32 55, label %L.85
		i32 56, label %L.85
		i32 57, label %L.85
		i32 95, label %L.85
		i32 194, label %L.86
		i32 195, label %L.86
		i32 196, label %L.86
		i32 197, label %L.86
		i32 198, label %L.86
		i32 199, label %L.86
		i32 200, label %L.86
		i32 201, label %L.86
		i32 202, label %L.86
		i32 203, label %L.86
		i32 204, label %L.86
		i32 205, label %L.86
		i32 206, label %L.86
		i32 207, label %L.86
		i32 208, label %L.86
		i32 209, label %L.86
		i32 210, label %L.86
		i32 211, label %L.86
		i32 212, label %L.86
		i32 213, label %L.86
		i32 214, label %L.86
		i32 215, label %L.86
		i32 216, label %L.86
		i32 217, label %L.86
		i32 218, label %L.86
		i32 219, label %L.86
		i32 220, label %L.86
		i32 221, label %L.86
		i32 222, label %L.86
		i32 223, label %L.86
		i32 224, label %L.87
		i32 225, label %L.87
		i32 226, label %L.87
		i32 227, label %L.87
		i32 228, label %L.87
		i32 229, label %L.87
		i32 230, label %L.87
		i32 231, label %L.87
		i32 232, label %L.87
		i32 233, label %L.87
		i32 234, label %L.87
		i32 235, label %L.87
		i32 236, label %L.87
		i32 237, label %L.87
		i32 238, label %L.87
		i32 239, label %L.87
		i32 240, label %L.88
		i32 241, label %L.88
		i32 242, label %L.88
		i32 243, label %L.88
		i32 244, label %L.88
	]
L.85:
	%73 = load i8, i8* %c
	%74 = load i16, i16* %k
	%75 = zext i16 %74 to i32
	%76 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 %75
	store i8 %73, i8* %76
	%77 = load i16, i16* %k
	%78 = add i16 %77, 1
	store i16 %78, i16* %k
	br label %L.84
L.86:
	%79 = load i8, i8* %c
	%80 = load i16, i16* %k
	%81 = zext i16 %80 to i32
	%82 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 %81
	store i8 %79, i8* %82
	%83 = load i16, i16* %k
	%84 = add i16 %83, 1
	store i16 %84, i16* %k
	store i8 25, i8* %state
	br label %L.84
L.87:
	%85 = load i8, i8* %c
	%86 = load i16, i16* %k
	%87 = zext i16 %86 to i32
	%88 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 %87
	store i8 %85, i8* %88
	%89 = load i16, i16* %k
	%90 = add i16 %89, 1
	store i16 %90, i16* %k
	store i8 26, i8* %state
	br label %L.84
L.88:
	%91 = load i8, i8* %c
	%92 = load i16, i16* %k
	%93 = zext i16 %92 to i32
	%94 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 %93
	store i8 %91, i8* %94
	%95 = load i16, i16* %k
	%96 = add i16 %95, 1
	store i16 %96, i16* %k
	store i8 27, i8* %state
	br label %L.84
L.83:
	%97 = load i16, i16* %k
	%98 = zext i16 %97 to i32
	%99 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 %98
	store i8 0, i8* %99
	store i8 46, i8* %tok
	br label %L.84
L.84:
	br label %L.14
L.17:
	%100 = load i8, i8* %c
	%101 = and i8 %100, 192
	%102 = icmp eq i8 %101, 128
	br i1 %102, label %L.90, label %L.91
L.90:
	%103 = load i8, i8* %c
	%104 = load i16, i16* %k
	%105 = zext i16 %104 to i32
	%106 = getelementptr [256 x i8], [256 x i8]* @lex_Ident, i32 0, i32 %105
	store i8 %103, i8* %106
	%107 = load i16, i16* %k
	%108 = add i16 %107, 1
	store i16 %108, i16* %k
	%109 = load i8, i8* %state
	%110 = sub i8 %109, 1
	store i8 %110, i8* %state
	br label %L.89
L.91:
	call void @lex_Error(i8 12)
	br label %L.89
L.89:
	br label %L.14
L.18:
	%111 = load i8, i8* %c
	%112 = zext i8 %111 to i32
	switch i32 %112, label %L.92 [
		i32 47, label %L.94
		i32 42, label %L.95
	]
L.94:
	store i8 2, i8* %state
	br label %L.93
L.95:
	store i8 3, i8* %state
	br label %L.93
L.92:
	store i8 23, i8* %tok
	br label %L.93
L.93:
	br label %L.14
L.19:
	%113 = load i8, i8* %c
	%114 = icmp eq i8 %113, 10
	br i1 %114, label %L.97, label %L.96
L.97:
	store i8 0, i8* %state
	br label %L.96
L.96:
	br label %L.14
L.20:
	%115 = load i8, i8* %c
	%116 = icmp eq i8 %115, 42
	br i1 %116, label %L.99, label %L.98
L.99:
	store i8 4, i8* %state
	br label %L.98
L.98:
	br label %L.14
L.21:
	%117 = load i8, i8* %c
	%118 = icmp eq i8 %117, 47
	br i1 %118, label %L.101, label %L.102
L.101:
	store i8 0, i8* %state
	br label %L.100
L.102:
	store i8 3, i8* %state
	br label %L.100
L.100:
	br label %L.14
L.22:
	%119 = load i8, i8* %c
	%120 = zext i8 %119 to i32
	switch i32 %120, label %L.103 [
		i32 46, label %L.105
		i32 48, label %L.106
		i32 49, label %L.106
		i32 50, label %L.106
		i32 51, label %L.106
		i32 52, label %L.106
		i32 53, label %L.106
		i32 54, label %L.106
		i32 55, label %L.106
		i32 56, label %L.106
		i32 57, label %L.106
	]
L.105:
	store i8 6, i8* %tok
	%121 = load i16, i16* %i
	%122 = add i16 %121, 1
	store i16 %122, i16* %i
	br label %L.104
L.106:
	%123 = load i8, i8* %c
	%124 = sub i8 %123, 48
	%125 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 0
	store i8 %124, i8* %125
	store i16 1, i16* %k
	store i8 21, i8* %state
	br label %L.104
L.103:
	store i8 2, i8* %tok
	br label %L.104
L.104:
	br label %L.14
L.23:
	%126 = load i8, i8* %c
	%127 = zext i8 %126 to i32
	switch i32 %127, label %L.107 [
		i32 61, label %L.109
	]
L.109:
	store i8 11, i8* %tok
	%128 = load i16, i16* %i
	%129 = add i16 %128, 1
	store i16 %129, i16* %i
	br label %L.108
L.107:
	store i8 18, i8* %tok
	br label %L.108
L.108:
	br label %L.14
L.24:
	%130 = load i8, i8* %c
	%131 = zext i8 %130 to i32
	switch i32 %131, label %L.110 [
		i32 61, label %L.112
	]
L.112:
	store i8 12, i8* %tok
	%132 = load i16, i16* %i
	%133 = add i16 %132, 1
	store i16 %133, i16* %i
	br label %L.111
L.110:
	store i8 19, i8* %tok
	br label %L.111
L.111:
	br label %L.14
L.25:
	%134 = load i8, i8* %c
	%135 = zext i8 %134 to i32
	switch i32 %135, label %L.113 [
		i32 61, label %L.115
		i32 60, label %L.116
	]
L.115:
	store i8 32, i8* %tok
	%136 = load i16, i16* %i
	%137 = add i16 %136, 1
	store i16 %137, i16* %i
	br label %L.114
L.116:
	store i8 25, i8* %tok
	%138 = load i16, i16* %i
	%139 = add i16 %138, 1
	store i16 %139, i16* %i
	br label %L.114
L.113:
	store i8 30, i8* %tok
	br label %L.114
L.114:
	br label %L.14
L.26:
	%140 = load i8, i8* %c
	%141 = zext i8 %140 to i32
	switch i32 %141, label %L.117 [
		i32 61, label %L.119
		i32 62, label %L.120
	]
L.119:
	store i8 33, i8* %tok
	%142 = load i16, i16* %i
	%143 = add i16 %142, 1
	store i16 %143, i16* %i
	br label %L.118
L.120:
	store i8 26, i8* %tok
	%144 = load i16, i16* %i
	%145 = add i16 %144, 1
	store i16 %145, i16* %i
	br label %L.118
L.117:
	store i8 31, i8* %tok
	br label %L.118
L.118:
	br label %L.14
L.27:
	%146 = load i8, i8* %c
	%147 = zext i8 %146 to i32
	switch i32 %147, label %L.121 [
		i32 61, label %L.123
		i32 47, label %L.124
	]
L.123:
	store i8 28, i8* %tok
	%148 = load i16, i16* %i
	%149 = add i16 %148, 1
	store i16 %149, i16* %i
	br label %L.122
L.124:
	store i8 10, i8* %tok
	%150 = load i16, i16* %i
	%151 = add i16 %150, 1
	store i16 %151, i16* %i
	br label %L.122
L.121:
	store i8 9, i8* %tok
	br label %L.122
L.122:
	br label %L.14
L.28:
	%152 = load i8, i8* %c
	%153 = zext i8 %152 to i32
	switch i32 %153, label %L.125 [
		i32 61, label %L.127
	]
L.127:
	store i8 29, i8* %tok
	%154 = load i16, i16* %i
	%155 = add i16 %154, 1
	store i16 %155, i16* %i
	br label %L.126
L.125:
	store i8 16, i8* %tok
	br label %L.126
L.126:
	br label %L.14
L.29:
	%156 = load i8, i8* %c
	%157 = zext i8 %156 to i32
	switch i32 %157, label %L.128 [
		i32 38, label %L.130
		i32 61, label %L.131
	]
L.130:
	store i8 34, i8* %tok
	%158 = load i16, i16* %i
	%159 = add i16 %158, 1
	store i16 %159, i16* %i
	br label %L.129
L.131:
	store i8 15, i8* %tok
	%160 = load i16, i16* %i
	%161 = add i16 %160, 1
	store i16 %161, i16* %i
	br label %L.129
L.128:
	store i8 27, i8* %tok
	br label %L.129
L.129:
	br label %L.14
L.30:
	%162 = load i8, i8* %c
	%163 = zext i8 %162 to i32
	switch i32 %163, label %L.132 [
		i32 124, label %L.134
		i32 61, label %L.135
	]
L.134:
	store i8 35, i8* %tok
	%164 = load i16, i16* %i
	%165 = add i16 %164, 1
	store i16 %165, i16* %i
	br label %L.133
L.135:
	store i8 13, i8* %tok
	%166 = load i16, i16* %i
	%167 = add i16 %166, 1
	store i16 %167, i16* %i
	br label %L.133
L.132:
	store i8 20, i8* %tok
	br label %L.133
L.133:
	br label %L.14
L.31:
	%168 = load i8, i8* %c
	%169 = zext i8 %168 to i32
	switch i32 %169, label %L.136 [
		i32 61, label %L.138
	]
L.138:
	store i8 14, i8* %tok
	%170 = load i16, i16* %i
	%171 = add i16 %170, 1
	store i16 %171, i16* %i
	br label %L.137
L.136:
	store i8 21, i8* %tok
	br label %L.137
L.137:
	br label %L.14
L.32:
	%172 = load i8, i8* %c
	%173 = zext i8 %172 to i32
	switch i32 %173, label %L.139 [
		i32 98, label %L.141
		i32 111, label %L.142
		i32 120, label %L.143
		i32 95, label %L.144
		i32 48, label %L.145
		i32 49, label %L.145
		i32 50, label %L.145
		i32 51, label %L.145
		i32 52, label %L.145
		i32 53, label %L.145
		i32 54, label %L.145
		i32 55, label %L.145
		i32 56, label %L.145
		i32 57, label %L.145
		i32 46, label %L.146
	]
L.141:
	store i8 16, i8* %state
	br label %L.140
L.142:
	store i8 17, i8* %state
	br label %L.140
L.143:
	store i8 18, i8* %state
	br label %L.140
L.144:
	store i8 19, i8* %state
	br label %L.140
L.145:
	%174 = load i8, i8* %c
	%175 = sub i8 %174, 48
	%176 = load i16, i16* %k
	%177 = zext i16 %176 to i32
	%178 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %177
	store i8 %175, i8* %178
	%179 = load i16, i16* %k
	%180 = add i16 %179, 1
	store i16 %180, i16* %k
	store i8 19, i8* %state
	br label %L.140
L.146:
	store i64 0, i64* @lex_Number
	store i8 20, i8* %state
	br label %L.140
L.139:
	store i64 0, i64* @lex_Number
	store i8 42, i8* %tok
	br label %L.140
L.140:
	br label %L.14
L.33:
	%181 = load i8, i8* %c
	%182 = zext i8 %181 to i32
	switch i32 %182, label %L.147 [
		i32 48, label %L.149
		i32 49, label %L.149
		i32 95, label %L.150
	]
L.149:
	%183 = load i8, i8* %c
	%184 = sub i8 %183, 48
	%185 = load i16, i16* %k
	%186 = zext i16 %185 to i32
	%187 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %186
	store i8 %184, i8* %187
	%188 = load i16, i16* %k
	%189 = add i16 %188, 1
	store i16 %189, i16* %k
	br label %L.148
L.150:
	br label %L.148
L.147:
	%190 = load i16, i16* %k
	%191 = zext i16 %190 to i32
	call void @lex_MakeNum(i32 %191, i32 2)
	store i8 42, i8* %tok
	br label %L.148
L.148:
	br label %L.14
L.34:
	%192 = load i8, i8* %c
	%193 = zext i8 %192 to i32
	switch i32 %193, label %L.151 [
		i32 48, label %L.153
		i32 49, label %L.153
		i32 50, label %L.153
		i32 51, label %L.153
		i32 52, label %L.153
		i32 53, label %L.153
		i32 54, label %L.153
		i32 55, label %L.153
		i32 95, label %L.154
	]
L.153:
	%194 = load i8, i8* %c
	%195 = sub i8 %194, 48
	%196 = load i16, i16* %k
	%197 = zext i16 %196 to i32
	%198 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %197
	store i8 %195, i8* %198
	%199 = load i16, i16* %k
	%200 = add i16 %199, 1
	store i16 %200, i16* %k
	br label %L.152
L.154:
	br label %L.152
L.151:
	%201 = load i16, i16* %k
	%202 = zext i16 %201 to i32
	call void @lex_MakeNum(i32 %202, i32 8)
	store i8 42, i8* %tok
	br label %L.152
L.152:
	br label %L.14
L.35:
	%203 = load i8, i8* %c
	%204 = zext i8 %203 to i32
	switch i32 %204, label %L.155 [
		i32 48, label %L.157
		i32 49, label %L.157
		i32 50, label %L.157
		i32 51, label %L.157
		i32 52, label %L.157
		i32 53, label %L.157
		i32 54, label %L.157
		i32 55, label %L.157
		i32 56, label %L.157
		i32 57, label %L.157
		i32 65, label %L.158
		i32 66, label %L.158
		i32 67, label %L.158
		i32 68, label %L.158
		i32 69, label %L.158
		i32 70, label %L.158
		i32 97, label %L.159
		i32 98, label %L.159
		i32 99, label %L.159
		i32 100, label %L.159
		i32 101, label %L.159
		i32 102, label %L.159
		i32 95, label %L.160
	]
L.157:
	%205 = load i8, i8* %c
	%206 = sub i8 %205, 48
	%207 = load i16, i16* %k
	%208 = zext i16 %207 to i32
	%209 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %208
	store i8 %206, i8* %209
	%210 = load i16, i16* %k
	%211 = add i16 %210, 1
	store i16 %211, i16* %k
	br label %L.156
L.158:
	%212 = load i8, i8* %c
	%213 = sub i8 %212, 65
	%214 = add i8 %213, 10
	%215 = load i16, i16* %k
	%216 = zext i16 %215 to i32
	%217 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %216
	store i8 %214, i8* %217
	%218 = load i16, i16* %k
	%219 = add i16 %218, 1
	store i16 %219, i16* %k
	br label %L.156
L.159:
	%220 = load i8, i8* %c
	%221 = sub i8 %220, 97
	%222 = add i8 %221, 10
	%223 = load i16, i16* %k
	%224 = zext i16 %223 to i32
	%225 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %224
	store i8 %222, i8* %225
	%226 = load i16, i16* %k
	%227 = add i16 %226, 1
	store i16 %227, i16* %k
	br label %L.156
L.160:
	br label %L.156
L.155:
	%228 = load i16, i16* %k
	%229 = zext i16 %228 to i32
	call void @lex_MakeNum(i32 %229, i32 16)
	store i8 42, i8* %tok
	br label %L.156
L.156:
	br label %L.14
L.36:
	%230 = load i8, i8* %c
	%231 = zext i8 %230 to i32
	switch i32 %231, label %L.161 [
		i32 48, label %L.163
		i32 49, label %L.163
		i32 50, label %L.163
		i32 51, label %L.163
		i32 52, label %L.163
		i32 53, label %L.163
		i32 54, label %L.163
		i32 55, label %L.163
		i32 56, label %L.163
		i32 57, label %L.163
		i32 95, label %L.164
		i32 46, label %L.165
	]
L.163:
	%232 = load i8, i8* %c
	%233 = sub i8 %232, 48
	%234 = load i16, i16* %k
	%235 = zext i16 %234 to i32
	%236 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %235
	store i8 %233, i8* %236
	%237 = load i16, i16* %k
	%238 = add i16 %237, 1
	store i16 %238, i16* %k
	br label %L.162
L.164:
	br label %L.162
L.165:
	%239 = load i16, i16* %k
	%240 = zext i16 %239 to i32
	call void @lex_MakeNum(i32 %240, i32 10)
	store i16 0, i16* %k
	store i8 20, i8* %state
	br label %L.162
L.161:
	%241 = load i16, i16* %k
	%242 = zext i16 %241 to i32
	call void @lex_MakeNum(i32 %242, i32 10)
	store i8 42, i8* %tok
	br label %L.162
L.162:
	br label %L.14
L.37:
	%243 = load i8, i8* %c
	%244 = zext i8 %243 to i32
	switch i32 %244, label %L.166 [
		i32 46, label %L.168
		i32 48, label %L.169
		i32 49, label %L.169
		i32 50, label %L.169
		i32 51, label %L.169
		i32 52, label %L.169
		i32 53, label %L.169
		i32 54, label %L.169
		i32 55, label %L.169
		i32 56, label %L.169
		i32 57, label %L.169
		i32 95, label %L.170
		i32 101, label %L.171
		i32 69, label %L.171
	]
L.168:
	store i8 5, i8* @lex_saves
	store i8 42, i8* %tok
	br label %L.167
L.169:
	%245 = load i8, i8* %c
	%246 = sub i8 %245, 48
	%247 = load i16, i16* %k
	%248 = zext i16 %247 to i32
	%249 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %248
	store i8 %246, i8* %249
	%250 = load i16, i16* %k
	%251 = add i16 %250, 1
	store i16 %251, i16* %k
	store i8 21, i8* %state
	br label %L.167
L.170:
	br label %L.167
L.171:
	store i8 22, i8* %state
	br label %L.167
L.166:
	store i16 0, i16* @lex_StringLen
	store i8 43, i8* %tok
	br label %L.167
L.167:
	br label %L.14
L.38:
	%252 = load i8, i8* %c
	%253 = zext i8 %252 to i32
	switch i32 %253, label %L.172 [
		i32 48, label %L.174
		i32 49, label %L.174
		i32 50, label %L.174
		i32 51, label %L.174
		i32 52, label %L.174
		i32 53, label %L.174
		i32 54, label %L.174
		i32 55, label %L.174
		i32 56, label %L.174
		i32 57, label %L.174
		i32 95, label %L.175
		i32 101, label %L.176
		i32 69, label %L.176
	]
L.174:
	%254 = load i8, i8* %c
	%255 = sub i8 %254, 48
	%256 = load i16, i16* %k
	%257 = zext i16 %256 to i32
	%258 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %257
	store i8 %255, i8* %258
	%259 = load i16, i16* %k
	%260 = add i16 %259, 1
	store i16 %260, i16* %k
	br label %L.173
L.175:
	br label %L.173
L.176:
	%261 = load i16, i16* %k
	store i16 %261, i16* @lex_StringLen
	store i8 22, i8* %state
	br label %L.173
L.172:
	%262 = load i16, i16* %k
	store i16 %262, i16* @lex_StringLen
	store i8 43, i8* %tok
	br label %L.173
L.173:
	br label %L.14
L.39:
	%263 = load i8, i8* %c
	%264 = zext i8 %263 to i32
	switch i32 %264, label %L.177 [
		i32 45, label %L.179
		i32 43, label %L.180
		i32 48, label %L.181
		i32 49, label %L.181
		i32 50, label %L.181
		i32 51, label %L.181
		i32 52, label %L.181
		i32 53, label %L.181
		i32 54, label %L.181
		i32 55, label %L.181
		i32 56, label %L.181
		i32 57, label %L.181
	]
L.179:
	store i32 0, i32* %h
	store i8 1, i8* %neg
	store i8 23, i8* %state
	br label %L.178
L.180:
	store i32 0, i32* %h
	store i8 0, i8* %neg
	store i8 23, i8* %state
	br label %L.178
L.181:
	%265 = load i8, i8* %c
	%266 = zext i8 %265 to i32
	%267 = sub i32 %266, 48
	store i32 %267, i32* %h
	store i8 0, i8* %neg
	store i8 23, i8* %state
	br label %L.178
L.177:
	store i8 0, i8* %state
	br label %L.178
L.178:
	br label %L.14
L.40:
	%268 = load i8, i8* %c
	%269 = zext i8 %268 to i32
	switch i32 %269, label %L.182 [
		i32 48, label %L.184
		i32 49, label %L.184
		i32 50, label %L.184
		i32 51, label %L.184
		i32 52, label %L.184
		i32 53, label %L.184
		i32 54, label %L.184
		i32 55, label %L.184
		i32 56, label %L.184
		i32 57, label %L.184
	]
L.184:
	%270 = load i32, i32* %h
	%271 = mul i32 %270, 10
	%272 = load i8, i8* %c
	%273 = zext i8 %272 to i32
	%274 = sub i32 %273, 48
	%275 = add i32 %271, %274
	store i32 %275, i32* %h
	br label %L.183
L.182:
	%exp = alloca i32
	%276 = load i32, i32* %h
	store i32 %276, i32* %exp
	%277 = load i8, i8* %neg
	%278 = icmp ne i8 %277, 0
	br i1 %278, label %L.186, label %L.185
L.186:
	%279 = load i32, i32* %exp
	%280 = sub i32 0, %279
	store i32 %280, i32* %exp
	br label %L.185
L.185:
	%281 = load i32, i32* %exp
	%282 = trunc i32 %281 to i16
	store i16 %282, i16* @lex_Scale
	store i8 44, i8* %tok
	br label %L.183
L.183:
	br label %L.14
L.41:
	store i8 0, i8* %str
	%283 = load i8, i8* %c
	%284 = zext i8 %283 to i32
	switch i32 %284, label %L.187 [
		i32 39, label %L.189
		i32 10, label %L.190
		i32 92, label %L.191
	]
L.189:
	%285 = load i16, i16* %k
	%286 = icmp eq i16 %285, 0
	br i1 %286, label %L.193, label %L.194
L.193:
	call void @lex_Error(i8 15)
	store i8 0, i8* %state
	br label %L.192
L.194:
	%287 = load i16, i16* %k
	%288 = icmp eq i16 %287, 1
	br i1 %288, label %L.196, label %L.197
L.196:
	%289 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 0
	%290 = load i8, i8* %289
	%291 = zext i8 %290 to i64
	store i64 %291, i64* @lex_Number
	store i8 42, i8* %tok
	%292 = load i16, i16* %i
	%293 = add i16 %292, 1
	store i16 %293, i16* %i
	br label %L.195
L.197:
	%294 = load i16, i16* %k
	store i16 %294, i16* @lex_StringLen
	store i8 0, i8* @lex_StringNul
	store i8 45, i8* %tok
	%295 = load i16, i16* %i
	%296 = add i16 %295, 1
	store i16 %296, i16* %i
	br label %L.195
L.195:
	br label %L.192
L.192:
	br label %L.188
L.190:
	call void @lex_Error(i8 10)
	store i8 0, i8* %state
	br label %L.188
L.191:
	store i8 30, i8* %state
	br label %L.188
L.187:
	%297 = load i16, i16* %k
	%298 = icmp ult i16 %297, 4095
	br i1 %298, label %L.199, label %L.200
L.199:
	%299 = load i8, i8* %c
	%300 = load i16, i16* %k
	%301 = zext i16 %300 to i32
	%302 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %301
	store i8 %299, i8* %302
	%303 = load i16, i16* %k
	%304 = add i16 %303, 1
	store i16 %304, i16* %k
	br label %L.198
L.200:
	call void @lex_Error(i8 19)
	br label %L.198
L.198:
	br label %L.188
L.188:
	br label %L.14
L.42:
	store i8 1, i8* %str
	%305 = load i8, i8* %c
	%306 = zext i8 %305 to i32
	switch i32 %306, label %L.201 [
		i32 34, label %L.203
		i32 10, label %L.204
		i32 92, label %L.205
	]
L.203:
	%307 = load i16, i16* %k
	%308 = zext i16 %307 to i32
	%309 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %308
	store i8 0, i8* %309
	%310 = load i16, i16* %k
	%311 = add i16 %310, 1
	store i16 %311, i16* @lex_StringLen
	store i8 1, i8* @lex_StringNul
	store i8 45, i8* %tok
	%312 = load i16, i16* %i
	%313 = add i16 %312, 1
	store i16 %313, i16* %i
	br label %L.202
L.204:
	call void @lex_Error(i8 10)
	store i8 0, i8* %state
	br label %L.202
L.205:
	store i8 30, i8* %state
	br label %L.202
L.201:
	%314 = load i16, i16* %k
	%315 = icmp ult i16 %314, 4095
	br i1 %315, label %L.207, label %L.208
L.207:
	%316 = load i8, i8* %c
	%317 = load i16, i16* %k
	%318 = zext i16 %317 to i32
	%319 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %318
	store i8 %316, i8* %319
	%320 = load i16, i16* %k
	%321 = add i16 %320, 1
	store i16 %321, i16* %k
	br label %L.206
L.208:
	call void @lex_Error(i8 19)
	br label %L.206
L.206:
	br label %L.202
L.202:
	br label %L.14
L.43:
	%322 = load i8, i8* %c
	%323 = zext i8 %322 to i32
	switch i32 %323, label %L.209 [
		i32 10, label %L.211
		i32 120, label %L.212
		i32 117, label %L.213
		i32 85, label %L.214
	]
L.211:
	call void @lex_Error(i8 10)
	store i8 0, i8* %state
	br label %L.210
L.212:
	store i32 0, i32* %h
	store i8 31, i8* %state
	br label %L.210
L.213:
	store i32 0, i32* %h
	store i8 33, i8* %state
	br label %L.210
L.214:
	store i32 0, i32* %h
	store i8 37, i8* %state
	br label %L.210
L.209:
	%324 = load i16, i16* %k
	%325 = icmp ult i16 %324, 4095
	br i1 %325, label %L.216, label %L.217
L.216:
	%326 = load i8, i8* %c
	%327 = call i8 @lex_EscChar(i8 %326)
	%328 = load i16, i16* %k
	%329 = zext i16 %328 to i32
	%330 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %329
	store i8 %327, i8* %330
	%331 = load i16, i16* %k
	%332 = add i16 %331, 1
	store i16 %332, i16* %k
	br label %L.215
L.217:
	call void @lex_Error(i8 19)
	br label %L.215
L.215:
	%333 = load i8, i8* %str
	%334 = icmp ne i8 %333, 0
	br i1 %334, label %L.219, label %L.220
L.219:
	store i8 29, i8* %state
	br label %L.218
L.220:
	store i8 28, i8* %state
	br label %L.218
L.218:
	br label %L.210
L.210:
	br label %L.14
L.44:
	%335 = load i8, i8* %c
	%336 = zext i8 %335 to i32
	switch i32 %336, label %L.221 [
		i32 10, label %L.223
	]
L.223:
	call void @lex_Error(i8 10)
	store i8 0, i8* %state
	br label %L.222
L.221:
	%337 = load i8, i8* %c
	%338 = load i32, i32* %h
	%339 = call i32 @lex_EscHex(i8 %337, i32 %338)
	store i32 %339, i32* %h
	%340 = load i8, i8* %state
	%341 = add i8 %340, 1
	store i8 %341, i8* %state
	br label %L.222
L.222:
	br label %L.14
L.45:
	%342 = load i8, i8* %c
	%343 = zext i8 %342 to i32
	switch i32 %343, label %L.224 [
		i32 10, label %L.226
	]
L.226:
	call void @lex_Error(i8 10)
	store i8 0, i8* %state
	br label %L.225
L.224:
	%344 = load i8, i8* %c
	%345 = load i32, i32* %h
	%346 = call i32 @lex_EscHex(i8 %344, i32 %345)
	store i32 %346, i32* %h
	%347 = load i16, i16* %k
	%348 = icmp ult i16 %347, 4095
	br i1 %348, label %L.228, label %L.229
L.228:
	%349 = load i32, i32* %h
	%350 = trunc i32 %349 to i8
	%351 = load i16, i16* %k
	%352 = zext i16 %351 to i32
	%353 = getelementptr [4096 x i8], [4096 x i8]* @lex_StringBuf, i32 0, i32 %352
	store i8 %350, i8* %353
	%354 = load i16, i16* %k
	%355 = add i16 %354, 1
	store i16 %355, i16* %k
	br label %L.227
L.229:
	call void @lex_Error(i8 19)
	br label %L.227
L.227:
	%356 = load i8, i8* %str
	%357 = icmp ne i8 %356, 0
	br i1 %357, label %L.231, label %L.232
L.231:
	store i8 29, i8* %state
	br label %L.230
L.232:
	store i8 28, i8* %state
	br label %L.230
L.230:
	br label %L.225
L.225:
	br label %L.14
L.46:
	%358 = load i8, i8* %c
	%359 = zext i8 %358 to i32
	switch i32 %359, label %L.233 [
		i32 10, label %L.235
	]
L.235:
	call void @lex_Error(i8 10)
	store i8 0, i8* %state
	br label %L.234
L.233:
	%360 = load i8, i8* %c
	%361 = load i32, i32* %h
	%362 = call i32 @lex_EscHex(i8 %360, i32 %361)
	store i32 %362, i32* %h
	%363 = load i32, i32* %h
	%364 = load i16, i16* %k
	%365 = zext i16 %364 to i32
	%366 = call i32 @lex_EscUTF8(i32 %363, i32 %365)
	%367 = trunc i32 %366 to i16
	store i16 %367, i16* %k
	%368 = load i8, i8* %str
	%369 = icmp ne i8 %368, 0
	br i1 %369, label %L.237, label %L.238
L.237:
	store i8 29, i8* %state
	br label %L.236
L.238:
	store i8 28, i8* %state
	br label %L.236
L.236:
	br label %L.234
L.234:
	br label %L.14
L.13:
	br label %L.14
L.14:
	%370 = load i8, i8* %tok
	%371 = icmp ne i8 %370, 0
	br i1 %371, label %L.4, label %L.239
L.239:
	%372 = load i8, i8* %c
	%373 = icmp eq i8 %372, 10
	br i1 %373, label %L.241, label %L.240
L.241:
	%374 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%375 = getelementptr %lex_FileContext, %lex_FileContext* %374, i32 0, i32 4
	%376 = load i16, i16* %375
	%377 = add i16 %376, 1
	store i16 %377, i16* %375
	br label %L.240
L.240:
	%378 = load i16, i16* %i
	%379 = add i16 %378, 1
	store i16 %379, i16* %i
	br label %L.3
L.4:
	%380 = load i16, i16* %i
	%381 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%382 = getelementptr %lex_FileContext, %lex_FileContext* %381, i32 0, i32 5
	store i16 %380, i16* %382
	%383 = load i8, i8* %tok
	store i8 %383, i8* @lex_Token
	%384 = load i8, i8* %tok
	store i8 %384, i8* %rv.0
	br label %return
return:
	%385 = load i8, i8* %rv.0
	ret i8 %385
}
define internal zeroext i8 @lex_Keyword([0 x i8]* %toklist$) nounwind {
L.0:
	%rv.0 = alloca i8
	%toklist = alloca [0 x i8]*
	store [0 x i8]* %toklist$, [0 x i8]** %toklist
	%tok = alloca i8
	%i = alloca i32
	%0 = load i8, i8* @lex_Token
	%1 = icmp eq i8 %0, 46
	br i1 %1, label %L.2, label %L.1
L.2:
	store i32 0, i32* %i
	br label %L.3
L.3:
	%2 = load [0 x i8]*, [0 x i8]** %toklist
	%3 = load i32, i32* %i
	%4 = getelementptr [0 x i8], [0 x i8]* %2, i32 0, i32 %3
	%5 = load i8, i8* %4
	store i8 %5, i8* %tok
	%6 = load i8, i8* %tok
	%7 = icmp eq i8 %6, 0
	br i1 %7, label %L.4, label %L.5
L.5:
	%8 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%9 = load i8, i8* %tok
	%10 = zext i8 %9 to i32
	%11 = getelementptr [101 x [0 x i8]*], [101 x [0 x i8]*]* @lex_keywords, i32 0, i32 %10
	%12 = load [0 x i8]*, [0 x i8]** %11
	%13 = getelementptr [0 x i8], [0 x i8]* %12
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = call i8 @zstr_eq([0 x i8]* %8, [0 x i8]* %14, i32 255)
	%16 = icmp ne i8 %15, 0
	br i1 %16, label %L.7, label %L.6
L.7:
	%17 = load i8, i8* %tok
	store i8 %17, i8* %rv.0
	br label %return
L.6:
	%18 = load i32, i32* %i
	%19 = add i32 %18, 1
	store i32 %19, i32* %i
	br label %L.3
L.4:
	br label %L.1
L.1:
	%20 = load i8, i8* @lex_Token
	store i8 %20, i8* %rv.0
	br label %return
return:
	%21 = load i8, i8* %rv.0
	ret i8 %21
}
define internal zeroext i8 @lex_Expect(i8 zeroext %expect$) nounwind {
L.0:
	%rv.0 = alloca i8
	%expect = alloca i8
	store i8 %expect$, i8* %expect
	%tok = alloca i8
	%toklist = alloca [2 x i8]
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %expect
	%2 = icmp ugt i8 %1, 46
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load i8, i8* %expect
	%4 = getelementptr [2 x i8], [2 x i8]* %toklist, i32 0, i32 0
	store i8 %3, i8* %4
	%5 = getelementptr [2 x i8], [2 x i8]* %toklist, i32 0, i32 1
	store i8 0, i8* %5
	%6 = bitcast [2 x i8]* %toklist to [0 x i8]*
	%7 = call i8 @lex_Keyword([0 x i8]* %6)
	store i8 %7, i8* %tok
	br label %L.1
L.1:
	%8 = load i8, i8* %tok
	%9 = load i8, i8* %expect
	%10 = icmp eq i8 %8, %9
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	br label %L.3
L.5:
	%12 = load i8, i8* %expect
	call void @lex_ErrorT(i8 20, i8 %12)
	br label %L.3
L.3:
	%13 = load i8, i8* %tok
	store i8 %13, i8* %rv.0
	br label %return
return:
	%14 = load i8, i8* %rv.0
	ret i8 %14
}
@S.216 = private unnamed_addr constant [7 x i8] c" line=\00"
@S.217 = private unnamed_addr constant [6 x i8] c" tok=\00"
@S.218 = private unnamed_addr constant [3 x i8] c" \22\00"
define internal void @lex_WhereAmI([0 x i8]* %msg$) nounwind {
L.0:
	%msg = alloca [0 x i8]*
	store [0 x i8]* %msg$, [0 x i8]** %msg
	%0 = load [0 x i8]*, [0 x i8]** %msg
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %1)
	%2 = getelementptr [7 x i8], [7 x i8]* @S.216
	%3 = bitcast [7 x i8]* %2 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %3)
	%4 = call i16 @lex_Lineno()
	%5 = zext i16 %4 to i32
	call void @sys_fildes_uint(i32 2, i32 %5)
	%6 = getelementptr [6 x i8], [6 x i8]* @S.217
	%7 = bitcast [6 x i8]* %6 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %7)
	%8 = load i8, i8* @lex_Token
	%9 = zext i8 %8 to i32
	%10 = getelementptr [101 x [0 x i8]*], [101 x [0 x i8]*]* @lex_keywords, i32 0, i32 %9
	%11 = load [0 x i8]*, [0 x i8]** %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %12)
	%13 = load i8, i8* @lex_Token
	%14 = icmp eq i8 %13, 46
	br i1 %14, label %L.2, label %L.1
L.2:
	%15 = getelementptr [3 x i8], [3 x i8]* @S.218
	%16 = bitcast [3 x i8]* %15 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %16)
	%17 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %17)
	call void @sys_fildes_chr(i32 2, i8 34)
	br label %L.1
L.1:
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
@lex_plist = internal constant [2 x i8] [ i8 37, i8 0 ], align 1
@lex_alist = internal constant [2 x i8] [ i8 39, i8 0 ], align 1
@lex_glist = internal constant [2 x i8] [ i8 41, i8 0 ], align 1
define internal zeroext i8 @lex_Skip([0 x i8]* %toklist$) nounwind {
L.0:
	%rv.0 = alloca i8
	%toklist = alloca [0 x i8]*
	store [0 x i8]* %toklist$, [0 x i8]** %toklist
	%tok = alloca i8
	%ttok = alloca i8
	%i = alloca i32
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	store i8 1, i8* %ttok
	br label %L.1
L.1:
	%1 = load i8, i8* %tok
	%2 = icmp ne i8 %1, 1
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	store i32 0, i32* %i
	br label %L.4
L.4:
	%4 = load [0 x i8]*, [0 x i8]** %toklist
	%5 = load i32, i32* %i
	%6 = getelementptr [0 x i8], [0 x i8]* %4, i32 0, i32 %5
	%7 = load i8, i8* %6
	store i8 %7, i8* %ttok
	%8 = load i8, i8* %ttok
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %L.8, label %L.7
L.7:
	%10 = load i8, i8* %tok
	%11 = load i8, i8* %ttok
	%12 = icmp eq i8 %10, %11
	br label %L.8
L.8:
	%13 = phi i1 [ true, %L.4 ], [ %12, %L.7 ]
	br i1 %13, label %L.5, label %L.6
L.6:
	%14 = load i8, i8* %ttok
	%15 = icmp ugt i8 %14, 46
	br i1 %15, label %L.10, label %L.11
L.10:
	%16 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%17 = load i8, i8* %ttok
	%18 = zext i8 %17 to i32
	%19 = getelementptr [101 x [0 x i8]*], [101 x [0 x i8]*]* @lex_keywords, i32 0, i32 %18
	%20 = load [0 x i8]*, [0 x i8]** %19
	%21 = getelementptr [0 x i8], [0 x i8]* %20
	%22 = bitcast [0 x i8]* %21 to [0 x i8]*
	%23 = call i8 @zstr_eq([0 x i8]* %16, [0 x i8]* %22, i32 255)
	%24 = icmp ne i8 %23, 0
	br label %L.11
L.11:
	%25 = phi i1 [ false, %L.6 ], [ %24, %L.10 ]
	br i1 %25, label %L.5, label %L.9
L.9:
	%26 = load i32, i32* %i
	%27 = add i32 %26, 1
	store i32 %27, i32* %i
	br label %L.4
L.5:
	%28 = load i8, i8* %ttok
	%29 = icmp ne i8 %28, 0
	br i1 %29, label %L.2, label %L.12
L.12:
	%30 = load i8, i8* %tok
	%31 = zext i8 %30 to i32
	switch i32 %31, label %L.13 [
		i32 36, label %L.15
		i32 38, label %L.16
		i32 40, label %L.17
	]
L.15:
	%32 = bitcast [2 x i8]* @lex_plist to [0 x i8]*
	%33 = call i8 @lex_Skip([0 x i8]* %32)
	store i8 %33, i8* %tok
	br label %L.14
L.16:
	%34 = bitcast [2 x i8]* @lex_alist to [0 x i8]*
	%35 = call i8 @lex_Skip([0 x i8]* %34)
	store i8 %35, i8* %tok
	br label %L.14
L.17:
	%36 = bitcast [2 x i8]* @lex_glist to [0 x i8]*
	%37 = call i8 @lex_Skip([0 x i8]* %36)
	store i8 %37, i8* %tok
	br label %L.14
L.13:
	br label %L.14
L.14:
	%38 = call i8 @lex_Next()
	store i8 %38, i8* %tok
	br label %L.1
L.2:
	%39 = load i8, i8* %ttok
	store i8 %39, i8* %rv.0
	br label %return
return:
	%40 = load i8, i8* %rv.0
	ret i8 %40
}
define internal zeroext i8 @lex_Want([0 x i8]* %toklist$) nounwind {
L.0:
	%rv.0 = alloca i8
	%toklist = alloca [0 x i8]*
	store [0 x i8]* %toklist$, [0 x i8]** %toklist
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = load [0 x i8]*, [0 x i8]** %toklist
	%3 = getelementptr [0 x i8], [0 x i8]* %2, i32 0, i32 0
	%4 = load i8, i8* %3
	%5 = icmp ne i8 %1, %4
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load [0 x i8]*, [0 x i8]** %toklist
	%7 = getelementptr [0 x i8], [0 x i8]* %6, i32 0, i32 0
	%8 = load i8, i8* %7
	call void @lex_ErrorT(i8 20, i8 %8)
	%9 = load [0 x i8]*, [0 x i8]** %toklist
	%10 = call i8 @lex_Skip([0 x i8]* %9)
	store i8 %10, i8* %tok
	br label %L.1
L.1:
	%11 = load i8, i8* %tok
	store i8 %11, i8* %rv.0
	br label %return
return:
	%12 = load i8, i8* %rv.0
	ret i8 %12
}
%ast_AstNode = type {i8, i8, i16, i16, i16, i16, i16, i32, %type_TypeNode*, %symb_SymbNode*, i64, [0 x %ast_AstNode*]}
%symb_SymbNode = type {%symb_SymbNode*, %type_TypeNode*, %symb_SymbNode*, %symb_SymbNode*, %symb_SymbNode*, %symb_SymbNode*, %symb_SymbNode*, %symb_SymbNode*, i64, %ast_AstNode*, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [0 x i8]}
%type_IoT = type i8
%type_TypeNode = type {%type_TypeNode*, %type_TypeNode*, %type_TypeNode*, %symb_SymbNode*, %symb_SymbNode*, %symb_SymbNode*, %type_TypeNode*, [4 x i8], i64, i64, i32, i32, i32, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8}
@type_unkntype = internal global %type_TypeNode* zeroinitializer, align 4
@type_booltype = internal global %type_TypeNode* zeroinitializer, align 4
@type_bytetype = internal global %type_TypeNode* zeroinitializer, align 4
@type_wordtype = internal global %type_TypeNode* zeroinitializer, align 4
@type_swordtype = internal global %type_TypeNode* zeroinitializer, align 4
@type_floattype = internal global %type_TypeNode* zeroinitializer, align 4
@type_uintptrtype = internal global %type_TypeNode* zeroinitializer, align 4
@type_memtype = internal global %type_TypeNode* zeroinitializer, align 4
@type_addrtype = internal global %type_TypeNode* zeroinitializer, align 4
@type_NINTS = internal constant i32 6, align 4
@type_uinttypes = internal global [6 x %type_TypeNode*] zeroinitializer, align 4
@type_inttypes = internal global [6 x %type_TypeNode*] zeroinitializer, align 4
@type_NFLOATS = internal constant i32 2, align 4
@type_floattypes = internal global [2 x %type_TypeNode*] zeroinitializer, align 4
define internal i32 @type_TypeNode_Span(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i32
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 28
	%2 = load i8, i8* %1
	%3 = icmp ne i8 %2, 0
	br i1 %3, label %L.2, label %L.3
L.2:
	store i32 0, i32* %rv.0
	br label %return
L.3:
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 9
	%6 = load i64, i64* %5
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 8
	%9 = load i64, i64* %8
	%10 = sub i64 %6, %9
	%11 = add i64 %10, 1
	%12 = trunc i64 %11 to i32
	store i32 %12, i32* %rv.0
	br label %return
L.1:
	br label %return
return:
	%13 = load i32, i32* %rv.0
	ret i32 %13
}
@target_ByteSize = internal constant i32 8, align 4
@target_TargetsMax = internal constant i32 31, align 4
@target_DefaultTarget = internal constant [4 x i8] c"x86\00", align 1
@target_TargetName = internal global [0 x i8]* zeroinitializer, align 4
@target_Triple = internal global [0 x i8]* zeroinitializer, align 4
%target_SizeAlign = type {i8, i8}
%target_ModelT = type {i8, i8, i8, i8, i8, %target_SizeAlign, [6 x %target_SizeAlign]}
@target_Model32LEU = internal constant %target_ModelT { i8 2, i8 2, i8 32, i8 0, i8 4, %target_SizeAlign { i8 32, i8 32 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 32 }, %target_SizeAlign { i8 64, i8 32 }, %target_SizeAlign { i8 0, i8 0 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
@target_Model32LEA = internal constant %target_ModelT { i8 2, i8 2, i8 32, i8 1, i8 4, %target_SizeAlign { i8 32, i8 32 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 32 }, %target_SizeAlign { i8 64, i8 32 }, %target_SizeAlign { i8 0, i8 0 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
@target_Model32LEF = internal constant %target_ModelT { i8 2, i8 2, i8 32, i8 1, i8 4, %target_SizeAlign { i8 32, i8 32 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 32 }, %target_SizeAlign { i8 64, i8 64 }, %target_SizeAlign { i8 0, i8 0 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
@target_Model64LEU = internal constant %target_ModelT { i8 2, i8 2, i8 64, i8 0, i8 5, %target_SizeAlign { i8 64, i8 64 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 32 }, %target_SizeAlign { i8 64, i8 64 }, %target_SizeAlign { i8 128, i8 64 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
@target_Model32BEA = internal constant %target_ModelT { i8 1, i8 1, i8 32, i8 1, i8 4, %target_SizeAlign { i8 32, i8 32 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 32 }, %target_SizeAlign { i8 64, i8 32 }, %target_SizeAlign { i8 0, i8 0 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
@target_Model64BEA = internal constant %target_ModelT { i8 1, i8 1, i8 64, i8 1, i8 5, %target_SizeAlign { i8 64, i8 64 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 32 }, %target_SizeAlign { i8 64, i8 64 }, %target_SizeAlign { i8 128, i8 128 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
@target_Model16LEA = internal constant %target_ModelT { i8 2, i8 2, i8 16, i8 1, i8 3, %target_SizeAlign { i8 16, i8 16 }, [6 x %target_SizeAlign] [ %target_SizeAlign { i8 8, i8 8 }, %target_SizeAlign { i8 16, i8 16 }, %target_SizeAlign { i8 32, i8 16 }, %target_SizeAlign { i8 0, i8 0 }, %target_SizeAlign { i8 0, i8 0 }, %target_SizeAlign { i8 0, i8 0 } ] }, align 1
%target_TargetT = type {[0 x i8]*, [0 x i8]*, %target_ModelT*}
@S.288 = private unnamed_addr constant [4 x i8] c"x86\00"
@S.289 = private unnamed_addr constant [23 x i8] c"i386-unknown-linux-gnu\00"
@S.291 = private unnamed_addr constant [5 x i8] c"i386\00"
@S.292 = private unnamed_addr constant [23 x i8] c"i386-unknown-linux-gnu\00"
@S.294 = private unnamed_addr constant [5 x i8] c"i486\00"
@S.295 = private unnamed_addr constant [23 x i8] c"i486-unknown-linux-gnu\00"
@S.297 = private unnamed_addr constant [5 x i8] c"i586\00"
@S.298 = private unnamed_addr constant [23 x i8] c"i586-unknown-linux-gnu\00"
@S.300 = private unnamed_addr constant [5 x i8] c"i686\00"
@S.301 = private unnamed_addr constant [23 x i8] c"i686-unknown-linux-gnu\00"
@S.303 = private unnamed_addr constant [7 x i8] c"x86-64\00"
@S.304 = private unnamed_addr constant [25 x i8] c"x86_64-unknown-linux-gnu\00"
@S.306 = private unnamed_addr constant [7 x i8] c"x86_64\00"
@S.307 = private unnamed_addr constant [25 x i8] c"x86_64-unknown-linux-gnu\00"
@S.309 = private unnamed_addr constant [14 x i8] c"x86_64-darwin\00"
@S.310 = private unnamed_addr constant [22 x i8] c"x86_64-apple-darwin10\00"
@S.312 = private unnamed_addr constant [10 x i8] c"cortex-m0\00"
@S.313 = private unnamed_addr constant [25 x i8] c"thumbv6m-unknown-unknown\00"
@S.315 = private unnamed_addr constant [10 x i8] c"cortex-m3\00"
@S.316 = private unnamed_addr constant [25 x i8] c"thumbv7m-unknown-unknown\00"
@S.318 = private unnamed_addr constant [16 x i8] c"cortex-m3-align\00"
@S.319 = private unnamed_addr constant [25 x i8] c"thumbv7m-unknown-unknown\00"
@S.321 = private unnamed_addr constant [10 x i8] c"cortex-m4\00"
@S.322 = private unnamed_addr constant [25 x i8] c"thumbv7m-unknown-unknown\00"
@S.324 = private unnamed_addr constant [7 x i8] c"armv7l\00"
@S.325 = private unnamed_addr constant [28 x i8] c"arm-unknown-linux-gnueabihf\00"
@S.327 = private unnamed_addr constant [8 x i8] c"arm920t\00"
@S.328 = private unnamed_addr constant [22 x i8] c"thumb-unknown-unknown\00"
@S.330 = private unnamed_addr constant [5 x i8] c"mips\00"
@S.331 = private unnamed_addr constant [21 x i8] c"mips-unknown-unknown\00"
@S.333 = private unnamed_addr constant [7 x i8] c"mipsle\00"
@S.334 = private unnamed_addr constant [21 x i8] c"mips-unknown-unknown\00"
@S.336 = private unnamed_addr constant [6 x i8] c"xcore\00"
@S.337 = private unnamed_addr constant [22 x i8] c"xcore-unknown-unknown\00"
@S.339 = private unnamed_addr constant [5 x i8] c"bfin\00"
@S.340 = private unnamed_addr constant [21 x i8] c"bfin-unknown-unknown\00"
@S.342 = private unnamed_addr constant [6 x i8] c"ppc32\00"
@S.343 = private unnamed_addr constant [20 x i8] c"ppc32-unknown-linux\00"
@S.345 = private unnamed_addr constant [6 x i8] c"ppc64\00"
@S.346 = private unnamed_addr constant [20 x i8] c"ppc64-unknown-linux\00"
@S.348 = private unnamed_addr constant [6 x i8] c"s390x\00"
@S.349 = private unnamed_addr constant [22 x i8] c"systemz-unknown-linux\00"
@S.351 = private unnamed_addr constant [8 x i8] c"systemz\00"
@S.352 = private unnamed_addr constant [22 x i8] c"systemz-unknown-linux\00"
@S.354 = private unnamed_addr constant [8 x i8] c"aarch64\00"
@S.355 = private unnamed_addr constant [22 x i8] c"aarch64-unknown-linux\00"
@S.357 = private unnamed_addr constant [6 x i8] c"riscv\00"
@S.358 = private unnamed_addr constant [20 x i8] c"riscv-unknown-linux\00"
@S.360 = private unnamed_addr constant [8 x i8] c"riscv64\00"
@S.361 = private unnamed_addr constant [22 x i8] c"riscv64-unknown-linux\00"
@S.363 = private unnamed_addr constant [7 x i8] c"msp430\00"
@S.364 = private unnamed_addr constant [23 x i8] c"msp430-generic-generic\00"
@target_Targets = internal constant [26 x %target_TargetT] [ %target_TargetT { [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.288 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.289 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.291 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.292 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.294 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.295 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.297 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.298 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.300 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.301 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.303 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.304 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64LEU )  }, %target_TargetT { [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.306 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.307 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64LEU )  }, %target_TargetT { [0 x i8]* bitcast( [14 x i8]* getelementptr( [14 x i8], [14 x i8]* @S.309 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.310 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64LEU )  }, %target_TargetT { [0 x i8]* bitcast( [10 x i8]* getelementptr( [10 x i8], [10 x i8]* @S.312 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.313 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [10 x i8]* getelementptr( [10 x i8], [10 x i8]* @S.315 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.316 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [16 x i8]* getelementptr( [16 x i8], [16 x i8]* @S.318 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.319 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEA )  }, %target_TargetT { [0 x i8]* bitcast( [10 x i8]* getelementptr( [10 x i8], [10 x i8]* @S.321 )  to [0 x i8]* ), [0 x i8]* bitcast( [25 x i8]* getelementptr( [25 x i8], [25 x i8]* @S.322 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.324 )  to [0 x i8]* ), [0 x i8]* bitcast( [28 x i8]* getelementptr( [28 x i8], [28 x i8]* @S.325 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEF )  }, %target_TargetT { [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.327 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.328 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEA )  }, %target_TargetT { [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.330 )  to [0 x i8]* ), [0 x i8]* bitcast( [21 x i8]* getelementptr( [21 x i8], [21 x i8]* @S.331 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32BEA )  }, %target_TargetT { [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.333 )  to [0 x i8]* ), [0 x i8]* bitcast( [21 x i8]* getelementptr( [21 x i8], [21 x i8]* @S.334 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEA )  }, %target_TargetT { [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.336 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.337 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEA )  }, %target_TargetT { [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.339 )  to [0 x i8]* ), [0 x i8]* bitcast( [21 x i8]* getelementptr( [21 x i8], [21 x i8]* @S.340 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEA )  }, %target_TargetT { [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.342 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.343 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32BEA )  }, %target_TargetT { [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.345 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.346 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64BEA )  }, %target_TargetT { [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.348 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.349 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64BEA )  }, %target_TargetT { [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.351 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.352 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64BEA )  }, %target_TargetT { [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.354 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.355 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64LEU )  }, %target_TargetT { [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.357 )  to [0 x i8]* ), [0 x i8]* bitcast( [20 x i8]* getelementptr( [20 x i8], [20 x i8]* @S.358 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model32LEU )  }, %target_TargetT { [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.360 )  to [0 x i8]* ), [0 x i8]* bitcast( [22 x i8]* getelementptr( [22 x i8], [22 x i8]* @S.361 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model64LEU )  }, %target_TargetT { [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.363 )  to [0 x i8]* ), [0 x i8]* bitcast( [23 x i8]* getelementptr( [23 x i8], [23 x i8]* @S.364 )  to [0 x i8]* ), %target_ModelT* getelementptr( %target_ModelT, %target_ModelT* @target_Model16LEA )  } ], align 4
@target_Target = internal global %target_ModelT* zeroinitializer, align 4
@S.365 = private unnamed_addr constant [42 x i8] c"Supported targets and generated triples:\0A\00"
@S.366 = private unnamed_addr constant [3 x i8] c": \00"
define internal void @target_list() nounwind {
L.0:
	%i = alloca i32
	%0 = getelementptr [42 x i8], [42 x i8]* @S.365
	%1 = bitcast [42 x i8]* %0 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %1)
	store i32 0, i32* %i
	br label %L.1
L.1:
	%2 = load i32, i32* %i
	%3 = icmp ult i32 %2, 26
	%4 = xor i1 %3, true
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load i32, i32* %i
	%6 = getelementptr [26 x %target_TargetT], [26 x %target_TargetT]* @target_Targets, i32 0, i32 %5
	%7 = getelementptr %target_TargetT, %target_TargetT* %6, i32 0, i32 0
	%8 = load [0 x i8]*, [0 x i8]** %7
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %9)
	%10 = getelementptr [3 x i8], [3 x i8]* @S.366
	%11 = bitcast [3 x i8]* %10 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %11)
	%12 = load i32, i32* %i
	%13 = getelementptr [26 x %target_TargetT], [26 x %target_TargetT]* @target_Targets, i32 0, i32 %12
	%14 = getelementptr %target_TargetT, %target_TargetT* %13, i32 0, i32 1
	%15 = load [0 x i8]*, [0 x i8]** %14
	%16 = bitcast [0 x i8]* %15 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %16)
	call void @sys_fildes_nl(i32 2)
	%17 = load i32, i32* %i
	%18 = add i32 %17, 1
	store i32 %18, i32* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
define internal zeroext i8 @target_set([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca i8
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%i = alloca i32
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = icmp eq [0 x i8]* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = bitcast [4 x i8]* @target_DefaultTarget to [0 x i8]*
	store [0 x i8]* %2, [0 x i8]** %name
	br label %L.1
L.1:
	store i32 0, i32* %i
	br label %L.3
L.3:
	%3 = load i32, i32* %i
	%4 = icmp ult i32 %3, 26
	%5 = xor i1 %4, true
	br i1 %5, label %L.4, label %L.5
L.5:
	%6 = load [0 x i8]*, [0 x i8]** %name
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	%8 = load i32, i32* %i
	%9 = getelementptr [26 x %target_TargetT], [26 x %target_TargetT]* @target_Targets, i32 0, i32 %8
	%10 = getelementptr %target_TargetT, %target_TargetT* %9, i32 0, i32 0
	%11 = load [0 x i8]*, [0 x i8]** %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = call i8 @zstr_eq([0 x i8]* %7, [0 x i8]* %12, i32 255)
	%14 = icmp ne i8 %13, 0
	br i1 %14, label %L.7, label %L.6
L.7:
	%15 = load i32, i32* %i
	%16 = getelementptr [26 x %target_TargetT], [26 x %target_TargetT]* @target_Targets, i32 0, i32 %15
	%17 = getelementptr %target_TargetT, %target_TargetT* %16, i32 0, i32 2
	%18 = load %target_ModelT*, %target_ModelT** %17
	store %target_ModelT* %18, %target_ModelT** @target_Target
	%19 = load i32, i32* %i
	%20 = getelementptr [26 x %target_TargetT], [26 x %target_TargetT]* @target_Targets, i32 0, i32 %19
	%21 = getelementptr %target_TargetT, %target_TargetT* %20, i32 0, i32 0
	%22 = load [0 x i8]*, [0 x i8]** %21
	%23 = bitcast [0 x i8]* %22 to [0 x i8]*
	store [0 x i8]* %23, [0 x i8]** @target_TargetName
	%24 = load i32, i32* %i
	%25 = getelementptr [26 x %target_TargetT], [26 x %target_TargetT]* @target_Targets, i32 0, i32 %24
	%26 = getelementptr %target_TargetT, %target_TargetT* %25, i32 0, i32 1
	%27 = load [0 x i8]*, [0 x i8]** %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	store [0 x i8]* %28, [0 x i8]** @target_Triple
	store i8 1, i8* %rv.0
	br label %return
L.6:
	%29 = load i32, i32* %i
	%30 = add i32 %29, 1
	store i32 %30, i32* %i
	br label %L.3
L.4:
	store i8 0, i8* %rv.0
	br label %return
return:
	%31 = load i8, i8* %rv.0
	ret i8 %31
}
define internal zeroext i8 @target_iindex(i32 %bytes$) nounwind {
L.0:
	%rv.0 = alloca i8
	%bytes = alloca i32
	store i32 %bytes$, i32* %bytes
	%i = alloca i8
	%bits = alloca i32
	%0 = load i32, i32* %bytes
	%1 = mul i32 %0, 8
	store i32 %1, i32* %bits
	store i8 0, i8* %i
	br label %L.1
L.1:
	%2 = load i8, i8* %i
	%3 = load %target_ModelT*, %target_ModelT** @target_Target
	%4 = getelementptr %target_ModelT, %target_ModelT* %3, i32 0, i32 4
	%5 = load i8, i8* %4
	%6 = sub i8 %5, 1
	%7 = icmp ult i8 %2, %6
	br i1 %7, label %L.4, label %L.5
L.4:
	%8 = load %target_ModelT*, %target_ModelT** @target_Target
	%9 = getelementptr %target_ModelT, %target_ModelT* %8, i32 0, i32 6
	%10 = load i8, i8* %i
	%11 = zext i8 %10 to i32
	%12 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %9, i32 0, i32 %11
	%13 = getelementptr %target_SizeAlign, %target_SizeAlign* %12, i32 0, i32 0
	%14 = load i8, i8* %13
	%15 = zext i8 %14 to i32
	%16 = load i32, i32* %bits
	%17 = icmp ult i32 %15, %16
	br label %L.5
L.5:
	%18 = phi i1 [ false, %L.1 ], [ %17, %L.4 ]
	%19 = xor i1 %18, true
	br i1 %19, label %L.2, label %L.3
L.3:
	%20 = load i8, i8* %i
	%21 = add i8 %20, 1
	store i8 %21, i8* %i
	br label %L.1
L.2:
	%22 = load i8, i8* %i
	store i8 %22, i8* %rv.0
	br label %return
return:
	%23 = load i8, i8* %rv.0
	ret i8 %23
}
define internal i32 @target_isize(i32 %bits$) nounwind {
L.0:
	%rv.0 = alloca i32
	%bits = alloca i32
	store i32 %bits$, i32* %bits
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8, i8* %i
	%1 = load %target_ModelT*, %target_ModelT** @target_Target
	%2 = getelementptr %target_ModelT, %target_ModelT* %1, i32 0, i32 4
	%3 = load i8, i8* %2
	%4 = icmp ult i8 %0, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %target_ModelT*, %target_ModelT** @target_Target
	%6 = getelementptr %target_ModelT, %target_ModelT* %5, i32 0, i32 6
	%7 = load i8, i8* %i
	%8 = zext i8 %7 to i32
	%9 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %6, i32 0, i32 %8
	%10 = getelementptr %target_SizeAlign, %target_SizeAlign* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	%13 = load i32, i32* %bits
	%14 = icmp ult i32 %12, %13
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.1 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i8, i8* %i
	%18 = add i8 %17, 1
	store i8 %18, i8* %i
	br label %L.1
L.2:
	%19 = load %target_ModelT*, %target_ModelT** @target_Target
	%20 = getelementptr %target_ModelT, %target_ModelT* %19, i32 0, i32 6
	%21 = load i8, i8* %i
	%22 = zext i8 %21 to i32
	%23 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %20, i32 0, i32 %22
	%24 = getelementptr %target_SizeAlign, %target_SizeAlign* %23, i32 0, i32 0
	%25 = load i8, i8* %24
	%26 = zext i8 %25 to i32
	store i32 %26, i32* %rv.0
	br label %return
return:
	%27 = load i32, i32* %rv.0
	ret i32 %27
}
define internal i32 @target_ialign(i32 %bits$) nounwind {
L.0:
	%rv.0 = alloca i32
	%bits = alloca i32
	store i32 %bits$, i32* %bits
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8, i8* %i
	%1 = load %target_ModelT*, %target_ModelT** @target_Target
	%2 = getelementptr %target_ModelT, %target_ModelT* %1, i32 0, i32 4
	%3 = load i8, i8* %2
	%4 = icmp ult i8 %0, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %target_ModelT*, %target_ModelT** @target_Target
	%6 = getelementptr %target_ModelT, %target_ModelT* %5, i32 0, i32 6
	%7 = load i8, i8* %i
	%8 = zext i8 %7 to i32
	%9 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %6, i32 0, i32 %8
	%10 = getelementptr %target_SizeAlign, %target_SizeAlign* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	%13 = load i32, i32* %bits
	%14 = icmp ult i32 %12, %13
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.1 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i8, i8* %i
	%18 = add i8 %17, 1
	store i8 %18, i8* %i
	br label %L.1
L.2:
	%19 = load %target_ModelT*, %target_ModelT** @target_Target
	%20 = getelementptr %target_ModelT, %target_ModelT* %19, i32 0, i32 6
	%21 = load i8, i8* %i
	%22 = zext i8 %21 to i32
	%23 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %20, i32 0, i32 %22
	%24 = getelementptr %target_SizeAlign, %target_SizeAlign* %23, i32 0, i32 1
	%25 = load i8, i8* %24
	%26 = zext i8 %25 to i32
	store i32 %26, i32* %rv.0
	br label %return
return:
	%27 = load i32, i32* %rv.0
	ret i32 %27
}
define internal %type_TypeNode* @target_utype(i32 %bits$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bits = alloca i32
	store i32 %bits$, i32* %bits
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8, i8* %i
	%1 = load %target_ModelT*, %target_ModelT** @target_Target
	%2 = getelementptr %target_ModelT, %target_ModelT* %1, i32 0, i32 4
	%3 = load i8, i8* %2
	%4 = icmp ult i8 %0, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %target_ModelT*, %target_ModelT** @target_Target
	%6 = getelementptr %target_ModelT, %target_ModelT* %5, i32 0, i32 6
	%7 = load i8, i8* %i
	%8 = zext i8 %7 to i32
	%9 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %6, i32 0, i32 %8
	%10 = getelementptr %target_SizeAlign, %target_SizeAlign* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	%13 = load i32, i32* %bits
	%14 = icmp ult i32 %12, %13
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.1 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i8, i8* %i
	%18 = add i8 %17, 1
	store i8 %18, i8* %i
	br label %L.1
L.2:
	%19 = load i8, i8* %i
	%20 = zext i8 %19 to i32
	%21 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 %20
	%22 = load %type_TypeNode*, %type_TypeNode** %21
	store %type_TypeNode* %22, %type_TypeNode** %rv.0
	br label %return
return:
	%23 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %23
}
define internal %type_TypeNode* @target_stype(i32 %bits$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bits = alloca i32
	store i32 %bits$, i32* %bits
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8, i8* %i
	%1 = load %target_ModelT*, %target_ModelT** @target_Target
	%2 = getelementptr %target_ModelT, %target_ModelT* %1, i32 0, i32 4
	%3 = load i8, i8* %2
	%4 = icmp ult i8 %0, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %target_ModelT*, %target_ModelT** @target_Target
	%6 = getelementptr %target_ModelT, %target_ModelT* %5, i32 0, i32 6
	%7 = load i8, i8* %i
	%8 = zext i8 %7 to i32
	%9 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %6, i32 0, i32 %8
	%10 = getelementptr %target_SizeAlign, %target_SizeAlign* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	%13 = load i32, i32* %bits
	%14 = icmp ult i32 %12, %13
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.1 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i8, i8* %i
	%18 = add i8 %17, 1
	store i8 %18, i8* %i
	br label %L.1
L.2:
	%19 = load i8, i8* %i
	%20 = zext i8 %19 to i32
	%21 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 %20
	%22 = load %type_TypeNode*, %type_TypeNode** %21
	store %type_TypeNode* %22, %type_TypeNode** %rv.0
	br label %return
return:
	%23 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %23
}
@symb_NestMax = internal constant i32 31, align 4
@symb_level = internal global i8 0, align 1
@symb_curfile = internal global %symb_SymbNode* zeroinitializer, align 4
@symb_curpack = internal global %symb_SymbNode* zeroinitializer, align 4
@symb_curproc = internal global %symb_SymbNode* zeroinitializer, align 4
@symb_libnew = internal global %symb_SymbNode* zeroinitializer, align 4
@symb_libnewnz = internal global %symb_SymbNode* zeroinitializer, align 4
@symb_libdel = internal global %symb_SymbNode* zeroinitializer, align 4
%symb_symblist = type {%symb_SymbNode*, %symb_SymbNode*, %symb_SymbNode*}
@symb_symbs = internal global [32 x %symb_symblist] zeroinitializer, align 4
@symb_anonid = internal constant [2 x i8] c"_\00", align 1
define internal zeroext i8 @symb_IsAnon([0 x i8]* %id$) nounwind {
L.0:
	%rv.0 = alloca i8
	%id = alloca [0 x i8]*
	store [0 x i8]* %id$, [0 x i8]** %id
	%0 = load [0 x i8]*, [0 x i8]** %id
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = bitcast [2 x i8]* @symb_anonid to [0 x i8]*
	%3 = call i8 @zstr_eq([0 x i8]* %1, [0 x i8]* %2, i32 255)
	store i8 %3, i8* %rv.0
	br label %return
return:
	%4 = load i8, i8* %rv.0
	ret i8 %4
}
define internal zeroext i8 @symb_IsUTF8([0 x i8]* %id$) nounwind {
L.0:
	%rv.0 = alloca i8
	%id = alloca [0 x i8]*
	store [0 x i8]* %id$, [0 x i8]** %id
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load [0 x i8]*, [0 x i8]** %id
	%1 = load i32, i32* %i
	%2 = getelementptr [0 x i8], [0 x i8]* %0, i32 0, i32 %1
	%3 = load i8, i8* %2
	%4 = icmp ne i8 %3, 0
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load [0 x i8]*, [0 x i8]** %id
	%7 = load i32, i32* %i
	%8 = getelementptr [0 x i8], [0 x i8]* %6, i32 0, i32 %7
	%9 = load i8, i8* %8
	%10 = icmp ugt i8 %9, 127
	br i1 %10, label %L.5, label %L.4
L.5:
	store i8 1, i8* %rv.0
	br label %return
L.4:
	%11 = load i32, i32* %i
	%12 = add i32 %11, 1
	store i32 %12, i32* %i
	br label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
return:
	%13 = load i8, i8* %rv.0
	ret i8 %13
}
define internal zeroext i8 @symb_IsUniqueLocal(%symb_SymbNode* %s$, [0 x i8]* %id$) nounwind {
L.0:
	%rv.0 = alloca i8
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%id = alloca [0 x i8]*
	store [0 x i8]* %id$, [0 x i8]** %id
	%0 = load [0 x i8]*, [0 x i8]** %id
	%1 = call i8 @symb_IsAnon([0 x i8]* %0)
	%2 = icmp ne i8 %1, 0
	br i1 %2, label %L.2, label %L.1
L.2:
	store i8 1, i8* %rv.0
	br label %return
L.1:
	br label %L.3
L.3:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.4, label %L.5
L.5:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 23
	%8 = getelementptr [0 x i8], [0 x i8]* %7
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	%10 = load [0 x i8]*, [0 x i8]** %id
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	%12 = call i8 @zstr_eq([0 x i8]* %9, [0 x i8]* %11, i32 255)
	%13 = icmp ne i8 %12, 0
	br i1 %13, label %L.7, label %L.6
L.7:
	store i8 0, i8* %rv.0
	br label %return
L.6:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %s
	%15 = getelementptr %symb_SymbNode, %symb_SymbNode* %14, i32 0, i32 0
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	store %symb_SymbNode* %16, %symb_SymbNode** %s
	br label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
return:
	%17 = load i8, i8* %rv.0
	ret i8 %17
}
define internal %symb_SymbNode* @symb_FindThisLevel([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%0 = load i8, i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb_symblist, %symb_symblist* %2, i32 0, i32 0
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	br label %L.1
L.1:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = icmp ne %symb_SymbNode* %5, null
	br i1 %6, label %L.4, label %L.5
L.4:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 23
	%9 = getelementptr [0 x i8], [0 x i8]* %8
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = load [0 x i8]*, [0 x i8]** %name
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = call i8 @zstr_eq([0 x i8]* %10, [0 x i8]* %12, i32 255)
	%14 = icmp ne i8 %13, 0
	%15 = xor i1 %14, true
	br label %L.5
L.5:
	%16 = phi i1 [ false, %L.1 ], [ %15, %L.4 ]
	%17 = xor i1 %16, true
	br i1 %17, label %L.2, label %L.3
L.3:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 0
	%20 = load %symb_SymbNode*, %symb_SymbNode** %19
	store %symb_SymbNode* %20, %symb_SymbNode** %s
	br label %L.1
L.2:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %21, %symb_SymbNode** %rv.0
	br label %return
return:
	%22 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %22
}
define internal void @symb_MakeVisible(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load i8, i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb_symblist, %symb_symblist* %2, i32 0, i32 0
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	%5 = icmp eq %symb_SymbNode* %4, null
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = load i8, i8* @symb_level
	%8 = zext i8 %7 to i32
	%9 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %8
	%10 = getelementptr %symb_symblist, %symb_symblist* %9, i32 0, i32 0
	store %symb_SymbNode* %6, %symb_SymbNode** %10
	br label %L.1
L.3:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = load i8, i8* @symb_level
	%13 = zext i8 %12 to i32
	%14 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %13
	%15 = getelementptr %symb_symblist, %symb_symblist* %14, i32 0, i32 1
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 0
	store %symb_SymbNode* %11, %symb_SymbNode** %17
	br label %L.1
L.1:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = load i8, i8* @symb_level
	%20 = zext i8 %19 to i32
	%21 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %20
	%22 = getelementptr %symb_symblist, %symb_symblist* %21, i32 0, i32 1
	store %symb_SymbNode* %18, %symb_SymbNode** %22
	br label %return
return:
	ret void
}
define internal %symb_SymbNode* @symb_New(i8 zeroext %kind$, [0 x i8]* %name$, i8 zeroext %vis$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%kind = alloca i8
	store i8 %kind$, i8* %kind
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%vis = alloca i8
	store i8 %vis$, i8* %vis
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* null, %symb_SymbNode** %s
	%0 = load i8, i8* %vis
	%1 = icmp ne i8 %0, 2
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* @symb_level
	%3 = zext i8 %2 to i32
	%4 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %3
	%5 = getelementptr %symb_symblist, %symb_symblist* %4, i32 0, i32 0
	%6 = load %symb_SymbNode*, %symb_SymbNode** %5
	store %symb_SymbNode* %6, %symb_SymbNode** %s
	br label %L.3
L.3:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = icmp ne %symb_SymbNode* %7, null
	br i1 %8, label %L.6, label %L.7
L.6:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 23
	%11 = getelementptr [0 x i8], [0 x i8]* %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = load [0 x i8]*, [0 x i8]** %name
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = call i8 @zstr_eq([0 x i8]* %12, [0 x i8]* %14, i32 255)
	%16 = icmp ne i8 %15, 0
	%17 = xor i1 %16, true
	br label %L.7
L.7:
	%18 = phi i1 [ false, %L.3 ], [ %17, %L.6 ]
	%19 = xor i1 %18, true
	br i1 %19, label %L.4, label %L.5
L.5:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 0
	%22 = load %symb_SymbNode*, %symb_SymbNode** %21
	store %symb_SymbNode* %22, %symb_SymbNode** %s
	br label %L.3
L.4:
	br label %L.1
L.1:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = icmp ne %symb_SymbNode* %23, null
	br i1 %24, label %L.9, label %L.8
L.9:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 15
	%27 = load i8, i8* %26
	%28 = icmp ne i8 %27, 0
	br i1 %28, label %L.11, label %L.12
L.11:
	%29 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %29, %symb_SymbNode** %rv.0
	br label %return
L.12:
	%30 = load [0 x i8]*, [0 x i8]** %name
	call void @lex_ErrorI(i8 23, [0 x i8]* %30)
	br label %L.10
L.10:
	br label %L.8
L.8:
	%31 = load [0 x i8]*, [0 x i8]** %name
	%32 = bitcast [0 x i8]* %31 to [0 x i8]*
	%33 = call i32 @zstr_len([0 x i8]* %32, i32 255)
	%34 = add i32 64, %33
	%35 = add i32 %34, 1
	%36 = call [0 x i8]* @malloc(i32 %35)
	%37 = bitcast [0 x i8]* %36 to %symb_SymbNode*
	store %symb_SymbNode* %37, %symb_SymbNode** %s
	%38 = load %symb_SymbNode*, %symb_SymbNode** %s
	%39 = getelementptr %symb_SymbNode, %symb_SymbNode* %38, i32 0, i32 23
	%40 = getelementptr [0 x i8], [0 x i8]* %39
	%41 = bitcast [0 x i8]* %40 to [0 x i8]*
	%42 = load [0 x i8]*, [0 x i8]** %name
	%43 = bitcast [0 x i8]* %42 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %41, [0 x i8]* %43, i32 255)
	%44 = load [0 x i8]*, [0 x i8]** %name
	%45 = call i8 @symb_IsUTF8([0 x i8]* %44)
	%46 = load %symb_SymbNode*, %symb_SymbNode** %s
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 21
	store i8 %45, i8* %47
	%48 = load i8, i8* %kind
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = getelementptr %symb_SymbNode, %symb_SymbNode* %49, i32 0, i32 13
	store i8 %48, i8* %50
	%51 = load %symb_SymbNode*, %symb_SymbNode** %s
	%52 = getelementptr %symb_SymbNode, %symb_SymbNode* %51, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %52
	%53 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%54 = icmp ne %symb_SymbNode* %53, null
	br i1 %54, label %L.14, label %L.15
L.14:
	%55 = load %symb_SymbNode*, %symb_SymbNode** %s
	%56 = getelementptr %symb_SymbNode, %symb_SymbNode* %55, i32 0, i32 14
	store i8 1, i8* %56
	%57 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%58 = load %symb_SymbNode*, %symb_SymbNode** %s
	%59 = getelementptr %symb_SymbNode, %symb_SymbNode* %58, i32 0, i32 2
	store %symb_SymbNode* %57, %symb_SymbNode** %59
	br label %L.13
L.15:
	%60 = load %symb_SymbNode*, %symb_SymbNode** @symb_curpack
	%61 = icmp ne %symb_SymbNode* %60, null
	br i1 %61, label %L.17, label %L.18
L.17:
	%62 = load %symb_SymbNode*, %symb_SymbNode** %s
	%63 = getelementptr %symb_SymbNode, %symb_SymbNode* %62, i32 0, i32 14
	store i8 2, i8* %63
	%64 = load %symb_SymbNode*, %symb_SymbNode** @symb_curpack
	%65 = load %symb_SymbNode*, %symb_SymbNode** %s
	%66 = getelementptr %symb_SymbNode, %symb_SymbNode* %65, i32 0, i32 2
	store %symb_SymbNode* %64, %symb_SymbNode** %66
	br label %L.16
L.18:
	%67 = load %symb_SymbNode*, %symb_SymbNode** %s
	%68 = getelementptr %symb_SymbNode, %symb_SymbNode* %67, i32 0, i32 14
	store i8 3, i8* %68
	%69 = load %symb_SymbNode*, %symb_SymbNode** %s
	%70 = getelementptr %symb_SymbNode, %symb_SymbNode* %69, i32 0, i32 2
	store %symb_SymbNode* null, %symb_SymbNode** %70
	br label %L.16
L.16:
	br label %L.13
L.13:
	%71 = call i16 @lex_Lineno()
	%72 = load %symb_SymbNode*, %symb_SymbNode** %s
	%73 = getelementptr %symb_SymbNode, %symb_SymbNode* %72, i32 0, i32 11
	store i16 %71, i16* %73
	%74 = load i8, i8* %vis
	%75 = icmp eq i8 %74, 0
	br i1 %75, label %L.20, label %L.19
L.20:
	%76 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_MakeVisible(%symb_SymbNode* %76)
	br label %L.19
L.19:
	%77 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %77, %symb_SymbNode** %rv.0
	br label %return
return:
	%78 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %78
}
@S.368 = private unnamed_addr constant [2 x i8] c"/\00"
define internal %symb_SymbNode* @symb_NewFile([0 x i8]* %path$, [0 x i8]* %file$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%path = alloca [0 x i8]*
	store [0 x i8]* %path$, [0 x i8]** %path
	%file = alloca [0 x i8]*
	store [0 x i8]* %file$, [0 x i8]** %file
	%fs = alloca %symb_SymbNode*
	%full = alloca [1024 x i8]
	%0 = bitcast [1024 x i8]* %full to [0 x i8]*
	%1 = load [0 x i8]*, [0 x i8]** %path
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %0, [0 x i8]* %2, i32 1024)
	%3 = bitcast [1024 x i8]* %full to [0 x i8]*
	%4 = getelementptr [2 x i8], [2 x i8]* @S.368
	%5 = bitcast [2 x i8]* %4 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %3, [0 x i8]* %5, i32 1024)
	%6 = bitcast [1024 x i8]* %full to [0 x i8]*
	%7 = load [0 x i8]*, [0 x i8]** %file
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %6, [0 x i8]* %8, i32 1024)
	%9 = bitcast [1024 x i8]* %full to [0 x i8]*
	%10 = call %symb_SymbNode* @symb_New(i8 7, [0 x i8]* %9, i8 2)
	store %symb_SymbNode* %10, %symb_SymbNode** %fs
	%11 = load %symb_SymbNode*, %symb_SymbNode** @symb_curfile
	%12 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 2
	store %symb_SymbNode* %11, %symb_SymbNode** %13
	%14 = load %symb_SymbNode*, %symb_SymbNode** %fs
	store %symb_SymbNode* %14, %symb_SymbNode** @symb_curfile
	%15 = load %symb_SymbNode*, %symb_SymbNode** %fs
	store %symb_SymbNode* %15, %symb_SymbNode** %rv.0
	br label %return
return:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %16
}
define internal %symb_SymbNode* @symb_NewString([0 x i8]* %str$, i32 %len$, i8 zeroext %nopad$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%str = alloca [0 x i8]*
	store [0 x i8]* %str$, [0 x i8]** %str
	%len = alloca i32
	store i32 %len$, i32* %len
	%nopad = alloca i8
	store i8 %nopad$, i8* %nopad
	%s = alloca %symb_SymbNode*
	%0 = load i32, i32* %len
	%1 = add i32 64, %0
	%2 = add i32 %1, 1
	%3 = call [0 x i8]* @malloc(i32 %2)
	%4 = bitcast [0 x i8]* %3 to %symb_SymbNode*
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = bitcast %symb_SymbNode* %5 to i8*
	call void @llvm.memset.p0i8.i32(i8* %6, i8 0, i32 64, i32 8, i1 0)
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 23
	%9 = getelementptr [0 x i8], [0 x i8]* %8, i32 0, i32 0
	%10 = bitcast i8* %9 to [0 x i8]*
	%11 = bitcast [0 x i8]* %10 to i8*
	%12 = load [0 x i8]*, [0 x i8]** %str
	%13 = bitcast [0 x i8]* %12 to i8*
	%14 = load i32, i32* %len
	%15 = mul i32 %14, 1
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %11, i8* %13, i32 %15, i32 1, i1 0)
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 23
	%18 = load i32, i32* %len
	%19 = getelementptr [0 x i8], [0 x i8]* %17, i32 0, i32 %18
	store i8 0, i8* %19
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 13
	store i8 9, i8* %21
	%22 = load i8, i8* %nopad
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 19
	store i8 %22, i8* %24
	%25 = call i16 @lex_Lineno()
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 11
	store i16 %25, i16* %27
	%28 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %28, %symb_SymbNode** %rv.0
	br label %return
return:
	%29 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %29
}
define internal %symb_SymbNode* @symb_NewString2([0 x i8]* %str1$, i32 %len1$, [0 x i8]* %str2$, i32 %len2$, i8 zeroext %nopad$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%str1 = alloca [0 x i8]*
	store [0 x i8]* %str1$, [0 x i8]** %str1
	%len1 = alloca i32
	store i32 %len1$, i32* %len1
	%str2 = alloca [0 x i8]*
	store [0 x i8]* %str2$, [0 x i8]** %str2
	%len2 = alloca i32
	store i32 %len2$, i32* %len2
	%nopad = alloca i8
	store i8 %nopad$, i8* %nopad
	%s = alloca %symb_SymbNode*
	%0 = load i32, i32* %len1
	%1 = add i32 64, %0
	%2 = load i32, i32* %len2
	%3 = add i32 %1, %2
	%4 = add i32 %3, 1
	%5 = call [0 x i8]* @malloc(i32 %4)
	%6 = bitcast [0 x i8]* %5 to %symb_SymbNode*
	store %symb_SymbNode* %6, %symb_SymbNode** %s
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = bitcast %symb_SymbNode* %7 to i8*
	call void @llvm.memset.p0i8.i32(i8* %8, i8 0, i32 64, i32 8, i1 0)
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 23
	%11 = getelementptr [0 x i8], [0 x i8]* %10, i32 0, i32 0
	%12 = bitcast i8* %11 to [0 x i8]*
	%13 = bitcast [0 x i8]* %12 to i8*
	%14 = load [0 x i8]*, [0 x i8]** %str1
	%15 = bitcast [0 x i8]* %14 to i8*
	%16 = load i32, i32* %len1
	%17 = mul i32 %16, 1
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %13, i8* %15, i32 %17, i32 1, i1 0)
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 23
	%20 = load i32, i32* %len1
	%21 = getelementptr [0 x i8], [0 x i8]* %19, i32 0, i32 %20
	%22 = bitcast i8* %21 to [0 x i8]*
	%23 = bitcast [0 x i8]* %22 to i8*
	%24 = load [0 x i8]*, [0 x i8]** %str2
	%25 = bitcast [0 x i8]* %24 to i8*
	%26 = load i32, i32* %len2
	%27 = mul i32 %26, 1
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %23, i8* %25, i32 %27, i32 1, i1 0)
	%28 = load %symb_SymbNode*, %symb_SymbNode** %s
	%29 = getelementptr %symb_SymbNode, %symb_SymbNode* %28, i32 0, i32 13
	store i8 9, i8* %29
	%30 = load i8, i8* %nopad
	%31 = load %symb_SymbNode*, %symb_SymbNode** %s
	%32 = getelementptr %symb_SymbNode, %symb_SymbNode* %31, i32 0, i32 19
	store i8 %30, i8* %32
	%33 = call i16 @lex_Lineno()
	%34 = load %symb_SymbNode*, %symb_SymbNode** %s
	%35 = getelementptr %symb_SymbNode, %symb_SymbNode* %34, i32 0, i32 11
	store i16 %33, i16* %35
	%36 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %36, %symb_SymbNode** %rv.0
	br label %return
return:
	%37 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %37
}
define internal %symb_SymbNode* @symb_Clone(%symb_SymbNode* %os$, [0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%os = alloca %symb_SymbNode*
	store %symb_SymbNode* %os$, %symb_SymbNode** %os
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%ns = alloca %symb_SymbNode*
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = call %symb_SymbNode* @symb_New(i8 8, [0 x i8]* %0, i8 0)
	store %symb_SymbNode* %1, %symb_SymbNode** %ns
	%2 = load %symb_SymbNode*, %symb_SymbNode** %os
	%3 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 5
	store %symb_SymbNode* %2, %symb_SymbNode** %4
	%5 = load %symb_SymbNode*, %symb_SymbNode** %ns
	store %symb_SymbNode* %5, %symb_SymbNode** %rv.0
	br label %return
return:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %6
}
define internal %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %as$, [0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%as = alloca %symb_SymbNode*
	store %symb_SymbNode* %as$, %symb_SymbNode** %as
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %as
	store %symb_SymbNode* %0, %symb_SymbNode** %s
	br label %L.1
L.1:
	%1 = load %symb_SymbNode*, %symb_SymbNode** %s
	%2 = icmp ne %symb_SymbNode* %1, null
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 23
	%6 = getelementptr [0 x i8], [0 x i8]* %5
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	%8 = load [0 x i8]*, [0 x i8]** %name
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	%10 = call i8 @zstr_eq([0 x i8]* %7, [0 x i8]* %9, i32 255)
	%11 = icmp ne i8 %10, 0
	br i1 %11, label %L.5, label %L.4
L.5:
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 13
	%14 = load i8, i8* %13
	%15 = icmp eq i8 %14, 8
	br i1 %15, label %L.7, label %L.6
L.7:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 5
	%18 = load %symb_SymbNode*, %symb_SymbNode** %17
	store %symb_SymbNode* %18, %symb_SymbNode** %s
	br label %L.6
L.6:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %19, %symb_SymbNode** %rv.0
	br label %return
L.4:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 0
	%22 = load %symb_SymbNode*, %symb_SymbNode** %21
	store %symb_SymbNode* %22, %symb_SymbNode** %s
	br label %L.1
L.2:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %23, %symb_SymbNode** %rv.0
	br label %return
return:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %24
}
define internal %symb_SymbNode* @symb_FindMethod(%symb_SymbNode* %as$, [0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%as = alloca %symb_SymbNode*
	store %symb_SymbNode* %as$, %symb_SymbNode** %as
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %as
	store %symb_SymbNode* %0, %symb_SymbNode** %s
	br label %L.1
L.1:
	%1 = load %symb_SymbNode*, %symb_SymbNode** %s
	%2 = icmp ne %symb_SymbNode* %1, null
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 23
	%5 = getelementptr [0 x i8], [0 x i8]* %4
	%6 = bitcast [0 x i8]* %5 to [0 x i8]*
	%7 = load [0 x i8]*, [0 x i8]** %name
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	%9 = call i8 @zstr_eq([0 x i8]* %6, [0 x i8]* %8, i32 255)
	%10 = icmp ne i8 %9, 0
	%11 = xor i1 %10, true
	br label %L.5
L.5:
	%12 = phi i1 [ false, %L.1 ], [ %11, %L.4 ]
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %s
	%15 = getelementptr %symb_SymbNode, %symb_SymbNode* %14, i32 0, i32 0
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	store %symb_SymbNode* %16, %symb_SymbNode** %s
	br label %L.1
L.2:
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %17, %symb_SymbNode** %rv.0
	br label %return
return:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %18
}
define internal %symb_SymbNode* @symb_FindPackage(%symb_SymbNode* %ps$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%s = alloca %symb_SymbNode*
	%fs = alloca %symb_SymbNode*
	%tok = alloca i8
	%i = alloca i32
	store %symb_SymbNode* null, %symb_SymbNode** %s
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	br label %L.1
L.1:
	br label %L.3
L.3:
	%4 = load i8, i8* %tok
	%5 = icmp ne i8 %4, 2
	br i1 %5, label %L.6, label %L.5
L.6:
	%6 = call i8 @lex_Expect(i8 2)
	br label %L.4
L.5:
	%7 = call i8 @lex_Next()
	store i8 %7, i8* %tok
	%8 = load i8, i8* %tok
	%9 = icmp ne i8 %8, 46
	br i1 %9, label %L.8, label %L.7
L.8:
	%10 = call i8 @lex_Expect(i8 46)
	br label %L.4
L.7:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 5
	%13 = load %symb_SymbNode*, %symb_SymbNode** %12
	store %symb_SymbNode* %13, %symb_SymbNode** %fs
	%14 = load i8, i8* @symb_level
	%15 = zext i8 %14 to i32
	store i32 %15, i32* %i
	br label %L.9
L.9:
	%16 = load i32, i32* %i
	%17 = icmp ugt i32 %16, 0
	br i1 %17, label %L.12, label %L.13
L.12:
	%18 = load i32, i32* %i
	%19 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %18
	%20 = getelementptr %symb_symblist, %symb_symblist* %19, i32 0, i32 2
	%21 = load %symb_SymbNode*, %symb_SymbNode** %20
	%22 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%23 = icmp ne %symb_SymbNode* %21, %22
	br label %L.13
L.13:
	%24 = phi i1 [ false, %L.9 ], [ %23, %L.12 ]
	%25 = xor i1 %24, true
	br i1 %25, label %L.10, label %L.11
L.11:
	%26 = load i32, i32* %i
	%27 = sub i32 %26, 1
	store i32 %27, i32* %i
	br label %L.9
L.10:
	%28 = load i32, i32* %i
	%29 = icmp ne i32 %28, 0
	br i1 %29, label %L.15, label %L.14
L.15:
	%30 = load i32, i32* %i
	%31 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %30
	%32 = getelementptr %symb_symblist, %symb_symblist* %31, i32 0, i32 0
	%33 = load %symb_SymbNode*, %symb_SymbNode** %32
	store %symb_SymbNode* %33, %symb_SymbNode** %fs
	br label %L.14
L.14:
	%34 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%35 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%36 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %34, [0 x i8]* %35)
	store %symb_SymbNode* %36, %symb_SymbNode** %s
	%37 = load %symb_SymbNode*, %symb_SymbNode** %s
	%38 = icmp eq %symb_SymbNode* %37, null
	br i1 %38, label %L.18, label %L.17
L.17:
	%39 = load %symb_SymbNode*, %symb_SymbNode** %s
	%40 = getelementptr %symb_SymbNode, %symb_SymbNode* %39, i32 0, i32 13
	%41 = load i8, i8* %40
	%42 = icmp ne i8 %41, 6
	br label %L.18
L.18:
	%43 = phi i1 [ true, %L.14 ], [ %42, %L.17 ]
	br i1 %43, label %L.4, label %L.16
L.16:
	%44 = call i8 @lex_Next()
	store i8 %44, i8* %tok
	%45 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %45, %symb_SymbNode** %ps
	br label %L.3
L.4:
	%46 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %46, %symb_SymbNode** %rv.0
	br label %return
return:
	%47 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %47
}
define internal %symb_SymbNode* @symb_FindTop([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%i = alloca i8
	%0 = load i8, i8* @symb_level
	store i8 %0, i8* %i
	br label %L.1
L.1:
	%1 = load i8, i8* %i
	%2 = zext i8 %1 to i32
	%3 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %2
	%4 = getelementptr %symb_symblist, %symb_symblist* %3, i32 0, i32 0
	%5 = load %symb_SymbNode*, %symb_SymbNode** %4
	%6 = load [0 x i8]*, [0 x i8]** %name
	%7 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %5, [0 x i8]* %6)
	store %symb_SymbNode* %7, %symb_SymbNode** %s
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = icmp ne %symb_SymbNode* %8, null
	br i1 %9, label %L.4, label %L.3
L.4:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 20
	store i8 1, i8* %11
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %12, %symb_SymbNode** %rv.0
	br label %return
L.3:
	%13 = load i8, i8* %i
	%14 = icmp eq i8 %13, 0
	br i1 %14, label %L.2, label %L.5
L.5:
	%15 = load i8, i8* %i
	%16 = sub i8 %15, 1
	store i8 %16, i8* %i
	br label %L.1
L.2:
	store %symb_SymbNode* null, %symb_SymbNode** %rv.0
	br label %return
return:
	%17 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %17
}
define internal %symb_SymbNode* @symb_Find([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %0)
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.1, label %L.2
L.1:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 13
	%6 = load i8, i8* %5
	%7 = icmp eq i8 %6, 6
	br label %L.2
L.2:
	%8 = phi i1 [ false, %L.0 ], [ %7, %L.1 ]
	br i1 %8, label %L.4, label %L.3
L.4:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = call %symb_SymbNode* @symb_FindPackage(%symb_SymbNode* %9)
	store %symb_SymbNode* %10, %symb_SymbNode** %s
	br label %L.3
L.3:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %11, %symb_SymbNode** %rv.0
	br label %return
return:
	%12 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %12
}
define internal %symb_SymbNode* @symb_FindKind([0 x i8]* %name$, i8 zeroext %kind$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%kind = alloca i8
	store i8 %kind$, i8* %kind
	%s = alloca %symb_SymbNode*
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = call %symb_SymbNode* @symb_Find([0 x i8]* %0)
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 13
	%6 = load i8, i8* %5
	%7 = load i8, i8* %kind
	%8 = icmp ne i8 %6, %7
	br i1 %8, label %L.5, label %L.4
L.5:
	%9 = load i8, i8* %kind
	%10 = zext i8 %9 to i32
	switch i32 %10, label %L.6 [
		i32 2, label %L.8
		i32 3, label %L.9
	]
L.8:
	call void @lex_Error(i8 29)
	br label %L.7
L.9:
	call void @lex_Error(i8 77)
	br label %L.7
L.6:
	br label %L.7
L.7:
	br label %L.4
L.4:
	br label %L.1
L.3:
	%11 = load [0 x i8]*, [0 x i8]** %name
	call void @lex_ErrorI(i8 22, [0 x i8]* %11)
	br label %L.1
L.1:
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %12, %symb_SymbNode** %rv.0
	br label %return
return:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %13
}
@symb_ImportSymbol = internal constant [8 x i8] c"_IMPORT\00", align 1
define internal zeroext i8 @symb_FindImport([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca i8
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%0 = load i8, i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb_symblist, %symb_symblist* %2, i32 0, i32 0
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	%5 = bitcast [8 x i8]* @symb_ImportSymbol to [0 x i8]*
	%6 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %4, [0 x i8]* %5)
	store %symb_SymbNode* %6, %symb_SymbNode** %s
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = icmp ne %symb_SymbNode* %7, null
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 5
	%11 = load %symb_SymbNode*, %symb_SymbNode** %10
	%12 = load [0 x i8]*, [0 x i8]** %name
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	%14 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %11, [0 x i8]* %13)
	store %symb_SymbNode* %14, %symb_SymbNode** %s
	br label %L.1
L.1:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = icmp ne %symb_SymbNode* %15, null
	%17 = zext i1 %16 to i8
	store i8 %17, i8* %rv.0
	br label %return
return:
	%18 = load i8, i8* %rv.0
	ret i8 %18
}
define internal [0 x i8]* @symb_NewImport([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%t = alloca %symb_SymbNode*
	%0 = load i8, i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb_symblist, %symb_symblist* %2, i32 0, i32 0
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	%5 = bitcast [8 x i8]* @symb_ImportSymbol to [0 x i8]*
	%6 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %4, [0 x i8]* %5)
	store %symb_SymbNode* %6, %symb_SymbNode** %s
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = icmp eq %symb_SymbNode* %7, null
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = bitcast [8 x i8]* @symb_ImportSymbol to [0 x i8]*
	%10 = call %symb_SymbNode* @symb_New(i8 0, [0 x i8]* %9, i8 0)
	store %symb_SymbNode* %10, %symb_SymbNode** %s
	br label %L.1
L.1:
	%11 = load [0 x i8]*, [0 x i8]** %name
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = load [0 x i8]*, [0 x i8]** %name
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = call i32 @zstr_len([0 x i8]* %14, i32 256)
	%16 = call %symb_SymbNode* @symb_NewString([0 x i8]* %12, i32 %15, i8 0)
	store %symb_SymbNode* %16, %symb_SymbNode** %t
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s
	%18 = getelementptr %symb_SymbNode, %symb_SymbNode* %17, i32 0, i32 5
	%19 = load %symb_SymbNode*, %symb_SymbNode** %18
	%20 = load %symb_SymbNode*, %symb_SymbNode** %t
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 0
	store %symb_SymbNode* %19, %symb_SymbNode** %21
	%22 = load %symb_SymbNode*, %symb_SymbNode** %t
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 5
	store %symb_SymbNode* %22, %symb_SymbNode** %24
	%25 = load %symb_SymbNode*, %symb_SymbNode** %t
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 23
	%27 = getelementptr [0 x i8], [0 x i8]* %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	store [0 x i8]* %28, [0 x i8]** %rv.0
	br label %return
return:
	%29 = load [0 x i8]*, [0 x i8]** %rv.0
	ret [0 x i8]* %29
}
define internal zeroext i8 @symb_IsDefined([0 x i8]* %name$) nounwind {
L.0:
	%rv.0 = alloca i8
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%s = alloca %symb_SymbNode*
	%tok = alloca i8
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %0)
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	br label %L.1
L.1:
	%2 = call i8 @lex_Next()
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	%4 = icmp ne i8 %3, 2
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load i8, i8* %tok
	%7 = icmp ne i8 %6, 46
	br i1 %7, label %L.2, label %L.4
L.4:
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = icmp ne %symb_SymbNode* %8, null
	br i1 %9, label %L.6, label %L.5
L.6:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 5
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	%13 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%14 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %12, [0 x i8]* %13)
	store %symb_SymbNode* %14, %symb_SymbNode** %s
	br label %L.5
L.5:
	br label %L.1
L.2:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = icmp ne %symb_SymbNode* %15, null
	%17 = zext i1 %16 to i8
	store i8 %17, i8* %rv.0
	br label %return
return:
	%18 = load i8, i8* %rv.0
	ret i8 %18
}
define internal %symb_SymbNode* @symb_Save() nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%0 = load i8, i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb_symblist, %symb_symblist* %2, i32 0, i32 0
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	store %symb_SymbNode* %4, %symb_SymbNode** %rv.0
	br label %return
return:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %5
}
define internal %symb_SymbNode* @symb_Append(%symb_SymbNode* %s$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* @symb_level
	%3 = zext i8 %2 to i32
	%4 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %3
	%5 = getelementptr %symb_symblist, %symb_symblist* %4, i32 0, i32 0
	%6 = load %symb_SymbNode*, %symb_SymbNode** %5
	%7 = icmp eq %symb_SymbNode* %6, null
	br i1 %7, label %L.4, label %L.5
L.4:
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = load i8, i8* @symb_level
	%10 = zext i8 %9 to i32
	%11 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %10
	%12 = getelementptr %symb_symblist, %symb_symblist* %11, i32 0, i32 0
	store %symb_SymbNode* %8, %symb_SymbNode** %12
	br label %L.3
L.5:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = load i8, i8* @symb_level
	%15 = zext i8 %14 to i32
	%16 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %15
	%17 = getelementptr %symb_symblist, %symb_symblist* %16, i32 0, i32 1
	%18 = load %symb_SymbNode*, %symb_SymbNode** %17
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 0
	store %symb_SymbNode* %13, %symb_SymbNode** %19
	br label %L.3
L.3:
	br label %L.6
L.6:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 0
	%22 = load %symb_SymbNode*, %symb_SymbNode** %21
	%23 = icmp ne %symb_SymbNode* %22, null
	%24 = xor i1 %23, true
	br i1 %24, label %L.7, label %L.8
L.8:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 0
	%27 = load %symb_SymbNode*, %symb_SymbNode** %26
	store %symb_SymbNode* %27, %symb_SymbNode** %s
	br label %L.6
L.7:
	%28 = load %symb_SymbNode*, %symb_SymbNode** %s
	%29 = load i8, i8* @symb_level
	%30 = zext i8 %29 to i32
	%31 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %30
	%32 = getelementptr %symb_symblist, %symb_symblist* %31, i32 0, i32 1
	store %symb_SymbNode* %28, %symb_SymbNode** %32
	br label %L.1
L.1:
	%33 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %33, %symb_SymbNode** %rv.0
	br label %return
return:
	%34 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %34
}
define internal %symb_SymbNode* @symb_Push(%symb_SymbNode* %init$, %symb_SymbNode* %ps$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%init = alloca %symb_SymbNode*
	store %symb_SymbNode* %init$, %symb_SymbNode** %init
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%0 = load i8, i8* @symb_level
	%1 = icmp ult i8 %0, 31
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i8, i8* @symb_level
	%3 = add i8 %2, 1
	store i8 %3, i8* @symb_level
	%4 = load %symb_SymbNode*, %symb_SymbNode** %init
	%5 = icmp eq %symb_SymbNode* %4, null
	br i1 %5, label %L.5, label %L.6
L.5:
	%6 = load i8, i8* @symb_level
	%7 = zext i8 %6 to i32
	%8 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %7
	%9 = getelementptr %symb_symblist, %symb_symblist* %8, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %9
	%10 = load i8, i8* @symb_level
	%11 = zext i8 %10 to i32
	%12 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %11
	%13 = getelementptr %symb_symblist, %symb_symblist* %12, i32 0, i32 1
	store %symb_SymbNode* null, %symb_SymbNode** %13
	br label %L.4
L.6:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %init
	%15 = load i8, i8* @symb_level
	%16 = zext i8 %15 to i32
	%17 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %16
	%18 = getelementptr %symb_symblist, %symb_symblist* %17, i32 0, i32 0
	store %symb_SymbNode* %14, %symb_SymbNode** %18
	br label %L.7
L.7:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %init
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 0
	%21 = load %symb_SymbNode*, %symb_SymbNode** %20
	%22 = icmp ne %symb_SymbNode* %21, null
	%23 = xor i1 %22, true
	br i1 %23, label %L.8, label %L.9
L.9:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %init
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 0
	%26 = load %symb_SymbNode*, %symb_SymbNode** %25
	store %symb_SymbNode* %26, %symb_SymbNode** %init
	br label %L.7
L.8:
	%27 = load %symb_SymbNode*, %symb_SymbNode** %init
	%28 = load i8, i8* @symb_level
	%29 = zext i8 %28 to i32
	%30 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %29
	%31 = getelementptr %symb_symblist, %symb_symblist* %30, i32 0, i32 1
	store %symb_SymbNode* %27, %symb_SymbNode** %31
	br label %L.4
L.4:
	%32 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%33 = load i8, i8* @symb_level
	%34 = zext i8 %33 to i32
	%35 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %34
	%36 = getelementptr %symb_symblist, %symb_symblist* %35, i32 0, i32 2
	store %symb_SymbNode* %32, %symb_SymbNode** %36
	br label %L.1
L.3:
	br label %L.1
L.1:
	%37 = load %symb_SymbNode*, %symb_SymbNode** %init
	store %symb_SymbNode* %37, %symb_SymbNode** %rv.0
	br label %return
return:
	%38 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %38
}
@S.370 = private unnamed_addr constant [4 x i8] c"In \00"
@S.371 = private unnamed_addr constant [10 x i8] c" unused: \00"
define internal void @symb_Pop() nounwind {
L.0:
	%0 = load i8, i8* @symb_level
	%1 = icmp ugt i8 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = getelementptr %A.3, %A.3* @feature, i32 0, i32 1
	%3 = load i8, i8* %2
	%4 = icmp ne i8 %3, 0
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%6 = icmp ne %symb_SymbNode* %5, null
	br label %L.5
L.5:
	%7 = phi i1 [ false, %L.2 ], [ %6, %L.4 ]
	br i1 %7, label %L.7, label %L.6
L.7:
	%s = alloca %symb_SymbNode*
	%8 = load i8, i8* @symb_level
	%9 = zext i8 %8 to i32
	%10 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %9
	%11 = getelementptr %symb_symblist, %symb_symblist* %10, i32 0, i32 0
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	store %symb_SymbNode* %12, %symb_SymbNode** %s
	br label %L.8
L.8:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = icmp ne %symb_SymbNode* %13, null
	%15 = xor i1 %14, true
	br i1 %15, label %L.9, label %L.10
L.10:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 20
	%18 = load i8, i8* %17
	%19 = icmp ne i8 %18, 0
	%20 = xor i1 %19, true
	br i1 %20, label %L.11, label %L.12
L.11:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 14
	%23 = load i8, i8* %22
	%24 = icmp ne i8 %23, 0
	br label %L.12
L.12:
	%25 = phi i1 [ false, %L.10 ], [ %24, %L.11 ]
	br i1 %25, label %L.14, label %L.13
L.14:
	%26 = getelementptr [4 x i8], [4 x i8]* @S.370
	%27 = bitcast [4 x i8]* %26 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %27)
	%28 = load %symb_SymbNode*, %symb_SymbNode** @symb_curpack
	%29 = icmp ne %symb_SymbNode* %28, null
	br i1 %29, label %L.16, label %L.15
L.16:
	%30 = load %symb_SymbNode*, %symb_SymbNode** @symb_curpack
	%31 = getelementptr %symb_SymbNode, %symb_SymbNode* %30, i32 0, i32 23
	%32 = getelementptr [0 x i8], [0 x i8]* %31
	%33 = bitcast [0 x i8]* %32 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %33)
	call void @sys_fildes_chr(i32 2, i8 46)
	br label %L.15
L.15:
	%34 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%35 = getelementptr %symb_SymbNode, %symb_SymbNode* %34, i32 0, i32 23
	%36 = getelementptr [0 x i8], [0 x i8]* %35
	%37 = bitcast [0 x i8]* %36 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %37)
	%38 = getelementptr [10 x i8], [10 x i8]* @S.371
	%39 = bitcast [10 x i8]* %38 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %39)
	%40 = load %symb_SymbNode*, %symb_SymbNode** %s
	%41 = getelementptr %symb_SymbNode, %symb_SymbNode* %40, i32 0, i32 23
	%42 = getelementptr [0 x i8], [0 x i8]* %41
	%43 = bitcast [0 x i8]* %42 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %43)
	call void @sys_fildes_nl(i32 2)
	br label %L.13
L.13:
	%44 = load %symb_SymbNode*, %symb_SymbNode** %s
	%45 = getelementptr %symb_SymbNode, %symb_SymbNode* %44, i32 0, i32 0
	%46 = load %symb_SymbNode*, %symb_SymbNode** %45
	store %symb_SymbNode* %46, %symb_SymbNode** %s
	br label %L.8
L.9:
	br label %L.6
L.6:
	%47 = load i8, i8* @symb_level
	%48 = sub i8 %47, 1
	store i8 %48, i8* @symb_level
	br label %L.1
L.3:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@ast_NumChildDefault = internal constant [105 x i8] [ i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0, i8 0, i8 8, i8 2, i8 2, i8 0, i8 1, i8 2, i8 3, i8 1, i8 1, i8 4, i8 5, i8 5, i8 4, i8 4, i8 4, i8 4, i8 4, i8 1, i8 1, i8 2, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 3, i8 0, i8 2, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 3, i8 3, i8 3, i8 3, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 3, i8 3, i8 2, i8 2, i8 2, i8 3, i8 8, i8 1, i8 2, i8 3, i8 8, i8 4, i8 1, i8 3, i8 1 ], align 1
@ast_Null = internal global %ast_AstNode* zeroinitializer, align 4
define internal %ast_AstNode* @ast_Alloc(i8 zeroext %op$, i16 zeroext %nc$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%nc = alloca i16
	store i16 %nc$, i16* %nc
	%pa = alloca %ast_AstNode*
	%0 = load i16, i16* %nc
	%1 = zext i16 %0 to i32
	%2 = mul i32 %1, 4
	%3 = add i32 32, %2
	%4 = call [0 x i8]* @sys_zalloc(i32 %3)
	%5 = bitcast [0 x i8]* %4 to %ast_AstNode*
	store %ast_AstNode* %5, %ast_AstNode** %pa
	%6 = load i8, i8* %op
	%7 = load %ast_AstNode*, %ast_AstNode** %pa
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 0
	store i8 %6, i8* %8
	%9 = call i16 @lex_Lineno()
	%10 = load %ast_AstNode*, %ast_AstNode** %pa
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 5
	store i16 %9, i16* %11
	%12 = load %ast_AstNode*, %ast_AstNode** %pa
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 2
	store i16 0, i16* %13
	%14 = load i16, i16* %nc
	%15 = load %ast_AstNode*, %ast_AstNode** %pa
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 3
	store i16 %14, i16* %16
	%17 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %17, %ast_AstNode** %rv.0
	br label %return
return:
	%18 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %18
}
define internal %ast_AstNode* @ast_Dup(%ast_AstNode* %from$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%from = alloca %ast_AstNode*
	store %ast_AstNode* %from$, %ast_AstNode** %from
	%pa = alloca %ast_AstNode*
	%i = alloca i32
	%0 = load %ast_AstNode*, %ast_AstNode** %from
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 3
	%2 = load i16, i16* %1
	%3 = zext i16 %2 to i32
	%4 = mul i32 %3, 4
	%5 = add i32 32, %4
	%6 = call [0 x i8]* @sys_zalloc(i32 %5)
	%7 = bitcast [0 x i8]* %6 to %ast_AstNode*
	store %ast_AstNode* %7, %ast_AstNode** %pa
	%8 = load %ast_AstNode*, %ast_AstNode** %from
	%9 = load %ast_AstNode, %ast_AstNode* %8
	%10 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode %9, %ast_AstNode* %10
	store i32 0, i32* %i
	br label %L.1
L.1:
	%11 = load i32, i32* %i
	%12 = load %ast_AstNode*, %ast_AstNode** %from
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 2
	%14 = load i16, i16* %13
	%15 = zext i16 %14 to i32
	%16 = icmp ult i32 %11, %15
	%17 = xor i1 %16, true
	br i1 %17, label %L.2, label %L.3
L.3:
	%18 = load %ast_AstNode*, %ast_AstNode** %from
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 11
	%20 = load i32, i32* %i
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %19, i32 0, i32 %20
	%22 = load %ast_AstNode*, %ast_AstNode** %21
	%23 = load %ast_AstNode*, %ast_AstNode** %pa
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = load i32, i32* %i
	%26 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 %25
	store %ast_AstNode* %22, %ast_AstNode** %26
	%27 = load i32, i32* %i
	%28 = add i32 %27, 1
	store i32 %28, i32* %i
	br label %L.1
L.2:
	%29 = call i16 @lex_Lineno()
	%30 = load %ast_AstNode*, %ast_AstNode** %pa
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 5
	store i16 %29, i16* %31
	%32 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %32, %ast_AstNode** %rv.0
	br label %return
return:
	%33 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %33
}
define internal %ast_AstNode* @ast_Expand(%ast_AstNode* %po$, i16 zeroext %newsize$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%po = alloca %ast_AstNode*
	store %ast_AstNode* %po$, %ast_AstNode** %po
	%newsize = alloca i16
	store i16 %newsize$, i16* %newsize
	%pn = alloca %ast_AstNode*
	%size = alloca i16
	%i = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %po
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 3
	%2 = load i16, i16* %1
	store i16 %2, i16* %size
	br label %L.1
L.1:
	%3 = load i16, i16* %size
	%4 = load i16, i16* %newsize
	%5 = icmp ult i16 %3, %4
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load i16, i16* %size
	%8 = icmp uge i16 %7, 16
	br i1 %8, label %L.5, label %L.6
L.5:
	%9 = load i16, i16* %size
	%10 = add i16 %9, 16
	store i16 %10, i16* %size
	br label %L.4
L.6:
	%11 = load i16, i16* %size
	%12 = mul i16 2, %11
	store i16 %12, i16* %size
	br label %L.4
L.4:
	br label %L.1
L.2:
	%13 = load %ast_AstNode*, %ast_AstNode** %po
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 0
	%15 = load i8, i8* %14
	%16 = load i16, i16* %size
	%17 = call %ast_AstNode* @ast_Alloc(i8 %15, i16 %16)
	store %ast_AstNode* %17, %ast_AstNode** %pn
	%18 = load %ast_AstNode*, %ast_AstNode** %po
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 0
	%20 = load i8, i8* %19
	%21 = load %ast_AstNode*, %ast_AstNode** %pn
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 0
	store i8 %20, i8* %22
	%23 = load %ast_AstNode*, %ast_AstNode** %po
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 7
	%25 = load i32, i32* %24
	%26 = load %ast_AstNode*, %ast_AstNode** %pn
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 7
	store i32 %25, i32* %27
	%28 = load %ast_AstNode*, %ast_AstNode** %po
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 4
	%30 = load i16, i16* %29
	%31 = load %ast_AstNode*, %ast_AstNode** %pn
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 4
	store i16 %30, i16* %32
	%33 = load %ast_AstNode*, %ast_AstNode** %po
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 5
	%35 = load i16, i16* %34
	%36 = load %ast_AstNode*, %ast_AstNode** %pn
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 5
	store i16 %35, i16* %37
	%38 = load %ast_AstNode*, %ast_AstNode** %po
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 2
	%40 = load i16, i16* %39
	%41 = load %ast_AstNode*, %ast_AstNode** %pn
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 2
	store i16 %40, i16* %42
	%43 = load %ast_AstNode*, %ast_AstNode** %po
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 6
	%45 = load i16, i16* %44
	%46 = load %ast_AstNode*, %ast_AstNode** %pn
	%47 = getelementptr %ast_AstNode, %ast_AstNode* %46, i32 0, i32 6
	store i16 %45, i16* %47
	%48 = load %ast_AstNode*, %ast_AstNode** %po
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 10
	%50 = load i64, i64* %49
	%51 = load %ast_AstNode*, %ast_AstNode** %pn
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 10
	store i64 %50, i64* %52
	%53 = load %ast_AstNode*, %ast_AstNode** %po
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 8
	%55 = load %type_TypeNode*, %type_TypeNode** %54
	%56 = load %ast_AstNode*, %ast_AstNode** %pn
	%57 = getelementptr %ast_AstNode, %ast_AstNode* %56, i32 0, i32 8
	store %type_TypeNode* %55, %type_TypeNode** %57
	%58 = load %ast_AstNode*, %ast_AstNode** %po
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 9
	%60 = load %symb_SymbNode*, %symb_SymbNode** %59
	%61 = load %ast_AstNode*, %ast_AstNode** %pn
	%62 = getelementptr %ast_AstNode, %ast_AstNode* %61, i32 0, i32 9
	store %symb_SymbNode* %60, %symb_SymbNode** %62
	store i16 0, i16* %i
	br label %L.7
L.7:
	%63 = load i16, i16* %i
	%64 = load %ast_AstNode*, %ast_AstNode** %po
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 3
	%66 = load i16, i16* %65
	%67 = icmp ult i16 %63, %66
	%68 = xor i1 %67, true
	br i1 %68, label %L.8, label %L.9
L.9:
	%69 = load %ast_AstNode*, %ast_AstNode** %po
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 11
	%71 = load i16, i16* %i
	%72 = zext i16 %71 to i32
	%73 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %70, i32 0, i32 %72
	%74 = load %ast_AstNode*, %ast_AstNode** %73
	%75 = load %ast_AstNode*, %ast_AstNode** %pn
	%76 = getelementptr %ast_AstNode, %ast_AstNode* %75, i32 0, i32 11
	%77 = load i16, i16* %i
	%78 = zext i16 %77 to i32
	%79 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %76, i32 0, i32 %78
	store %ast_AstNode* %74, %ast_AstNode** %79
	%80 = load i16, i16* %i
	%81 = add i16 %80, 1
	store i16 %81, i16* %i
	br label %L.7
L.8:
	%82 = load i16, i16* %size
	%83 = load %ast_AstNode*, %ast_AstNode** %pn
	%84 = getelementptr %ast_AstNode, %ast_AstNode* %83, i32 0, i32 3
	store i16 %82, i16* %84
	%85 = load %ast_AstNode*, %ast_AstNode** %pn
	store %ast_AstNode* %85, %ast_AstNode** %rv.0
	br label %return
return:
	%86 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %86
}
define internal %ast_AstNode* @ast_New(i8 zeroext %op$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%pa = alloca %ast_AstNode*
	%0 = load i8, i8* %op
	%1 = load i8, i8* %op
	%2 = zext i8 %1 to i32
	%3 = getelementptr [105 x i8], [105 x i8]* @ast_NumChildDefault, i32 0, i32 %2
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i16
	%6 = call %ast_AstNode* @ast_Alloc(i8 %0, i16 %5)
	store %ast_AstNode* %6, %ast_AstNode** %pa
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = load %ast_AstNode*, %ast_AstNode** %pa
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 8
	store %type_TypeNode* %7, %type_TypeNode** %9
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = icmp ne %type_TypeNode* %10, null
	br i1 %11, label %L.2, label %L.1
L.2:
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 11
	%14 = load i32, i32* %13
	%15 = load %ast_AstNode*, %ast_AstNode** %pa
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 7
	store i32 %14, i32* %16
	br label %L.1
L.1:
	%17 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %17, %ast_AstNode** %rv.0
	br label %return
return:
	%18 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %18
}
define internal %ast_AstNode* @ast_New1(i8 zeroext %op$, %type_TypeNode* %t$, %ast_AstNode* %pc0$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%pc0 = alloca %ast_AstNode*
	store %ast_AstNode* %pc0$, %ast_AstNode** %pc0
	%pa = alloca %ast_AstNode*
	%n = alloca i16
	%0 = load i8, i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [105 x i8], [105 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8, i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16, i16* %n
	%6 = icmp ult i16 %5, 1
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 1, i16* %n
	br label %L.1
L.1:
	%7 = load i8, i8* %op
	%8 = load i16, i16* %n
	%9 = call %ast_AstNode* @ast_Alloc(i8 %7, i16 %8)
	store %ast_AstNode* %9, %ast_AstNode** %pa
	%10 = load %ast_AstNode*, %ast_AstNode** %pc0
	%11 = load %ast_AstNode*, %ast_AstNode** %pa
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 11
	%13 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %12, i32 0, i32 0
	store %ast_AstNode* %10, %ast_AstNode** %13
	%14 = load %ast_AstNode*, %ast_AstNode** %pa
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 2
	store i16 1, i16* %15
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = load %ast_AstNode*, %ast_AstNode** %pa
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 8
	store %type_TypeNode* %16, %type_TypeNode** %18
	%19 = load %ast_AstNode*, %ast_AstNode** %pc0
	%20 = icmp ne %ast_AstNode* %19, null
	br i1 %20, label %L.4, label %L.3
L.4:
	%21 = load %ast_AstNode*, %ast_AstNode** %pc0
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 7
	%23 = load i32, i32* %22
	%24 = load %ast_AstNode*, %ast_AstNode** %pa
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 7
	store i32 %23, i32* %25
	br label %L.3
L.3:
	%26 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %26, %ast_AstNode** %rv.0
	br label %return
return:
	%27 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %27
}
define internal %ast_AstNode* @ast_New2(i8 zeroext %op$, %type_TypeNode* %t$, %ast_AstNode* %pc0$, %ast_AstNode* %pc1$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%pc0 = alloca %ast_AstNode*
	store %ast_AstNode* %pc0$, %ast_AstNode** %pc0
	%pc1 = alloca %ast_AstNode*
	store %ast_AstNode* %pc1$, %ast_AstNode** %pc1
	%pa = alloca %ast_AstNode*
	%n = alloca i16
	%0 = load i8, i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [105 x i8], [105 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8, i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16, i16* %n
	%6 = icmp ult i16 %5, 2
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 2, i16* %n
	br label %L.1
L.1:
	%7 = load i8, i8* %op
	%8 = load i16, i16* %n
	%9 = call %ast_AstNode* @ast_Alloc(i8 %7, i16 %8)
	store %ast_AstNode* %9, %ast_AstNode** %pa
	%10 = load %ast_AstNode*, %ast_AstNode** %pc0
	%11 = load %ast_AstNode*, %ast_AstNode** %pa
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 11
	%13 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %12, i32 0, i32 0
	store %ast_AstNode* %10, %ast_AstNode** %13
	%14 = load %ast_AstNode*, %ast_AstNode** %pc1
	%15 = load %ast_AstNode*, %ast_AstNode** %pa
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 1
	store %ast_AstNode* %14, %ast_AstNode** %17
	%18 = load %ast_AstNode*, %ast_AstNode** %pa
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 2
	store i16 2, i16* %19
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = load %ast_AstNode*, %ast_AstNode** %pa
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 8
	store %type_TypeNode* %20, %type_TypeNode** %22
	%23 = load %ast_AstNode*, %ast_AstNode** %pc0
	%24 = icmp ne %ast_AstNode* %23, null
	br i1 %24, label %L.4, label %L.3
L.4:
	%25 = load %ast_AstNode*, %ast_AstNode** %pc0
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 7
	%27 = load i32, i32* %26
	%28 = load %ast_AstNode*, %ast_AstNode** %pa
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 7
	store i32 %27, i32* %29
	br label %L.3
L.3:
	%30 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %30, %ast_AstNode** %rv.0
	br label %return
return:
	%31 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %31
}
define internal %ast_AstNode* @ast_New3(i8 zeroext %op$, %type_TypeNode* %t$, %ast_AstNode* %pc0$, %ast_AstNode* %pc1$, %ast_AstNode* %pc2$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%pc0 = alloca %ast_AstNode*
	store %ast_AstNode* %pc0$, %ast_AstNode** %pc0
	%pc1 = alloca %ast_AstNode*
	store %ast_AstNode* %pc1$, %ast_AstNode** %pc1
	%pc2 = alloca %ast_AstNode*
	store %ast_AstNode* %pc2$, %ast_AstNode** %pc2
	%pa = alloca %ast_AstNode*
	%n = alloca i16
	%0 = load i8, i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [105 x i8], [105 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8, i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16, i16* %n
	%6 = icmp ult i16 %5, 3
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 3, i16* %n
	br label %L.1
L.1:
	%7 = load i8, i8* %op
	%8 = load i16, i16* %n
	%9 = call %ast_AstNode* @ast_Alloc(i8 %7, i16 %8)
	store %ast_AstNode* %9, %ast_AstNode** %pa
	%10 = load %ast_AstNode*, %ast_AstNode** %pc0
	%11 = load %ast_AstNode*, %ast_AstNode** %pa
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 11
	%13 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %12, i32 0, i32 0
	store %ast_AstNode* %10, %ast_AstNode** %13
	%14 = load %ast_AstNode*, %ast_AstNode** %pc1
	%15 = load %ast_AstNode*, %ast_AstNode** %pa
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 1
	store %ast_AstNode* %14, %ast_AstNode** %17
	%18 = load %ast_AstNode*, %ast_AstNode** %pc2
	%19 = load %ast_AstNode*, %ast_AstNode** %pa
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 11
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %20, i32 0, i32 2
	store %ast_AstNode* %18, %ast_AstNode** %21
	%22 = load %ast_AstNode*, %ast_AstNode** %pa
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 2
	store i16 3, i16* %23
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = load %ast_AstNode*, %ast_AstNode** %pa
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 8
	store %type_TypeNode* %24, %type_TypeNode** %26
	%27 = load %ast_AstNode*, %ast_AstNode** %pc0
	%28 = icmp ne %ast_AstNode* %27, null
	br i1 %28, label %L.4, label %L.3
L.4:
	%29 = load %ast_AstNode*, %ast_AstNode** %pc0
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 7
	%31 = load i32, i32* %30
	%32 = load %ast_AstNode*, %ast_AstNode** %pa
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 7
	store i32 %31, i32* %33
	br label %L.3
L.3:
	%34 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %34, %ast_AstNode** %rv.0
	br label %return
return:
	%35 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %35
}
define internal %ast_AstNode* @ast_New4(i8 zeroext %op$, %type_TypeNode* %t$, %ast_AstNode* %pc0$, %ast_AstNode* %pc1$, %ast_AstNode* %pc2$, %ast_AstNode* %pc3$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%pc0 = alloca %ast_AstNode*
	store %ast_AstNode* %pc0$, %ast_AstNode** %pc0
	%pc1 = alloca %ast_AstNode*
	store %ast_AstNode* %pc1$, %ast_AstNode** %pc1
	%pc2 = alloca %ast_AstNode*
	store %ast_AstNode* %pc2$, %ast_AstNode** %pc2
	%pc3 = alloca %ast_AstNode*
	store %ast_AstNode* %pc3$, %ast_AstNode** %pc3
	%pa = alloca %ast_AstNode*
	%n = alloca i16
	%0 = load i8, i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [105 x i8], [105 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8, i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16, i16* %n
	%6 = icmp ult i16 %5, 4
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 4, i16* %n
	br label %L.1
L.1:
	%7 = load i8, i8* %op
	%8 = load i16, i16* %n
	%9 = call %ast_AstNode* @ast_Alloc(i8 %7, i16 %8)
	store %ast_AstNode* %9, %ast_AstNode** %pa
	%10 = load %ast_AstNode*, %ast_AstNode** %pc0
	%11 = load %ast_AstNode*, %ast_AstNode** %pa
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 11
	%13 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %12, i32 0, i32 0
	store %ast_AstNode* %10, %ast_AstNode** %13
	%14 = load %ast_AstNode*, %ast_AstNode** %pc1
	%15 = load %ast_AstNode*, %ast_AstNode** %pa
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 1
	store %ast_AstNode* %14, %ast_AstNode** %17
	%18 = load %ast_AstNode*, %ast_AstNode** %pc2
	%19 = load %ast_AstNode*, %ast_AstNode** %pa
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 11
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %20, i32 0, i32 2
	store %ast_AstNode* %18, %ast_AstNode** %21
	%22 = load %ast_AstNode*, %ast_AstNode** %pc3
	%23 = load %ast_AstNode*, %ast_AstNode** %pa
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 3
	store %ast_AstNode* %22, %ast_AstNode** %25
	%26 = load %ast_AstNode*, %ast_AstNode** %pa
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 2
	store i16 4, i16* %27
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = load %ast_AstNode*, %ast_AstNode** %pa
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 8
	store %type_TypeNode* %28, %type_TypeNode** %30
	%31 = load %ast_AstNode*, %ast_AstNode** %pc0
	%32 = icmp ne %ast_AstNode* %31, null
	br i1 %32, label %L.4, label %L.3
L.4:
	%33 = load %ast_AstNode*, %ast_AstNode** %pc0
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 7
	%35 = load i32, i32* %34
	%36 = load %ast_AstNode*, %ast_AstNode** %pa
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 7
	store i32 %35, i32* %37
	br label %L.3
L.3:
	%38 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %38, %ast_AstNode** %rv.0
	br label %return
return:
	%39 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %39
}
define internal %ast_AstNode* @ast_Child(%ast_AstNode* %pp$, %ast_AstNode* %pc$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%pp = alloca %ast_AstNode*
	store %ast_AstNode* %pp$, %ast_AstNode** %pp
	%pc = alloca %ast_AstNode*
	store %ast_AstNode* %pc$, %ast_AstNode** %pc
	%n = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %pp
	%1 = icmp ne %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast_AstNode*, %ast_AstNode** %pp
	%3 = getelementptr %ast_AstNode, %ast_AstNode* %2, i32 0, i32 2
	%4 = load i16, i16* %3
	%5 = add i16 %4, 1
	store i16 %5, i16* %n
	%6 = load i16, i16* %n
	%7 = load %ast_AstNode*, %ast_AstNode** %pp
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 3
	%9 = load i16, i16* %8
	%10 = icmp ugt i16 %6, %9
	br i1 %10, label %L.4, label %L.3
L.4:
	%11 = load %ast_AstNode*, %ast_AstNode** %pp
	%12 = load i16, i16* %n
	%13 = call %ast_AstNode* @ast_Expand(%ast_AstNode* %11, i16 %12)
	store %ast_AstNode* %13, %ast_AstNode** %pp
	br label %L.3
L.3:
	%14 = load %ast_AstNode*, %ast_AstNode** %pc
	%15 = load %ast_AstNode*, %ast_AstNode** %pp
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = load %ast_AstNode*, %ast_AstNode** %pp
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 2
	%19 = load i16, i16* %18
	%20 = zext i16 %19 to i32
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 %20
	store %ast_AstNode* %14, %ast_AstNode** %21
	%22 = load i16, i16* %n
	%23 = load %ast_AstNode*, %ast_AstNode** %pp
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 2
	store i16 %22, i16* %24
	br label %L.1
L.1:
	%25 = load %ast_AstNode*, %ast_AstNode** %pp
	store %ast_AstNode* %25, %ast_AstNode** %rv.0
	br label %return
return:
	%26 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %26
}
define internal %ast_AstNode* @ast_ChildIndexed(%ast_AstNode* %pp$, i16 zeroext %n$, %ast_AstNode* %pc$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%pp = alloca %ast_AstNode*
	store %ast_AstNode* %pp$, %ast_AstNode** %pp
	%n = alloca i16
	store i16 %n$, i16* %n
	%pc = alloca %ast_AstNode*
	store %ast_AstNode* %pc$, %ast_AstNode** %pc
	%0 = load i16, i16* %n
	%1 = add i16 %0, 1
	store i16 %1, i16* %n
	%2 = load i16, i16* %n
	%3 = load %ast_AstNode*, %ast_AstNode** %pp
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 3
	%5 = load i16, i16* %4
	%6 = icmp ugt i16 %2, %5
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load %ast_AstNode*, %ast_AstNode** %pp
	%8 = load i16, i16* %n
	%9 = call %ast_AstNode* @ast_Expand(%ast_AstNode* %7, i16 %8)
	store %ast_AstNode* %9, %ast_AstNode** %pp
	br label %L.1
L.1:
	%10 = load %ast_AstNode*, %ast_AstNode** %pc
	%11 = load %ast_AstNode*, %ast_AstNode** %pp
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 11
	%13 = load i16, i16* %n
	%14 = sub i16 %13, 1
	%15 = zext i16 %14 to i32
	%16 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %12, i32 0, i32 %15
	store %ast_AstNode* %10, %ast_AstNode** %16
	%17 = load i16, i16* %n
	%18 = load %ast_AstNode*, %ast_AstNode** %pp
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 2
	%20 = load i16, i16* %19
	%21 = icmp ugt i16 %17, %20
	br i1 %21, label %L.4, label %L.3
L.4:
	%22 = load i16, i16* %n
	%23 = load %ast_AstNode*, %ast_AstNode** %pp
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 2
	store i16 %22, i16* %24
	br label %L.3
L.3:
	%25 = load %ast_AstNode*, %ast_AstNode** %pp
	store %ast_AstNode* %25, %ast_AstNode** %rv.0
	br label %return
return:
	%26 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %26
}
define internal %ast_AstNode* @ast_Const(%type_TypeNode* %t$, i64 %value$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%value = alloca i64
	store i64 %value$, i64* %value
	%pa = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 16
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 4
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = call %ast_AstNode* @ast_New(i8 7, %type_TypeNode* %4)
	store %ast_AstNode* %5, %ast_AstNode** %pa
	br label %L.1
L.3:
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = call %ast_AstNode* @ast_New(i8 6, %type_TypeNode* %6)
	store %ast_AstNode* %7, %ast_AstNode** %pa
	br label %L.1
L.1:
	%8 = load i64, i64* %value
	%9 = load %ast_AstNode*, %ast_AstNode** %pa
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 10
	store i64 %8, i64* %10
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = icmp ne %type_TypeNode* %11, null
	br i1 %12, label %L.5, label %L.4
L.5:
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 11
	%15 = load i32, i32* %14
	%16 = load %ast_AstNode*, %ast_AstNode** %pa
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 7
	store i32 %15, i32* %17
	br label %L.4
L.4:
	%18 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %18, %ast_AstNode** %rv.0
	br label %return
return:
	%19 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %19
}
define internal %ast_AstNode* @ast_ConstW(i64 %value$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%value = alloca i64
	store i64 %value$, i64* %value
	%pa = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%1 = call %ast_AstNode* @ast_New(i8 6, %type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %pa
	%2 = load i64, i64* %value
	%3 = load %ast_AstNode*, %ast_AstNode** %pa
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 10
	store i64 %2, i64* %4
	%5 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 11
	%7 = load i32, i32* %6
	%8 = load %ast_AstNode*, %ast_AstNode** %pa
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 7
	store i32 %7, i32* %9
	%10 = load %ast_AstNode*, %ast_AstNode** %pa
	store %ast_AstNode* %10, %ast_AstNode** %rv.0
	br label %return
return:
	%11 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %11
}
define internal %ast_AstNode* @ast_OpIfExpr(%ast_AstNode* %ctree$, %ast_AstNode* %ttree$, %ast_AstNode* %ftree$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	store %ast_AstNode* %ctree$, %ast_AstNode** %ctree
	%ttree = alloca %ast_AstNode*
	store %ast_AstNode* %ttree$, %ast_AstNode** %ttree
	%ftree = alloca %ast_AstNode*
	store %ast_AstNode* %ftree$, %ast_AstNode** %ftree
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %ctree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 6
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %ctree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 10
	%6 = load i64, i64* %5
	%7 = icmp ne i64 %6, 0
	br i1 %7, label %L.5, label %L.6
L.5:
	%8 = load %ast_AstNode*, %ast_AstNode** %ttree
	store %ast_AstNode* %8, %ast_AstNode** %tree
	br label %L.4
L.6:
	%9 = load %ast_AstNode*, %ast_AstNode** %ftree
	store %ast_AstNode* %9, %ast_AstNode** %tree
	br label %L.4
L.4:
	br label %L.1
L.3:
	%10 = load %ast_AstNode*, %ast_AstNode** %ttree
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 8
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	%13 = load %ast_AstNode*, %ast_AstNode** %ctree
	%14 = load %ast_AstNode*, %ast_AstNode** %ttree
	%15 = load %ast_AstNode*, %ast_AstNode** %ftree
	%16 = call %ast_AstNode* @ast_New3(i8 95, %type_TypeNode* %12, %ast_AstNode* %13, %ast_AstNode* %14, %ast_AstNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	br label %L.1
L.1:
	%17 = load %type_TypeNode*, %type_TypeNode** %t
	%18 = getelementptr %type_TypeNode, %type_TypeNode* %17, i32 0, i32 11
	%19 = load i32, i32* %18
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 7
	store i32 %19, i32* %21
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %22, %ast_AstNode** %rv.0
	br label %return
return:
	%23 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %23
}
define internal void @ast_CheckConstTruncate(%ast_AstNode* %node$, i32 %size$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%size = alloca i32
	store i32 %size$, i32* %size
	%0 = load i32, i32* %size
	%1 = icmp uge i32 %0, 64
	br i1 %1, label %L.2, label %L.1
L.2:
	br label %return
L.1:
	%2 = load %ast_AstNode*, %ast_AstNode** %node
	%3 = getelementptr %ast_AstNode, %ast_AstNode* %2, i32 0, i32 8
	%4 = load %type_TypeNode*, %type_TypeNode** %3
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 16
	%6 = load i8, i8* %5
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.3 [
		i32 3, label %L.5
		i32 4, label %L.6
	]
L.5:
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 10
	%10 = load i64, i64* %9
	%11 = icmp slt i64 %10, 0
	br i1 %11, label %L.8, label %L.9
L.8:
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 10
	%14 = load i64, i64* %13
	%15 = load i32, i32* %size
	%16 = zext i32 %15 to i64
	%17 = add i64 %16, 1
	%18 = ashr i64 %14, %17
	%19 = icmp ne i64 %18, -1
	br i1 %19, label %L.11, label %L.10
L.11:
	call void @lex_Error(i8 4)
	br label %L.10
L.10:
	br label %L.7
L.9:
	%20 = load %ast_AstNode*, %ast_AstNode** %node
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 10
	%22 = load i64, i64* %21
	%23 = load i32, i32* %size
	%24 = zext i32 %23 to i64
	%25 = add i64 %24, 1
	%26 = lshr i64 %22, %25
	%27 = icmp ne i64 %26, 0
	br i1 %27, label %L.13, label %L.12
L.13:
	call void @lex_Error(i8 4)
	br label %L.12
L.12:
	br label %L.7
L.7:
	br label %L.4
L.6:
	br label %L.4
L.3:
	%28 = load %ast_AstNode*, %ast_AstNode** %node
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 10
	%30 = load i64, i64* %29
	%31 = load i32, i32* %size
	%32 = zext i32 %31 to i64
	%33 = lshr i64 %30, %32
	%34 = icmp ne i64 %33, 0
	br i1 %34, label %L.15, label %L.14
L.15:
	call void @lex_Error(i8 4)
	br label %L.14
L.14:
	br label %L.4
L.4:
	br label %return
return:
	ret void
}
define internal %ast_AstNode* @ast_Trunc(%ast_AstNode* %tree$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = load %ast_AstNode*, %ast_AstNode** %tree
	%2 = call %ast_AstNode* @ast_New1(i8 31, %type_TypeNode* %0, %ast_AstNode* %1)
	store %ast_AstNode* %2, %ast_AstNode** %tree
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 10
	%5 = load i32, i32* %4
	%6 = load %ast_AstNode*, %ast_AstNode** %tree
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 7
	store i32 %5, i32* %7
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %8, %ast_AstNode** %rv.0
	br label %return
return:
	%9 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %9
}
define internal %ast_AstNode* @ast_Extend(%ast_AstNode* %tree$, i32 %size$, i8 zeroext %iscast$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%size = alloca i32
	store i32 %size$, i32* %size
	%iscast = alloca i8
	store i8 %iscast$, i8* %iscast
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 7
	%2 = load i32, i32* %1
	%3 = load i32, i32* %size
	%4 = icmp ult i32 %2, %3
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %ast_AstNode*, %ast_AstNode** %tree
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 0
	%7 = load i8, i8* %6
	%8 = icmp ne i8 %7, 6
	br i1 %8, label %L.4, label %L.5
L.4:
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = icmp ne i8 %11, 7
	br label %L.5
L.5:
	%13 = phi i1 [ false, %L.2 ], [ %12, %L.4 ]
	br i1 %13, label %L.7, label %L.6
L.7:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 8
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 16
	%18 = load i8, i8* %17
	%19 = zext i8 %18 to i32
	switch i32 %19, label %L.8 [
		i32 4, label %L.10
		i32 3, label %L.11
	]
L.10:
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 8
	%22 = load %type_TypeNode*, %type_TypeNode** %21
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = call %ast_AstNode* @ast_New1(i8 45, %type_TypeNode* %22, %ast_AstNode* %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	br label %L.9
L.11:
	%25 = load %ast_AstNode*, %ast_AstNode** %tree
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 8
	%27 = load %type_TypeNode*, %type_TypeNode** %26
	%28 = load %ast_AstNode*, %ast_AstNode** %tree
	%29 = call %ast_AstNode* @ast_New1(i8 30, %type_TypeNode* %27, %ast_AstNode* %28)
	store %ast_AstNode* %29, %ast_AstNode** %tree
	br label %L.9
L.8:
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 8
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	%33 = load %ast_AstNode*, %ast_AstNode** %tree
	%34 = call %ast_AstNode* @ast_New1(i8 29, %type_TypeNode* %32, %ast_AstNode* %33)
	store %ast_AstNode* %34, %ast_AstNode** %tree
	br label %L.9
L.9:
	br label %L.6
L.6:
	%35 = load i32, i32* %size
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 7
	store i32 %35, i32* %37
	br label %L.1
L.3:
	%38 = load %ast_AstNode*, %ast_AstNode** %tree
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 7
	%40 = load i32, i32* %39
	%41 = load i32, i32* %size
	%42 = icmp ugt i32 %40, %41
	br i1 %42, label %L.13, label %L.12
L.13:
	%43 = load %ast_AstNode*, %ast_AstNode** %tree
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 0
	%45 = load i8, i8* %44
	%46 = icmp ne i8 %45, 6
	br i1 %46, label %L.14, label %L.15
L.14:
	%47 = load %ast_AstNode*, %ast_AstNode** %tree
	%48 = getelementptr %ast_AstNode, %ast_AstNode* %47, i32 0, i32 0
	%49 = load i8, i8* %48
	%50 = icmp ne i8 %49, 7
	br label %L.15
L.15:
	%51 = phi i1 [ false, %L.13 ], [ %50, %L.14 ]
	br i1 %51, label %L.17, label %L.18
L.17:
	%52 = load %ast_AstNode*, %ast_AstNode** %tree
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 8
	%54 = load %type_TypeNode*, %type_TypeNode** %53
	%55 = getelementptr %type_TypeNode, %type_TypeNode* %54, i32 0, i32 16
	%56 = load i8, i8* %55
	%57 = icmp eq i8 %56, 4
	br i1 %57, label %L.20, label %L.21
L.20:
	%58 = load %ast_AstNode*, %ast_AstNode** %tree
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 8
	%60 = load %type_TypeNode*, %type_TypeNode** %59
	%61 = load %ast_AstNode*, %ast_AstNode** %tree
	%62 = call %ast_AstNode* @ast_New1(i8 46, %type_TypeNode* %60, %ast_AstNode* %61)
	store %ast_AstNode* %62, %ast_AstNode** %tree
	br label %L.19
L.21:
	%63 = load %ast_AstNode*, %ast_AstNode** %tree
	%64 = getelementptr %ast_AstNode, %ast_AstNode* %63, i32 0, i32 8
	%65 = load %type_TypeNode*, %type_TypeNode** %64
	%66 = load %ast_AstNode*, %ast_AstNode** %tree
	%67 = call %ast_AstNode* @ast_New1(i8 31, %type_TypeNode* %65, %ast_AstNode* %66)
	store %ast_AstNode* %67, %ast_AstNode** %tree
	br label %L.19
L.19:
	%68 = getelementptr %A.3, %A.3* @feature, i32 0, i32 4
	%69 = load i8, i8* %68
	%70 = icmp ne i8 %69, 0
	br i1 %70, label %L.22, label %L.23
L.22:
	%71 = load i8, i8* %iscast
	%72 = icmp ne i8 %71, 0
	%73 = xor i1 %72, true
	br label %L.23
L.23:
	%74 = phi i1 [ false, %L.19 ], [ %73, %L.22 ]
	br i1 %74, label %L.25, label %L.24
L.25:
	call void @lex_Error(i8 4)
	br label %L.24
L.24:
	br label %L.16
L.18:
	%75 = load %ast_AstNode*, %ast_AstNode** %tree
	%76 = load i32, i32* %size
	call void @ast_CheckConstTruncate(%ast_AstNode* %75, i32 %76)
	br label %L.16
L.16:
	%77 = load i32, i32* %size
	%78 = load %ast_AstNode*, %ast_AstNode** %tree
	%79 = getelementptr %ast_AstNode, %ast_AstNode* %78, i32 0, i32 7
	store i32 %77, i32* %79
	br label %L.12
L.12:
	br label %L.1
L.1:
	%80 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %80, %ast_AstNode** %rv.0
	br label %return
return:
	%81 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %81
}
define internal %ast_AstNode* @ast_ExtendT(%ast_AstNode* %tree$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = getelementptr %type_TypeNode, %type_TypeNode* %1, i32 0, i32 11
	%3 = load i32, i32* %2
	%4 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %0, i32 %3, i8 0)
	store %ast_AstNode* %4, %ast_AstNode** %tree
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = load %ast_AstNode*, %ast_AstNode** %tree
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	store %type_TypeNode* %5, %type_TypeNode** %7
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %8, %ast_AstNode** %rv.0
	br label %return
return:
	%9 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %9
}
define internal %ast_AstNode* @ast_ExtendCast(%ast_AstNode* %tree$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = getelementptr %type_TypeNode, %type_TypeNode* %1, i32 0, i32 11
	%3 = load i32, i32* %2
	%4 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %0, i32 %3, i8 1)
	store %ast_AstNode* %4, %ast_AstNode** %tree
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = load %ast_AstNode*, %ast_AstNode** %tree
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	store %type_TypeNode* %5, %type_TypeNode** %7
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %8, %ast_AstNode** %rv.0
	br label %return
return:
	%9 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %9
}
define internal %ast_AstNode* @ast_Cast(%ast_AstNode* %tree$, %type_TypeNode* %to$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%to = alloca %type_TypeNode*
	store %type_TypeNode* %to$, %type_TypeNode** %to
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = icmp eq %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %2, %ast_AstNode** %rv.0
	br label %return
L.1:
	%3 = load %type_TypeNode*, %type_TypeNode** %to
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 16
	%5 = load i8, i8* %4
	%6 = zext i8 %5 to i32
	switch i32 %6, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.6
		i32 3, label %L.7
		i32 4, label %L.8
		i32 5, label %L.9
		i32 7, label %L.10
		i32 6, label %L.10
	]
L.5:
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 8
	%9 = load %type_TypeNode*, %type_TypeNode** %8
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 16
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	switch i32 %12, label %L.11 [
		i32 1, label %L.13
		i32 2, label %L.13
	]
L.13:
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = load %type_TypeNode*, %type_TypeNode** %to
	%15 = call %ast_AstNode* @ast_ExtendCast(%ast_AstNode* %13, %type_TypeNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %tree
	br label %L.12
L.11:
	call void @lex_Error(i8 53)
	br label %L.12
L.12:
	br label %L.4
L.6:
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 8
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 16
	%20 = load i8, i8* %19
	%21 = zext i8 %20 to i32
	switch i32 %21, label %L.14 [
		i32 1, label %L.16
		i32 2, label %L.16
		i32 3, label %L.16
		i32 5, label %L.17
		i32 7, label %L.18
		i32 6, label %L.18
		i32 4, label %L.19
	]
L.16:
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	%23 = load %type_TypeNode*, %type_TypeNode** %to
	%24 = call %ast_AstNode* @ast_ExtendCast(%ast_AstNode* %22, %type_TypeNode* %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	br label %L.15
L.17:
	%25 = load %type_TypeNode*, %type_TypeNode** %to
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %25, %ast_AstNode* %26)
	store %ast_AstNode* %27, %ast_AstNode** %tree
	%28 = load %type_TypeNode*, %type_TypeNode** %to
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 10
	%30 = load i32, i32* %29
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 7
	store i32 %30, i32* %32
	br label %L.15
L.18:
	%33 = load %ast_AstNode*, %ast_AstNode** %tree
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 8
	%35 = load %type_TypeNode*, %type_TypeNode** %34
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 24
	%37 = load i8, i8* %36
	%38 = icmp ne i8 %37, 0
	br i1 %38, label %L.20, label %L.21
L.20:
	%39 = load %ast_AstNode*, %ast_AstNode** %tree
	%40 = getelementptr %ast_AstNode, %ast_AstNode* %39, i32 0, i32 7
	%41 = load i32, i32* %40
	%42 = load %type_TypeNode*, %type_TypeNode** %to
	%43 = getelementptr %type_TypeNode, %type_TypeNode* %42, i32 0, i32 10
	%44 = load i32, i32* %43
	%45 = icmp eq i32 %41, %44
	br label %L.21
L.21:
	%46 = phi i1 [ false, %L.18 ], [ %45, %L.20 ]
	br i1 %46, label %L.23, label %L.24
L.23:
	%47 = load %type_TypeNode*, %type_TypeNode** %to
	%48 = load %ast_AstNode*, %ast_AstNode** %tree
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 8
	store %type_TypeNode* %47, %type_TypeNode** %49
	br label %L.22
L.24:
	call void @lex_Error(i8 53)
	br label %L.22
L.22:
	br label %L.15
L.19:
	%50 = load %type_TypeNode*, %type_TypeNode** %to
	%51 = load %ast_AstNode*, %ast_AstNode** %tree
	%52 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %50, %ast_AstNode* %51)
	store %ast_AstNode* %52, %ast_AstNode** %tree
	%53 = load %type_TypeNode*, %type_TypeNode** %to
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 11
	%55 = load i32, i32* %54
	%56 = load %ast_AstNode*, %ast_AstNode** %tree
	%57 = getelementptr %ast_AstNode, %ast_AstNode* %56, i32 0, i32 7
	store i32 %55, i32* %57
	br label %L.15
L.14:
	call void @lex_Error(i8 53)
	br label %L.15
L.15:
	br label %L.4
L.7:
	%58 = load %ast_AstNode*, %ast_AstNode** %tree
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 8
	%60 = load %type_TypeNode*, %type_TypeNode** %59
	%61 = getelementptr %type_TypeNode, %type_TypeNode* %60, i32 0, i32 16
	%62 = load i8, i8* %61
	%63 = zext i8 %62 to i32
	switch i32 %63, label %L.25 [
		i32 2, label %L.27
		i32 3, label %L.27
	]
L.27:
	%64 = load %ast_AstNode*, %ast_AstNode** %tree
	%65 = load %type_TypeNode*, %type_TypeNode** %to
	%66 = call %ast_AstNode* @ast_ExtendCast(%ast_AstNode* %64, %type_TypeNode* %65)
	store %ast_AstNode* %66, %ast_AstNode** %tree
	br label %L.26
L.25:
	call void @lex_Error(i8 53)
	br label %L.26
L.26:
	br label %L.4
L.8:
	%67 = load %ast_AstNode*, %ast_AstNode** %tree
	%68 = getelementptr %ast_AstNode, %ast_AstNode* %67, i32 0, i32 8
	%69 = load %type_TypeNode*, %type_TypeNode** %68
	%70 = getelementptr %type_TypeNode, %type_TypeNode* %69, i32 0, i32 16
	%71 = load i8, i8* %70
	%72 = icmp eq i8 %71, 2
	br i1 %72, label %L.29, label %L.30
L.29:
	%73 = load %ast_AstNode*, %ast_AstNode** %tree
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 0
	%75 = load i8, i8* %74
	%76 = icmp eq i8 %75, 6
	br i1 %76, label %L.32, label %L.33
L.32:
	%val = alloca i64
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	%78 = getelementptr %ast_AstNode, %ast_AstNode* %77, i32 0, i32 10
	%79 = load i64, i64* %78
	store i64 %79, i64* %val
	%80 = load %type_TypeNode*, %type_TypeNode** %to
	%81 = getelementptr %type_TypeNode, %type_TypeNode* %80, i32 0, i32 10
	%82 = load i32, i32* %81
	%83 = icmp eq i32 %82, 32
	br i1 %83, label %L.35, label %L.34
L.35:
	%84 = load i64, i64* %val
	%85 = shl i64 %84, 32
	%86 = and i64 %85, 18410715276690587648
	%87 = load i64, i64* %val
	%88 = shl i64 %87, 29
	%89 = and i64 %88, 4503595332403200
	%90 = or i64 %86, %89
	store i64 %90, i64* %val
	br label %L.34
L.34:
	%91 = load %type_TypeNode*, %type_TypeNode** %to
	%92 = call %ast_AstNode* @ast_New(i8 7, %type_TypeNode* %91)
	store %ast_AstNode* %92, %ast_AstNode** %tree
	%93 = load i64, i64* %val
	%94 = load %ast_AstNode*, %ast_AstNode** %tree
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 10
	store i64 %93, i64* %95
	br label %L.31
L.33:
	%96 = load %type_TypeNode*, %type_TypeNode** %to
	%97 = load %ast_AstNode*, %ast_AstNode** %tree
	%98 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %96, %ast_AstNode* %97)
	store %ast_AstNode* %98, %ast_AstNode** %tree
	%99 = load %type_TypeNode*, %type_TypeNode** %to
	%100 = getelementptr %type_TypeNode, %type_TypeNode* %99, i32 0, i32 11
	%101 = load i32, i32* %100
	%102 = load %ast_AstNode*, %ast_AstNode** %tree
	%103 = getelementptr %ast_AstNode, %ast_AstNode* %102, i32 0, i32 7
	store i32 %101, i32* %103
	br label %L.31
L.31:
	br label %L.28
L.30:
	call void @lex_Error(i8 53)
	br label %L.28
L.28:
	br label %L.4
L.9:
	%104 = load %ast_AstNode*, %ast_AstNode** %tree
	%105 = getelementptr %ast_AstNode, %ast_AstNode* %104, i32 0, i32 8
	%106 = load %type_TypeNode*, %type_TypeNode** %105
	%107 = getelementptr %type_TypeNode, %type_TypeNode* %106, i32 0, i32 16
	%108 = load i8, i8* %107
	%109 = zext i8 %108 to i32
	switch i32 %109, label %L.36 [
		i32 5, label %L.38
		i32 2, label %L.39
		i32 6, label %L.40
	]
L.38:
	%110 = load %type_TypeNode*, %type_TypeNode** %to
	%111 = load %ast_AstNode*, %ast_AstNode** %tree
	%112 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %110, %ast_AstNode* %111)
	store %ast_AstNode* %112, %ast_AstNode** %tree
	%113 = load %target_ModelT*, %target_ModelT** @target_Target
	%114 = getelementptr %target_ModelT, %target_ModelT* %113, i32 0, i32 5
	%115 = getelementptr %target_SizeAlign, %target_SizeAlign* %114, i32 0, i32 0
	%116 = load i8, i8* %115
	%117 = zext i8 %116 to i32
	%118 = load %ast_AstNode*, %ast_AstNode** %tree
	%119 = getelementptr %ast_AstNode, %ast_AstNode* %118, i32 0, i32 7
	store i32 %117, i32* %119
	br label %L.37
L.39:
	%120 = load %ast_AstNode*, %ast_AstNode** %tree
	%121 = getelementptr %ast_AstNode, %ast_AstNode* %120, i32 0, i32 7
	%122 = load i32, i32* %121
	%123 = load %target_ModelT*, %target_ModelT** @target_Target
	%124 = getelementptr %target_ModelT, %target_ModelT* %123, i32 0, i32 5
	%125 = getelementptr %target_SizeAlign, %target_SizeAlign* %124, i32 0, i32 0
	%126 = load i8, i8* %125
	%127 = zext i8 %126 to i32
	%128 = icmp ne i32 %122, %127
	br i1 %128, label %L.42, label %L.41
L.42:
	call void @lex_Error(i8 7)
	br label %L.41
L.41:
	%129 = load %type_TypeNode*, %type_TypeNode** %to
	%130 = load %ast_AstNode*, %ast_AstNode** %tree
	%131 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %129, %ast_AstNode* %130)
	store %ast_AstNode* %131, %ast_AstNode** %tree
	%132 = load %type_TypeNode*, %type_TypeNode** %to
	%133 = getelementptr %type_TypeNode, %type_TypeNode* %132, i32 0, i32 10
	%134 = load i32, i32* %133
	%135 = load %ast_AstNode*, %ast_AstNode** %tree
	%136 = getelementptr %ast_AstNode, %ast_AstNode* %135, i32 0, i32 7
	store i32 %134, i32* %136
	br label %L.37
L.40:
	%137 = load %ast_AstNode*, %ast_AstNode** %tree
	%138 = getelementptr %ast_AstNode, %ast_AstNode* %137, i32 0, i32 0
	%139 = load i8, i8* %138
	%140 = icmp eq i8 %139, 27
	br i1 %140, label %L.44, label %L.43
L.44:
	%141 = load %ast_AstNode*, %ast_AstNode** %tree
	%142 = getelementptr %ast_AstNode, %ast_AstNode* %141, i32 0, i32 11
	%143 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %142, i32 0, i32 0
	%144 = load %ast_AstNode*, %ast_AstNode** %143
	store %ast_AstNode* %144, %ast_AstNode** %tree
	br label %L.43
L.43:
	%145 = load %ast_AstNode*, %ast_AstNode** %tree
	%146 = getelementptr %ast_AstNode, %ast_AstNode* %145, i32 0, i32 0
	%147 = load i8, i8* %146
	%148 = icmp eq i8 %147, 15
	br i1 %148, label %L.45, label %L.46
L.45:
	%149 = load %ast_AstNode*, %ast_AstNode** %tree
	%150 = getelementptr %ast_AstNode, %ast_AstNode* %149, i32 0, i32 8
	%151 = load %type_TypeNode*, %type_TypeNode** %150
	%152 = getelementptr %type_TypeNode, %type_TypeNode* %151, i32 0, i32 0
	%153 = load %type_TypeNode*, %type_TypeNode** %152
	%154 = getelementptr %type_TypeNode, %type_TypeNode* %153, i32 0, i32 0
	%155 = load %type_TypeNode*, %type_TypeNode** %154
	%156 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%157 = icmp eq %type_TypeNode* %155, %156
	br label %L.46
L.46:
	%158 = phi i1 [ false, %L.43 ], [ %157, %L.45 ]
	br i1 %158, label %L.48, label %L.49
L.48:
	%159 = load %type_TypeNode*, %type_TypeNode** %to
	%160 = load %ast_AstNode*, %ast_AstNode** %tree
	%161 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %159, %ast_AstNode* %160)
	store %ast_AstNode* %161, %ast_AstNode** %tree
	%162 = load %type_TypeNode*, %type_TypeNode** %to
	%163 = getelementptr %type_TypeNode, %type_TypeNode* %162, i32 0, i32 10
	%164 = load i32, i32* %163
	%165 = load %ast_AstNode*, %ast_AstNode** %tree
	%166 = getelementptr %ast_AstNode, %ast_AstNode* %165, i32 0, i32 7
	store i32 %164, i32* %166
	br label %L.47
L.49:
	call void @lex_Error(i8 53)
	br label %L.47
L.47:
	br label %L.37
L.36:
	call void @lex_Error(i8 53)
	br label %L.37
L.37:
	br label %L.4
L.10:
	%167 = load %type_TypeNode*, %type_TypeNode** %to
	%168 = getelementptr %type_TypeNode, %type_TypeNode* %167, i32 0, i32 24
	%169 = load i8, i8* %168
	%170 = icmp ne i8 %169, 0
	br i1 %170, label %L.50, label %L.51
L.50:
	%171 = load %ast_AstNode*, %ast_AstNode** %tree
	%172 = getelementptr %ast_AstNode, %ast_AstNode* %171, i32 0, i32 8
	%173 = load %type_TypeNode*, %type_TypeNode** %172
	%174 = getelementptr %type_TypeNode, %type_TypeNode* %173, i32 0, i32 16
	%175 = load i8, i8* %174
	%176 = icmp eq i8 %175, 2
	br label %L.51
L.51:
	%177 = phi i1 [ false, %L.10 ], [ %176, %L.50 ]
	br i1 %177, label %L.53, label %L.54
L.53:
	%178 = load %ast_AstNode*, %ast_AstNode** %tree
	%179 = load %type_TypeNode*, %type_TypeNode** %to
	%180 = call %ast_AstNode* @ast_ExtendCast(%ast_AstNode* %178, %type_TypeNode* %179)
	store %ast_AstNode* %180, %ast_AstNode** %tree
	br label %L.52
L.54:
	call void @lex_Error(i8 53)
	br label %L.52
L.52:
	br label %L.4
L.3:
	br label %L.4
L.4:
	%181 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %181, %ast_AstNode** %rv.0
	br label %return
return:
	%182 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %182
}
define internal %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = icmp ne %type_TypeNode* %2, null
	br i1 %3, label %L.1, label %L.2
L.1:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%8 = call i8 @type_Compat(%type_TypeNode* %6, %type_TypeNode* %7)
	%9 = icmp ne i8 %8, 0
	%10 = xor i1 %9, true
	br label %L.2
L.2:
	%11 = phi i1 [ false, %L.0 ], [ %10, %L.1 ]
	br i1 %11, label %L.4, label %L.3
L.4:
	call void @lex_Error(i8 50)
	br label %L.3
L.3:
	%12 = load %ast_AstNode*, %ast_AstNode** %tree
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 7
	%14 = load i32, i32* %13
	%15 = icmp ugt i32 %14, 1
	br i1 %15, label %L.6, label %L.5
L.6:
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 0
	%18 = load i8, i8* %17
	%19 = icmp ne i8 %18, 6
	br i1 %19, label %L.8, label %L.7
L.8:
	%20 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 8
	%24 = load %type_TypeNode*, %type_TypeNode** %23
	%25 = call %ast_AstNode* @ast_Const(%type_TypeNode* %24, i64 0)
	%26 = call %ast_AstNode* @ast_New2(i8 70, %type_TypeNode* %20, %ast_AstNode* %21, %ast_AstNode* %25)
	store %ast_AstNode* %26, %ast_AstNode** %tree
	br label %L.7
L.7:
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 7
	store i32 1, i32* %28
	br label %L.5
L.5:
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %29, %ast_AstNode** %rv.0
	br label %return
return:
	%30 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %30
}
define internal i32 @ast_popcnt(i64 %x$) nounwind {
L.0:
	%rv.0 = alloca i32
	%x = alloca i64
	store i64 %x$, i64* %x
	%n = alloca i32
	store i32 0, i32* %n
	br label %L.1
L.1:
	%0 = load i64, i64* %x
	%1 = icmp ne i64 %0, 0
	%2 = xor i1 %1, true
	br i1 %2, label %L.2, label %L.3
L.3:
	%3 = load i32, i32* %n
	%4 = add i32 %3, 1
	store i32 %4, i32* %n
	%5 = load i64, i64* %x
	%6 = load i64, i64* %x
	%7 = sub i64 %6, 1
	%8 = and i64 %5, %7
	store i64 %8, i64* %x
	br label %L.1
L.2:
	%9 = load i32, i32* %n
	store i32 %9, i32* %rv.0
	br label %return
return:
	%10 = load i32, i32* %rv.0
	ret i32 %10
}
@S.373 = private unnamed_addr constant [26 x i8] c"Unhandled unary operation\00"
define internal %ast_AstNode* @ast_OpUnary(i8 zeroext %op$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %rhs
	%1 = icmp ne %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast_AstNode*, %ast_AstNode** %rhs
	%3 = getelementptr %ast_AstNode, %ast_AstNode* %2, i32 0, i32 0
	%4 = load i8, i8* %3
	%5 = icmp eq i8 %4, 6
	br i1 %5, label %L.4, label %L.5
L.4:
	%6 = load i8, i8* %op
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.6 [
		i32 39, label %L.8
		i32 40, label %L.9
		i32 94, label %L.10
		i32 41, label %L.11
		i32 34, label %L.12
		i32 35, label %L.12
		i32 36, label %L.13
		i32 37, label %L.13
		i32 38, label %L.14
	]
L.8:
	%8 = load %ast_AstNode*, %ast_AstNode** %rhs
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 10
	%10 = load i64, i64* %9
	%11 = sub i64 0, %10
	%12 = load %ast_AstNode*, %ast_AstNode** %rhs
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 10
	store i64 %11, i64* %13
	br label %L.7
L.9:
	%14 = load %ast_AstNode*, %ast_AstNode** %rhs
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 10
	%16 = load i64, i64* %15
	%17 = xor i64 %16, -1
	%18 = load %ast_AstNode*, %ast_AstNode** %rhs
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 10
	store i64 %17, i64* %19
	br label %L.7
L.10:
	%20 = load %ast_AstNode*, %ast_AstNode** %rhs
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 10
	%22 = load i64, i64* %21
	%23 = xor i64 %22, 1
	%24 = load %ast_AstNode*, %ast_AstNode** %rhs
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 10
	store i64 %23, i64* %25
	br label %L.7
L.11:
	%26 = load %ast_AstNode*, %ast_AstNode** %rhs
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 8
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 16
	%30 = load i8, i8* %29
	%31 = icmp eq i8 %30, 3
	br i1 %31, label %L.15, label %L.16
L.15:
	%32 = load %ast_AstNode*, %ast_AstNode** %rhs
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 10
	%34 = load i64, i64* %33
	%35 = icmp slt i64 %34, 0
	br label %L.16
L.16:
	%36 = phi i1 [ false, %L.11 ], [ %35, %L.15 ]
	br i1 %36, label %L.18, label %L.17
L.18:
	%37 = load %ast_AstNode*, %ast_AstNode** %rhs
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 10
	%39 = load i64, i64* %38
	%40 = sub i64 0, %39
	%41 = load %ast_AstNode*, %ast_AstNode** %rhs
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 10
	store i64 %40, i64* %42
	br label %L.17
L.17:
	br label %L.7
L.12:
	%43 = load %ast_AstNode*, %ast_AstNode** %rhs
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 10
	%45 = load i64, i64* %44
	%46 = icmp eq i64 %45, 0
	br i1 %46, label %L.20, label %L.21
L.20:
	%47 = load %ast_AstNode*, %ast_AstNode** %rhs
	%48 = getelementptr %ast_AstNode, %ast_AstNode* %47, i32 0, i32 7
	%49 = load i32, i32* %48
	%50 = zext i32 %49 to i64
	%51 = load %ast_AstNode*, %ast_AstNode** %rhs
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 10
	store i64 %50, i64* %52
	br label %L.19
L.21:
	%53 = load %ast_AstNode*, %ast_AstNode** %rhs
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 10
	%55 = load i64, i64* %54
	%56 = call i64 @llvm.ctlz.i64(i64 %55, i1 true)
	%57 = load %ast_AstNode*, %ast_AstNode** %rhs
	%58 = getelementptr %ast_AstNode, %ast_AstNode* %57, i32 0, i32 7
	%59 = load i32, i32* %58
	%60 = zext i32 %59 to i64
	%61 = sub i64 64, %60
	%62 = sub i64 %56, %61
	%63 = load %ast_AstNode*, %ast_AstNode** %rhs
	%64 = getelementptr %ast_AstNode, %ast_AstNode* %63, i32 0, i32 10
	store i64 %62, i64* %64
	br label %L.19
L.19:
	br label %L.7
L.13:
	%65 = load %ast_AstNode*, %ast_AstNode** %rhs
	%66 = getelementptr %ast_AstNode, %ast_AstNode* %65, i32 0, i32 10
	%67 = load i64, i64* %66
	%68 = icmp eq i64 %67, 0
	br i1 %68, label %L.23, label %L.24
L.23:
	%69 = load %ast_AstNode*, %ast_AstNode** %rhs
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 10
	store i64 0, i64* %70
	br label %L.22
L.24:
	%71 = load %ast_AstNode*, %ast_AstNode** %rhs
	%72 = getelementptr %ast_AstNode, %ast_AstNode* %71, i32 0, i32 10
	%73 = load i64, i64* %72
	%74 = call i64 @llvm.cttz.i64(i64 %73, i1 true)
	%75 = load %ast_AstNode*, %ast_AstNode** %rhs
	%76 = getelementptr %ast_AstNode, %ast_AstNode* %75, i32 0, i32 10
	store i64 %74, i64* %76
	br label %L.22
L.22:
	br label %L.7
L.14:
	%77 = load %ast_AstNode*, %ast_AstNode** %rhs
	%78 = getelementptr %ast_AstNode, %ast_AstNode* %77, i32 0, i32 10
	%79 = load i64, i64* %78
	%80 = call i32 @ast_popcnt(i64 %79)
	%81 = zext i32 %80 to i64
	%82 = load %ast_AstNode*, %ast_AstNode** %rhs
	%83 = getelementptr %ast_AstNode, %ast_AstNode* %82, i32 0, i32 10
	store i64 %81, i64* %83
	br label %L.7
L.6:
	%84 = getelementptr [26 x i8], [26 x i8]* @S.373
	%85 = bitcast [26 x i8]* %84 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %85)
	br label %L.7
L.7:
	%86 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %86, %ast_AstNode** %tree
	br label %L.3
L.5:
	%87 = load %ast_AstNode*, %ast_AstNode** %rhs
	%88 = getelementptr %ast_AstNode, %ast_AstNode* %87, i32 0, i32 0
	%89 = load i8, i8* %88
	%90 = icmp eq i8 %89, 7
	br i1 %90, label %L.25, label %L.26
L.25:
	%91 = load i8, i8* %op
	%92 = icmp eq i8 %91, 44
	br label %L.26
L.26:
	%93 = phi i1 [ false, %L.5 ], [ %92, %L.25 ]
	br i1 %93, label %L.28, label %L.29
L.28:
	%94 = load %ast_AstNode*, %ast_AstNode** %rhs
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 10
	%96 = load i64, i64* %95
	%97 = bitcast i64 %96 to double
	%98 = fsub double 0.0, %97
	%99 = bitcast double %98 to i64
	%100 = load %ast_AstNode*, %ast_AstNode** %rhs
	%101 = getelementptr %ast_AstNode, %ast_AstNode* %100, i32 0, i32 10
	store i64 %99, i64* %101
	%102 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %102, %ast_AstNode** %tree
	br label %L.27
L.29:
	%103 = load i8, i8* %op
	%104 = load %ast_AstNode*, %ast_AstNode** %rhs
	%105 = getelementptr %ast_AstNode, %ast_AstNode* %104, i32 0, i32 8
	%106 = load %type_TypeNode*, %type_TypeNode** %105
	%107 = load %ast_AstNode*, %ast_AstNode** %rhs
	%108 = call %ast_AstNode* @ast_New1(i8 %103, %type_TypeNode* %106, %ast_AstNode* %107)
	store %ast_AstNode* %108, %ast_AstNode** %tree
	br label %L.27
L.27:
	br label %L.3
L.3:
	br label %L.1
L.1:
	%109 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %109, %ast_AstNode** %rv.0
	br label %return
return:
	%110 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %110
}
define internal %ast_AstNode* @ast_OpBool(i8 zeroext %op$, %ast_AstNode* %lhs$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = icmp ne %ast_AstNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %ast_AstNode*, %ast_AstNode** %rhs
	%3 = icmp ne %ast_AstNode* %2, null
	br label %L.2
L.2:
	%4 = phi i1 [ false, %L.0 ], [ %3, %L.1 ]
	br i1 %4, label %L.4, label %L.3
L.4:
	%5 = load %ast_AstNode*, %ast_AstNode** %lhs
	%6 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %5)
	store %ast_AstNode* %6, %ast_AstNode** %lhs
	%7 = load %ast_AstNode*, %ast_AstNode** %rhs
	%8 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %7)
	store %ast_AstNode* %8, %ast_AstNode** %rhs
	%9 = load %ast_AstNode*, %ast_AstNode** %lhs
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = icmp eq i8 %11, 6
	br i1 %12, label %L.5, label %L.6
L.5:
	%13 = load %ast_AstNode*, %ast_AstNode** %rhs
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 0
	%15 = load i8, i8* %14
	%16 = icmp eq i8 %15, 6
	br label %L.6
L.6:
	%17 = phi i1 [ false, %L.4 ], [ %16, %L.5 ]
	br i1 %17, label %L.8, label %L.9
L.8:
	%18 = load %ast_AstNode*, %ast_AstNode** %lhs
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 8
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = load %ast_AstNode*, %ast_AstNode** %lhs
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 10
	%23 = load i64, i64* %22
	%24 = call %ast_AstNode* @ast_Const(%type_TypeNode* %20, i64 %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	%25 = load i8, i8* %op
	%26 = zext i8 %25 to i32
	switch i32 %26, label %L.10 [
		i32 93, label %L.12
		i32 92, label %L.13
	]
L.12:
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 10
	%29 = load i64, i64* %28
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 10
	%32 = load i64, i64* %31
	%33 = or i64 %29, %32
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 10
	store i64 %33, i64* %35
	br label %L.11
L.13:
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 10
	%38 = load i64, i64* %37
	%39 = load %ast_AstNode*, %ast_AstNode** %rhs
	%40 = getelementptr %ast_AstNode, %ast_AstNode* %39, i32 0, i32 10
	%41 = load i64, i64* %40
	%42 = and i64 %38, %41
	%43 = load %ast_AstNode*, %ast_AstNode** %tree
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 10
	store i64 %42, i64* %44
	br label %L.11
L.10:
	br label %L.11
L.11:
	br label %L.7
L.9:
	%45 = load i8, i8* %op
	%46 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%47 = load %ast_AstNode*, %ast_AstNode** %lhs
	%48 = load %ast_AstNode*, %ast_AstNode** %rhs
	%49 = call %ast_AstNode* @ast_New2(i8 %45, %type_TypeNode* %46, %ast_AstNode* %47, %ast_AstNode* %48)
	store %ast_AstNode* %49, %ast_AstNode** %tree
	br label %L.7
L.7:
	br label %L.3
L.3:
	%50 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %50, %ast_AstNode** %rv.0
	br label %return
return:
	%51 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %51
}
define internal %ast_AstNode* @ast_OpBinary(i8 zeroext %op$, %ast_AstNode* %lhs$, %ast_AstNode* %rhs$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%sl = alloca i32
	%sr = alloca i32
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = icmp ne %ast_AstNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %ast_AstNode*, %ast_AstNode** %rhs
	%3 = icmp ne %ast_AstNode* %2, null
	br label %L.2
L.2:
	%4 = phi i1 [ false, %L.0 ], [ %3, %L.1 ]
	br i1 %4, label %L.4, label %L.3
L.4:
	%5 = load %ast_AstNode*, %ast_AstNode** %lhs
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 0
	%7 = load i8, i8* %6
	%8 = icmp eq i8 %7, 6
	br i1 %8, label %L.5, label %L.6
L.5:
	%9 = load %ast_AstNode*, %ast_AstNode** %rhs
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = icmp eq i8 %11, 6
	br label %L.6
L.6:
	%13 = phi i1 [ false, %L.4 ], [ %12, %L.5 ]
	br i1 %13, label %L.8, label %L.9
L.8:
	%14 = load %ast_AstNode*, %ast_AstNode** %lhs
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 8
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = load %ast_AstNode*, %ast_AstNode** %lhs
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 10
	%19 = load i64, i64* %18
	%20 = call %ast_AstNode* @ast_Const(%type_TypeNode* %16, i64 %19)
	store %ast_AstNode* %20, %ast_AstNode** %tree
	%21 = load i8, i8* %op
	%22 = zext i8 %21 to i32
	switch i32 %22, label %L.10 [
		i32 54, label %L.12
		i32 55, label %L.13
		i32 56, label %L.14
		i32 63, label %L.15
		i32 65, label %L.15
		i32 57, label %L.16
		i32 58, label %L.17
		i32 64, label %L.18
		i32 66, label %L.19
		i32 59, label %L.20
		i32 60, label %L.21
		i32 61, label %L.22
		i32 62, label %L.23
		i32 52, label %L.24
		i32 53, label %L.25
		i32 51, label %L.26
		i32 69, label %L.27
		i32 70, label %L.28
		i32 71, label %L.29
		i32 72, label %L.30
		i32 73, label %L.31
		i32 74, label %L.32
		i32 75, label %L.33
		i32 76, label %L.34
		i32 77, label %L.35
		i32 78, label %L.36
	]
L.12:
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 10
	%25 = load i64, i64* %24
	%26 = load %ast_AstNode*, %ast_AstNode** %rhs
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 10
	%28 = load i64, i64* %27
	%29 = add i64 %25, %28
	store i64 %29, i64* %24
	br label %L.11
L.13:
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 10
	%32 = load i64, i64* %31
	%33 = load %ast_AstNode*, %ast_AstNode** %rhs
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 10
	%35 = load i64, i64* %34
	%36 = sub i64 %32, %35
	store i64 %36, i64* %31
	br label %L.11
L.14:
	%37 = load %ast_AstNode*, %ast_AstNode** %tree
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 10
	%39 = load i64, i64* %38
	%40 = load %ast_AstNode*, %ast_AstNode** %rhs
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 10
	%42 = load i64, i64* %41
	%43 = mul i64 %39, %42
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 10
	store i64 %43, i64* %45
	br label %L.11
L.15:
	%46 = load %ast_AstNode*, %ast_AstNode** %tree
	%47 = getelementptr %ast_AstNode, %ast_AstNode* %46, i32 0, i32 10
	%48 = load i64, i64* %47
	%49 = load %ast_AstNode*, %ast_AstNode** %rhs
	%50 = getelementptr %ast_AstNode, %ast_AstNode* %49, i32 0, i32 10
	%51 = load i64, i64* %50
	%52 = shl i64 %48, %51
	%53 = load %ast_AstNode*, %ast_AstNode** %tree
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 10
	store i64 %52, i64* %54
	br label %L.11
L.16:
	%55 = load %ast_AstNode*, %ast_AstNode** %tree
	%56 = getelementptr %ast_AstNode, %ast_AstNode* %55, i32 0, i32 10
	%57 = load i64, i64* %56
	%58 = load %ast_AstNode*, %ast_AstNode** %rhs
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 10
	%60 = load i64, i64* %59
	%61 = udiv i64 %57, %60
	%62 = load %ast_AstNode*, %ast_AstNode** %tree
	%63 = getelementptr %ast_AstNode, %ast_AstNode* %62, i32 0, i32 10
	store i64 %61, i64* %63
	br label %L.11
L.17:
	%64 = load %ast_AstNode*, %ast_AstNode** %tree
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 10
	%66 = load i64, i64* %65
	%67 = load %ast_AstNode*, %ast_AstNode** %rhs
	%68 = getelementptr %ast_AstNode, %ast_AstNode* %67, i32 0, i32 10
	%69 = load i64, i64* %68
	%70 = urem i64 %66, %69
	%71 = load %ast_AstNode*, %ast_AstNode** %tree
	%72 = getelementptr %ast_AstNode, %ast_AstNode* %71, i32 0, i32 10
	store i64 %70, i64* %72
	br label %L.11
L.18:
	%73 = load %ast_AstNode*, %ast_AstNode** %tree
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 10
	%75 = load i64, i64* %74
	%76 = load %ast_AstNode*, %ast_AstNode** %rhs
	%77 = getelementptr %ast_AstNode, %ast_AstNode* %76, i32 0, i32 10
	%78 = load i64, i64* %77
	%79 = lshr i64 %75, %78
	%80 = load %ast_AstNode*, %ast_AstNode** %tree
	%81 = getelementptr %ast_AstNode, %ast_AstNode* %80, i32 0, i32 10
	store i64 %79, i64* %81
	br label %L.11
L.19:
	%82 = load %ast_AstNode*, %ast_AstNode** %tree
	%83 = getelementptr %ast_AstNode, %ast_AstNode* %82, i32 0, i32 10
	%84 = load i64, i64* %83
	%85 = load %ast_AstNode*, %ast_AstNode** %rhs
	%86 = getelementptr %ast_AstNode, %ast_AstNode* %85, i32 0, i32 10
	%87 = load i64, i64* %86
	%88 = shl i64 %84, %87
	%89 = load %ast_AstNode*, %ast_AstNode** %tree
	%90 = getelementptr %ast_AstNode, %ast_AstNode* %89, i32 0, i32 10
	store i64 %88, i64* %90
	br label %L.11
L.20:
	%91 = load %ast_AstNode*, %ast_AstNode** %rhs
	%92 = getelementptr %ast_AstNode, %ast_AstNode* %91, i32 0, i32 10
	%93 = load i64, i64* %92
	%94 = load %ast_AstNode*, %ast_AstNode** %lhs
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 10
	%96 = load i64, i64* %95
	%97 = icmp ult i64 %93, %96
	br i1 %97, label %L.38, label %L.37
L.38:
	%98 = load %ast_AstNode*, %ast_AstNode** %rhs
	%99 = getelementptr %ast_AstNode, %ast_AstNode* %98, i32 0, i32 10
	%100 = load i64, i64* %99
	%101 = load %ast_AstNode*, %ast_AstNode** %tree
	%102 = getelementptr %ast_AstNode, %ast_AstNode* %101, i32 0, i32 10
	store i64 %100, i64* %102
	br label %L.37
L.37:
	br label %L.11
L.21:
	%103 = load %ast_AstNode*, %ast_AstNode** %rhs
	%104 = getelementptr %ast_AstNode, %ast_AstNode* %103, i32 0, i32 10
	%105 = load i64, i64* %104
	%106 = load %ast_AstNode*, %ast_AstNode** %lhs
	%107 = getelementptr %ast_AstNode, %ast_AstNode* %106, i32 0, i32 10
	%108 = load i64, i64* %107
	%109 = icmp ugt i64 %105, %108
	br i1 %109, label %L.40, label %L.39
L.40:
	%110 = load %ast_AstNode*, %ast_AstNode** %rhs
	%111 = getelementptr %ast_AstNode, %ast_AstNode* %110, i32 0, i32 10
	%112 = load i64, i64* %111
	%113 = load %ast_AstNode*, %ast_AstNode** %tree
	%114 = getelementptr %ast_AstNode, %ast_AstNode* %113, i32 0, i32 10
	store i64 %112, i64* %114
	br label %L.39
L.39:
	br label %L.11
L.22:
	%115 = load %ast_AstNode*, %ast_AstNode** %rhs
	%116 = getelementptr %ast_AstNode, %ast_AstNode* %115, i32 0, i32 10
	%117 = load i64, i64* %116
	%118 = load %ast_AstNode*, %ast_AstNode** %lhs
	%119 = getelementptr %ast_AstNode, %ast_AstNode* %118, i32 0, i32 10
	%120 = load i64, i64* %119
	%121 = icmp slt i64 %117, %120
	br i1 %121, label %L.42, label %L.41
L.42:
	%122 = load %ast_AstNode*, %ast_AstNode** %rhs
	%123 = getelementptr %ast_AstNode, %ast_AstNode* %122, i32 0, i32 10
	%124 = load i64, i64* %123
	%125 = load %ast_AstNode*, %ast_AstNode** %tree
	%126 = getelementptr %ast_AstNode, %ast_AstNode* %125, i32 0, i32 10
	store i64 %124, i64* %126
	br label %L.41
L.41:
	br label %L.11
L.23:
	%127 = load %ast_AstNode*, %ast_AstNode** %rhs
	%128 = getelementptr %ast_AstNode, %ast_AstNode* %127, i32 0, i32 10
	%129 = load i64, i64* %128
	%130 = load %ast_AstNode*, %ast_AstNode** %lhs
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 10
	%132 = load i64, i64* %131
	%133 = icmp sgt i64 %129, %132
	br i1 %133, label %L.44, label %L.43
L.44:
	%134 = load %ast_AstNode*, %ast_AstNode** %rhs
	%135 = getelementptr %ast_AstNode, %ast_AstNode* %134, i32 0, i32 10
	%136 = load i64, i64* %135
	%137 = load %ast_AstNode*, %ast_AstNode** %tree
	%138 = getelementptr %ast_AstNode, %ast_AstNode* %137, i32 0, i32 10
	store i64 %136, i64* %138
	br label %L.43
L.43:
	br label %L.11
L.24:
	%139 = load %ast_AstNode*, %ast_AstNode** %tree
	%140 = getelementptr %ast_AstNode, %ast_AstNode* %139, i32 0, i32 10
	%141 = load i64, i64* %140
	%142 = load %ast_AstNode*, %ast_AstNode** %rhs
	%143 = getelementptr %ast_AstNode, %ast_AstNode* %142, i32 0, i32 10
	%144 = load i64, i64* %143
	%145 = or i64 %141, %144
	%146 = load %ast_AstNode*, %ast_AstNode** %tree
	%147 = getelementptr %ast_AstNode, %ast_AstNode* %146, i32 0, i32 10
	store i64 %145, i64* %147
	br label %L.11
L.25:
	%148 = load %ast_AstNode*, %ast_AstNode** %tree
	%149 = getelementptr %ast_AstNode, %ast_AstNode* %148, i32 0, i32 10
	%150 = load i64, i64* %149
	%151 = load %ast_AstNode*, %ast_AstNode** %rhs
	%152 = getelementptr %ast_AstNode, %ast_AstNode* %151, i32 0, i32 10
	%153 = load i64, i64* %152
	%154 = xor i64 %150, %153
	%155 = load %ast_AstNode*, %ast_AstNode** %tree
	%156 = getelementptr %ast_AstNode, %ast_AstNode* %155, i32 0, i32 10
	store i64 %154, i64* %156
	br label %L.11
L.26:
	%157 = load %ast_AstNode*, %ast_AstNode** %tree
	%158 = getelementptr %ast_AstNode, %ast_AstNode* %157, i32 0, i32 10
	%159 = load i64, i64* %158
	%160 = load %ast_AstNode*, %ast_AstNode** %rhs
	%161 = getelementptr %ast_AstNode, %ast_AstNode* %160, i32 0, i32 10
	%162 = load i64, i64* %161
	%163 = and i64 %159, %162
	%164 = load %ast_AstNode*, %ast_AstNode** %tree
	%165 = getelementptr %ast_AstNode, %ast_AstNode* %164, i32 0, i32 10
	store i64 %163, i64* %165
	br label %L.11
L.27:
	%166 = load %ast_AstNode*, %ast_AstNode** %tree
	%167 = getelementptr %ast_AstNode, %ast_AstNode* %166, i32 0, i32 10
	%168 = load i64, i64* %167
	%169 = load %ast_AstNode*, %ast_AstNode** %rhs
	%170 = getelementptr %ast_AstNode, %ast_AstNode* %169, i32 0, i32 10
	%171 = load i64, i64* %170
	%172 = icmp eq i64 %168, %171
	%173 = zext i1 %172 to i32
	%174 = zext i32 %173 to i64
	%175 = load %ast_AstNode*, %ast_AstNode** %tree
	%176 = getelementptr %ast_AstNode, %ast_AstNode* %175, i32 0, i32 10
	store i64 %174, i64* %176
	br label %L.11
L.28:
	%177 = load %ast_AstNode*, %ast_AstNode** %tree
	%178 = getelementptr %ast_AstNode, %ast_AstNode* %177, i32 0, i32 10
	%179 = load i64, i64* %178
	%180 = load %ast_AstNode*, %ast_AstNode** %rhs
	%181 = getelementptr %ast_AstNode, %ast_AstNode* %180, i32 0, i32 10
	%182 = load i64, i64* %181
	%183 = icmp ne i64 %179, %182
	%184 = zext i1 %183 to i32
	%185 = zext i32 %184 to i64
	%186 = load %ast_AstNode*, %ast_AstNode** %tree
	%187 = getelementptr %ast_AstNode, %ast_AstNode* %186, i32 0, i32 10
	store i64 %185, i64* %187
	br label %L.11
L.29:
	%188 = load %ast_AstNode*, %ast_AstNode** %tree
	%189 = getelementptr %ast_AstNode, %ast_AstNode* %188, i32 0, i32 10
	%190 = load i64, i64* %189
	%191 = load %ast_AstNode*, %ast_AstNode** %rhs
	%192 = getelementptr %ast_AstNode, %ast_AstNode* %191, i32 0, i32 10
	%193 = load i64, i64* %192
	%194 = icmp ult i64 %190, %193
	%195 = zext i1 %194 to i32
	%196 = zext i32 %195 to i64
	%197 = load %ast_AstNode*, %ast_AstNode** %tree
	%198 = getelementptr %ast_AstNode, %ast_AstNode* %197, i32 0, i32 10
	store i64 %196, i64* %198
	br label %L.11
L.30:
	%199 = load %ast_AstNode*, %ast_AstNode** %tree
	%200 = getelementptr %ast_AstNode, %ast_AstNode* %199, i32 0, i32 10
	%201 = load i64, i64* %200
	%202 = load %ast_AstNode*, %ast_AstNode** %rhs
	%203 = getelementptr %ast_AstNode, %ast_AstNode* %202, i32 0, i32 10
	%204 = load i64, i64* %203
	%205 = icmp ugt i64 %201, %204
	%206 = zext i1 %205 to i32
	%207 = zext i32 %206 to i64
	%208 = load %ast_AstNode*, %ast_AstNode** %tree
	%209 = getelementptr %ast_AstNode, %ast_AstNode* %208, i32 0, i32 10
	store i64 %207, i64* %209
	br label %L.11
L.31:
	%210 = load %ast_AstNode*, %ast_AstNode** %tree
	%211 = getelementptr %ast_AstNode, %ast_AstNode* %210, i32 0, i32 10
	%212 = load i64, i64* %211
	%213 = load %ast_AstNode*, %ast_AstNode** %rhs
	%214 = getelementptr %ast_AstNode, %ast_AstNode* %213, i32 0, i32 10
	%215 = load i64, i64* %214
	%216 = icmp ule i64 %212, %215
	%217 = zext i1 %216 to i32
	%218 = zext i32 %217 to i64
	%219 = load %ast_AstNode*, %ast_AstNode** %tree
	%220 = getelementptr %ast_AstNode, %ast_AstNode* %219, i32 0, i32 10
	store i64 %218, i64* %220
	br label %L.11
L.32:
	%221 = load %ast_AstNode*, %ast_AstNode** %tree
	%222 = getelementptr %ast_AstNode, %ast_AstNode* %221, i32 0, i32 10
	%223 = load i64, i64* %222
	%224 = load %ast_AstNode*, %ast_AstNode** %rhs
	%225 = getelementptr %ast_AstNode, %ast_AstNode* %224, i32 0, i32 10
	%226 = load i64, i64* %225
	%227 = icmp uge i64 %223, %226
	%228 = zext i1 %227 to i32
	%229 = zext i32 %228 to i64
	%230 = load %ast_AstNode*, %ast_AstNode** %tree
	%231 = getelementptr %ast_AstNode, %ast_AstNode* %230, i32 0, i32 10
	store i64 %229, i64* %231
	br label %L.11
L.33:
	%232 = load %ast_AstNode*, %ast_AstNode** %tree
	%233 = getelementptr %ast_AstNode, %ast_AstNode* %232, i32 0, i32 10
	%234 = load i64, i64* %233
	%235 = load %ast_AstNode*, %ast_AstNode** %rhs
	%236 = getelementptr %ast_AstNode, %ast_AstNode* %235, i32 0, i32 10
	%237 = load i64, i64* %236
	%238 = icmp slt i64 %234, %237
	%239 = zext i1 %238 to i32
	%240 = zext i32 %239 to i64
	%241 = load %ast_AstNode*, %ast_AstNode** %tree
	%242 = getelementptr %ast_AstNode, %ast_AstNode* %241, i32 0, i32 10
	store i64 %240, i64* %242
	br label %L.11
L.34:
	%243 = load %ast_AstNode*, %ast_AstNode** %tree
	%244 = getelementptr %ast_AstNode, %ast_AstNode* %243, i32 0, i32 10
	%245 = load i64, i64* %244
	%246 = load %ast_AstNode*, %ast_AstNode** %rhs
	%247 = getelementptr %ast_AstNode, %ast_AstNode* %246, i32 0, i32 10
	%248 = load i64, i64* %247
	%249 = icmp sgt i64 %245, %248
	%250 = zext i1 %249 to i32
	%251 = zext i32 %250 to i64
	%252 = load %ast_AstNode*, %ast_AstNode** %tree
	%253 = getelementptr %ast_AstNode, %ast_AstNode* %252, i32 0, i32 10
	store i64 %251, i64* %253
	br label %L.11
L.35:
	%254 = load %ast_AstNode*, %ast_AstNode** %tree
	%255 = getelementptr %ast_AstNode, %ast_AstNode* %254, i32 0, i32 10
	%256 = load i64, i64* %255
	%257 = load %ast_AstNode*, %ast_AstNode** %rhs
	%258 = getelementptr %ast_AstNode, %ast_AstNode* %257, i32 0, i32 10
	%259 = load i64, i64* %258
	%260 = icmp sle i64 %256, %259
	%261 = zext i1 %260 to i32
	%262 = zext i32 %261 to i64
	%263 = load %ast_AstNode*, %ast_AstNode** %tree
	%264 = getelementptr %ast_AstNode, %ast_AstNode* %263, i32 0, i32 10
	store i64 %262, i64* %264
	br label %L.11
L.36:
	%265 = load %ast_AstNode*, %ast_AstNode** %tree
	%266 = getelementptr %ast_AstNode, %ast_AstNode* %265, i32 0, i32 10
	%267 = load i64, i64* %266
	%268 = load %ast_AstNode*, %ast_AstNode** %rhs
	%269 = getelementptr %ast_AstNode, %ast_AstNode* %268, i32 0, i32 10
	%270 = load i64, i64* %269
	%271 = icmp sge i64 %267, %270
	%272 = zext i1 %271 to i32
	%273 = zext i32 %272 to i64
	%274 = load %ast_AstNode*, %ast_AstNode** %tree
	%275 = getelementptr %ast_AstNode, %ast_AstNode* %274, i32 0, i32 10
	store i64 %273, i64* %275
	br label %L.11
L.10:
	br label %L.11
L.11:
	br label %L.7
L.9:
	%276 = load %ast_AstNode*, %ast_AstNode** %lhs
	%277 = getelementptr %ast_AstNode, %ast_AstNode* %276, i32 0, i32 7
	%278 = load i32, i32* %277
	store i32 %278, i32* %sl
	%279 = load %ast_AstNode*, %ast_AstNode** %rhs
	%280 = getelementptr %ast_AstNode, %ast_AstNode* %279, i32 0, i32 7
	%281 = load i32, i32* %280
	store i32 %281, i32* %sr
	%282 = load %type_TypeNode*, %type_TypeNode** %t
	%283 = icmp ne %type_TypeNode* %282, null
	br i1 %283, label %L.45, label %L.46
L.45:
	%284 = load %type_TypeNode*, %type_TypeNode** %t
	%285 = getelementptr %type_TypeNode, %type_TypeNode* %284, i32 0, i32 11
	%286 = load i32, i32* %285
	%287 = load i32, i32* %sl
	%288 = icmp ugt i32 %286, %287
	br label %L.46
L.46:
	%289 = phi i1 [ false, %L.9 ], [ %288, %L.45 ]
	br i1 %289, label %L.48, label %L.47
L.48:
	%290 = load %ast_AstNode*, %ast_AstNode** %lhs
	%291 = load %type_TypeNode*, %type_TypeNode** %t
	%292 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %290, %type_TypeNode* %291)
	store %ast_AstNode* %292, %ast_AstNode** %lhs
	%293 = load %type_TypeNode*, %type_TypeNode** %t
	%294 = getelementptr %type_TypeNode, %type_TypeNode* %293, i32 0, i32 11
	%295 = load i32, i32* %294
	store i32 %295, i32* %sl
	br label %L.47
L.47:
	%296 = load i32, i32* %sl
	%297 = load i32, i32* %sr
	%298 = icmp ugt i32 %296, %297
	br i1 %298, label %L.50, label %L.51
L.50:
	%299 = load %ast_AstNode*, %ast_AstNode** %rhs
	%300 = load i32, i32* %sl
	%301 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %299, i32 %300, i8 0)
	store %ast_AstNode* %301, %ast_AstNode** %rhs
	br label %L.49
L.51:
	%302 = load i32, i32* %sr
	%303 = load i32, i32* %sl
	%304 = icmp ugt i32 %302, %303
	br i1 %304, label %L.53, label %L.52
L.53:
	%305 = load %ast_AstNode*, %ast_AstNode** %lhs
	%306 = load i32, i32* %sr
	%307 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %305, i32 %306, i8 0)
	store %ast_AstNode* %307, %ast_AstNode** %lhs
	br label %L.52
L.52:
	br label %L.49
L.49:
	%308 = load i8, i8* %op
	%309 = load %ast_AstNode*, %ast_AstNode** %lhs
	%310 = getelementptr %ast_AstNode, %ast_AstNode* %309, i32 0, i32 8
	%311 = load %type_TypeNode*, %type_TypeNode** %310
	%312 = load %ast_AstNode*, %ast_AstNode** %lhs
	%313 = load %ast_AstNode*, %ast_AstNode** %rhs
	%314 = call %ast_AstNode* @ast_New2(i8 %308, %type_TypeNode* %311, %ast_AstNode* %312, %ast_AstNode* %313)
	store %ast_AstNode* %314, %ast_AstNode** %tree
	br label %L.7
L.7:
	br label %L.3
L.3:
	%315 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %315, %ast_AstNode** %rv.0
	br label %return
return:
	%316 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %316
}
@S.374 = private unnamed_addr constant [25 x i8] c"floating point operation\00"
define internal %ast_AstNode* @ast_OpFloat(i8 zeroext %op$, %ast_AstNode* %lhs$, %ast_AstNode* %rhs$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%sl = alloca i32
	%sr = alloca i32
	%0 = load %ast_AstNode*, %ast_AstNode** %rhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = icmp ne i8 %4, 4
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = getelementptr [25 x i8], [25 x i8]* @S.374
	%7 = bitcast [25 x i8]* %6 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %7)
	%8 = load %ast_AstNode*, %ast_AstNode** %lhs
	store %ast_AstNode* %8, %ast_AstNode** %rv.0
	br label %return
L.1:
	store %ast_AstNode* null, %ast_AstNode** %tree
	%9 = load %ast_AstNode*, %ast_AstNode** %lhs
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = icmp eq i8 %11, 7
	br i1 %12, label %L.4, label %L.3
L.4:
	%13 = load %ast_AstNode*, %ast_AstNode** %rhs
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 0
	%15 = load i8, i8* %14
	%16 = icmp eq i8 %15, 7
	br i1 %16, label %L.6, label %L.7
L.6:
	%17 = load %ast_AstNode*, %ast_AstNode** %lhs
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 8
	%19 = load %type_TypeNode*, %type_TypeNode** %18
	%20 = load %ast_AstNode*, %ast_AstNode** %lhs
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 10
	%22 = load i64, i64* %21
	%23 = call %ast_AstNode* @ast_Const(%type_TypeNode* %19, i64 %22)
	store %ast_AstNode* %23, %ast_AstNode** %tree
	%24 = load i8, i8* %op
	%25 = zext i8 %24 to i32
	switch i32 %25, label %L.8 [
		i32 85, label %L.10
		i32 86, label %L.11
		i32 87, label %L.12
		i32 88, label %L.13
		i32 90, label %L.14
		i32 91, label %L.15
	]
L.10:
	%26 = load %ast_AstNode*, %ast_AstNode** %lhs
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 10
	%28 = load i64, i64* %27
	%29 = bitcast i64 %28 to double
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 10
	%32 = load i64, i64* %31
	%33 = bitcast i64 %32 to double
	%34 = fadd double %29, %33
	%35 = bitcast double %34 to i64
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 10
	store i64 %35, i64* %37
	br label %L.9
L.11:
	%38 = load %ast_AstNode*, %ast_AstNode** %lhs
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 10
	%40 = load i64, i64* %39
	%41 = bitcast i64 %40 to double
	%42 = load %ast_AstNode*, %ast_AstNode** %rhs
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 10
	%44 = load i64, i64* %43
	%45 = bitcast i64 %44 to double
	%46 = fsub double %41, %45
	%47 = bitcast double %46 to i64
	%48 = load %ast_AstNode*, %ast_AstNode** %tree
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 10
	store i64 %47, i64* %49
	br label %L.9
L.12:
	%50 = load %ast_AstNode*, %ast_AstNode** %lhs
	%51 = getelementptr %ast_AstNode, %ast_AstNode* %50, i32 0, i32 10
	%52 = load i64, i64* %51
	%53 = bitcast i64 %52 to double
	%54 = load %ast_AstNode*, %ast_AstNode** %rhs
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 10
	%56 = load i64, i64* %55
	%57 = bitcast i64 %56 to double
	%58 = fmul double %53, %57
	%59 = bitcast double %58 to i64
	%60 = load %ast_AstNode*, %ast_AstNode** %tree
	%61 = getelementptr %ast_AstNode, %ast_AstNode* %60, i32 0, i32 10
	store i64 %59, i64* %61
	br label %L.9
L.13:
	%62 = load %ast_AstNode*, %ast_AstNode** %lhs
	%63 = getelementptr %ast_AstNode, %ast_AstNode* %62, i32 0, i32 10
	%64 = load i64, i64* %63
	%65 = bitcast i64 %64 to double
	%66 = load %ast_AstNode*, %ast_AstNode** %rhs
	%67 = getelementptr %ast_AstNode, %ast_AstNode* %66, i32 0, i32 10
	%68 = load i64, i64* %67
	%69 = bitcast i64 %68 to double
	%70 = fdiv double %65, %69
	%71 = bitcast double %70 to i64
	%72 = load %ast_AstNode*, %ast_AstNode** %tree
	%73 = getelementptr %ast_AstNode, %ast_AstNode* %72, i32 0, i32 10
	store i64 %71, i64* %73
	br label %L.9
L.14:
	%74 = load %ast_AstNode*, %ast_AstNode** %lhs
	%75 = getelementptr %ast_AstNode, %ast_AstNode* %74, i32 0, i32 10
	%76 = load i64, i64* %75
	%77 = bitcast i64 %76 to double
	%78 = load %ast_AstNode*, %ast_AstNode** %rhs
	%79 = getelementptr %ast_AstNode, %ast_AstNode* %78, i32 0, i32 10
	%80 = load i64, i64* %79
	%81 = bitcast i64 %80 to double
	%82 = fcmp olt double %77, %81
	%83 = select i1 %82, double %77, double %81
	%84 = bitcast double %83 to i64
	%85 = load %ast_AstNode*, %ast_AstNode** %tree
	%86 = getelementptr %ast_AstNode, %ast_AstNode* %85, i32 0, i32 10
	store i64 %84, i64* %86
	br label %L.9
L.15:
	%87 = load %ast_AstNode*, %ast_AstNode** %lhs
	%88 = getelementptr %ast_AstNode, %ast_AstNode* %87, i32 0, i32 10
	%89 = load i64, i64* %88
	%90 = bitcast i64 %89 to double
	%91 = load %ast_AstNode*, %ast_AstNode** %rhs
	%92 = getelementptr %ast_AstNode, %ast_AstNode* %91, i32 0, i32 10
	%93 = load i64, i64* %92
	%94 = bitcast i64 %93 to double
	%95 = fcmp olt double %90, %94
	%96 = select i1 %95, double %90, double %94
	%97 = bitcast double %96 to i64
	%98 = load %ast_AstNode*, %ast_AstNode** %tree
	%99 = getelementptr %ast_AstNode, %ast_AstNode* %98, i32 0, i32 10
	store i64 %97, i64* %99
	br label %L.9
L.8:
	call void @lex_Error(i8 33)
	br label %L.9
L.9:
	%100 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %100, %ast_AstNode** %rv.0
	br label %return
L.7:
	%101 = load %ast_AstNode*, %ast_AstNode** %rhs
	%102 = getelementptr %ast_AstNode, %ast_AstNode* %101, i32 0, i32 7
	%103 = load i32, i32* %102
	%104 = load %ast_AstNode*, %ast_AstNode** %lhs
	%105 = getelementptr %ast_AstNode, %ast_AstNode* %104, i32 0, i32 7
	store i32 %103, i32* %105
	br label %L.5
L.5:
	br label %L.3
L.3:
	%106 = load %ast_AstNode*, %ast_AstNode** %lhs
	%107 = getelementptr %ast_AstNode, %ast_AstNode* %106, i32 0, i32 7
	%108 = load i32, i32* %107
	store i32 %108, i32* %sl
	%109 = load %ast_AstNode*, %ast_AstNode** %rhs
	%110 = getelementptr %ast_AstNode, %ast_AstNode* %109, i32 0, i32 7
	%111 = load i32, i32* %110
	store i32 %111, i32* %sr
	%112 = load %type_TypeNode*, %type_TypeNode** %t
	%113 = icmp ne %type_TypeNode* %112, null
	br i1 %113, label %L.16, label %L.17
L.16:
	%114 = load %type_TypeNode*, %type_TypeNode** %t
	%115 = getelementptr %type_TypeNode, %type_TypeNode* %114, i32 0, i32 11
	%116 = load i32, i32* %115
	%117 = load i32, i32* %sl
	%118 = icmp ugt i32 %116, %117
	br label %L.17
L.17:
	%119 = phi i1 [ false, %L.3 ], [ %118, %L.16 ]
	br i1 %119, label %L.19, label %L.18
L.19:
	%120 = load %ast_AstNode*, %ast_AstNode** %lhs
	%121 = load %type_TypeNode*, %type_TypeNode** %t
	%122 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %120, %type_TypeNode* %121)
	store %ast_AstNode* %122, %ast_AstNode** %lhs
	%123 = load %type_TypeNode*, %type_TypeNode** %t
	%124 = getelementptr %type_TypeNode, %type_TypeNode* %123, i32 0, i32 11
	%125 = load i32, i32* %124
	store i32 %125, i32* %sl
	br label %L.18
L.18:
	%126 = load i32, i32* %sl
	%127 = load i32, i32* %sr
	%128 = icmp ugt i32 %126, %127
	br i1 %128, label %L.21, label %L.22
L.21:
	%129 = load %ast_AstNode*, %ast_AstNode** %rhs
	%130 = load %ast_AstNode*, %ast_AstNode** %lhs
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 8
	%132 = load %type_TypeNode*, %type_TypeNode** %131
	%133 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %129, %type_TypeNode* %132)
	store %ast_AstNode* %133, %ast_AstNode** %rhs
	br label %L.20
L.22:
	%134 = load i32, i32* %sr
	%135 = load i32, i32* %sl
	%136 = icmp ugt i32 %134, %135
	br i1 %136, label %L.24, label %L.23
L.24:
	%137 = load %ast_AstNode*, %ast_AstNode** %lhs
	%138 = load %ast_AstNode*, %ast_AstNode** %rhs
	%139 = getelementptr %ast_AstNode, %ast_AstNode* %138, i32 0, i32 8
	%140 = load %type_TypeNode*, %type_TypeNode** %139
	%141 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %137, %type_TypeNode* %140)
	store %ast_AstNode* %141, %ast_AstNode** %lhs
	br label %L.23
L.23:
	br label %L.20
L.20:
	%142 = load i8, i8* %op
	%143 = load %ast_AstNode*, %ast_AstNode** %lhs
	%144 = getelementptr %ast_AstNode, %ast_AstNode* %143, i32 0, i32 8
	%145 = load %type_TypeNode*, %type_TypeNode** %144
	%146 = load %ast_AstNode*, %ast_AstNode** %lhs
	%147 = load %ast_AstNode*, %ast_AstNode** %rhs
	%148 = call %ast_AstNode* @ast_New2(i8 %142, %type_TypeNode* %145, %ast_AstNode* %146, %ast_AstNode* %147)
	store %ast_AstNode* %148, %ast_AstNode** %rv.0
	br label %return
return:
	%149 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %149
}
define internal zeroext i8 @ast_CheckRefAttributes(%type_TypeNode* %to$, %type_TypeNode* %fm$) nounwind {
L.0:
	%rv.0 = alloca i8
	%to = alloca %type_TypeNode*
	store %type_TypeNode* %to$, %type_TypeNode** %to
	%fm = alloca %type_TypeNode*
	store %type_TypeNode* %fm$, %type_TypeNode** %fm
	%0 = load %type_TypeNode*, %type_TypeNode** %to
	%1 = icmp eq %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.1:
	%2 = load %type_TypeNode*, %type_TypeNode** %fm
	%3 = icmp eq %type_TypeNode* %2, null
	br label %L.2
L.2:
	%4 = phi i1 [ true, %L.0 ], [ %3, %L.1 ]
	br i1 %4, label %L.4, label %L.3
L.4:
	store i8 0, i8* %rv.0
	br label %return
L.3:
	%5 = load %type_TypeNode*, %type_TypeNode** %to
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 18
	%7 = load i8, i8* %6
	%8 = load %type_TypeNode*, %type_TypeNode** %fm
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 18
	%10 = load i8, i8* %9
	%11 = icmp ne i8 %7, %10
	br i1 %11, label %L.6, label %L.5
L.6:
	store i8 0, i8* %rv.0
	br label %return
L.5:
	%12 = load %type_TypeNode*, %type_TypeNode** %to
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 12
	%14 = load i32, i32* %13
	%15 = load %type_TypeNode*, %type_TypeNode** %fm
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 12
	%17 = load i32, i32* %16
	%18 = icmp ugt i32 %14, %17
	br i1 %18, label %L.8, label %L.7
L.8:
	store i8 0, i8* %rv.0
	br label %return
L.7:
	%19 = load %type_TypeNode*, %type_TypeNode** %to
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 16
	%21 = load i8, i8* %20
	%22 = icmp eq i8 %21, 5
	br i1 %22, label %L.9, label %L.10
L.9:
	%23 = load %type_TypeNode*, %type_TypeNode** %fm
	%24 = getelementptr %type_TypeNode, %type_TypeNode* %23, i32 0, i32 16
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 5
	br label %L.10
L.10:
	%27 = phi i1 [ false, %L.7 ], [ %26, %L.9 ]
	br i1 %27, label %L.12, label %L.11
L.12:
	%28 = load %type_TypeNode*, %type_TypeNode** %to
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 0
	%30 = load %type_TypeNode*, %type_TypeNode** %29
	%31 = load %type_TypeNode*, %type_TypeNode** %fm
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 0
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	%34 = call i8 @ast_CheckRefAttributes(%type_TypeNode* %30, %type_TypeNode* %33)
	store i8 %34, i8* %rv.0
	br label %return
L.11:
	store i8 1, i8* %rv.0
	br label %return
return:
	%35 = load i8, i8* %rv.0
	ret i8 %35
}
define internal %ast_AstNode* @ast_CoerceToRef(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 27
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 0
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	store %ast_AstNode* %7, %ast_AstNode** %tree
	br label %L.1
L.3:
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 0
	%10 = load i8, i8* %9
	%11 = icmp eq i8 %10, 32
	br i1 %11, label %L.4, label %L.5
L.4:
	%12 = load %ast_AstNode*, %ast_AstNode** %tree
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 11
	%14 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %13, i32 0, i32 0
	%15 = load %ast_AstNode*, %ast_AstNode** %14
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 0
	%17 = load i8, i8* %16
	%18 = icmp eq i8 %17, 27
	br label %L.5
L.5:
	%19 = phi i1 [ false, %L.3 ], [ %18, %L.4 ]
	br i1 %19, label %L.7, label %L.6
L.7:
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 11
	%22 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %21, i32 0, i32 0
	%23 = load %ast_AstNode*, %ast_AstNode** %22
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 0
	%26 = load %ast_AstNode*, %ast_AstNode** %25
	store %ast_AstNode* %26, %ast_AstNode** %tree
	br label %L.6
L.6:
	br label %L.1
L.1:
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 0
	%29 = load i8, i8* %28
	%30 = zext i8 %29 to i32
	switch i32 %30, label %L.8 [
		i32 8, label %L.10
		i32 9, label %L.10
		i32 12, label %L.11
	]
L.10:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 8
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	%34 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %33)
	%35 = load %ast_AstNode*, %ast_AstNode** %tree
	%36 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %34, %ast_AstNode* %35)
	store %ast_AstNode* %36, %ast_AstNode** %tree
	br label %L.9
L.11:
	br label %L.9
L.8:
	%37 = load %ast_AstNode*, %ast_AstNode** %tree
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 8
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	%40 = load %ast_AstNode*, %ast_AstNode** %tree
	%41 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %39, %ast_AstNode* %40)
	store %ast_AstNode* %41, %ast_AstNode** %tree
	br label %L.9
L.9:
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %42, %ast_AstNode** %rv.0
	br label %return
return:
	%43 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %43
}
@S.375 = private unnamed_addr constant [34 x i8] c"Ref alignment or endian mismatch\0A\00"
@S.376 = private unnamed_addr constant [4 x i8] c"fm=\00"
@S.377 = private unnamed_addr constant [5 x i8] c"\0Ato=\00"
define internal %ast_AstNode* @ast_Adjust(%ast_AstNode* %tree$, %type_TypeNode* %to$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%to = alloca %type_TypeNode*
	store %type_TypeNode* %to$, %type_TypeNode** %to
	%fm = alloca %type_TypeNode*
	%ok = alloca i8
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %fm
	%3 = load %type_TypeNode*, %type_TypeNode** %fm
	%4 = icmp eq %type_TypeNode* %3, null
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %5, %ast_AstNode** %rv.0
	br label %return
L.1:
	store i8 1, i8* %ok
	%6 = load %type_TypeNode*, %type_TypeNode** %to
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	%9 = zext i8 %8 to i32
	switch i32 %9, label %L.3 [
		i32 5, label %L.5
		i32 8, label %L.6
		i32 1, label %L.7
		i32 2, label %L.8
		i32 3, label %L.9
		i32 4, label %L.10
		i32 7, label %L.11
		i32 6, label %L.11
	]
L.5:
	%10 = load %type_TypeNode*, %type_TypeNode** %to
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 0
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	%13 = icmp ne %type_TypeNode* %12, null
	br i1 %13, label %L.13, label %L.12
L.13:
	%14 = load %type_TypeNode*, %type_TypeNode** %fm
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 16
	%16 = load i8, i8* %15
	%17 = icmp eq i8 %16, 5
	br i1 %17, label %L.14, label %L.15
L.14:
	%18 = load %type_TypeNode*, %type_TypeNode** %to
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 0
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%22 = icmp eq %type_TypeNode* %20, %21
	br i1 %22, label %L.17, label %L.16
L.16:
	%23 = load %type_TypeNode*, %type_TypeNode** %to
	%24 = load %type_TypeNode*, %type_TypeNode** %fm
	%25 = call i8 @type_Compat(%type_TypeNode* %23, %type_TypeNode* %24)
	%26 = icmp ne i8 %25, 0
	br label %L.17
L.17:
	%27 = phi i1 [ true, %L.14 ], [ %26, %L.16 ]
	br label %L.15
L.15:
	%28 = phi i1 [ false, %L.13 ], [ %27, %L.17 ]
	br i1 %28, label %L.19, label %L.20
L.19:
	%29 = load %type_TypeNode*, %type_TypeNode** %fm
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 0
	%31 = load %type_TypeNode*, %type_TypeNode** %30
	%32 = load %type_TypeNode*, %type_TypeNode** %to
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 0
	%34 = load %type_TypeNode*, %type_TypeNode** %33
	%35 = icmp ne %type_TypeNode* %31, %34
	br i1 %35, label %L.22, label %L.21
L.22:
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = load %type_TypeNode*, %type_TypeNode** %to
	%38 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %36, %type_TypeNode* %37)
	store %ast_AstNode* %38, %ast_AstNode** %tree
	%39 = load %ast_AstNode*, %ast_AstNode** %tree
	%40 = getelementptr %ast_AstNode, %ast_AstNode* %39, i32 0, i32 8
	%41 = load %type_TypeNode*, %type_TypeNode** %40
	store %type_TypeNode* %41, %type_TypeNode** %fm
	br label %L.21
L.21:
	br label %L.18
L.20:
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	%43 = call %ast_AstNode* @ast_CoerceToRef(%ast_AstNode* %42)
	store %ast_AstNode* %43, %ast_AstNode** %tree
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 8
	%46 = load %type_TypeNode*, %type_TypeNode** %45
	store %type_TypeNode* %46, %type_TypeNode** %fm
	%47 = load %type_TypeNode*, %type_TypeNode** %to
	%48 = getelementptr %type_TypeNode, %type_TypeNode* %47, i32 0, i32 0
	%49 = load %type_TypeNode*, %type_TypeNode** %48
	%50 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%51 = icmp eq %type_TypeNode* %49, %50
	br i1 %51, label %L.24, label %L.23
L.23:
	%52 = load %type_TypeNode*, %type_TypeNode** %to
	%53 = load %type_TypeNode*, %type_TypeNode** %fm
	%54 = call i8 @type_Compat(%type_TypeNode* %52, %type_TypeNode* %53)
	%55 = icmp ne i8 %54, 0
	br label %L.24
L.24:
	%56 = phi i1 [ true, %L.20 ], [ %55, %L.23 ]
	br i1 %56, label %L.26, label %L.27
L.26:
	%57 = load %type_TypeNode*, %type_TypeNode** %fm
	%58 = load %type_TypeNode*, %type_TypeNode** %to
	%59 = icmp ne %type_TypeNode* %57, %58
	br i1 %59, label %L.29, label %L.28
L.29:
	%60 = load %ast_AstNode*, %ast_AstNode** %tree
	%61 = load %type_TypeNode*, %type_TypeNode** %to
	%62 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %60, %type_TypeNode* %61)
	store %ast_AstNode* %62, %ast_AstNode** %tree
	%63 = load %ast_AstNode*, %ast_AstNode** %tree
	%64 = getelementptr %ast_AstNode, %ast_AstNode* %63, i32 0, i32 8
	%65 = load %type_TypeNode*, %type_TypeNode** %64
	store %type_TypeNode* %65, %type_TypeNode** %fm
	br label %L.28
L.28:
	br label %L.25
L.27:
	store i8 0, i8* %ok
	br label %L.25
L.25:
	br label %L.18
L.18:
	%66 = load %type_TypeNode*, %type_TypeNode** %to
	%67 = getelementptr %type_TypeNode, %type_TypeNode* %66, i32 0, i32 28
	%68 = load i8, i8* %67
	%69 = icmp ne i8 %68, 0
	br i1 %69, label %L.30, label %L.31
L.30:
	%70 = load %type_TypeNode*, %type_TypeNode** %fm
	%71 = getelementptr %type_TypeNode, %type_TypeNode* %70, i32 0, i32 28
	%72 = load i8, i8* %71
	%73 = icmp ne i8 %72, 0
	%74 = xor i1 %73, true
	br label %L.31
L.31:
	%75 = phi i1 [ false, %L.18 ], [ %74, %L.30 ]
	br i1 %75, label %L.33, label %L.32
L.33:
	%76 = load %type_TypeNode*, %type_TypeNode** %to
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	%78 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %76, %ast_AstNode* %77)
	store %ast_AstNode* %78, %ast_AstNode** %tree
	br label %L.32
L.32:
	%79 = load i8, i8* %ok
	%80 = icmp ne i8 %79, 0
	br i1 %80, label %L.34, label %L.35
L.34:
	%81 = load %type_TypeNode*, %type_TypeNode** %to
	%82 = load %type_TypeNode*, %type_TypeNode** %fm
	%83 = call i8 @ast_CheckRefAttributes(%type_TypeNode* %81, %type_TypeNode* %82)
	%84 = icmp ne i8 %83, 0
	%85 = xor i1 %84, true
	br label %L.35
L.35:
	%86 = phi i1 [ false, %L.32 ], [ %85, %L.34 ]
	br i1 %86, label %L.37, label %L.36
L.37:
	%87 = getelementptr [34 x i8], [34 x i8]* @S.375
	%88 = bitcast [34 x i8]* %87 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %88)
	br label %L.36
L.36:
	br label %L.12
L.12:
	br label %L.4
L.6:
	%89 = load %type_TypeNode*, %type_TypeNode** %to
	%90 = load %type_TypeNode*, %type_TypeNode** %fm
	%91 = call i8 @type_Compat(%type_TypeNode* %89, %type_TypeNode* %90)
	store i8 %91, i8* %ok
	br label %L.4
L.7:
	%92 = load %type_TypeNode*, %type_TypeNode** %fm
	%93 = load %type_TypeNode*, %type_TypeNode** %to
	%94 = call i8 @type_Compat(%type_TypeNode* %92, %type_TypeNode* %93)
	store i8 %94, i8* %ok
	%95 = load %type_TypeNode*, %type_TypeNode** %to
	%96 = getelementptr %type_TypeNode, %type_TypeNode* %95, i32 0, i32 11
	%97 = load i32, i32* %96
	%98 = load %ast_AstNode*, %ast_AstNode** %tree
	%99 = getelementptr %ast_AstNode, %ast_AstNode* %98, i32 0, i32 7
	%100 = load i32, i32* %99
	%101 = icmp ne i32 %97, %100
	br i1 %101, label %L.39, label %L.38
L.39:
	%102 = load %ast_AstNode*, %ast_AstNode** %tree
	%103 = load %type_TypeNode*, %type_TypeNode** %to
	%104 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %102, %type_TypeNode* %103)
	store %ast_AstNode* %104, %ast_AstNode** %tree
	br label %L.38
L.38:
	br label %L.4
L.8:
	%105 = load %type_TypeNode*, %type_TypeNode** %fm
	%106 = load %type_TypeNode*, %type_TypeNode** %to
	%107 = call i8 @type_Compat(%type_TypeNode* %105, %type_TypeNode* %106)
	store i8 %107, i8* %ok
	%108 = load i8, i8* %ok
	%109 = icmp ne i8 %108, 0
	%110 = xor i1 %109, true
	br i1 %110, label %L.41, label %L.40
L.41:
	%111 = load %type_TypeNode*, %type_TypeNode** %fm
	%112 = getelementptr %type_TypeNode, %type_TypeNode* %111, i32 0, i32 16
	%113 = load i8, i8* %112
	%114 = icmp eq i8 %113, 3
	br i1 %114, label %L.43, label %L.42
L.43:
	%115 = getelementptr %A.3, %A.3* @feature, i32 0, i32 4
	%116 = load i8, i8* %115
	%117 = icmp ne i8 %116, 0
	br i1 %117, label %L.45, label %L.44
L.45:
	call void @lex_Error(i8 6)
	br label %L.44
L.44:
	store i8 1, i8* %ok
	br label %L.42
L.42:
	br label %L.40
L.40:
	%118 = load %type_TypeNode*, %type_TypeNode** %to
	%119 = getelementptr %type_TypeNode, %type_TypeNode* %118, i32 0, i32 11
	%120 = load i32, i32* %119
	%121 = load %ast_AstNode*, %ast_AstNode** %tree
	%122 = getelementptr %ast_AstNode, %ast_AstNode* %121, i32 0, i32 7
	%123 = load i32, i32* %122
	%124 = icmp ne i32 %120, %123
	br i1 %124, label %L.47, label %L.46
L.47:
	%125 = load %ast_AstNode*, %ast_AstNode** %tree
	%126 = load %type_TypeNode*, %type_TypeNode** %to
	%127 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %125, %type_TypeNode* %126)
	store %ast_AstNode* %127, %ast_AstNode** %tree
	br label %L.46
L.46:
	br label %L.4
L.9:
	%128 = load %type_TypeNode*, %type_TypeNode** %fm
	%129 = load %type_TypeNode*, %type_TypeNode** %to
	%130 = call i8 @type_Compat(%type_TypeNode* %128, %type_TypeNode* %129)
	store i8 %130, i8* %ok
	%131 = load i8, i8* %ok
	%132 = icmp ne i8 %131, 0
	%133 = xor i1 %132, true
	br i1 %133, label %L.48, label %L.49
L.48:
	%134 = load %type_TypeNode*, %type_TypeNode** %fm
	%135 = getelementptr %type_TypeNode, %type_TypeNode* %134, i32 0, i32 16
	%136 = load i8, i8* %135
	%137 = icmp eq i8 %136, 2
	br label %L.49
L.49:
	%138 = phi i1 [ false, %L.9 ], [ %137, %L.48 ]
	br i1 %138, label %L.51, label %L.50
L.51:
	%139 = getelementptr %A.3, %A.3* @feature, i32 0, i32 4
	%140 = load i8, i8* %139
	%141 = icmp ne i8 %140, 0
	br i1 %141, label %L.53, label %L.52
L.53:
	call void @lex_Error(i8 5)
	br label %L.52
L.52:
	store i8 1, i8* %ok
	br label %L.50
L.50:
	%142 = load %type_TypeNode*, %type_TypeNode** %to
	%143 = getelementptr %type_TypeNode, %type_TypeNode* %142, i32 0, i32 11
	%144 = load i32, i32* %143
	%145 = load %ast_AstNode*, %ast_AstNode** %tree
	%146 = getelementptr %ast_AstNode, %ast_AstNode* %145, i32 0, i32 7
	%147 = load i32, i32* %146
	%148 = icmp ne i32 %144, %147
	br i1 %148, label %L.55, label %L.54
L.55:
	%149 = load %ast_AstNode*, %ast_AstNode** %tree
	%150 = load %type_TypeNode*, %type_TypeNode** %to
	%151 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %149, %type_TypeNode* %150)
	store %ast_AstNode* %151, %ast_AstNode** %tree
	br label %L.54
L.54:
	br label %L.4
L.10:
	%152 = load %type_TypeNode*, %type_TypeNode** %fm
	%153 = load %type_TypeNode*, %type_TypeNode** %to
	%154 = call i8 @type_Compat(%type_TypeNode* %152, %type_TypeNode* %153)
	store i8 %154, i8* %ok
	%155 = load %type_TypeNode*, %type_TypeNode** %to
	%156 = getelementptr %type_TypeNode, %type_TypeNode* %155, i32 0, i32 11
	%157 = load i32, i32* %156
	%158 = load %ast_AstNode*, %ast_AstNode** %tree
	%159 = getelementptr %ast_AstNode, %ast_AstNode* %158, i32 0, i32 7
	%160 = load i32, i32* %159
	%161 = icmp ne i32 %157, %160
	br i1 %161, label %L.57, label %L.56
L.57:
	%162 = load %ast_AstNode*, %ast_AstNode** %tree
	%163 = load %type_TypeNode*, %type_TypeNode** %to
	%164 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %162, %type_TypeNode* %163)
	store %ast_AstNode* %164, %ast_AstNode** %tree
	br label %L.56
L.56:
	br label %L.4
L.11:
	%165 = load %type_TypeNode*, %type_TypeNode** %fm
	%166 = getelementptr %type_TypeNode, %type_TypeNode* %165, i32 0, i32 24
	%167 = load i8, i8* %166
	%168 = icmp ne i8 %167, 0
	br i1 %168, label %L.58, label %L.59
L.58:
	%169 = load %type_TypeNode*, %type_TypeNode** %to
	%170 = getelementptr %type_TypeNode, %type_TypeNode* %169, i32 0, i32 24
	%171 = load i8, i8* %170
	%172 = icmp ne i8 %171, 0
	br label %L.59
L.59:
	%173 = phi i1 [ false, %L.11 ], [ %172, %L.58 ]
	br i1 %173, label %L.61, label %L.60
L.61:
	%174 = load %type_TypeNode*, %type_TypeNode** %fm
	%175 = load %type_TypeNode*, %type_TypeNode** %to
	%176 = call i8 @type_Compat(%type_TypeNode* %174, %type_TypeNode* %175)
	store i8 %176, i8* %ok
	%177 = load i8, i8* %ok
	%178 = icmp ne i8 %177, 0
	br i1 %178, label %L.62, label %L.63
L.62:
	%179 = load %type_TypeNode*, %type_TypeNode** %to
	%180 = getelementptr %type_TypeNode, %type_TypeNode* %179, i32 0, i32 11
	%181 = load i32, i32* %180
	%182 = load %ast_AstNode*, %ast_AstNode** %tree
	%183 = getelementptr %ast_AstNode, %ast_AstNode* %182, i32 0, i32 7
	%184 = load i32, i32* %183
	%185 = icmp ne i32 %181, %184
	br label %L.63
L.63:
	%186 = phi i1 [ false, %L.61 ], [ %185, %L.62 ]
	br i1 %186, label %L.65, label %L.64
L.65:
	%187 = load %ast_AstNode*, %ast_AstNode** %tree
	%188 = load %type_TypeNode*, %type_TypeNode** %to
	%189 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %187, %type_TypeNode* %188)
	store %ast_AstNode* %189, %ast_AstNode** %tree
	br label %L.64
L.64:
	br label %L.60
L.60:
	br label %L.4
L.3:
	br label %L.4
L.4:
	%190 = load i8, i8* %ok
	%191 = icmp ne i8 %190, 0
	%192 = xor i1 %191, true
	br i1 %192, label %L.67, label %L.66
L.67:
	call void @lex_Error(i8 44)
	%193 = getelementptr [4 x i8], [4 x i8]* @S.376
	%194 = bitcast [4 x i8]* %193 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %194)
	%195 = load %type_TypeNode*, %type_TypeNode** %fm
	call void @type_DumpT(%type_TypeNode* %195, i8 0)
	%196 = getelementptr [5 x i8], [5 x i8]* @S.377
	%197 = bitcast [5 x i8]* %196 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %197)
	%198 = load %type_TypeNode*, %type_TypeNode** %to
	call void @type_DumpT(%type_TypeNode* %198, i8 0)
	call void @sys_fildes_nl(i32 2)
	br label %L.66
L.66:
	%199 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %199, %ast_AstNode** %rv.0
	br label %return
return:
	%200 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %200
}
define internal void @ast_Init() nounwind {
L.0:
	%0 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	%1 = call %ast_AstNode* @ast_New(i8 0, %type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** @ast_Null
	br label %return
return:
	ret void
}
@S.379 = private unnamed_addr constant [5 x i8] c"NULL\00"
@S.380 = private unnamed_addr constant [4 x i8] c"NOP\00"
@S.381 = private unnamed_addr constant [5 x i8] c"FILE\00"
@S.382 = private unnamed_addr constant [8 x i8] c"PACKAGE\00"
@S.383 = private unnamed_addr constant [7 x i8] c"DCLVAR\00"
@S.384 = private unnamed_addr constant [7 x i8] c"DCLCON\00"
@S.385 = private unnamed_addr constant [6 x i8] c"CONST\00"
@S.386 = private unnamed_addr constant [7 x i8] c"FCONST\00"
@S.387 = private unnamed_addr constant [7 x i8] c"STRCON\00"
@S.394 = private unnamed_addr constant [6 x i8] c"CLIST\00"
@S.393 = private unnamed_addr constant [7 x i8] c"CRANGE\00"
@S.388 = private unnamed_addr constant [6 x i8] c"FIELD\00"
@S.389 = private unnamed_addr constant [4 x i8] c"VAR\00"
@S.396 = private unnamed_addr constant [7 x i8] c"OFFSET\00"
@S.397 = private unnamed_addr constant [6 x i8] c"INDEX\00"
@S.398 = private unnamed_addr constant [6 x i8] c"SLICE\00"
@S.399 = private unnamed_addr constant [6 x i8] c"BYREF\00"
@S.395 = private unnamed_addr constant [5 x i8] c"CAST\00"
@S.390 = private unnamed_addr constant [5 x i8] c"CALL\00"
@S.391 = private unnamed_addr constant [6 x i8] c"CALLI\00"
@S.392 = private unnamed_addr constant [4 x i8] c"ASM\00"
@S.400 = private unnamed_addr constant [4 x i8] c"SET\00"
@S.401 = private unnamed_addr constant [5 x i8] c"COPY\00"
@S.402 = private unnamed_addr constant [5 x i8] c"MOVE\00"
@S.403 = private unnamed_addr constant [4 x i8] c"AEQ\00"
@S.404 = private unnamed_addr constant [4 x i8] c"ANE\00"
@S.405 = private unnamed_addr constant [6 x i8] c"GETRV\00"
@S.406 = private unnamed_addr constant [5 x i8] c"LOAD\00"
@S.407 = private unnamed_addr constant [6 x i8] c"STORE\00"
@S.408 = private unnamed_addr constant [5 x i8] c"ZEXT\00"
@S.409 = private unnamed_addr constant [5 x i8] c"SEXT\00"
@S.410 = private unnamed_addr constant [6 x i8] c"TRUNC\00"
@S.411 = private unnamed_addr constant [6 x i8] c"BSWAP\00"
@S.423 = private unnamed_addr constant [4 x i8] c"CLZ\00"
@S.424 = private unnamed_addr constant [6 x i8] c"CLZNZ\00"
@S.425 = private unnamed_addr constant [4 x i8] c"CTZ\00"
@S.426 = private unnamed_addr constant [6 x i8] c"CTZNZ\00"
@S.427 = private unnamed_addr constant [4 x i8] c"POP\00"
@S.412 = private unnamed_addr constant [4 x i8] c"NEG\00"
@S.413 = private unnamed_addr constant [4 x i8] c"NOT\00"
@S.414 = private unnamed_addr constant [4 x i8] c"ABS\00"
@S.415 = private unnamed_addr constant [5 x i8] c"SQRT\00"
@S.428 = private unnamed_addr constant [5 x i8] c"ZLEN\00"
@S.416 = private unnamed_addr constant [5 x i8] c"FNEG\00"
@S.417 = private unnamed_addr constant [6 x i8] c"FCVTL\00"
@S.418 = private unnamed_addr constant [6 x i8] c"FCVTS\00"
@S.419 = private unnamed_addr constant [6 x i8] c"CVTUF\00"
@S.420 = private unnamed_addr constant [6 x i8] c"CVTIF\00"
@S.421 = private unnamed_addr constant [6 x i8] c"CVTFU\00"
@S.422 = private unnamed_addr constant [6 x i8] c"CVTFI\00"
@S.462 = private unnamed_addr constant [4 x i8] c"AND\00"
@S.463 = private unnamed_addr constant [3 x i8] c"OR\00"
@S.464 = private unnamed_addr constant [4 x i8] c"XOR\00"
@S.431 = private unnamed_addr constant [4 x i8] c"ADD\00"
@S.432 = private unnamed_addr constant [4 x i8] c"SUB\00"
@S.433 = private unnamed_addr constant [4 x i8] c"MUL\00"
@S.434 = private unnamed_addr constant [4 x i8] c"DIV\00"
@S.435 = private unnamed_addr constant [4 x i8] c"MOD\00"
@S.452 = private unnamed_addr constant [5 x i8] c"UMIN\00"
@S.453 = private unnamed_addr constant [5 x i8] c"UMAX\00"
@S.454 = private unnamed_addr constant [5 x i8] c"SMIN\00"
@S.455 = private unnamed_addr constant [5 x i8] c"SMAX\00"
@S.458 = private unnamed_addr constant [4 x i8] c"LSL\00"
@S.459 = private unnamed_addr constant [4 x i8] c"LSR\00"
@S.460 = private unnamed_addr constant [4 x i8] c"ASL\00"
@S.461 = private unnamed_addr constant [4 x i8] c"ASR\00"
@S.429 = private unnamed_addr constant [4 x i8] c"ROL\00"
@S.430 = private unnamed_addr constant [4 x i8] c"ROR\00"
@S.436 = private unnamed_addr constant [3 x i8] c"EQ\00"
@S.437 = private unnamed_addr constant [3 x i8] c"NE\00"
@S.438 = private unnamed_addr constant [4 x i8] c"ULT\00"
@S.439 = private unnamed_addr constant [4 x i8] c"UGT\00"
@S.440 = private unnamed_addr constant [4 x i8] c"ULE\00"
@S.441 = private unnamed_addr constant [4 x i8] c"UGE\00"
@S.442 = private unnamed_addr constant [4 x i8] c"SLT\00"
@S.443 = private unnamed_addr constant [4 x i8] c"SGT\00"
@S.444 = private unnamed_addr constant [4 x i8] c"SLE\00"
@S.445 = private unnamed_addr constant [4 x i8] c"SGE\00"
@S.446 = private unnamed_addr constant [4 x i8] c"FEQ\00"
@S.447 = private unnamed_addr constant [4 x i8] c"FNE\00"
@S.448 = private unnamed_addr constant [4 x i8] c"FLT\00"
@S.449 = private unnamed_addr constant [4 x i8] c"FGT\00"
@S.450 = private unnamed_addr constant [4 x i8] c"FLE\00"
@S.451 = private unnamed_addr constant [4 x i8] c"FGE\00"
@S.468 = private unnamed_addr constant [5 x i8] c"FADD\00"
@S.469 = private unnamed_addr constant [5 x i8] c"FSUB\00"
@S.470 = private unnamed_addr constant [5 x i8] c"FMUL\00"
@S.471 = private unnamed_addr constant [5 x i8] c"FDIV\00"
@S.472 = private unnamed_addr constant [5 x i8] c"FREM\00"
@S.456 = private unnamed_addr constant [5 x i8] c"FMIN\00"
@S.457 = private unnamed_addr constant [5 x i8] c"FMAX\00"
@S.465 = private unnamed_addr constant [5 x i8] c"BAND\00"
@S.466 = private unnamed_addr constant [4 x i8] c"BOR\00"
@S.467 = private unnamed_addr constant [5 x i8] c"BNOT\00"
@S.473 = private unnamed_addr constant [7 x i8] c"IFEXPR\00"
@S.474 = private unnamed_addr constant [4 x i8] c"SEQ\00"
@S.475 = private unnamed_addr constant [5 x i8] c"LOOP\00"
@S.476 = private unnamed_addr constant [5 x i8] c"EXIT\00"
@S.477 = private unnamed_addr constant [3 x i8] c"IF\00"
@S.478 = private unnamed_addr constant [4 x i8] c"SEL\00"
@S.479 = private unnamed_addr constant [3 x i8] c"IS\00"
@S.480 = private unnamed_addr constant [4 x i8] c"RET\00"
@S.481 = private unnamed_addr constant [5 x i8] c"PROC\00"
@S.482 = private unnamed_addr constant [7 x i8] c"ASSERT\00"
@ast_OpName = internal constant [105 x [0 x i8]*] [ [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.379 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.380 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.381 )  to [0 x i8]* ), [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.382 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.383 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.384 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.385 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.386 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.387 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.394 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.393 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.388 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.389 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.396 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.397 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.398 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.399 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.395 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.390 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.391 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.392 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.400 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.401 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.402 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.403 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.404 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.405 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.406 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.407 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.408 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.409 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.410 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.411 )  to [0 x i8]* ), [0 x i8]* null, [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.423 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.424 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.425 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.426 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.427 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.412 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.413 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.414 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.415 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.428 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.416 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.417 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.418 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.419 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.420 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.421 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.422 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.462 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.463 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.464 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.431 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.432 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.433 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.434 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.435 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.452 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.453 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.454 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.455 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.458 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.459 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.460 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.461 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.429 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.430 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.436 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.437 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.438 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.439 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.440 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.441 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.442 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.443 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.444 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.445 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.446 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.447 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.448 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.449 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.450 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.451 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.468 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.469 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.470 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.471 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.472 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.456 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.457 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.465 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.466 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.467 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.473 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.474 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.475 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.476 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.477 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.478 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.479 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.480 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.481 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.482 )  to [0 x i8]* ) ], align 4
@S.483 = private unnamed_addr constant [5 x i8] c"(sz=\00"
@S.484 = private unnamed_addr constant [5 x i8] c" ln=\00"
@S.485 = private unnamed_addr constant [5 x i8] c" nc=\00"
@S.486 = private unnamed_addr constant [6 x i8] c" val=\00"
@S.487 = private unnamed_addr constant [6 x i8] c" val=\00"
@S.488 = private unnamed_addr constant [6 x i8] c" scl=\00"
@S.489 = private unnamed_addr constant [6 x i8] c" val=\00"
@S.490 = private unnamed_addr constant [5 x i8] c" id \00"
@S.491 = private unnamed_addr constant [7 x i8] c" val=\22\00"
@S.492 = private unnamed_addr constant [7 x i8] c" name=\00"
@S.493 = private unnamed_addr constant [7 x i8] c"*NULL*\00"
@S.494 = private unnamed_addr constant [7 x i8] c" bits=\00"
define internal void @ast_Print(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%s = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 0
	%5 = load i8, i8* %4
	%6 = icmp eq i8 %5, 20
	br i1 %6, label %L.2, label %L.1
L.2:
	store %type_TypeNode* null, %type_TypeNode** %t
	br label %L.1
L.1:
	%7 = load %ast_AstNode*, %ast_AstNode** %node
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 0
	%9 = load i8, i8* %8
	%10 = zext i8 %9 to i32
	%11 = getelementptr [105 x [0 x i8]*], [105 x [0 x i8]*]* @ast_OpName, i32 0, i32 %10
	%12 = load [0 x i8]*, [0 x i8]** %11
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %13)
	%14 = getelementptr [5 x i8], [5 x i8]* @S.483
	%15 = bitcast [5 x i8]* %14 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %15)
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 7
	%18 = load i32, i32* %17
	call void @sys_fildes_uint(i32 2, i32 %18)
	%19 = getelementptr [5 x i8], [5 x i8]* @S.484
	%20 = bitcast [5 x i8]* %19 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %20)
	%21 = load %ast_AstNode*, %ast_AstNode** %node
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 5
	%23 = load i16, i16* %22
	%24 = zext i16 %23 to i32
	call void @sys_fildes_uint(i32 2, i32 %24)
	%25 = getelementptr [5 x i8], [5 x i8]* @S.485
	%26 = bitcast [5 x i8]* %25 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %26)
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 2
	%29 = load i16, i16* %28
	%30 = zext i16 %29 to i32
	call void @sys_fildes_uint(i32 2, i32 %30)
	%31 = load %ast_AstNode*, %ast_AstNode** %node
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 0
	%33 = load i8, i8* %32
	%34 = zext i8 %33 to i32
	switch i32 %34, label %L.3 [
		i32 13, label %L.5
		i32 22, label %L.5
		i32 26, label %L.5
		i32 34, label %L.5
		i32 36, label %L.5
		i32 6, label %L.6
		i32 7, label %L.7
		i32 8, label %L.8
		i32 4, label %L.9
		i32 12, label %L.9
		i32 103, label %L.9
		i32 18, label %L.9
		i32 2, label %L.9
		i32 3, label %L.9
		i32 11, label %L.10
	]
L.5:
	%35 = getelementptr [6 x i8], [6 x i8]* @S.486
	%36 = bitcast [6 x i8]* %35 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %36)
	%37 = load %ast_AstNode*, %ast_AstNode** %node
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 10
	%39 = load i64, i64* %38
	call void @sys_fildes_uint64(i32 2, i64 %39)
	br label %L.4
L.6:
	%40 = getelementptr [6 x i8], [6 x i8]* @S.487
	%41 = bitcast [6 x i8]* %40 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %41)
	%42 = load %ast_AstNode*, %ast_AstNode** %node
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 8
	%44 = load %type_TypeNode*, %type_TypeNode** %43
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 16
	%46 = load i8, i8* %45
	%47 = icmp eq i8 %46, 3
	br i1 %47, label %L.12, label %L.13
L.12:
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 10
	%50 = load i64, i64* %49
	call void @sys_fildes_int64(i32 2, i64 %50)
	br label %L.11
L.13:
	%51 = load %ast_AstNode*, %ast_AstNode** %node
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 10
	%53 = load i64, i64* %52
	call void @sys_fildes_uint64(i32 2, i64 %53)
	br label %L.11
L.11:
	%54 = load %ast_AstNode*, %ast_AstNode** %node
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 4
	%56 = load i16, i16* %55
	%57 = icmp ne i16 %56, 0
	br i1 %57, label %L.15, label %L.14
L.15:
	%58 = getelementptr [6 x i8], [6 x i8]* @S.488
	%59 = bitcast [6 x i8]* %58 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %59)
	%60 = load %ast_AstNode*, %ast_AstNode** %node
	%61 = getelementptr %ast_AstNode, %ast_AstNode* %60, i32 0, i32 4
	%62 = load i16, i16* %61
	call void @sys_fildes_int16(i32 2, i16 %62)
	br label %L.14
L.14:
	br label %L.4
L.7:
	%63 = getelementptr [6 x i8], [6 x i8]* @S.489
	%64 = bitcast [6 x i8]* %63 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %64)
	%65 = load %ast_AstNode*, %ast_AstNode** %node
	%66 = getelementptr %ast_AstNode, %ast_AstNode* %65, i32 0, i32 10
	%67 = load i64, i64* %66
	call void @sys_fildes_hex64(i32 2, i64 %67)
	br label %L.4
L.8:
	%68 = getelementptr [5 x i8], [5 x i8]* @S.490
	%69 = bitcast [5 x i8]* %68 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %69)
	%70 = load %ast_AstNode*, %ast_AstNode** %node
	%71 = getelementptr %ast_AstNode, %ast_AstNode* %70, i32 0, i32 10
	%72 = load i64, i64* %71
	%73 = trunc i64 %72 to i32
	call void @sys_fildes_uint32(i32 2, i32 %73)
	%74 = getelementptr [7 x i8], [7 x i8]* @S.491
	%75 = bitcast [7 x i8]* %74 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %75)
	%76 = load %ast_AstNode*, %ast_AstNode** %node
	%77 = getelementptr %ast_AstNode, %ast_AstNode* %76, i32 0, i32 9
	%78 = load %symb_SymbNode*, %symb_SymbNode** %77
	%79 = getelementptr %symb_SymbNode, %symb_SymbNode* %78, i32 0, i32 23
	%80 = getelementptr [0 x i8], [0 x i8]* %79
	%81 = bitcast [0 x i8]* %80 to [0 x i8]*
	%82 = load %ast_AstNode*, %ast_AstNode** %node
	%83 = getelementptr %ast_AstNode, %ast_AstNode* %82, i32 0, i32 8
	%84 = load %type_TypeNode*, %type_TypeNode** %83
	%85 = call i32 @type_TypeNode_Span(%type_TypeNode* %84)
	%86 = sub i32 %85, 1
	call void @sys_fildes_strn(i32 2, [0 x i8]* %81, i32 %86)
	call void @sys_fildes_chr(i32 2, i8 34)
	br label %L.4
L.9:
	%87 = getelementptr [7 x i8], [7 x i8]* @S.492
	%88 = bitcast [7 x i8]* %87 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %88)
	%89 = load %ast_AstNode*, %ast_AstNode** %node
	%90 = getelementptr %ast_AstNode, %ast_AstNode* %89, i32 0, i32 9
	%91 = load %symb_SymbNode*, %symb_SymbNode** %90
	store %symb_SymbNode* %91, %symb_SymbNode** %s
	%92 = load %symb_SymbNode*, %symb_SymbNode** %s
	%93 = icmp ne %symb_SymbNode* %92, null
	br i1 %93, label %L.17, label %L.18
L.17:
	%94 = load %symb_SymbNode*, %symb_SymbNode** %s
	%95 = getelementptr %symb_SymbNode, %symb_SymbNode* %94, i32 0, i32 23
	%96 = getelementptr [0 x i8], [0 x i8]* %95
	%97 = bitcast [0 x i8]* %96 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %97)
	br label %L.16
L.18:
	%98 = getelementptr [7 x i8], [7 x i8]* @S.493
	%99 = bitcast [7 x i8]* %98 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %99)
	br label %L.16
L.16:
	br label %L.4
L.10:
	%100 = getelementptr [7 x i8], [7 x i8]* @S.494
	%101 = bitcast [7 x i8]* %100 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %101)
	%102 = load %ast_AstNode*, %ast_AstNode** %node
	%103 = getelementptr %ast_AstNode, %ast_AstNode* %102, i32 0, i32 10
	%104 = load i64, i64* %103
	call void @sys_fildes_uint64(i32 2, i64 %104)
	br label %L.4
L.3:
	br label %L.4
L.4:
	call void @sys_fildes_chr(i32 2, i8 41)
	%105 = load %type_TypeNode*, %type_TypeNode** %t
	%106 = icmp ne %type_TypeNode* %105, null
	br i1 %106, label %L.20, label %L.19
L.20:
	call void @sys_fildes_chr(i32 2, i8 58)
	%107 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_DumpT(%type_TypeNode* %107, i8 0)
	br label %L.19
L.19:
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
@ast_blanks = internal constant [65 x i8] c"                                                                \00", align 1
@S.496 = private unnamed_addr constant [8 x i8] c"*NULL*\0A\00"
define internal void @ast_DumpSub(%ast_AstNode* %tree$, i32 %level$) nounwind {
L.0:
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%level = alloca i32
	store i32 %level$, i32* %level
	%i = alloca i16
	%0 = bitcast [65 x i8]* @ast_blanks to [0 x i8]*
	%1 = load i32, i32* %level
	%2 = call i32 @write(i32 2, [0 x i8]* %0, i32 %1)
	%3 = load %ast_AstNode*, %ast_AstNode** %tree
	%4 = icmp eq %ast_AstNode* %3, null
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = getelementptr [8 x i8], [8 x i8]* @S.496
	%6 = bitcast [8 x i8]* %5 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %6)
	br label %L.1
L.3:
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @ast_Print(%ast_AstNode* %7)
	store i16 0, i16* %i
	br label %L.4
L.4:
	%8 = load i16, i16* %i
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 2
	%11 = load i16, i16* %10
	%12 = icmp ult i16 %8, %11
	%13 = xor i1 %12, true
	br i1 %13, label %L.5, label %L.6
L.6:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 11
	%16 = load i16, i16* %i
	%17 = zext i16 %16 to i32
	%18 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %15, i32 0, i32 %17
	%19 = load %ast_AstNode*, %ast_AstNode** %18
	%20 = load i32, i32* %level
	%21 = add i32 %20, 1
	call void @ast_DumpSub(%ast_AstNode* %19, i32 %21)
	%22 = load i16, i16* %i
	%23 = add i16 %22, 1
	store i16 %23, i16* %i
	br label %L.4
L.5:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @ast_Dump(%ast_AstNode* %tree$) nounwind {
L.0:
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @ast_DumpSub(%ast_AstNode* %0, i32 0)
	br label %return
return:
	ret void
}
define internal void @symb_NewIntrinsic([0 x i8]* %name$, i8 zeroext %valu$) nounwind {
L.0:
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%valu = alloca i8
	store i8 %valu$, i8* %valu
	%s = alloca %symb_SymbNode*
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = call %symb_SymbNode* @symb_New(i8 5, [0 x i8]* %0, i8 0)
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	%2 = load i8, i8* %valu
	%3 = zext i8 %2 to i16
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 10
	store i16 %3, i16* %5
	br label %return
return:
	ret void
}
define internal %symb_SymbNode* @symb_NewLibrary([0 x i8]* %name$, %type_TypeNode* %rett$) nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%rett = alloca %type_TypeNode*
	store %type_TypeNode* %rett$, %type_TypeNode** %rett
	%s = alloca %symb_SymbNode*
	%srv = alloca %symb_SymbNode*
	%0 = load [0 x i8]*, [0 x i8]** %name
	%1 = call %symb_SymbNode* @symb_New(i8 5, [0 x i8]* %0, i8 0)
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = getelementptr %symb_SymbNode, %symb_SymbNode* %2, i32 0, i32 14
	store i8 5, i8* %3
	%4 = load %type_TypeNode*, %type_TypeNode** %rett
	%5 = icmp ne %type_TypeNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = bitcast [2 x i8]* @symb_anonid to [0 x i8]*
	%7 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %6, i8 2)
	store %symb_SymbNode* %7, %symb_SymbNode** %srv
	%8 = load %type_TypeNode*, %type_TypeNode** %rett
	%9 = load %symb_SymbNode*, %symb_SymbNode** %srv
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 1
	store %type_TypeNode* %8, %type_TypeNode** %10
	%11 = load %symb_SymbNode*, %symb_SymbNode** %srv
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 4
	store %symb_SymbNode* %11, %symb_SymbNode** %13
	%14 = load %type_TypeNode*, %type_TypeNode** %rett
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 1
	store %type_TypeNode* %14, %type_TypeNode** %16
	br label %L.1
L.1:
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %17, %symb_SymbNode** %rv.0
	br label %return
return:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %18
}
@S.497 = private unnamed_addr constant [2 x i8] c"_\00"
define internal void @symb_AddLibFormal(%symb_SymbNode* %s$, %type_TypeNode* %t$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%fs = alloca %symb_SymbNode*
	%pfs = alloca %symb_SymbNode*
	%tfs = alloca %symb_SymbNode*
	%0 = getelementptr [2 x i8], [2 x i8]* @S.497
	%1 = bitcast [2 x i8]* %0 to [0 x i8]*
	%2 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %1, i8 2)
	store %symb_SymbNode* %2, %symb_SymbNode** %fs
	%3 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 14
	store i8 0, i8* %4
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 1
	store %type_TypeNode* %5, %type_TypeNode** %7
	store %symb_SymbNode* null, %symb_SymbNode** %pfs
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 3
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	store %symb_SymbNode* %10, %symb_SymbNode** %tfs
	br label %L.1
L.1:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %tfs
	%12 = icmp ne %symb_SymbNode* %11, null
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %tfs
	store %symb_SymbNode* %14, %symb_SymbNode** %pfs
	%15 = load %symb_SymbNode*, %symb_SymbNode** %tfs
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 0
	%17 = load %symb_SymbNode*, %symb_SymbNode** %16
	store %symb_SymbNode* %17, %symb_SymbNode** %tfs
	br label %L.1
L.2:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %pfs
	%19 = icmp eq %symb_SymbNode* %18, null
	br i1 %19, label %L.5, label %L.6
L.5:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 3
	store %symb_SymbNode* %20, %symb_SymbNode** %22
	br label %L.4
L.6:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%24 = load %symb_SymbNode*, %symb_SymbNode** %pfs
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 0
	store %symb_SymbNode* %23, %symb_SymbNode** %25
	br label %L.4
L.4:
	br label %return
return:
	ret void
}
@S.498 = private unnamed_addr constant [5 x i8] c"true\00"
@S.499 = private unnamed_addr constant [6 x i8] c"false\00"
@S.500 = private unnamed_addr constant [9 x i8] c"_boolean\00"
@S.501 = private unnamed_addr constant [8 x i8] c"boolean\00"
@S.502 = private unnamed_addr constant [6 x i8] c"false\00"
@S.503 = private unnamed_addr constant [5 x i8] c"true\00"
@S.504 = private unnamed_addr constant [6 x i8] c"_byte\00"
@S.505 = private unnamed_addr constant [8 x i8] c"_memory\00"
@S.506 = private unnamed_addr constant [9 x i8] c"_address\00"
@S.507 = private unnamed_addr constant [6 x i8] c"_uint\00"
@S.508 = private unnamed_addr constant [5 x i8] c"_int\00"
@S.509 = private unnamed_addr constant [9 x i8] c"_uintptr\00"
@S.510 = private unnamed_addr constant [7 x i8] c"_uint8\00"
@S.511 = private unnamed_addr constant [6 x i8] c"_int8\00"
@S.512 = private unnamed_addr constant [8 x i8] c"_uint16\00"
@S.513 = private unnamed_addr constant [7 x i8] c"_int16\00"
@S.514 = private unnamed_addr constant [8 x i8] c"_uint32\00"
@S.515 = private unnamed_addr constant [7 x i8] c"_int32\00"
@S.516 = private unnamed_addr constant [8 x i8] c"_uint64\00"
@S.517 = private unnamed_addr constant [7 x i8] c"_int64\00"
@S.518 = private unnamed_addr constant [9 x i8] c"_uint128\00"
@S.519 = private unnamed_addr constant [8 x i8] c"_int128\00"
@S.520 = private unnamed_addr constant [9 x i8] c"_float32\00"
@S.521 = private unnamed_addr constant [9 x i8] c"_float64\00"
@S.522 = private unnamed_addr constant [9 x i8] c"_defined\00"
@S.523 = private unnamed_addr constant [5 x i8] c"_abs\00"
@S.524 = private unnamed_addr constant [5 x i8] c"_min\00"
@S.525 = private unnamed_addr constant [5 x i8] c"_max\00"
@S.526 = private unnamed_addr constant [5 x i8] c"_clz\00"
@S.527 = private unnamed_addr constant [7 x i8] c"_clznz\00"
@S.528 = private unnamed_addr constant [5 x i8] c"_ctz\00"
@S.529 = private unnamed_addr constant [7 x i8] c"_ctznz\00"
@S.530 = private unnamed_addr constant [5 x i8] c"_pop\00"
@S.531 = private unnamed_addr constant [5 x i8] c"_cvt\00"
@S.532 = private unnamed_addr constant [5 x i8] c"_new\00"
@S.533 = private unnamed_addr constant [8 x i8] c"_delete\00"
@S.534 = private unnamed_addr constant [6 x i8] c"_zero\00"
@S.535 = private unnamed_addr constant [6 x i8] c"_zlen\00"
@S.536 = private unnamed_addr constant [8 x i8] c"_packle\00"
@S.537 = private unnamed_addr constant [8 x i8] c"_packbe\00"
@S.538 = private unnamed_addr constant [8 x i8] c"_unpkle\00"
@S.539 = private unnamed_addr constant [8 x i8] c"_unpkbe\00"
@S.540 = private unnamed_addr constant [5 x i8] c"_rol\00"
@S.541 = private unnamed_addr constant [5 x i8] c"_ror\00"
@S.542 = private unnamed_addr constant [7 x i8] c"_bswap\00"
@S.543 = private unnamed_addr constant [8 x i8] c"_bitrev\00"
@S.544 = private unnamed_addr constant [6 x i8] c"_sqrt\00"
@S.545 = private unnamed_addr constant [4 x i8] c"_lo\00"
@S.546 = private unnamed_addr constant [4 x i8] c"_hi\00"
@S.547 = private unnamed_addr constant [8 x i8] c"_splice\00"
@S.548 = private unnamed_addr constant [9 x i8] c"memalloc\00"
@S.549 = private unnamed_addr constant [8 x i8] c"memfree\00"
define internal void @symb_InitDecl() nounwind {
L.0:
	%t = alloca %type_TypeNode*
	%taddr = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%s0 = alloca %symb_SymbNode*
	%s1 = alloca %symb_SymbNode*
	%0 = call %type_TypeNode* @type_New(i8 1)
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = getelementptr %type_TypeNode, %type_TypeNode* %1, i32 0, i32 10
	store i32 1, i32* %2
	%3 = getelementptr [5 x i8], [5 x i8]* @S.498
	%4 = bitcast [5 x i8]* %3 to [0 x i8]*
	%5 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %4, i8 2)
	store %symb_SymbNode* %5, %symb_SymbNode** %s1
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = call %ast_AstNode* @ast_Const(%type_TypeNode* %6, i64 1)
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s1
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 9
	store %ast_AstNode* %7, %ast_AstNode** %9
	%10 = getelementptr [6 x i8], [6 x i8]* @S.499
	%11 = bitcast [6 x i8]* %10 to [0 x i8]*
	%12 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %11, i8 2)
	store %symb_SymbNode* %12, %symb_SymbNode** %s0
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = call %ast_AstNode* @ast_Const(%type_TypeNode* %13, i64 0)
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s0
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 9
	store %ast_AstNode* %14, %ast_AstNode** %16
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s1
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s0
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 0
	store %symb_SymbNode* %17, %symb_SymbNode** %19
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s0
	%21 = load %type_TypeNode*, %type_TypeNode** %t
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 4
	store %symb_SymbNode* %20, %symb_SymbNode** %22
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %23)
	%24 = getelementptr [9 x i8], [9 x i8]* @S.500
	%25 = bitcast [9 x i8]* %24 to [0 x i8]*
	%26 = call %symb_SymbNode* @symb_New(i8 2, [0 x i8]* %25, i8 0)
	store %symb_SymbNode* %26, %symb_SymbNode** %s
	%27 = load %type_TypeNode*, %type_TypeNode** %t
	%28 = load %symb_SymbNode*, %symb_SymbNode** %s
	%29 = getelementptr %symb_SymbNode, %symb_SymbNode* %28, i32 0, i32 1
	store %type_TypeNode* %27, %type_TypeNode** %29
	%30 = load %symb_SymbNode*, %symb_SymbNode** %s
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 3
	store %symb_SymbNode* %30, %symb_SymbNode** %32
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 8
	store i64 0, i64* %34
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 9
	store i64 1, i64* %36
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %37, %type_TypeNode** @type_booltype
	%38 = load %symb_SymbNode*, %symb_SymbNode** %s
	%39 = getelementptr [8 x i8], [8 x i8]* @S.501
	%40 = bitcast [8 x i8]* %39 to [0 x i8]*
	%41 = call %symb_SymbNode* @symb_Clone(%symb_SymbNode* %38, [0 x i8]* %40)
	store %symb_SymbNode* %41, %symb_SymbNode** %s
	%42 = getelementptr [6 x i8], [6 x i8]* @S.502
	%43 = bitcast [6 x i8]* %42 to [0 x i8]*
	%44 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %43, i8 0)
	store %symb_SymbNode* %44, %symb_SymbNode** %s
	%45 = load %type_TypeNode*, %type_TypeNode** %t
	%46 = load %symb_SymbNode*, %symb_SymbNode** %s
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 1
	store %type_TypeNode* %45, %type_TypeNode** %47
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	%49 = call %ast_AstNode* @ast_Const(%type_TypeNode* %48, i64 0)
	%50 = load %symb_SymbNode*, %symb_SymbNode** %s
	%51 = getelementptr %symb_SymbNode, %symb_SymbNode* %50, i32 0, i32 9
	store %ast_AstNode* %49, %ast_AstNode** %51
	%52 = getelementptr [5 x i8], [5 x i8]* @S.503
	%53 = bitcast [5 x i8]* %52 to [0 x i8]*
	%54 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %53, i8 0)
	store %symb_SymbNode* %54, %symb_SymbNode** %s
	%55 = load %type_TypeNode*, %type_TypeNode** %t
	%56 = load %symb_SymbNode*, %symb_SymbNode** %s
	%57 = getelementptr %symb_SymbNode, %symb_SymbNode* %56, i32 0, i32 1
	store %type_TypeNode* %55, %type_TypeNode** %57
	%58 = load %type_TypeNode*, %type_TypeNode** %t
	%59 = call %ast_AstNode* @ast_Const(%type_TypeNode* %58, i64 1)
	%60 = load %symb_SymbNode*, %symb_SymbNode** %s
	%61 = getelementptr %symb_SymbNode, %symb_SymbNode* %60, i32 0, i32 9
	store %ast_AstNode* %59, %ast_AstNode** %61
	%62 = getelementptr [6 x i8], [6 x i8]* @S.504
	%63 = bitcast [6 x i8]* %62 to [0 x i8]*
	%64 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %63, i32 8)
	store %type_TypeNode* %64, %type_TypeNode** @type_bytetype
	%65 = getelementptr [8 x i8], [8 x i8]* @S.505
	%66 = bitcast [8 x i8]* %65 to [0 x i8]*
	%67 = call %type_TypeNode* @type_NewBuiltin(i8 6, [0 x i8]* %66, i32 0)
	store %type_TypeNode* %67, %type_TypeNode** @type_memtype
	%68 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%69 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%70 = getelementptr %type_TypeNode, %type_TypeNode* %69, i32 0, i32 0
	store %type_TypeNode* %68, %type_TypeNode** %70
	%71 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%72 = getelementptr %type_TypeNode, %type_TypeNode* %71, i32 0, i32 12
	store i32 8, i32* %72
	%73 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%74 = getelementptr %type_TypeNode, %type_TypeNode* %73, i32 0, i32 28
	store i8 1, i8* %74
	%75 = getelementptr [9 x i8], [9 x i8]* @S.506
	%76 = bitcast [9 x i8]* %75 to [0 x i8]*
	%77 = load %target_ModelT*, %target_ModelT** @target_Target
	%78 = getelementptr %target_ModelT, %target_ModelT* %77, i32 0, i32 5
	%79 = getelementptr %target_SizeAlign, %target_SizeAlign* %78, i32 0, i32 0
	%80 = load i8, i8* %79
	%81 = zext i8 %80 to i32
	%82 = call %type_TypeNode* @type_NewBuiltin(i8 5, [0 x i8]* %76, i32 %81)
	store %type_TypeNode* %82, %type_TypeNode** %taddr
	%83 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%84 = load %type_TypeNode*, %type_TypeNode** %taddr
	%85 = getelementptr %type_TypeNode, %type_TypeNode* %84, i32 0, i32 0
	store %type_TypeNode* %83, %type_TypeNode** %85
	%86 = load %target_ModelT*, %target_ModelT** @target_Target
	%87 = getelementptr %target_ModelT, %target_ModelT* %86, i32 0, i32 5
	%88 = getelementptr %target_SizeAlign, %target_SizeAlign* %87, i32 0, i32 1
	%89 = load i8, i8* %88
	%90 = zext i8 %89 to i32
	%91 = load %type_TypeNode*, %type_TypeNode** %taddr
	%92 = getelementptr %type_TypeNode, %type_TypeNode* %91, i32 0, i32 12
	store i32 %90, i32* %92
	%93 = load %type_TypeNode*, %type_TypeNode** %taddr
	store %type_TypeNode* %93, %type_TypeNode** @type_addrtype
	%94 = getelementptr [6 x i8], [6 x i8]* @S.507
	%95 = bitcast [6 x i8]* %94 to [0 x i8]*
	%96 = load %target_ModelT*, %target_ModelT** @target_Target
	%97 = getelementptr %target_ModelT, %target_ModelT* %96, i32 0, i32 2
	%98 = load i8, i8* %97
	%99 = zext i8 %98 to i32
	%100 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %95, i32 %99)
	store %type_TypeNode* %100, %type_TypeNode** @type_wordtype
	%101 = getelementptr [5 x i8], [5 x i8]* @S.508
	%102 = bitcast [5 x i8]* %101 to [0 x i8]*
	%103 = load %target_ModelT*, %target_ModelT** @target_Target
	%104 = getelementptr %target_ModelT, %target_ModelT* %103, i32 0, i32 2
	%105 = load i8, i8* %104
	%106 = zext i8 %105 to i32
	%107 = call %type_TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %102, i32 %106)
	store %type_TypeNode* %107, %type_TypeNode** @type_swordtype
	%108 = getelementptr [9 x i8], [9 x i8]* @S.509
	%109 = bitcast [9 x i8]* %108 to [0 x i8]*
	%110 = load %target_ModelT*, %target_ModelT** @target_Target
	%111 = getelementptr %target_ModelT, %target_ModelT* %110, i32 0, i32 5
	%112 = getelementptr %target_SizeAlign, %target_SizeAlign* %111, i32 0, i32 0
	%113 = load i8, i8* %112
	%114 = zext i8 %113 to i32
	%115 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %109, i32 %114)
	store %type_TypeNode* %115, %type_TypeNode** @type_uintptrtype
	%116 = getelementptr [7 x i8], [7 x i8]* @S.510
	%117 = bitcast [7 x i8]* %116 to [0 x i8]*
	%118 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %117, i32 8)
	%119 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 0
	store %type_TypeNode* %118, %type_TypeNode** %119
	%120 = getelementptr [6 x i8], [6 x i8]* @S.511
	%121 = bitcast [6 x i8]* %120 to [0 x i8]*
	%122 = call %type_TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %121, i32 8)
	%123 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 0
	store %type_TypeNode* %122, %type_TypeNode** %123
	%124 = getelementptr [8 x i8], [8 x i8]* @S.512
	%125 = bitcast [8 x i8]* %124 to [0 x i8]*
	%126 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %125, i32 16)
	%127 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 1
	store %type_TypeNode* %126, %type_TypeNode** %127
	%128 = getelementptr [7 x i8], [7 x i8]* @S.513
	%129 = bitcast [7 x i8]* %128 to [0 x i8]*
	%130 = call %type_TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %129, i32 16)
	%131 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 1
	store %type_TypeNode* %130, %type_TypeNode** %131
	%132 = getelementptr [8 x i8], [8 x i8]* @S.514
	%133 = bitcast [8 x i8]* %132 to [0 x i8]*
	%134 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %133, i32 32)
	%135 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 2
	store %type_TypeNode* %134, %type_TypeNode** %135
	%136 = getelementptr [7 x i8], [7 x i8]* @S.515
	%137 = bitcast [7 x i8]* %136 to [0 x i8]*
	%138 = call %type_TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %137, i32 32)
	%139 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 2
	store %type_TypeNode* %138, %type_TypeNode** %139
	%140 = getelementptr [8 x i8], [8 x i8]* @S.516
	%141 = bitcast [8 x i8]* %140 to [0 x i8]*
	%142 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %141, i32 64)
	%143 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 3
	store %type_TypeNode* %142, %type_TypeNode** %143
	%144 = getelementptr [7 x i8], [7 x i8]* @S.517
	%145 = bitcast [7 x i8]* %144 to [0 x i8]*
	%146 = call %type_TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %145, i32 64)
	%147 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 3
	store %type_TypeNode* %146, %type_TypeNode** %147
	%148 = load %target_ModelT*, %target_ModelT** @target_Target
	%149 = getelementptr %target_ModelT, %target_ModelT* %148, i32 0, i32 6
	%150 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %149, i32 0, i32 4
	%151 = getelementptr %target_SizeAlign, %target_SizeAlign* %150, i32 0, i32 0
	%152 = load i8, i8* %151
	%153 = icmp ne i8 %152, 0
	br i1 %153, label %L.2, label %L.1
L.2:
	%154 = getelementptr [9 x i8], [9 x i8]* @S.518
	%155 = bitcast [9 x i8]* %154 to [0 x i8]*
	%156 = call %type_TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %155, i32 128)
	%157 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 4
	store %type_TypeNode* %156, %type_TypeNode** %157
	%158 = getelementptr [8 x i8], [8 x i8]* @S.519
	%159 = bitcast [8 x i8]* %158 to [0 x i8]*
	%160 = call %type_TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %159, i32 128)
	%161 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 4
	store %type_TypeNode* %160, %type_TypeNode** %161
	br label %L.1
L.1:
	%162 = getelementptr [9 x i8], [9 x i8]* @S.520
	%163 = bitcast [9 x i8]* %162 to [0 x i8]*
	%164 = call %type_TypeNode* @type_NewBuiltin(i8 4, [0 x i8]* %163, i32 32)
	%165 = getelementptr [2 x %type_TypeNode*], [2 x %type_TypeNode*]* @type_floattypes, i32 0, i32 0
	store %type_TypeNode* %164, %type_TypeNode** %165
	%166 = getelementptr [9 x i8], [9 x i8]* @S.521
	%167 = bitcast [9 x i8]* %166 to [0 x i8]*
	%168 = call %type_TypeNode* @type_NewBuiltin(i8 4, [0 x i8]* %167, i32 64)
	%169 = getelementptr [2 x %type_TypeNode*], [2 x %type_TypeNode*]* @type_floattypes, i32 0, i32 1
	store %type_TypeNode* %168, %type_TypeNode** %169
	%170 = getelementptr [2 x %type_TypeNode*], [2 x %type_TypeNode*]* @type_floattypes, i32 0, i32 1
	%171 = load %type_TypeNode*, %type_TypeNode** %170
	store %type_TypeNode* %171, %type_TypeNode** @type_floattype
	%172 = call %type_TypeNode* @type_New(i8 0)
	store %type_TypeNode* %172, %type_TypeNode** @type_unkntype
	%173 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	%174 = getelementptr %type_TypeNode, %type_TypeNode* %173, i32 0, i32 10
	store i32 8, i32* %174
	%175 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	%176 = getelementptr %type_TypeNode, %type_TypeNode* %175, i32 0, i32 12
	store i32 8, i32* %176
	%177 = getelementptr [9 x i8], [9 x i8]* @S.522
	%178 = bitcast [9 x i8]* %177 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %178, i8 1)
	%179 = getelementptr [5 x i8], [5 x i8]* @S.523
	%180 = bitcast [5 x i8]* %179 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %180, i8 2)
	%181 = getelementptr [5 x i8], [5 x i8]* @S.524
	%182 = bitcast [5 x i8]* %181 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %182, i8 3)
	%183 = getelementptr [5 x i8], [5 x i8]* @S.525
	%184 = bitcast [5 x i8]* %183 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %184, i8 4)
	%185 = getelementptr [5 x i8], [5 x i8]* @S.526
	%186 = bitcast [5 x i8]* %185 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %186, i8 5)
	%187 = getelementptr [7 x i8], [7 x i8]* @S.527
	%188 = bitcast [7 x i8]* %187 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %188, i8 6)
	%189 = getelementptr [5 x i8], [5 x i8]* @S.528
	%190 = bitcast [5 x i8]* %189 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %190, i8 7)
	%191 = getelementptr [7 x i8], [7 x i8]* @S.529
	%192 = bitcast [7 x i8]* %191 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %192, i8 8)
	%193 = getelementptr [5 x i8], [5 x i8]* @S.530
	%194 = bitcast [5 x i8]* %193 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %194, i8 9)
	%195 = getelementptr [5 x i8], [5 x i8]* @S.531
	%196 = bitcast [5 x i8]* %195 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %196, i8 10)
	%197 = getelementptr [5 x i8], [5 x i8]* @S.532
	%198 = bitcast [5 x i8]* %197 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %198, i8 11)
	%199 = getelementptr [8 x i8], [8 x i8]* @S.533
	%200 = bitcast [8 x i8]* %199 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %200, i8 12)
	%201 = getelementptr [6 x i8], [6 x i8]* @S.534
	%202 = bitcast [6 x i8]* %201 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %202, i8 13)
	%203 = getelementptr [6 x i8], [6 x i8]* @S.535
	%204 = bitcast [6 x i8]* %203 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %204, i8 14)
	%205 = getelementptr [8 x i8], [8 x i8]* @S.536
	%206 = bitcast [8 x i8]* %205 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %206, i8 15)
	%207 = getelementptr [8 x i8], [8 x i8]* @S.537
	%208 = bitcast [8 x i8]* %207 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %208, i8 16)
	%209 = getelementptr [8 x i8], [8 x i8]* @S.538
	%210 = bitcast [8 x i8]* %209 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %210, i8 17)
	%211 = getelementptr [8 x i8], [8 x i8]* @S.539
	%212 = bitcast [8 x i8]* %211 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %212, i8 18)
	%213 = getelementptr [5 x i8], [5 x i8]* @S.540
	%214 = bitcast [5 x i8]* %213 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %214, i8 19)
	%215 = getelementptr [5 x i8], [5 x i8]* @S.541
	%216 = bitcast [5 x i8]* %215 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %216, i8 20)
	%217 = getelementptr [7 x i8], [7 x i8]* @S.542
	%218 = bitcast [7 x i8]* %217 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %218, i8 21)
	%219 = getelementptr [8 x i8], [8 x i8]* @S.543
	%220 = bitcast [8 x i8]* %219 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %220, i8 22)
	%221 = getelementptr [6 x i8], [6 x i8]* @S.544
	%222 = bitcast [6 x i8]* %221 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %222, i8 26)
	%223 = getelementptr [4 x i8], [4 x i8]* @S.545
	%224 = bitcast [4 x i8]* %223 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %224, i8 23)
	%225 = getelementptr [4 x i8], [4 x i8]* @S.546
	%226 = bitcast [4 x i8]* %225 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %226, i8 24)
	%227 = getelementptr [8 x i8], [8 x i8]* @S.547
	%228 = bitcast [8 x i8]* %227 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %228, i8 25)
	%229 = getelementptr [9 x i8], [9 x i8]* @S.548
	%230 = bitcast [9 x i8]* %229 to [0 x i8]*
	%231 = load %type_TypeNode*, %type_TypeNode** %taddr
	%232 = call %symb_SymbNode* @symb_NewLibrary([0 x i8]* %230, %type_TypeNode* %231)
	store %symb_SymbNode* %232, %symb_SymbNode** @symb_libnew
	%233 = load %symb_SymbNode*, %symb_SymbNode** @symb_libnew
	%234 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @symb_AddLibFormal(%symb_SymbNode* %233, %type_TypeNode* %234)
	%235 = load %symb_SymbNode*, %symb_SymbNode** @symb_libnew
	%236 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @symb_AddLibFormal(%symb_SymbNode* %235, %type_TypeNode* %236)
	%237 = load %symb_SymbNode*, %symb_SymbNode** @symb_libnew
	%238 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @symb_AddLibFormal(%symb_SymbNode* %237, %type_TypeNode* %238)
	%239 = getelementptr [8 x i8], [8 x i8]* @S.549
	%240 = bitcast [8 x i8]* %239 to [0 x i8]*
	%241 = call %symb_SymbNode* @symb_NewLibrary([0 x i8]* %240, %type_TypeNode* null)
	store %symb_SymbNode* %241, %symb_SymbNode** @symb_libdel
	%242 = load %symb_SymbNode*, %symb_SymbNode** @symb_libdel
	%243 = load %type_TypeNode*, %type_TypeNode** %taddr
	call void @symb_AddLibFormal(%symb_SymbNode* %242, %type_TypeNode* %243)
	%244 = load %symb_SymbNode*, %symb_SymbNode** @symb_libdel
	%245 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @symb_AddLibFormal(%symb_SymbNode* %244, %type_TypeNode* %245)
	%246 = load %symb_SymbNode*, %symb_SymbNode** @symb_libdel
	%247 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @symb_AddLibFormal(%symb_SymbNode* %246, %type_TypeNode* %247)
	br label %return
return:
	ret void
}
define internal void @symb_Init() nounwind {
L.0:
	store i8 0, i8* @symb_level
	%0 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 0
	%1 = getelementptr %symb_symblist, %symb_symblist* %0, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %1
	%2 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 0
	%3 = getelementptr %symb_symblist, %symb_symblist* %2, i32 0, i32 1
	store %symb_SymbNode* null, %symb_SymbNode** %3
	call void @symb_InitDecl()
	br label %return
return:
	ret void
}
define internal void @symb_DumpST(%symb_SymbNode* %s$, i8 zeroext %full$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%full = alloca i8
	store i8 %full$, i8* %full
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 23
	%2 = getelementptr [0 x i8], [0 x i8]* %1
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %3)
	call void @sys_fildes_chr(i32 2, i8 58)
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 1
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = load i8, i8* %full
	call void @type_DumpT(%type_TypeNode* %6, i8 %7)
	br label %return
return:
	ret void
}
@S.550 = private unnamed_addr constant [3 x i8] c", \00"
define internal void @symb_DumpFormals(%symb_SymbNode* %ss$) nounwind {
L.0:
	%ss = alloca %symb_SymbNode*
	store %symb_SymbNode* %ss$, %symb_SymbNode** %ss
	call void @sys_fildes_chr(i32 2, i8 40)
	%0 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%2 = load %symb_SymbNode*, %symb_SymbNode** %ss
	call void @symb_DumpST(%symb_SymbNode* %2, i8 0)
	%3 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 0
	%5 = load %symb_SymbNode*, %symb_SymbNode** %4
	store %symb_SymbNode* %5, %symb_SymbNode** %ss
	%6 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%7 = icmp eq %symb_SymbNode* %6, null
	br i1 %7, label %L.4, label %L.5
L.5:
	%8 = getelementptr [3 x i8], [3 x i8]* @S.550
	%9 = bitcast [3 x i8]* %8 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %9)
	br label %L.3
L.4:
	br label %L.1
L.1:
	call void @sys_fildes_chr(i32 2, i8 41)
	br label %return
return:
	ret void
}
define internal void @symb_DumpReturns(%symb_SymbNode* %srv$) nounwind {
L.0:
	%srv = alloca %symb_SymbNode*
	store %symb_SymbNode* %srv$, %symb_SymbNode** %srv
	%0 = load %symb_SymbNode*, %symb_SymbNode** %srv
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	call void @sys_fildes_chr(i32 2, i8 40)
	br label %L.3
L.3:
	%2 = load %symb_SymbNode*, %symb_SymbNode** %srv
	call void @symb_DumpST(%symb_SymbNode* %2, i8 0)
	%3 = load %symb_SymbNode*, %symb_SymbNode** %srv
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 0
	%5 = load %symb_SymbNode*, %symb_SymbNode** %4
	store %symb_SymbNode* %5, %symb_SymbNode** %srv
	%6 = load %symb_SymbNode*, %symb_SymbNode** %srv
	%7 = icmp eq %symb_SymbNode* %6, null
	br i1 %7, label %L.4, label %L.5
L.5:
	call void @sys_fildes_chr(i32 2, i8 44)
	br label %L.3
L.4:
	call void @sys_fildes_chr(i32 2, i8 41)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.551 = private unnamed_addr constant [9 x i8] c": global\00"
@S.552 = private unnamed_addr constant [11 x i8] c": external\00"
@S.553 = private unnamed_addr constant [9 x i8] c": fixed(\00"
@S.554 = private unnamed_addr constant [3 x i8] c"(\22\00"
@S.555 = private unnamed_addr constant [3 x i8] c"\22)\00"
define internal void @symb_DumpLinkage(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 14
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 3, label %L.3
		i32 5, label %L.4
		i32 6, label %L.5
	]
L.3:
	%4 = getelementptr [9 x i8], [9 x i8]* @S.551
	%5 = bitcast [9 x i8]* %4 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %5)
	br label %L.2
L.4:
	%6 = getelementptr [11 x i8], [11 x i8]* @S.552
	%7 = bitcast [11 x i8]* %6 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %7)
	br label %L.2
L.5:
	%8 = getelementptr [9 x i8], [9 x i8]* @S.553
	%9 = bitcast [9 x i8]* %8 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %9)
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 8
	%12 = load i64, i64* %11
	call void @sys_fildes_hex64(i32 2, i64 %12)
	call void @sys_fildes_chr(i32 2, i8 41)
	br label %return
L.1:
	br label %L.2
L.2:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = getelementptr %symb_SymbNode, %symb_SymbNode* %13, i32 0, i32 6
	%15 = load %symb_SymbNode*, %symb_SymbNode** %14
	%16 = icmp ne %symb_SymbNode* %15, null
	br i1 %16, label %L.7, label %L.6
L.7:
	%17 = getelementptr [3 x i8], [3 x i8]* @S.554
	%18 = bitcast [3 x i8]* %17 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %18)
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 6
	%21 = load %symb_SymbNode*, %symb_SymbNode** %20
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 23
	%23 = getelementptr [0 x i8], [0 x i8]* %22
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %24)
	%25 = getelementptr [3 x i8], [3 x i8]* @S.555
	%26 = bitcast [3 x i8]* %25 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %26)
	br label %L.6
L.6:
	br label %return
return:
	ret void
}
@S.556 = private unnamed_addr constant [10 x i8] c"constant \00"
@S.557 = private unnamed_addr constant [6 x i8] c"type \00"
@S.558 = private unnamed_addr constant [5 x i8] c"var \00"
@S.559 = private unnamed_addr constant [7 x i8] c"field \00"
@S.560 = private unnamed_addr constant [6 x i8] c"proc \00"
@S.561 = private unnamed_addr constant [11 x i8] c"intrinsic \00"
@S.562 = private unnamed_addr constant [3 x i8] c"()\00"
@S.563 = private unnamed_addr constant [9 x i8] c"package \00"
@S.564 = private unnamed_addr constant [7 x i8] c"alias \00"
@S.565 = private unnamed_addr constant [5 x i8] c" to \00"
@S.566 = private unnamed_addr constant [8 x i8] c"string \00"
@S.567 = private unnamed_addr constant [11 x i8] c"undefined \00"
@S.568 = private unnamed_addr constant [11 x i8] c" (forward)\00"
define internal void @symb_DumpS(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 13
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 1, label %L.3
		i32 2, label %L.4
		i32 3, label %L.5
		i32 4, label %L.6
		i32 5, label %L.7
		i32 6, label %L.8
		i32 8, label %L.9
		i32 9, label %L.10
	]
L.3:
	%4 = getelementptr [10 x i8], [10 x i8]* @S.556
	%5 = bitcast [10 x i8]* %4 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %5)
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpST(%symb_SymbNode* %6, i8 0)
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 1
	%9 = load %type_TypeNode*, %type_TypeNode** %8
	%10 = icmp ne %type_TypeNode* %9, null
	br i1 %10, label %L.13, label %L.14
L.13:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 1
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 16
	%15 = load i8, i8* %14
	%16 = icmp ule i8 %15, 5
	br label %L.14
L.14:
	%17 = phi i1 [ false, %L.3 ], [ %16, %L.13 ]
	br i1 %17, label %L.11, label %L.12
L.11:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 9
	%20 = load %ast_AstNode*, %ast_AstNode** %19
	%21 = icmp ne %ast_AstNode* %20, null
	br label %L.12
L.12:
	%22 = phi i1 [ false, %L.14 ], [ %21, %L.11 ]
	br i1 %22, label %L.16, label %L.15
L.16:
	call void @sys_fildes_chr(i32 2, i8 61)
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 9
	%25 = load %ast_AstNode*, %ast_AstNode** %24
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 10
	%27 = load i64, i64* %26
	call void @sys_fildes_hex64(i32 2, i64 %27)
	br label %L.15
L.15:
	br label %L.2
L.4:
	%28 = getelementptr [6 x i8], [6 x i8]* @S.557
	%29 = bitcast [6 x i8]* %28 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %29)
	%30 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpST(%symb_SymbNode* %30, i8 1)
	br label %L.2
L.5:
	%31 = getelementptr [5 x i8], [5 x i8]* @S.558
	%32 = bitcast [5 x i8]* %31 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %32)
	%33 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpST(%symb_SymbNode* %33, i8 0)
	%34 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpLinkage(%symb_SymbNode* %34)
	br label %L.2
L.6:
	%35 = getelementptr [7 x i8], [7 x i8]* @S.559
	%36 = bitcast [7 x i8]* %35 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %36)
	%37 = load %symb_SymbNode*, %symb_SymbNode** %s
	%38 = getelementptr %symb_SymbNode, %symb_SymbNode* %37, i32 0, i32 23
	%39 = getelementptr [0 x i8], [0 x i8]* %38
	%40 = bitcast [0 x i8]* %39 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %40)
	br label %L.2
L.7:
	%41 = load %symb_SymbNode*, %symb_SymbNode** %s
	%42 = getelementptr %symb_SymbNode, %symb_SymbNode* %41, i32 0, i32 10
	%43 = load i16, i16* %42
	%44 = icmp eq i16 %43, 0
	br i1 %44, label %L.18, label %L.19
L.18:
	%45 = getelementptr [6 x i8], [6 x i8]* @S.560
	%46 = bitcast [6 x i8]* %45 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %46)
	%47 = load %symb_SymbNode*, %symb_SymbNode** %s
	%48 = getelementptr %symb_SymbNode, %symb_SymbNode* %47, i32 0, i32 23
	%49 = getelementptr [0 x i8], [0 x i8]* %48
	%50 = bitcast [0 x i8]* %49 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %50)
	%51 = load %symb_SymbNode*, %symb_SymbNode** %s
	%52 = getelementptr %symb_SymbNode, %symb_SymbNode* %51, i32 0, i32 3
	%53 = load %symb_SymbNode*, %symb_SymbNode** %52
	call void @symb_DumpFormals(%symb_SymbNode* %53)
	%54 = load %symb_SymbNode*, %symb_SymbNode** %s
	%55 = getelementptr %symb_SymbNode, %symb_SymbNode* %54, i32 0, i32 4
	%56 = load %symb_SymbNode*, %symb_SymbNode** %55
	call void @symb_DumpReturns(%symb_SymbNode* %56)
	br label %L.17
L.19:
	%57 = getelementptr [11 x i8], [11 x i8]* @S.561
	%58 = bitcast [11 x i8]* %57 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %58)
	%59 = load %symb_SymbNode*, %symb_SymbNode** %s
	%60 = getelementptr %symb_SymbNode, %symb_SymbNode* %59, i32 0, i32 23
	%61 = getelementptr [0 x i8], [0 x i8]* %60
	%62 = bitcast [0 x i8]* %61 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %62)
	%63 = getelementptr [3 x i8], [3 x i8]* @S.562
	%64 = bitcast [3 x i8]* %63 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %64)
	br label %L.17
L.17:
	%65 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpLinkage(%symb_SymbNode* %65)
	br label %L.2
L.8:
	%66 = getelementptr [9 x i8], [9 x i8]* @S.563
	%67 = bitcast [9 x i8]* %66 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %67)
	%68 = load %symb_SymbNode*, %symb_SymbNode** %s
	%69 = getelementptr %symb_SymbNode, %symb_SymbNode* %68, i32 0, i32 23
	%70 = getelementptr [0 x i8], [0 x i8]* %69
	%71 = bitcast [0 x i8]* %70 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %71)
	br label %L.2
L.9:
	%72 = getelementptr [7 x i8], [7 x i8]* @S.564
	%73 = bitcast [7 x i8]* %72 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %73)
	%74 = load %symb_SymbNode*, %symb_SymbNode** %s
	%75 = getelementptr %symb_SymbNode, %symb_SymbNode* %74, i32 0, i32 23
	%76 = getelementptr [0 x i8], [0 x i8]* %75
	%77 = bitcast [0 x i8]* %76 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %77)
	%78 = getelementptr [5 x i8], [5 x i8]* @S.565
	%79 = bitcast [5 x i8]* %78 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %79)
	%80 = load %symb_SymbNode*, %symb_SymbNode** %s
	%81 = getelementptr %symb_SymbNode, %symb_SymbNode* %80, i32 0, i32 5
	%82 = load %symb_SymbNode*, %symb_SymbNode** %81
	%83 = getelementptr %symb_SymbNode, %symb_SymbNode* %82, i32 0, i32 23
	%84 = getelementptr [0 x i8], [0 x i8]* %83
	%85 = bitcast [0 x i8]* %84 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %85)
	br label %L.2
L.10:
	%86 = getelementptr [8 x i8], [8 x i8]* @S.566
	%87 = bitcast [8 x i8]* %86 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %87)
	%88 = load %symb_SymbNode*, %symb_SymbNode** %s
	%89 = getelementptr %symb_SymbNode, %symb_SymbNode* %88, i32 0, i32 23
	%90 = getelementptr [0 x i8], [0 x i8]* %89
	%91 = bitcast [0 x i8]* %90 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %91)
	br label %L.2
L.1:
	%92 = getelementptr [11 x i8], [11 x i8]* @S.567
	%93 = bitcast [11 x i8]* %92 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %93)
	%94 = load %symb_SymbNode*, %symb_SymbNode** %s
	%95 = getelementptr %symb_SymbNode, %symb_SymbNode* %94, i32 0, i32 23
	%96 = getelementptr [0 x i8], [0 x i8]* %95
	%97 = bitcast [0 x i8]* %96 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %97)
	br label %L.2
L.2:
	%98 = load %symb_SymbNode*, %symb_SymbNode** %s
	%99 = getelementptr %symb_SymbNode, %symb_SymbNode* %98, i32 0, i32 15
	%100 = load i8, i8* %99
	%101 = icmp ne i8 %100, 0
	br i1 %101, label %L.21, label %L.20
L.21:
	%102 = getelementptr [11 x i8], [11 x i8]* @S.568
	%103 = bitcast [11 x i8]* %102 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %103)
	br label %L.20
L.20:
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
@S.569 = private unnamed_addr constant [11 x i8] c"*** level \00"
@S.570 = private unnamed_addr constant [10 x i8] c" package \00"
@S.571 = private unnamed_addr constant [6 x i8] c" ***\0A\00"
define internal void @symb_Dump(i8 zeroext %n$) nounwind {
L.0:
	%n = alloca i8
	store i8 %n$, i8* %n
	%stop = alloca i32
	%i = alloca i32
	%s = alloca %symb_SymbNode*
	%0 = load i8, i8* @symb_level
	%1 = load i8, i8* %n
	%2 = icmp ult i8 %0, %1
	br i1 %2, label %L.2, label %L.3
L.2:
	store i32 0, i32* %stop
	br label %L.1
L.3:
	%3 = load i8, i8* @symb_level
	%4 = zext i8 %3 to i32
	%5 = add i32 %4, 1
	%6 = load i8, i8* %n
	%7 = zext i8 %6 to i32
	%8 = sub i32 %5, %7
	store i32 %8, i32* %stop
	br label %L.1
L.1:
	%9 = load i8, i8* @symb_level
	%10 = zext i8 %9 to i32
	store i32 %10, i32* %i
	br label %L.4
L.4:
	%11 = getelementptr [11 x i8], [11 x i8]* @S.569
	%12 = bitcast [11 x i8]* %11 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %12)
	%13 = load i32, i32* %i
	call void @sys_fildes_uint(i32 2, i32 %13)
	%14 = load i32, i32* %i
	%15 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %14
	%16 = getelementptr %symb_symblist, %symb_symblist* %15, i32 0, i32 2
	%17 = load %symb_SymbNode*, %symb_SymbNode** %16
	%18 = icmp ne %symb_SymbNode* %17, null
	br i1 %18, label %L.7, label %L.6
L.7:
	%19 = getelementptr [10 x i8], [10 x i8]* @S.570
	%20 = bitcast [10 x i8]* %19 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %20)
	%21 = load i32, i32* %i
	%22 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %21
	%23 = getelementptr %symb_symblist, %symb_symblist* %22, i32 0, i32 2
	%24 = load %symb_SymbNode*, %symb_SymbNode** %23
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 23
	%26 = getelementptr [0 x i8], [0 x i8]* %25
	%27 = bitcast [0 x i8]* %26 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %27)
	br label %L.6
L.6:
	%28 = getelementptr [6 x i8], [6 x i8]* @S.571
	%29 = bitcast [6 x i8]* %28 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %29)
	%30 = load i32, i32* %i
	%31 = getelementptr [32 x %symb_symblist], [32 x %symb_symblist]* @symb_symbs, i32 0, i32 %30
	%32 = getelementptr %symb_symblist, %symb_symblist* %31, i32 0, i32 0
	%33 = load %symb_SymbNode*, %symb_SymbNode** %32
	store %symb_SymbNode* %33, %symb_SymbNode** %s
	br label %L.8
L.8:
	%34 = load %symb_SymbNode*, %symb_SymbNode** %s
	%35 = icmp ne %symb_SymbNode* %34, null
	%36 = xor i1 %35, true
	br i1 %36, label %L.9, label %L.10
L.10:
	%37 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpS(%symb_SymbNode* %37)
	%38 = load %symb_SymbNode*, %symb_SymbNode** %s
	%39 = getelementptr %symb_SymbNode, %symb_SymbNode* %38, i32 0, i32 0
	%40 = load %symb_SymbNode*, %symb_SymbNode** %39
	store %symb_SymbNode* %40, %symb_SymbNode** %s
	br label %L.8
L.9:
	%41 = load i32, i32* %i
	%42 = load i32, i32* %stop
	%43 = icmp ule i32 %41, %42
	br i1 %43, label %L.5, label %L.11
L.11:
	%44 = load i32, i32* %i
	%45 = sub i32 %44, 1
	store i32 %45, i32* %i
	br label %L.4
L.5:
	br label %return
return:
	ret void
}
@expr_savedsym = internal global %symb_SymbNode* null, align 4
%type_fwd = type {%type_fwd*, %symb_SymbNode*, %type_TypeNode*}
@type_fwdlist = internal global %type_fwd* zeroinitializer, align 4
define internal void @type_FwdAdd(%symb_SymbNode* %s$, %type_TypeNode* %t$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%f = alloca %type_fwd*
	%0 = call [0 x i8]* @sys_zalloc(i32 12)
	%1 = bitcast [0 x i8]* %0 to %type_fwd*
	store %type_fwd* %1, %type_fwd** %f
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = load %type_fwd*, %type_fwd** %f
	%4 = getelementptr %type_fwd, %type_fwd* %3, i32 0, i32 1
	store %symb_SymbNode* %2, %symb_SymbNode** %4
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = load %type_fwd*, %type_fwd** %f
	%7 = getelementptr %type_fwd, %type_fwd* %6, i32 0, i32 2
	store %type_TypeNode* %5, %type_TypeNode** %7
	%8 = load %type_fwd*, %type_fwd** @type_fwdlist
	%9 = load %type_fwd*, %type_fwd** %f
	%10 = getelementptr %type_fwd, %type_fwd* %9, i32 0, i32 0
	store %type_fwd* %8, %type_fwd** %10
	%11 = load %type_fwd*, %type_fwd** %f
	store %type_fwd* %11, %type_fwd** @type_fwdlist
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 15
	store i8 1, i8* %13
	br label %return
return:
	ret void
}
define internal void @type_FwdFix(%symb_SymbNode* %s$, %type_TypeNode* %bt$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%f = alloca %type_fwd*
	%fn = alloca %type_fwd*
	%fp = alloca %type_fwd*
	store %type_fwd* null, %type_fwd** %fp
	%0 = load %type_fwd*, %type_fwd** @type_fwdlist
	store %type_fwd* %0, %type_fwd** %f
	br label %L.1
L.1:
	%1 = load %type_fwd*, %type_fwd** %f
	%2 = icmp ne %type_fwd* %1, null
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load %type_fwd*, %type_fwd** %f
	%5 = getelementptr %type_fwd, %type_fwd* %4, i32 0, i32 0
	%6 = load %type_fwd*, %type_fwd** %5
	store %type_fwd* %6, %type_fwd** %fn
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = load %type_fwd*, %type_fwd** %f
	%9 = getelementptr %type_fwd, %type_fwd* %8, i32 0, i32 1
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	%11 = icmp eq %symb_SymbNode* %7, %10
	br i1 %11, label %L.5, label %L.6
L.5:
	%12 = load %type_TypeNode*, %type_TypeNode** %bt
	%13 = load %type_fwd*, %type_fwd** %f
	%14 = getelementptr %type_fwd, %type_fwd* %13, i32 0, i32 2
	%15 = load %type_TypeNode*, %type_TypeNode** %14
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 0
	store %type_TypeNode* %12, %type_TypeNode** %16
	%17 = load %type_fwd*, %type_fwd** %fp
	%18 = icmp ne %type_fwd* %17, null
	br i1 %18, label %L.8, label %L.9
L.8:
	%19 = load %type_fwd*, %type_fwd** %fn
	%20 = load %type_fwd*, %type_fwd** %fp
	%21 = getelementptr %type_fwd, %type_fwd* %20, i32 0, i32 0
	store %type_fwd* %19, %type_fwd** %21
	br label %L.7
L.9:
	%22 = load %type_fwd*, %type_fwd** %fn
	store %type_fwd* %22, %type_fwd** @type_fwdlist
	br label %L.7
L.7:
	br label %L.4
L.6:
	%23 = load %type_fwd*, %type_fwd** %f
	store %type_fwd* %23, %type_fwd** %fp
	br label %L.4
L.4:
	%24 = load %type_fwd*, %type_fwd** %fn
	store %type_fwd* %24, %type_fwd** %f
	br label %L.1
L.2:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 15
	store i8 0, i8* %26
	br label %return
return:
	ret void
}
define internal void @type_PPkgPfx(i32 %f$, %symb_SymbNode* %s$) nounwind {
L.0:
	%f = alloca i32
	store i32 %f$, i32* %f
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 2
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load i32, i32* %f
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = getelementptr %symb_SymbNode, %symb_SymbNode* %5, i32 0, i32 2
	%7 = load %symb_SymbNode*, %symb_SymbNode** %6
	call void @type_PPkgPfx(i32 %4, %symb_SymbNode* %7)
	br label %L.1
L.1:
	%8 = load i32, i32* %f
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 23
	%11 = getelementptr [0 x i8], [0 x i8]* %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	call void @sys_fildes_str(i32 %8, [0 x i8]* %12)
	%13 = load i32, i32* %f
	call void @sys_fildes_chr(i32 %13, i8 46)
	br label %return
return:
	ret void
}
define internal void @type_PName(i32 %f$, %symb_SymbNode* %s$) nounwind {
L.0:
	%f = alloca i32
	store i32 %f$, i32* %f
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 2
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load i32, i32* %f
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = getelementptr %symb_SymbNode, %symb_SymbNode* %5, i32 0, i32 2
	%7 = load %symb_SymbNode*, %symb_SymbNode** %6
	call void @type_PPkgPfx(i32 %4, %symb_SymbNode* %7)
	br label %L.1
L.1:
	%8 = load i32, i32* %f
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 23
	%11 = getelementptr [0 x i8], [0 x i8]* %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	call void @sys_fildes_str(i32 %8, [0 x i8]* %12)
	br label %return
return:
	ret void
}
define internal zeroext i8 @type_FwdCheck() nounwind {
L.0:
	%rv.0 = alloca i8
	%f = alloca %type_fwd*
	%0 = load %type_fwd*, %type_fwd** @type_fwdlist
	store %type_fwd* %0, %type_fwd** %f
	br label %L.1
L.1:
	%1 = load %type_fwd*, %type_fwd** %f
	%2 = icmp ne %type_fwd* %1, null
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	call void @lex_ErrorSub(i8 79)
	%4 = load %type_fwd*, %type_fwd** %f
	%5 = getelementptr %type_fwd, %type_fwd* %4, i32 0, i32 1
	%6 = load %symb_SymbNode*, %symb_SymbNode** %5
	call void @type_PName(i32 2, %symb_SymbNode* %6)
	call void @sys_fildes_nl(i32 2)
	%7 = load %type_fwd*, %type_fwd** %f
	%8 = getelementptr %type_fwd, %type_fwd* %7, i32 0, i32 0
	%9 = load %type_fwd*, %type_fwd** %8
	store %type_fwd* %9, %type_fwd** %f
	br label %L.1
L.2:
	br label %return
return:
	%10 = load i8, i8* %rv.0
	ret i8 %10
}
define internal zeroext i8 @type_SameTypes(%symb_SymbNode* %as$, %symb_SymbNode* %bs$) nounwind {
L.0:
	%rv.0 = alloca i8
	%as = alloca %symb_SymbNode*
	store %symb_SymbNode* %as$, %symb_SymbNode** %as
	%bs = alloca %symb_SymbNode*
	store %symb_SymbNode* %bs$, %symb_SymbNode** %bs
	br label %L.1
L.1:
	%0 = load %symb_SymbNode*, %symb_SymbNode** %as
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.4, label %L.5
L.4:
	%2 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%3 = icmp ne %symb_SymbNode* %2, null
	br label %L.5
L.5:
	%4 = phi i1 [ false, %L.1 ], [ %3, %L.4 ]
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %as
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 1
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 1
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	%12 = call i8 @type_Compat(%type_TypeNode* %8, %type_TypeNode* %11)
	%13 = icmp ne i8 %12, 0
	%14 = xor i1 %13, true
	br i1 %14, label %L.7, label %L.6
L.7:
	store i8 0, i8* %rv.0
	br label %return
L.6:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %as
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 0
	%17 = load %symb_SymbNode*, %symb_SymbNode** %16
	store %symb_SymbNode* %17, %symb_SymbNode** %as
	%18 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 0
	%20 = load %symb_SymbNode*, %symb_SymbNode** %19
	store %symb_SymbNode* %20, %symb_SymbNode** %bs
	br label %L.1
L.2:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %as
	%22 = icmp eq %symb_SymbNode* %21, null
	br i1 %22, label %L.8, label %L.9
L.8:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%24 = icmp eq %symb_SymbNode* %23, null
	br label %L.9
L.9:
	%25 = phi i1 [ false, %L.2 ], [ %24, %L.8 ]
	%26 = zext i1 %25 to i8
	store i8 %26, i8* %rv.0
	br label %return
return:
	%27 = load i8, i8* %rv.0
	ret i8 %27
}
define internal zeroext i8 @type_SameIndex(%type_TypeNode* %t1$, %type_TypeNode* %t2$) nounwind {
L.0:
	%rv.0 = alloca i8
	%t1 = alloca %type_TypeNode*
	store %type_TypeNode* %t1$, %type_TypeNode** %t1
	%t2 = alloca %type_TypeNode*
	store %type_TypeNode* %t2$, %type_TypeNode** %t2
	%0 = load %type_TypeNode*, %type_TypeNode** %t1
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 28
	%2 = load i8, i8* %1
	%3 = icmp ne i8 %2, 0
	br i1 %3, label %L.2, label %L.1
L.1:
	%4 = load %type_TypeNode*, %type_TypeNode** %t2
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 28
	%6 = load i8, i8* %5
	%7 = icmp ne i8 %6, 0
	br label %L.2
L.2:
	%8 = phi i1 [ true, %L.0 ], [ %7, %L.1 ]
	br i1 %8, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	%9 = load %type_TypeNode*, %type_TypeNode** %t1
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 2
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 16
	%13 = load i8, i8* %12
	%14 = load %type_TypeNode*, %type_TypeNode** %t2
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 2
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 16
	%18 = load i8, i8* %17
	%19 = icmp eq i8 %13, %18
	%20 = zext i1 %19 to i8
	store i8 %20, i8* %rv.0
	br label %return
return:
	%21 = load i8, i8* %rv.0
	ret i8 %21
}
define internal zeroext i8 @type_Same(%type_TypeNode* %t1$, %type_TypeNode* %t2$) nounwind {
L.0:
	%rv.0 = alloca i8
	%t1 = alloca %type_TypeNode*
	store %type_TypeNode* %t1$, %type_TypeNode** %t1
	%t2 = alloca %type_TypeNode*
	store %type_TypeNode* %t2$, %type_TypeNode** %t2
	%0 = load %type_TypeNode*, %type_TypeNode** %t1
	%1 = icmp eq %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.1:
	%2 = load %type_TypeNode*, %type_TypeNode** %t2
	%3 = icmp eq %type_TypeNode* %2, null
	br label %L.2
L.2:
	%4 = phi i1 [ true, %L.0 ], [ %3, %L.1 ]
	br i1 %4, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	%5 = load %type_TypeNode*, %type_TypeNode** %t1
	%6 = load %type_TypeNode*, %type_TypeNode** %t2
	%7 = icmp eq %type_TypeNode* %5, %6
	br i1 %7, label %L.6, label %L.5
L.6:
	store i8 1, i8* %rv.0
	br label %return
L.5:
	%8 = load %type_TypeNode*, %type_TypeNode** %t1
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 16
	%10 = load i8, i8* %9
	%11 = load %type_TypeNode*, %type_TypeNode** %t2
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 16
	%13 = load i8, i8* %12
	%14 = icmp ne i8 %10, %13
	br i1 %14, label %L.8, label %L.7
L.8:
	store i8 0, i8* %rv.0
	br label %return
L.7:
	%15 = load %type_TypeNode*, %type_TypeNode** %t2
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 16
	%17 = load i8, i8* %16
	%18 = zext i8 %17 to i32
	switch i32 %18, label %L.9 [
		i32 2, label %L.11
		i32 3, label %L.11
		i32 5, label %L.12
		i32 6, label %L.13
		i32 8, label %L.14
	]
L.11:
	%19 = load %type_TypeNode*, %type_TypeNode** %t1
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 11
	%21 = load i32, i32* %20
	%22 = load %type_TypeNode*, %type_TypeNode** %t2
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 11
	%24 = load i32, i32* %23
	%25 = icmp eq i32 %21, %24
	%26 = zext i1 %25 to i8
	store i8 %26, i8* %rv.0
	br label %return
L.12:
	%27 = load %type_TypeNode*, %type_TypeNode** %t1
	%28 = getelementptr %type_TypeNode, %type_TypeNode* %27, i32 0, i32 0
	%29 = load %type_TypeNode*, %type_TypeNode** %28
	%30 = load %type_TypeNode*, %type_TypeNode** %t2
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 0
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	%33 = call i8 @type_Same(%type_TypeNode* %29, %type_TypeNode* %32)
	store i8 %33, i8* %rv.0
	br label %return
L.13:
	%34 = load %type_TypeNode*, %type_TypeNode** %t1
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 0
	%36 = load %type_TypeNode*, %type_TypeNode** %35
	%37 = load %type_TypeNode*, %type_TypeNode** %t2
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 0
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	%40 = call i8 @type_Same(%type_TypeNode* %36, %type_TypeNode* %39)
	%41 = icmp ne i8 %40, 0
	br i1 %41, label %L.15, label %L.16
L.15:
	%42 = load %type_TypeNode*, %type_TypeNode** %t1
	%43 = load %type_TypeNode*, %type_TypeNode** %t2
	%44 = call i8 @type_SameIndex(%type_TypeNode* %42, %type_TypeNode* %43)
	%45 = icmp ne i8 %44, 0
	br label %L.16
L.16:
	%46 = phi i1 [ false, %L.13 ], [ %45, %L.15 ]
	%47 = zext i1 %46 to i8
	store i8 %47, i8* %rv.0
	br label %return
L.14:
	%48 = load %type_TypeNode*, %type_TypeNode** %t1
	%49 = getelementptr %type_TypeNode, %type_TypeNode* %48, i32 0, i32 4
	%50 = load %symb_SymbNode*, %symb_SymbNode** %49
	%51 = getelementptr %symb_SymbNode, %symb_SymbNode* %50, i32 0, i32 3
	%52 = load %symb_SymbNode*, %symb_SymbNode** %51
	%53 = load %type_TypeNode*, %type_TypeNode** %t2
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 4
	%55 = load %symb_SymbNode*, %symb_SymbNode** %54
	%56 = getelementptr %symb_SymbNode, %symb_SymbNode* %55, i32 0, i32 3
	%57 = load %symb_SymbNode*, %symb_SymbNode** %56
	%58 = call i8 @type_SameTypes(%symb_SymbNode* %52, %symb_SymbNode* %57)
	%59 = icmp ne i8 %58, 0
	br i1 %59, label %L.17, label %L.18
L.17:
	%60 = load %type_TypeNode*, %type_TypeNode** %t1
	%61 = getelementptr %type_TypeNode, %type_TypeNode* %60, i32 0, i32 4
	%62 = load %symb_SymbNode*, %symb_SymbNode** %61
	%63 = getelementptr %symb_SymbNode, %symb_SymbNode* %62, i32 0, i32 4
	%64 = load %symb_SymbNode*, %symb_SymbNode** %63
	%65 = load %type_TypeNode*, %type_TypeNode** %t2
	%66 = getelementptr %type_TypeNode, %type_TypeNode* %65, i32 0, i32 4
	%67 = load %symb_SymbNode*, %symb_SymbNode** %66
	%68 = getelementptr %symb_SymbNode, %symb_SymbNode* %67, i32 0, i32 4
	%69 = load %symb_SymbNode*, %symb_SymbNode** %68
	%70 = call i8 @type_SameTypes(%symb_SymbNode* %64, %symb_SymbNode* %69)
	%71 = icmp ne i8 %70, 0
	br label %L.18
L.18:
	%72 = phi i1 [ false, %L.14 ], [ %71, %L.17 ]
	%73 = zext i1 %72 to i8
	store i8 %73, i8* %rv.0
	br label %return
L.9:
	br label %L.10
L.10:
	store i8 0, i8* %rv.0
	br label %return
return:
	%74 = load i8, i8* %rv.0
	ret i8 %74
}
define internal zeroext i8 @type_Compat(%type_TypeNode* %t1$, %type_TypeNode* %t2$) nounwind {
L.0:
	%rv.0 = alloca i8
	%t1 = alloca %type_TypeNode*
	store %type_TypeNode* %t1$, %type_TypeNode** %t1
	%t2 = alloca %type_TypeNode*
	store %type_TypeNode* %t2$, %type_TypeNode** %t2
	%0 = load %type_TypeNode*, %type_TypeNode** %t1
	%1 = icmp eq %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.1:
	%2 = load %type_TypeNode*, %type_TypeNode** %t2
	%3 = icmp eq %type_TypeNode* %2, null
	br label %L.2
L.2:
	%4 = phi i1 [ true, %L.0 ], [ %3, %L.1 ]
	br i1 %4, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	%5 = load %type_TypeNode*, %type_TypeNode** %t1
	%6 = load %type_TypeNode*, %type_TypeNode** %t2
	%7 = icmp eq %type_TypeNode* %5, %6
	br i1 %7, label %L.6, label %L.5
L.6:
	store i8 1, i8* %rv.0
	br label %return
L.5:
	%8 = load %type_TypeNode*, %type_TypeNode** %t1
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 16
	%10 = load i8, i8* %9
	%11 = load %type_TypeNode*, %type_TypeNode** %t2
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 16
	%13 = load i8, i8* %12
	%14 = icmp ne i8 %10, %13
	br i1 %14, label %L.8, label %L.7
L.8:
	store i8 0, i8* %rv.0
	br label %return
L.7:
	%15 = load %type_TypeNode*, %type_TypeNode** %t1
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 1
	%17 = load %type_TypeNode*, %type_TypeNode** %16
	%18 = icmp ne %type_TypeNode* %17, null
	br i1 %18, label %L.10, label %L.9
L.10:
	%19 = load %type_TypeNode*, %type_TypeNode** %t1
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = load %type_TypeNode*, %type_TypeNode** %t2
	%23 = call i8 @type_Compat(%type_TypeNode* %21, %type_TypeNode* %22)
	store i8 %23, i8* %rv.0
	br label %return
L.9:
	%24 = load %type_TypeNode*, %type_TypeNode** %t2
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 1
	%26 = load %type_TypeNode*, %type_TypeNode** %25
	%27 = icmp ne %type_TypeNode* %26, null
	br i1 %27, label %L.12, label %L.11
L.12:
	%28 = load %type_TypeNode*, %type_TypeNode** %t1
	%29 = load %type_TypeNode*, %type_TypeNode** %t2
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 1
	%31 = load %type_TypeNode*, %type_TypeNode** %30
	%32 = call i8 @type_Compat(%type_TypeNode* %28, %type_TypeNode* %31)
	store i8 %32, i8* %rv.0
	br label %return
L.11:
	%33 = load %type_TypeNode*, %type_TypeNode** %t2
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 16
	%35 = load i8, i8* %34
	%36 = zext i8 %35 to i32
	switch i32 %36, label %L.13 [
		i32 2, label %L.15
		i32 3, label %L.15
		i32 1, label %L.16
		i32 4, label %L.17
		i32 7, label %L.18
		i32 5, label %L.19
		i32 6, label %L.20
		i32 8, label %L.21
	]
L.15:
	store i8 1, i8* %rv.0
	br label %return
L.16:
	%bt1 = alloca %type_TypeNode*
	%bt2 = alloca %type_TypeNode*
	%37 = load %type_TypeNode*, %type_TypeNode** %t1
	store %type_TypeNode* %37, %type_TypeNode** %bt1
	br label %L.22
L.22:
	%38 = load %type_TypeNode*, %type_TypeNode** %bt1
	%39 = getelementptr %type_TypeNode, %type_TypeNode* %38, i32 0, i32 0
	%40 = load %type_TypeNode*, %type_TypeNode** %39
	%41 = icmp ne %type_TypeNode* %40, null
	%42 = xor i1 %41, true
	br i1 %42, label %L.23, label %L.24
L.24:
	%43 = load %type_TypeNode*, %type_TypeNode** %bt1
	%44 = getelementptr %type_TypeNode, %type_TypeNode* %43, i32 0, i32 0
	%45 = load %type_TypeNode*, %type_TypeNode** %44
	store %type_TypeNode* %45, %type_TypeNode** %bt1
	br label %L.22
L.23:
	%46 = load %type_TypeNode*, %type_TypeNode** %t2
	store %type_TypeNode* %46, %type_TypeNode** %bt2
	br label %L.25
L.25:
	%47 = load %type_TypeNode*, %type_TypeNode** %bt2
	%48 = getelementptr %type_TypeNode, %type_TypeNode* %47, i32 0, i32 0
	%49 = load %type_TypeNode*, %type_TypeNode** %48
	%50 = icmp ne %type_TypeNode* %49, null
	%51 = xor i1 %50, true
	br i1 %51, label %L.26, label %L.27
L.27:
	%52 = load %type_TypeNode*, %type_TypeNode** %bt2
	%53 = getelementptr %type_TypeNode, %type_TypeNode* %52, i32 0, i32 0
	%54 = load %type_TypeNode*, %type_TypeNode** %53
	store %type_TypeNode* %54, %type_TypeNode** %bt2
	br label %L.25
L.26:
	%55 = load %type_TypeNode*, %type_TypeNode** %bt1
	%56 = load %type_TypeNode*, %type_TypeNode** %bt2
	%57 = icmp ne %type_TypeNode* %55, %56
	br i1 %57, label %L.29, label %L.28
L.29:
	store i8 0, i8* %rv.0
	br label %return
L.28:
	%58 = load %type_TypeNode*, %type_TypeNode** %t2
	%59 = getelementptr %type_TypeNode, %type_TypeNode* %58, i32 0, i32 8
	%60 = load i64, i64* %59
	%61 = load %type_TypeNode*, %type_TypeNode** %t1
	%62 = getelementptr %type_TypeNode, %type_TypeNode* %61, i32 0, i32 8
	%63 = load i64, i64* %62
	%64 = icmp ule i64 %60, %63
	br i1 %64, label %L.30, label %L.31
L.30:
	%65 = load %type_TypeNode*, %type_TypeNode** %t1
	%66 = getelementptr %type_TypeNode, %type_TypeNode* %65, i32 0, i32 9
	%67 = load i64, i64* %66
	%68 = load %type_TypeNode*, %type_TypeNode** %t2
	%69 = getelementptr %type_TypeNode, %type_TypeNode* %68, i32 0, i32 9
	%70 = load i64, i64* %69
	%71 = icmp ule i64 %67, %70
	br label %L.31
L.31:
	%72 = phi i1 [ false, %L.28 ], [ %71, %L.30 ]
	%73 = zext i1 %72 to i8
	store i8 %73, i8* %rv.0
	br label %return
L.17:
	store i8 1, i8* %rv.0
	br label %return
L.18:
	%74 = load %type_TypeNode*, %type_TypeNode** %t2
	%75 = getelementptr %type_TypeNode, %type_TypeNode* %74, i32 0, i32 0
	%76 = load %type_TypeNode*, %type_TypeNode** %75
	%77 = icmp ne %type_TypeNode* %76, null
	br i1 %77, label %L.33, label %L.32
L.33:
	%78 = load %type_TypeNode*, %type_TypeNode** %t1
	%79 = load %type_TypeNode*, %type_TypeNode** %t2
	%80 = getelementptr %type_TypeNode, %type_TypeNode* %79, i32 0, i32 0
	%81 = load %type_TypeNode*, %type_TypeNode** %80
	%82 = call i8 @type_Compat(%type_TypeNode* %78, %type_TypeNode* %81)
	store i8 %82, i8* %rv.0
	br label %return
L.32:
	store i8 0, i8* %rv.0
	br label %return
L.19:
	%83 = load %type_TypeNode*, %type_TypeNode** %t1
	%84 = getelementptr %type_TypeNode, %type_TypeNode* %83, i32 0, i32 0
	%85 = load %type_TypeNode*, %type_TypeNode** %84
	%86 = load %type_TypeNode*, %type_TypeNode** %t2
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 0
	%88 = load %type_TypeNode*, %type_TypeNode** %87
	%89 = call i8 @type_Compat(%type_TypeNode* %85, %type_TypeNode* %88)
	store i8 %89, i8* %rv.0
	br label %return
L.20:
	%90 = load %type_TypeNode*, %type_TypeNode** %t1
	%91 = getelementptr %type_TypeNode, %type_TypeNode* %90, i32 0, i32 0
	%92 = load %type_TypeNode*, %type_TypeNode** %91
	%93 = load %type_TypeNode*, %type_TypeNode** %t2
	%94 = getelementptr %type_TypeNode, %type_TypeNode* %93, i32 0, i32 0
	%95 = load %type_TypeNode*, %type_TypeNode** %94
	%96 = call i8 @type_Same(%type_TypeNode* %92, %type_TypeNode* %95)
	%97 = icmp ne i8 %96, 0
	br i1 %97, label %L.34, label %L.35
L.34:
	%98 = load %type_TypeNode*, %type_TypeNode** %t1
	%99 = load %type_TypeNode*, %type_TypeNode** %t2
	%100 = call i8 @type_SameIndex(%type_TypeNode* %98, %type_TypeNode* %99)
	%101 = icmp ne i8 %100, 0
	br label %L.35
L.35:
	%102 = phi i1 [ false, %L.20 ], [ %101, %L.34 ]
	%103 = zext i1 %102 to i8
	store i8 %103, i8* %rv.0
	br label %return
L.21:
	%104 = load %type_TypeNode*, %type_TypeNode** %t1
	%105 = getelementptr %type_TypeNode, %type_TypeNode* %104, i32 0, i32 4
	%106 = load %symb_SymbNode*, %symb_SymbNode** %105
	%107 = getelementptr %symb_SymbNode, %symb_SymbNode* %106, i32 0, i32 3
	%108 = load %symb_SymbNode*, %symb_SymbNode** %107
	%109 = load %type_TypeNode*, %type_TypeNode** %t2
	%110 = getelementptr %type_TypeNode, %type_TypeNode* %109, i32 0, i32 4
	%111 = load %symb_SymbNode*, %symb_SymbNode** %110
	%112 = getelementptr %symb_SymbNode, %symb_SymbNode* %111, i32 0, i32 3
	%113 = load %symb_SymbNode*, %symb_SymbNode** %112
	%114 = call i8 @type_SameTypes(%symb_SymbNode* %108, %symb_SymbNode* %113)
	%115 = icmp ne i8 %114, 0
	br i1 %115, label %L.36, label %L.37
L.36:
	%116 = load %type_TypeNode*, %type_TypeNode** %t1
	%117 = getelementptr %type_TypeNode, %type_TypeNode* %116, i32 0, i32 4
	%118 = load %symb_SymbNode*, %symb_SymbNode** %117
	%119 = getelementptr %symb_SymbNode, %symb_SymbNode* %118, i32 0, i32 4
	%120 = load %symb_SymbNode*, %symb_SymbNode** %119
	%121 = load %type_TypeNode*, %type_TypeNode** %t2
	%122 = getelementptr %type_TypeNode, %type_TypeNode* %121, i32 0, i32 4
	%123 = load %symb_SymbNode*, %symb_SymbNode** %122
	%124 = getelementptr %symb_SymbNode, %symb_SymbNode* %123, i32 0, i32 4
	%125 = load %symb_SymbNode*, %symb_SymbNode** %124
	%126 = call i8 @type_SameTypes(%symb_SymbNode* %120, %symb_SymbNode* %125)
	%127 = icmp ne i8 %126, 0
	br label %L.37
L.37:
	%128 = phi i1 [ false, %L.21 ], [ %127, %L.36 ]
	%129 = zext i1 %128 to i8
	store i8 %129, i8* %rv.0
	br label %return
L.13:
	br label %L.14
L.14:
	store i8 0, i8* %rv.0
	br label %return
return:
	%130 = load i8, i8* %rv.0
	ret i8 %130
}
define internal zeroext i8 @type_NeedSwap(%type_TypeNode* %t$, i8 zeroext %to$) nounwind {
L.0:
	%rv.0 = alloca i8
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%to = alloca i8
	store i8 %to$, i8* %to
	%fm = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 10
	%2 = load i32, i32* %1
	%3 = icmp ule i32 %2, 8
	br i1 %3, label %L.2, label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
L.1:
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 18
	%6 = load i8, i8* %5
	store i8 %6, i8* %fm
	%7 = load i8, i8* %fm
	%8 = icmp eq i8 %7, 0
	br i1 %8, label %L.4, label %L.3
L.4:
	%9 = load %target_ModelT*, %target_ModelT** @target_Target
	%10 = getelementptr %target_ModelT, %target_ModelT* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	store i8 %11, i8* %fm
	br label %L.3
L.3:
	%12 = load i8, i8* %to
	%13 = icmp eq i8 %12, 0
	br i1 %13, label %L.6, label %L.5
L.6:
	%14 = load %target_ModelT*, %target_ModelT** @target_Target
	%15 = getelementptr %target_ModelT, %target_ModelT* %14, i32 0, i32 0
	%16 = load i8, i8* %15
	store i8 %16, i8* %to
	br label %L.5
L.5:
	%17 = load i8, i8* %fm
	%18 = load i8, i8* %to
	%19 = icmp ne i8 %17, %18
	%20 = zext i1 %19 to i8
	store i8 %20, i8* %rv.0
	br label %return
return:
	%21 = load i8, i8* %rv.0
	ret i8 %21
}
define internal %type_TypeNode* @type_New(i8 zeroext %kind$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%kind = alloca i8
	store i8 %kind$, i8* %kind
	%t = alloca %type_TypeNode*
	%0 = call [0 x i8]* @sys_zalloc(i32 88)
	%1 = bitcast [0 x i8]* %0 to %type_TypeNode*
	store %type_TypeNode* %1, %type_TypeNode** %t
	%2 = load i8, i8* %kind
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 16
	store i8 %2, i8* %4
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %5, %type_TypeNode** %rv.0
	br label %return
return:
	%6 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %6
}
define internal %type_TypeNode* @type_MakeRef(%type_TypeNode* %bt$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%t = alloca %type_TypeNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %bt
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 6
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = icmp eq %type_TypeNode* %3, null
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = call %type_TypeNode* @type_New(i8 5)
	store %type_TypeNode* %5, %type_TypeNode** %t
	%6 = load %type_TypeNode*, %type_TypeNode** %bt
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 0
	store %type_TypeNode* %6, %type_TypeNode** %8
	%9 = load %target_ModelT*, %target_ModelT** @target_Target
	%10 = getelementptr %target_ModelT, %target_ModelT* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 18
	store i8 %11, i8* %13
	%14 = load %target_ModelT*, %target_ModelT** @target_Target
	%15 = getelementptr %target_ModelT, %target_ModelT* %14, i32 0, i32 5
	%16 = getelementptr %target_SizeAlign, %target_SizeAlign* %15, i32 0, i32 0
	%17 = load i8, i8* %16
	%18 = zext i8 %17 to i32
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 10
	store i32 %18, i32* %20
	%21 = load %target_ModelT*, %target_ModelT** @target_Target
	%22 = getelementptr %target_ModelT, %target_ModelT* %21, i32 0, i32 5
	%23 = getelementptr %target_SizeAlign, %target_SizeAlign* %22, i32 0, i32 0
	%24 = load i8, i8* %23
	%25 = zext i8 %24 to i32
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = getelementptr %type_TypeNode, %type_TypeNode* %26, i32 0, i32 11
	store i32 %25, i32* %27
	%28 = load %target_ModelT*, %target_ModelT** @target_Target
	%29 = getelementptr %target_ModelT, %target_ModelT* %28, i32 0, i32 5
	%30 = getelementptr %target_SizeAlign, %target_SizeAlign* %29, i32 0, i32 1
	%31 = load i8, i8* %30
	%32 = zext i8 %31 to i32
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 12
	store i32 %32, i32* %34
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 6
	store %type_TypeNode* %35, %type_TypeNode** %37
	br label %L.1
L.1:
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %38, %type_TypeNode** %rv.0
	br label %return
return:
	%39 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %39
}
define internal %type_TypeNode* @type_Clone(%type_TypeNode* %ot$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%ot = alloca %type_TypeNode*
	store %type_TypeNode* %ot$, %type_TypeNode** %ot
	%nt = alloca %type_TypeNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %ot
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 16
	%2 = load i8, i8* %1
	%3 = call %type_TypeNode* @type_New(i8 %2)
	store %type_TypeNode* %3, %type_TypeNode** %nt
	%4 = load %type_TypeNode*, %type_TypeNode** %ot
	%5 = load %type_TypeNode, %type_TypeNode* %4
	%6 = load %type_TypeNode*, %type_TypeNode** %nt
	store %type_TypeNode %5, %type_TypeNode* %6
	%7 = load %type_TypeNode*, %type_TypeNode** %nt
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 3
	store %symb_SymbNode* null, %symb_SymbNode** %8
	%9 = load %type_TypeNode*, %type_TypeNode** %nt
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 31
	store i8 0, i8* %10
	%11 = load %type_TypeNode*, %type_TypeNode** %nt
	store %type_TypeNode* %11, %type_TypeNode** %rv.0
	br label %return
return:
	%12 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %12
}
define internal %type_TypeNode* @type_ChangeOrder(%type_TypeNode* %told$, i8 zeroext %neworder$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%told = alloca %type_TypeNode*
	store %type_TypeNode* %told$, %type_TypeNode** %told
	%neworder = alloca i8
	store i8 %neworder$, i8* %neworder
	%t = alloca %type_TypeNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %told
	%1 = call %type_TypeNode* @type_Clone(%type_TypeNode* %0)
	store %type_TypeNode* %1, %type_TypeNode** %t
	%2 = load i8, i8* %neworder
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 18
	store i8 %2, i8* %4
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 31
	store i8 1, i8* %6
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %7, %type_TypeNode** %rv.0
	br label %return
return:
	%8 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %8
}
define internal %type_TypeNode* @type_ForceUnAligned(%type_TypeNode* %told$, i32 %align$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%told = alloca %type_TypeNode*
	store %type_TypeNode* %told$, %type_TypeNode** %told
	%align = alloca i32
	store i32 %align$, i32* %align
	%t = alloca %type_TypeNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %told
	%1 = call %type_TypeNode* @type_Clone(%type_TypeNode* %0)
	store %type_TypeNode* %1, %type_TypeNode** %t
	%2 = load %type_TypeNode*, %type_TypeNode** %told
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 1
	store %type_TypeNode* %2, %type_TypeNode** %4
	%5 = load i32, i32* %align
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 12
	store i32 %5, i32* %7
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 25
	store i8 1, i8* %9
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 31
	store i8 1, i8* %11
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %12, %type_TypeNode** %rv.0
	br label %return
return:
	%13 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %13
}
@type_askip1 = internal constant [4 x i8] [ i8 37, i8 4, i8 0, i8 0 ], align 1
@type_askip2 = internal constant [5 x i8] [ i8 5, i8 37, i8 4, i8 0, i8 0 ], align 1
define internal void @type_XLinkage(%symb_SymbNode* %s$, i8 zeroext %constok$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%constok = alloca i8
	store i8 %constok$, i8* %constok
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 36
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load i8, i8* %tok
	%5 = icmp eq i8 %4, 45
	br i1 %5, label %L.4, label %L.5
L.4:
	%6 = bitcast [4096 x i8]* @lex_StringBuf to [0 x i8]*
	%7 = load i16, i16* @lex_StringLen
	%8 = zext i16 %7 to i32
	%9 = call %symb_SymbNode* @symb_NewString([0 x i8]* %6, i32 %8, i8 0)
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 6
	store %symb_SymbNode* %9, %symb_SymbNode** %11
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	br label %L.3
L.5:
	%13 = load i8, i8* %constok
	%14 = icmp ne i8 %13, 0
	br i1 %14, label %L.7, label %L.6
L.7:
	%15 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%16 = call i64 @expr_ConstValue(%type_TypeNode* %15)
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s
	%18 = getelementptr %symb_SymbNode, %symb_SymbNode* %17, i32 0, i32 8
	store i64 %16, i64* %18
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 14
	store i8 6, i8* %20
	br label %L.6
L.6:
	br label %L.3
L.3:
	%21 = call i8 @lex_Expect(i8 37)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @type_XSection(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 36
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load i8, i8* %tok
	%5 = icmp eq i8 %4, 45
	br i1 %5, label %L.4, label %L.3
L.4:
	%6 = bitcast [4096 x i8]* @lex_StringBuf to [0 x i8]*
	%7 = load i16, i16* @lex_StringLen
	%8 = zext i16 %7 to i32
	%9 = call %symb_SymbNode* @symb_NewString([0 x i8]* %6, i32 %8, i8 0)
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 7
	store %symb_SymbNode* %9, %symb_SymbNode** %11
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = call i8 @lex_Expect(i8 37)
	br label %return
L.3:
	br label %L.1
L.1:
	call void @lex_Error(i8 81)
	br label %return
return:
	ret void
}
@type_tattrlist = internal constant [15 x i8] [ i8 75, i8 76, i8 77, i8 78, i8 79, i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 99, i8 97, i8 90, i8 0 ], align 1
define internal %type_TypeNode* @type_Attributes(%symb_SymbNode* %s$, %type_TypeNode* %t$, [0 x i8]* %sattrlist$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%sattrlist = alloca [0 x i8]*
	store [0 x i8]* %sattrlist$, [0 x i8]** %sattrlist
	%tok = alloca i8
	%atok = alloca i8
	%at = alloca %type_TypeNode*
	br label %L.1
L.1:
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = bitcast [15 x i8]* @type_tattrlist to [0 x i8]*
	%4 = call i8 @lex_Keyword([0 x i8]* %3)
	store i8 %4, i8* %atok
	%5 = load i8, i8* %atok
	%6 = load i8, i8* %tok
	%7 = icmp ne i8 %5, %6
	br i1 %7, label %L.7, label %L.8
L.7:
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 31
	%11 = load i8, i8* %10
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.10, label %L.9
L.10:
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %13, %type_TypeNode** %at
	%14 = load %type_TypeNode*, %type_TypeNode** %at
	%15 = call %type_TypeNode* @type_Clone(%type_TypeNode* %14)
	store %type_TypeNode* %15, %type_TypeNode** %t
	%16 = load %type_TypeNode*, %type_TypeNode** %at
	%17 = load %type_TypeNode*, %type_TypeNode** %t
	%18 = getelementptr %type_TypeNode, %type_TypeNode* %17, i32 0, i32 1
	store %type_TypeNode* %16, %type_TypeNode** %18
	br label %L.9
L.9:
	%19 = load i8, i8* %atok
	%20 = zext i8 %19 to i32
	switch i32 %20, label %L.11 [
		i32 75, label %L.13
		i32 76, label %L.14
		i32 77, label %L.15
		i32 78, label %L.16
		i32 79, label %L.17
		i32 80, label %L.18
		i32 81, label %L.19
		i32 82, label %L.20
		i32 83, label %L.21
		i32 84, label %L.22
		i32 85, label %L.23
		i32 99, label %L.24
		i32 97, label %L.25
		i32 90, label %L.26
	]
L.13:
	%21 = load %type_TypeNode*, %type_TypeNode** %t
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 16
	%23 = load i8, i8* %22
	%24 = icmp eq i8 %23, 7
	br i1 %24, label %L.28, label %L.27
L.27:
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 16
	%27 = load i8, i8* %26
	%28 = icmp eq i8 %27, 6
	br label %L.28
L.28:
	%29 = phi i1 [ true, %L.13 ], [ %28, %L.27 ]
	br i1 %29, label %L.30, label %L.31
L.30:
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 24
	store i8 1, i8* %31
	br label %L.29
L.31:
	call void @lex_ErrorT(i8 2, i8 75)
	br label %L.29
L.29:
	br label %L.12
L.14:
	%32 = load %type_TypeNode*, %type_TypeNode** %t
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 26
	store i8 1, i8* %33
	br label %L.12
L.15:
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 17
	store i8 2, i8* %35
	br label %L.12
L.16:
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 17
	store i8 1, i8* %37
	br label %L.12
L.17:
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = getelementptr %type_TypeNode, %type_TypeNode* %38, i32 0, i32 18
	store i8 2, i8* %39
	br label %L.12
L.18:
	%40 = load %type_TypeNode*, %type_TypeNode** %t
	%41 = getelementptr %type_TypeNode, %type_TypeNode* %40, i32 0, i32 18
	store i8 1, i8* %41
	br label %L.12
L.19:
	%42 = load %type_TypeNode*, %type_TypeNode** %t
	%43 = getelementptr %type_TypeNode, %type_TypeNode* %42, i32 0, i32 19
	store i8 1, i8* %43
	br label %L.12
L.20:
	%44 = load %type_TypeNode*, %type_TypeNode** %t
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 19
	store i8 2, i8* %45
	br label %L.12
L.21:
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = getelementptr %type_TypeNode, %type_TypeNode* %46, i32 0, i32 20
	%48 = load i8, i8* %47
	%49 = zext i8 %48 to i32
	%50 = shl i32 1, 0
	%51 = xor i32 %50, -1
	%52 = and i32 %49, %51
	%53 = shl i32 1, 0
	%54 = or i32 %52, %53
	%55 = trunc i32 %54 to i8
	store i8 %55, i8* %47
	br label %L.12
L.22:
	%56 = load %type_TypeNode*, %type_TypeNode** %t
	%57 = getelementptr %type_TypeNode, %type_TypeNode* %56, i32 0, i32 20
	%58 = load i8, i8* %57
	%59 = zext i8 %58 to i32
	%60 = shl i32 1, 1
	%61 = xor i32 %60, -1
	%62 = and i32 %59, %61
	%63 = shl i32 1, 1
	%64 = or i32 %62, %63
	%65 = trunc i32 %64 to i8
	store i8 %65, i8* %57
	br label %L.12
L.23:
	%66 = load %type_TypeNode*, %type_TypeNode** %t
	%67 = getelementptr %type_TypeNode, %type_TypeNode* %66, i32 0, i32 20
	store i8 3, i8* %67
	br label %L.12
L.24:
	%68 = load i8, i8* %tok
	%69 = icmp eq i8 %68, 36
	br i1 %69, label %L.33, label %L.32
L.33:
	%70 = call i8 @lex_Next()
	store i8 %70, i8* %tok
	%71 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%72 = call i64 @expr_ConstValue(%type_TypeNode* %71)
	%73 = mul i64 %72, 8
	%74 = trunc i64 %73 to i32
	%75 = load %type_TypeNode*, %type_TypeNode** %t
	%76 = getelementptr %type_TypeNode, %type_TypeNode* %75, i32 0, i32 11
	store i32 %74, i32* %76
	%77 = load %type_TypeNode*, %type_TypeNode** %t
	%78 = getelementptr %type_TypeNode, %type_TypeNode* %77, i32 0, i32 22
	store i8 1, i8* %78
	%79 = call i8 @lex_Expect(i8 37)
	br label %L.32
L.32:
	br label %L.12
L.25:
	%80 = load i8, i8* %tok
	%81 = icmp eq i8 %80, 36
	br i1 %81, label %L.35, label %L.34
L.35:
	%82 = call i8 @lex_Next()
	store i8 %82, i8* %tok
	%83 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%84 = call i64 @expr_ConstValue(%type_TypeNode* %83)
	%85 = trunc i64 %84 to i32
	%86 = load %type_TypeNode*, %type_TypeNode** %t
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 10
	store i32 %85, i32* %87
	%88 = load %type_TypeNode*, %type_TypeNode** %t
	%89 = getelementptr %type_TypeNode, %type_TypeNode* %88, i32 0, i32 21
	store i8 1, i8* %89
	%90 = call i8 @lex_Expect(i8 37)
	br label %L.34
L.34:
	br label %L.12
L.26:
	%91 = load i8, i8* %tok
	%92 = icmp eq i8 %91, 36
	br i1 %92, label %L.37, label %L.36
L.37:
	%93 = call i8 @lex_Next()
	store i8 %93, i8* %tok
	%94 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%95 = call i64 @expr_ConstValue(%type_TypeNode* %94)
	%96 = mul i64 %95, 8
	%97 = trunc i64 %96 to i32
	%98 = load %type_TypeNode*, %type_TypeNode** %t
	%99 = getelementptr %type_TypeNode, %type_TypeNode* %98, i32 0, i32 12
	store i32 %97, i32* %99
	%100 = load %type_TypeNode*, %type_TypeNode** %t
	%101 = getelementptr %type_TypeNode, %type_TypeNode* %100, i32 0, i32 12
	%102 = load i32, i32* %101
	%103 = icmp eq i32 %102, 0
	br i1 %103, label %L.39, label %L.38
L.39:
	%104 = load %type_TypeNode*, %type_TypeNode** %t
	%105 = getelementptr %type_TypeNode, %type_TypeNode* %104, i32 0, i32 12
	store i32 8, i32* %105
	br label %L.38
L.38:
	%106 = load %type_TypeNode*, %type_TypeNode** %t
	%107 = getelementptr %type_TypeNode, %type_TypeNode* %106, i32 0, i32 23
	store i8 1, i8* %107
	%108 = call i8 @lex_Expect(i8 37)
	br label %L.36
L.36:
	br label %L.12
L.11:
	br label %L.12
L.12:
	br label %L.6
L.8:
	%109 = load %symb_SymbNode*, %symb_SymbNode** %s
	%110 = icmp ne %symb_SymbNode* %109, null
	br i1 %110, label %L.41, label %L.42
L.41:
	%111 = load [0 x i8]*, [0 x i8]** %sattrlist
	%112 = bitcast [0 x i8]* %111 to [0 x i8]*
	%113 = call i8 @lex_Keyword([0 x i8]* %112)
	store i8 %113, i8* %atok
	%114 = load i8, i8* %atok
	%115 = load i8, i8* %tok
	%116 = icmp ne i8 %114, %115
	br i1 %116, label %L.44, label %L.45
L.44:
	%117 = call i8 @lex_Next()
	store i8 %117, i8* %tok
	%118 = load i8, i8* %atok
	%119 = zext i8 %118 to i32
	switch i32 %119, label %L.46 [
		i32 91, label %L.48
		i32 92, label %L.49
		i32 88, label %L.50
		i32 94, label %L.51
		i32 87, label %L.52
		i32 89, label %L.53
		i32 86, label %L.54
	]
L.48:
	%120 = load %symb_SymbNode*, %symb_SymbNode** %s
	%121 = getelementptr %symb_SymbNode, %symb_SymbNode* %120, i32 0, i32 14
	store i8 7, i8* %121
	br label %L.47
L.49:
	%122 = load %symb_SymbNode*, %symb_SymbNode** %s
	%123 = getelementptr %symb_SymbNode, %symb_SymbNode* %122, i32 0, i32 14
	store i8 8, i8* %123
	br label %L.47
L.50:
	%124 = load %symb_SymbNode*, %symb_SymbNode** %s
	%125 = getelementptr %symb_SymbNode, %symb_SymbNode* %124, i32 0, i32 14
	%126 = load i8, i8* %125
	%127 = icmp ne i8 %126, 4
	br i1 %127, label %L.56, label %L.55
L.56:
	%128 = load %symb_SymbNode*, %symb_SymbNode** %s
	%129 = getelementptr %symb_SymbNode, %symb_SymbNode* %128, i32 0, i32 14
	store i8 3, i8* %129
	br label %L.55
L.55:
	%130 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @type_XLinkage(%symb_SymbNode* %130, i8 0)
	br label %L.47
L.51:
	%131 = load %symb_SymbNode*, %symb_SymbNode** %s
	%132 = getelementptr %symb_SymbNode, %symb_SymbNode* %131, i32 0, i32 14
	store i8 4, i8* %132
	%133 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @type_XLinkage(%symb_SymbNode* %133, i8 0)
	br label %L.47
L.52:
	%134 = load %symb_SymbNode*, %symb_SymbNode** %s
	%135 = getelementptr %symb_SymbNode, %symb_SymbNode* %134, i32 0, i32 14
	store i8 5, i8* %135
	%136 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @type_XLinkage(%symb_SymbNode* %136, i8 1)
	br label %L.47
L.53:
	%137 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @type_XSection(%symb_SymbNode* %137)
	br label %L.47
L.54:
	%138 = load i8, i8* %tok
	%139 = icmp eq i8 %138, 36
	br i1 %139, label %L.58, label %L.57
L.58:
	%140 = call i8 @lex_Next()
	store i8 %140, i8* %tok
	%141 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%142 = call i64 @expr_ConstValue(%type_TypeNode* %141)
	%143 = load %symb_SymbNode*, %symb_SymbNode** %s
	%144 = getelementptr %symb_SymbNode, %symb_SymbNode* %143, i32 0, i32 8
	store i64 %142, i64* %144
	%145 = call i8 @lex_Expect(i8 37)
	br label %L.57
L.57:
	br label %L.47
L.46:
	br label %L.47
L.47:
	br label %L.43
L.45:
	%146 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 35, [0 x i8]* %146)
	br label %L.43
L.43:
	br label %L.40
L.42:
	%147 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 35, [0 x i8]* %147)
	%148 = call i8 @lex_Next()
	store i8 %148, i8* %tok
	br label %L.40
L.40:
	br label %L.6
L.6:
	br label %L.3
L.5:
	%149 = load i8, i8* %tok
	%150 = icmp ne i8 %149, 4
	br i1 %150, label %L.60, label %L.59
L.60:
	call void @lex_Error(i8 21)
	%151 = bitcast [5 x i8]* @type_askip2 to [0 x i8]*
	%152 = call i8 @lex_Skip([0 x i8]* %151)
	store i8 %152, i8* %tok
	br label %L.59
L.59:
	br label %L.3
L.3:
	%153 = load i8, i8* @lex_Token
	store i8 %153, i8* %tok
	%154 = load i8, i8* %tok
	%155 = icmp ne i8 %154, 5
	br i1 %155, label %L.2, label %L.61
L.61:
	br label %L.1
L.2:
	%156 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %156, %type_TypeNode** %rv.0
	br label %return
return:
	%157 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %157
}
@type_nattrlist = internal constant [1 x i8] [ i8 0 ], align 1
define internal %type_TypeNode* @type_TypeAttributes(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = bitcast [1 x i8]* @type_nattrlist to [0 x i8]*
	%2 = call %type_TypeNode* @type_Attributes(%symb_SymbNode* null, %type_TypeNode* %0, [0 x i8]* %1)
	store %type_TypeNode* %2, %type_TypeNode** %rv.0
	br label %return
return:
	%3 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %3
}
@type_fattrlist = internal constant [2 x i8] [ i8 86, i8 0 ], align 1
define internal %type_TypeNode* @type_FieldAttributes(%symb_SymbNode* %s$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = bitcast [2 x i8]* @type_fattrlist to [0 x i8]*
	%3 = call %type_TypeNode* @type_Attributes(%symb_SymbNode* %0, %type_TypeNode* %1, [0 x i8]* %2)
	store %type_TypeNode* %3, %type_TypeNode** %rv.0
	br label %return
return:
	%4 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %4
}
@type_vattrlist = internal constant [5 x i8] [ i8 87, i8 88, i8 94, i8 89, i8 0 ], align 1
define internal %type_TypeNode* @type_VarAttributes(%symb_SymbNode* %s$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = bitcast [5 x i8]* @type_vattrlist to [0 x i8]*
	%3 = call %type_TypeNode* @type_Attributes(%symb_SymbNode* %0, %type_TypeNode* %1, [0 x i8]* %2)
	store %type_TypeNode* %3, %type_TypeNode** %rv.0
	br label %return
return:
	%4 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %4
}
@type_pattrlist = internal constant [7 x i8] [ i8 87, i8 88, i8 94, i8 89, i8 91, i8 92, i8 0 ], align 1
define internal void @type_ProcAttributes(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = load %symb_SymbNode*, %symb_SymbNode** %s
	%2 = getelementptr %symb_SymbNode, %symb_SymbNode* %1, i32 0, i32 1
	%3 = load %type_TypeNode*, %type_TypeNode** %2
	%4 = bitcast [7 x i8]* @type_pattrlist to [0 x i8]*
	%5 = call %type_TypeNode* @type_Attributes(%symb_SymbNode* %0, %type_TypeNode* %3, [0 x i8]* %4)
	store %type_TypeNode* %5, %type_TypeNode** %t
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 1
	store %type_TypeNode* %6, %type_TypeNode** %8
	br label %return
return:
	ret void
}
define internal i32 @type_bitsize(i64 %x$) nounwind {
L.0:
	%rv.0 = alloca i32
	%x = alloca i64
	store i64 %x$, i64* %x
	%0 = load i64, i64* %x
	%1 = icmp eq i64 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	store i32 1, i32* %rv.0
	br label %return
L.1:
	%2 = load i64, i64* %x
	%3 = call i64 @llvm.ctlz.i64(i64 %2, i1 true)
	%4 = sub i64 64, %3
	%5 = trunc i64 %4 to i32
	store i32 %5, i32* %rv.0
	br label %return
return:
	%6 = load i32, i32* %rv.0
	ret i32 %6
}
@S.580 = private unnamed_addr constant [2 x i8] c"_\00"
define internal zeroext i16 @type_FieldPad(%symb_SymbNode* %prev$, i32 %pad$, i16 zeroext %index$) nounwind {
L.0:
	%rv.0 = alloca i16
	%prev = alloca %symb_SymbNode*
	store %symb_SymbNode* %prev$, %symb_SymbNode** %prev
	%pad = alloca i32
	store i32 %pad$, i32* %pad
	%index = alloca i16
	store i16 %index$, i16* %index
	%last = alloca %symb_SymbNode*
	%s = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%0 = load i32, i32* %pad
	%1 = icmp ugt i32 %0, 1
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = call %type_TypeNode* @type_New(i8 6)
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 2
	store %type_TypeNode* %3, %type_TypeNode** %5
	%6 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 0
	store %type_TypeNode* %6, %type_TypeNode** %8
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 8
	store i64 0, i64* %10
	%11 = load i32, i32* %pad
	%12 = zext i32 %11 to i64
	%13 = sub i64 %12, 1
	%14 = load %type_TypeNode*, %type_TypeNode** %t
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 9
	store i64 %13, i64* %15
	%16 = load i32, i32* %pad
	%17 = mul i32 %16, 8
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 10
	store i32 %17, i32* %19
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 10
	%22 = load i32, i32* %21
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	%24 = getelementptr %type_TypeNode, %type_TypeNode* %23, i32 0, i32 11
	store i32 %22, i32* %24
	%25 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 12
	%27 = load i32, i32* %26
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 12
	store i32 %27, i32* %29
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 31
	store i8 1, i8* %31
	br label %L.1
L.3:
	%32 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	store %type_TypeNode* %32, %type_TypeNode** %t
	br label %L.1
L.1:
	%33 = getelementptr [2 x i8], [2 x i8]* @S.580
	%34 = bitcast [2 x i8]* %33 to [0 x i8]*
	%35 = call %symb_SymbNode* @symb_New(i8 4, [0 x i8]* %34, i8 2)
	store %symb_SymbNode* %35, %symb_SymbNode** %s
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = load %symb_SymbNode*, %symb_SymbNode** %s
	%38 = getelementptr %symb_SymbNode, %symb_SymbNode* %37, i32 0, i32 1
	store %type_TypeNode* %36, %type_TypeNode** %38
	%39 = load i16, i16* %index
	%40 = load %symb_SymbNode*, %symb_SymbNode** %s
	%41 = getelementptr %symb_SymbNode, %symb_SymbNode* %40, i32 0, i32 10
	store i16 %39, i16* %41
	%42 = load %symb_SymbNode*, %symb_SymbNode** %s
	%43 = getelementptr %symb_SymbNode, %symb_SymbNode* %42, i32 0, i32 19
	store i8 1, i8* %43
	%44 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%45 = getelementptr %symb_SymbNode, %symb_SymbNode* %44, i32 0, i32 0
	%46 = load %symb_SymbNode*, %symb_SymbNode** %45
	%47 = load %symb_SymbNode*, %symb_SymbNode** %s
	%48 = getelementptr %symb_SymbNode, %symb_SymbNode* %47, i32 0, i32 0
	store %symb_SymbNode* %46, %symb_SymbNode** %48
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%51 = getelementptr %symb_SymbNode, %symb_SymbNode* %50, i32 0, i32 0
	store %symb_SymbNode* %49, %symb_SymbNode** %51
	%52 = load i16, i16* %index
	%53 = add i16 %52, 1
	store i16 %53, i16* %index
	%54 = load i16, i16* %index
	store i16 %54, i16* %rv.0
	br label %return
return:
	%55 = load i16, i16* %rv.0
	ret i16 %55
}
@S.581 = private unnamed_addr constant [2 x i8] c"_\00"
define internal zeroext i16 @type_BitFieldPad(%symb_SymbNode* %prev$, i32 %pad$, i16 zeroext %index$) nounwind {
L.0:
	%rv.0 = alloca i16
	%prev = alloca %symb_SymbNode*
	store %symb_SymbNode* %prev$, %symb_SymbNode** %prev
	%pad = alloca i32
	store i32 %pad$, i32* %pad
	%index = alloca i16
	store i16 %index$, i16* %index
	%last = alloca %symb_SymbNode*
	%s = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%0 = call %type_TypeNode* @type_New(i8 2)
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = load i32, i32* %pad
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 10
	store i32 %1, i32* %3
	%4 = load i32, i32* %pad
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 11
	store i32 %4, i32* %6
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 31
	store i8 1, i8* %8
	%9 = getelementptr [2 x i8], [2 x i8]* @S.581
	%10 = bitcast [2 x i8]* %9 to [0 x i8]*
	%11 = call %symb_SymbNode* @symb_New(i8 4, [0 x i8]* %10, i8 2)
	store %symb_SymbNode* %11, %symb_SymbNode** %s
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = getelementptr %symb_SymbNode, %symb_SymbNode* %13, i32 0, i32 1
	store %type_TypeNode* %12, %type_TypeNode** %14
	%15 = load i16, i16* %index
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 10
	store i16 %15, i16* %17
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 19
	store i8 1, i8* %19
	%20 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 0
	%22 = load %symb_SymbNode*, %symb_SymbNode** %21
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 0
	store %symb_SymbNode* %22, %symb_SymbNode** %24
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 0
	store %symb_SymbNode* %25, %symb_SymbNode** %27
	%28 = load i16, i16* %index
	%29 = add i16 %28, 1
	store i16 %29, i16* %index
	%30 = load i16, i16* %index
	store i16 %30, i16* %rv.0
	br label %return
return:
	%31 = load i16, i16* %rv.0
	ret i16 %31
}
define internal %type_TypeNode* @type_ForcePacked(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 16
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 7
	br i1 %3, label %L.4, label %L.3
L.3:
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 16
	%6 = load i8, i8* %5
	%7 = icmp eq i8 %6, 6
	br label %L.4
L.4:
	%8 = phi i1 [ true, %L.0 ], [ %7, %L.3 ]
	br i1 %8, label %L.1, label %L.2
L.1:
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 24
	%11 = load i8, i8* %10
	%12 = icmp ne i8 %11, 0
	%13 = xor i1 %12, true
	br label %L.2
L.2:
	%14 = phi i1 [ false, %L.4 ], [ %13, %L.1 ]
	br i1 %14, label %L.6, label %L.5
L.6:
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = call %type_TypeNode* @type_Clone(%type_TypeNode* %15)
	store %type_TypeNode* %16, %type_TypeNode** %t
	%17 = load %type_TypeNode*, %type_TypeNode** %t
	%18 = getelementptr %type_TypeNode, %type_TypeNode* %17, i32 0, i32 24
	store i8 1, i8* %18
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %19)
	br label %L.5
L.5:
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %20, %type_TypeNode** %rv.0
	br label %return
return:
	%21 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %21
}
@S.583 = private unnamed_addr constant [6 x i8] c"UTYPE\00"
@S.584 = private unnamed_addr constant [5 x i8] c"ENUM\00"
@S.585 = private unnamed_addr constant [5 x i8] c"UINT\00"
@S.586 = private unnamed_addr constant [5 x i8] c"SINT\00"
@S.587 = private unnamed_addr constant [6 x i8] c"FLOAT\00"
@S.588 = private unnamed_addr constant [4 x i8] c"REF\00"
@S.589 = private unnamed_addr constant [6 x i8] c"ARRAY\00"
@S.590 = private unnamed_addr constant [7 x i8] c"RECORD\00"
@S.591 = private unnamed_addr constant [8 x i8] c"REFPROC\00"
@type_DumpType_tname = internal constant [9 x [0 x i8]*] [ [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.583 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.584 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.585 )  to [0 x i8]* ), [0 x i8]* bitcast( [5 x i8]* getelementptr( [5 x i8], [5 x i8]* @S.586 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.587 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.588 )  to [0 x i8]* ), [0 x i8]* bitcast( [6 x i8]* getelementptr( [6 x i8], [6 x i8]* @S.589 )  to [0 x i8]* ), [0 x i8]* bitcast( [7 x i8]* getelementptr( [7 x i8], [7 x i8]* @S.590 )  to [0 x i8]* ), [0 x i8]* bitcast( [8 x i8]* getelementptr( [8 x i8], [8 x i8]* @S.591 )  to [0 x i8]* ) ], align 4
define internal void @type_DumpType([0 x i8]* %msg$, %type_TypeNode* %t$) nounwind {
L.0:
	%msg = alloca [0 x i8]*
	store [0 x i8]* %msg$, [0 x i8]** %msg
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load [0 x i8]*, [0 x i8]** %msg
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %1)
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	%6 = getelementptr [9 x [0 x i8]*], [9 x [0 x i8]*]* @type_DumpType_tname, i32 0, i32 %5
	%7 = load [0 x i8]*, [0 x i8]** %6
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %8)
	call void @sys_fildes_nl(i32 2)
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_DumpT(%type_TypeNode* %9, i8 1)
	call void @sys_fildes_nl(i32 2)
	br label %return
return:
	ret void
}
@S.592 = private unnamed_addr constant [20 x i8] c"Field align is zero\00"
@S.593 = private unnamed_addr constant [23 x i8] c"Array of aligned items\00"
define internal void @type_Final(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%align = alloca i32
	%tlo = alloca i32
	%thi = alloca i32
	%f = alloca %symb_SymbNode*
	%prev = alloca %symb_SymbNode*
	%index = alloca i16
	%offs = alloca i32
	%mod = alloca i32
	%falign = alloca i32
	%atoffs = alloca i32
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 31
	%4 = load i8, i8* %3
	%5 = icmp ne i8 %4, 0
	%6 = xor i1 %5, true
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 17
	%10 = load i8, i8* %9
	%11 = icmp eq i8 %10, 0
	br i1 %11, label %L.6, label %L.5
L.6:
	%12 = load %target_ModelT*, %target_ModelT** @target_Target
	%13 = getelementptr %target_ModelT, %target_ModelT* %12, i32 0, i32 1
	%14 = load i8, i8* %13
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 17
	store i8 %14, i8* %16
	br label %L.5
L.5:
	%17 = load %type_TypeNode*, %type_TypeNode** %t
	%18 = getelementptr %type_TypeNode, %type_TypeNode* %17, i32 0, i32 18
	%19 = load i8, i8* %18
	%20 = icmp eq i8 %19, 0
	br i1 %20, label %L.8, label %L.7
L.8:
	%21 = load %target_ModelT*, %target_ModelT** @target_Target
	%22 = getelementptr %target_ModelT, %target_ModelT* %21, i32 0, i32 0
	%23 = load i8, i8* %22
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 18
	store i8 %23, i8* %25
	br label %L.7
L.7:
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = getelementptr %type_TypeNode, %type_TypeNode* %26, i32 0, i32 21
	%28 = load i8, i8* %27
	%29 = icmp ne i8 %28, 0
	br i1 %29, label %L.10, label %L.9
L.10:
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 22
	%32 = load i8, i8* %31
	%33 = icmp ne i8 %32, 0
	%34 = xor i1 %33, true
	br i1 %34, label %L.12, label %L.11
L.12:
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 10
	%37 = load i32, i32* %36
	%38 = call i32 @target_isize(i32 %37)
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 11
	store i32 %38, i32* %40
	br label %L.11
L.11:
	br label %L.9
L.9:
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	%42 = getelementptr %type_TypeNode, %type_TypeNode* %41, i32 0, i32 22
	%43 = load i8, i8* %42
	%44 = icmp ne i8 %43, 0
	br i1 %44, label %L.14, label %L.13
L.14:
	%45 = load %type_TypeNode*, %type_TypeNode** %t
	%46 = getelementptr %type_TypeNode, %type_TypeNode* %45, i32 0, i32 21
	%47 = load i8, i8* %46
	%48 = icmp ne i8 %47, 0
	%49 = xor i1 %48, true
	br i1 %49, label %L.16, label %L.15
L.16:
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = getelementptr %type_TypeNode, %type_TypeNode* %50, i32 0, i32 11
	%52 = load i32, i32* %51
	%53 = load %type_TypeNode*, %type_TypeNode** %t
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 10
	store i32 %52, i32* %54
	br label %L.15
L.15:
	br label %L.13
L.13:
	%55 = load %type_TypeNode*, %type_TypeNode** %t
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 16
	%57 = load i8, i8* %56
	%58 = zext i8 %57 to i32
	switch i32 %58, label %L.17 [
		i32 0, label %L.19
		i32 1, label %L.20
		i32 2, label %L.20
		i32 3, label %L.21
		i32 4, label %L.22
		i32 5, label %L.23
		i32 8, label %L.24
		i32 7, label %L.25
		i32 6, label %L.26
	]
L.19:
	%59 = load %type_TypeNode*, %type_TypeNode** %t
	%60 = getelementptr %type_TypeNode, %type_TypeNode* %59, i32 0, i32 12
	%61 = load i32, i32* %60
	store i32 %61, i32* %align
	br label %L.18
L.20:
	%62 = load %type_TypeNode*, %type_TypeNode** %t
	%63 = getelementptr %type_TypeNode, %type_TypeNode* %62, i32 0, i32 10
	%64 = load i32, i32* %63
	%65 = icmp eq i32 %64, 0
	br i1 %65, label %L.28, label %L.27
L.28:
	%66 = load %type_TypeNode*, %type_TypeNode** %t
	%67 = getelementptr %type_TypeNode, %type_TypeNode* %66, i32 0, i32 9
	%68 = load i64, i64* %67
	%69 = call i32 @type_bitsize(i64 %68)
	%70 = load %type_TypeNode*, %type_TypeNode** %t
	%71 = getelementptr %type_TypeNode, %type_TypeNode* %70, i32 0, i32 10
	store i32 %69, i32* %71
	br label %L.27
L.27:
	%72 = load %type_TypeNode*, %type_TypeNode** %t
	%73 = getelementptr %type_TypeNode, %type_TypeNode* %72, i32 0, i32 11
	%74 = load i32, i32* %73
	%75 = icmp eq i32 %74, 0
	br i1 %75, label %L.30, label %L.29
L.30:
	%76 = load %type_TypeNode*, %type_TypeNode** %t
	%77 = getelementptr %type_TypeNode, %type_TypeNode* %76, i32 0, i32 10
	%78 = load i32, i32* %77
	%79 = call i32 @target_isize(i32 %78)
	%80 = load %type_TypeNode*, %type_TypeNode** %t
	%81 = getelementptr %type_TypeNode, %type_TypeNode* %80, i32 0, i32 11
	store i32 %79, i32* %81
	br label %L.29
L.29:
	%82 = load %type_TypeNode*, %type_TypeNode** %t
	%83 = getelementptr %type_TypeNode, %type_TypeNode* %82, i32 0, i32 10
	%84 = load i32, i32* %83
	%85 = call i32 @target_ialign(i32 %84)
	store i32 %85, i32* %align
	br label %L.18
L.21:
	%86 = load %type_TypeNode*, %type_TypeNode** %t
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 10
	%88 = load i32, i32* %87
	%89 = icmp eq i32 %88, 0
	br i1 %89, label %L.32, label %L.31
L.32:
	%90 = load %type_TypeNode*, %type_TypeNode** %t
	%91 = getelementptr %type_TypeNode, %type_TypeNode* %90, i32 0, i32 8
	%92 = load i64, i64* %91
	%93 = xor i64 %92, -1
	%94 = call i32 @type_bitsize(i64 %93)
	store i32 %94, i32* %tlo
	%95 = load %type_TypeNode*, %type_TypeNode** %t
	%96 = getelementptr %type_TypeNode, %type_TypeNode* %95, i32 0, i32 9
	%97 = load i64, i64* %96
	%98 = call i32 @type_bitsize(i64 %97)
	store i32 %98, i32* %thi
	%99 = load i32, i32* %tlo
	%100 = load i32, i32* %thi
	%101 = icmp ugt i32 %99, %100
	br i1 %101, label %L.34, label %L.35
L.34:
	%102 = load i32, i32* %tlo
	%103 = add i32 %102, 1
	%104 = load %type_TypeNode*, %type_TypeNode** %t
	%105 = getelementptr %type_TypeNode, %type_TypeNode* %104, i32 0, i32 10
	store i32 %103, i32* %105
	br label %L.33
L.35:
	%106 = load i32, i32* %thi
	%107 = add i32 %106, 1
	%108 = load %type_TypeNode*, %type_TypeNode** %t
	%109 = getelementptr %type_TypeNode, %type_TypeNode* %108, i32 0, i32 10
	store i32 %107, i32* %109
	br label %L.33
L.33:
	br label %L.31
L.31:
	%110 = load %type_TypeNode*, %type_TypeNode** %t
	%111 = getelementptr %type_TypeNode, %type_TypeNode* %110, i32 0, i32 11
	%112 = load i32, i32* %111
	%113 = icmp eq i32 %112, 0
	br i1 %113, label %L.37, label %L.36
L.37:
	%114 = load %type_TypeNode*, %type_TypeNode** %t
	%115 = getelementptr %type_TypeNode, %type_TypeNode* %114, i32 0, i32 10
	%116 = load i32, i32* %115
	%117 = call i32 @target_isize(i32 %116)
	%118 = load %type_TypeNode*, %type_TypeNode** %t
	%119 = getelementptr %type_TypeNode, %type_TypeNode* %118, i32 0, i32 11
	store i32 %117, i32* %119
	br label %L.36
L.36:
	%120 = load %type_TypeNode*, %type_TypeNode** %t
	%121 = getelementptr %type_TypeNode, %type_TypeNode* %120, i32 0, i32 10
	%122 = load i32, i32* %121
	%123 = call i32 @target_ialign(i32 %122)
	store i32 %123, i32* %align
	br label %L.18
L.22:
	%124 = load %type_TypeNode*, %type_TypeNode** %t
	%125 = getelementptr %type_TypeNode, %type_TypeNode* %124, i32 0, i32 10
	%126 = load i32, i32* %125
	%127 = load %type_TypeNode*, %type_TypeNode** %t
	%128 = getelementptr %type_TypeNode, %type_TypeNode* %127, i32 0, i32 11
	store i32 %126, i32* %128
	%129 = load %type_TypeNode*, %type_TypeNode** %t
	%130 = getelementptr %type_TypeNode, %type_TypeNode* %129, i32 0, i32 10
	%131 = load i32, i32* %130
	%132 = call i32 @target_ialign(i32 %131)
	store i32 %132, i32* %align
	br label %L.18
L.23:
	%133 = load %type_TypeNode*, %type_TypeNode** %t
	%134 = getelementptr %type_TypeNode, %type_TypeNode* %133, i32 0, i32 0
	%135 = load %type_TypeNode*, %type_TypeNode** %134
	%136 = icmp ne %type_TypeNode* %135, null
	br i1 %136, label %L.38, label %L.39
L.38:
	%137 = load %type_TypeNode*, %type_TypeNode** %t
	%138 = getelementptr %type_TypeNode, %type_TypeNode* %137, i32 0, i32 0
	%139 = load %type_TypeNode*, %type_TypeNode** %138
	%140 = getelementptr %type_TypeNode, %type_TypeNode* %139, i32 0, i32 3
	%141 = load %symb_SymbNode*, %symb_SymbNode** %140
	%142 = icmp eq %symb_SymbNode* %141, null
	br label %L.39
L.39:
	%143 = phi i1 [ false, %L.23 ], [ %142, %L.38 ]
	br i1 %143, label %L.41, label %L.40
L.41:
	%144 = load %type_TypeNode*, %type_TypeNode** %t
	%145 = getelementptr %type_TypeNode, %type_TypeNode* %144, i32 0, i32 0
	%146 = load %type_TypeNode*, %type_TypeNode** %145
	call void @type_Final(%type_TypeNode* %146)
	br label %L.40
L.40:
	%147 = load %target_ModelT*, %target_ModelT** @target_Target
	%148 = getelementptr %target_ModelT, %target_ModelT* %147, i32 0, i32 5
	%149 = getelementptr %target_SizeAlign, %target_SizeAlign* %148, i32 0, i32 0
	%150 = load i8, i8* %149
	%151 = zext i8 %150 to i32
	%152 = load %type_TypeNode*, %type_TypeNode** %t
	%153 = getelementptr %type_TypeNode, %type_TypeNode* %152, i32 0, i32 10
	store i32 %151, i32* %153
	%154 = load %target_ModelT*, %target_ModelT** @target_Target
	%155 = getelementptr %target_ModelT, %target_ModelT* %154, i32 0, i32 5
	%156 = getelementptr %target_SizeAlign, %target_SizeAlign* %155, i32 0, i32 0
	%157 = load i8, i8* %156
	%158 = zext i8 %157 to i32
	%159 = load %type_TypeNode*, %type_TypeNode** %t
	%160 = getelementptr %type_TypeNode, %type_TypeNode* %159, i32 0, i32 11
	store i32 %158, i32* %160
	%161 = load %target_ModelT*, %target_ModelT** @target_Target
	%162 = getelementptr %target_ModelT, %target_ModelT* %161, i32 0, i32 5
	%163 = getelementptr %target_SizeAlign, %target_SizeAlign* %162, i32 0, i32 1
	%164 = load i8, i8* %163
	%165 = zext i8 %164 to i32
	store i32 %165, i32* %align
	br label %L.18
L.24:
	%166 = load %target_ModelT*, %target_ModelT** @target_Target
	%167 = getelementptr %target_ModelT, %target_ModelT* %166, i32 0, i32 5
	%168 = getelementptr %target_SizeAlign, %target_SizeAlign* %167, i32 0, i32 0
	%169 = load i8, i8* %168
	%170 = zext i8 %169 to i32
	%171 = load %type_TypeNode*, %type_TypeNode** %t
	%172 = getelementptr %type_TypeNode, %type_TypeNode* %171, i32 0, i32 10
	store i32 %170, i32* %172
	%173 = load %target_ModelT*, %target_ModelT** @target_Target
	%174 = getelementptr %target_ModelT, %target_ModelT* %173, i32 0, i32 5
	%175 = getelementptr %target_SizeAlign, %target_SizeAlign* %174, i32 0, i32 0
	%176 = load i8, i8* %175
	%177 = zext i8 %176 to i32
	%178 = load %type_TypeNode*, %type_TypeNode** %t
	%179 = getelementptr %type_TypeNode, %type_TypeNode* %178, i32 0, i32 11
	store i32 %177, i32* %179
	%180 = load %target_ModelT*, %target_ModelT** @target_Target
	%181 = getelementptr %target_ModelT, %target_ModelT* %180, i32 0, i32 5
	%182 = getelementptr %target_SizeAlign, %target_SizeAlign* %181, i32 0, i32 1
	%183 = load i8, i8* %182
	%184 = zext i8 %183 to i32
	store i32 %184, i32* %align
	br label %L.18
L.25:
	store i16 0, i16* %index
	store i32 0, i32* %offs
	store i32 0, i32* %align
	store %symb_SymbNode* null, %symb_SymbNode** %prev
	%185 = load %type_TypeNode*, %type_TypeNode** %t
	%186 = getelementptr %type_TypeNode, %type_TypeNode* %185, i32 0, i32 4
	%187 = load %symb_SymbNode*, %symb_SymbNode** %186
	store %symb_SymbNode* %187, %symb_SymbNode** %f
	br label %L.42
L.42:
	%188 = load %symb_SymbNode*, %symb_SymbNode** %f
	%189 = icmp ne %symb_SymbNode* %188, null
	%190 = xor i1 %189, true
	br i1 %190, label %L.43, label %L.44
L.44:
	%191 = load %symb_SymbNode*, %symb_SymbNode** %f
	%192 = getelementptr %symb_SymbNode, %symb_SymbNode* %191, i32 0, i32 1
	%193 = load %type_TypeNode*, %type_TypeNode** %192
	%194 = icmp ne %type_TypeNode* %193, null
	br i1 %194, label %L.46, label %L.45
L.46:
	%195 = load %symb_SymbNode*, %symb_SymbNode** %f
	%196 = getelementptr %symb_SymbNode, %symb_SymbNode* %195, i32 0, i32 1
	%197 = load %type_TypeNode*, %type_TypeNode** %196
	call void @type_Final(%type_TypeNode* %197)
	%198 = load %symb_SymbNode*, %symb_SymbNode** %f
	%199 = getelementptr %symb_SymbNode, %symb_SymbNode* %198, i32 0, i32 1
	%200 = load %type_TypeNode*, %type_TypeNode** %199
	%201 = getelementptr %type_TypeNode, %type_TypeNode* %200, i32 0, i32 28
	%202 = load i8, i8* %201
	%203 = icmp ne i8 %202, 0
	br i1 %203, label %L.48, label %L.47
L.48:
	%204 = load %symb_SymbNode*, %symb_SymbNode** %f
	%205 = getelementptr %symb_SymbNode, %symb_SymbNode* %204, i32 0, i32 0
	%206 = load %symb_SymbNode*, %symb_SymbNode** %205
	%207 = icmp ne %symb_SymbNode* %206, null
	br i1 %207, label %L.50, label %L.51
L.50:
	%208 = load %symb_SymbNode*, %symb_SymbNode** %f
	%209 = getelementptr %symb_SymbNode, %symb_SymbNode* %208, i32 0, i32 23
	%210 = getelementptr [0 x i8], [0 x i8]* %209
	%211 = bitcast [0 x i8]* %210 to [0 x i8]*
	call void @lex_ErrorI(i8 78, [0 x i8]* %211)
	br label %L.49
L.51:
	%212 = load %type_TypeNode*, %type_TypeNode** %t
	%213 = getelementptr %type_TypeNode, %type_TypeNode* %212, i32 0, i32 28
	store i8 1, i8* %213
	br label %L.49
L.49:
	br label %L.47
L.47:
	%214 = load %symb_SymbNode*, %symb_SymbNode** %f
	%215 = getelementptr %symb_SymbNode, %symb_SymbNode* %214, i32 0, i32 8
	%216 = load i64, i64* %215
	%217 = trunc i64 %216 to i32
	store i32 %217, i32* %atoffs
	%218 = load %type_TypeNode*, %type_TypeNode** %t
	%219 = getelementptr %type_TypeNode, %type_TypeNode* %218, i32 0, i32 24
	%220 = load i8, i8* %219
	%221 = icmp ne i8 %220, 0
	br i1 %221, label %L.53, label %L.54
L.53:
	%222 = load %symb_SymbNode*, %symb_SymbNode** %f
	%223 = getelementptr %symb_SymbNode, %symb_SymbNode* %222, i32 0, i32 1
	%224 = load %type_TypeNode*, %type_TypeNode** %223
	%225 = call %type_TypeNode* @type_ForcePacked(%type_TypeNode* %224)
	%226 = load %symb_SymbNode*, %symb_SymbNode** %f
	%227 = getelementptr %symb_SymbNode, %symb_SymbNode* %226, i32 0, i32 1
	store %type_TypeNode* %225, %type_TypeNode** %227
	%228 = load i32, i32* %atoffs
	%229 = icmp ne i32 %228, 0
	br i1 %229, label %L.55, label %L.56
L.55:
	%230 = load i32, i32* %atoffs
	%231 = load i32, i32* %offs
	%232 = icmp ult i32 %230, %231
	br label %L.56
L.56:
	%233 = phi i1 [ false, %L.53 ], [ %232, %L.55 ]
	br i1 %233, label %L.58, label %L.59
L.58:
	call void @lex_Error(i8 87)
	br label %L.57
L.59:
	%234 = load i32, i32* %atoffs
	%235 = load i32, i32* %offs
	%236 = icmp ugt i32 %234, %235
	br i1 %236, label %L.61, label %L.60
L.61:
	%237 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%238 = load i32, i32* %atoffs
	%239 = load i32, i32* %offs
	%240 = sub i32 %238, %239
	%241 = load i16, i16* %index
	%242 = call i16 @type_BitFieldPad(%symb_SymbNode* %237, i32 %240, i16 %241)
	store i16 %242, i16* %index
	%243 = load i32, i32* %atoffs
	store i32 %243, i32* %offs
	br label %L.60
L.60:
	br label %L.57
L.57:
	%244 = load i32, i32* %offs
	%245 = load %symb_SymbNode*, %symb_SymbNode** %f
	%246 = getelementptr %symb_SymbNode, %symb_SymbNode* %245, i32 0, i32 1
	%247 = load %type_TypeNode*, %type_TypeNode** %246
	%248 = getelementptr %type_TypeNode, %type_TypeNode* %247, i32 0, i32 10
	%249 = load i32, i32* %248
	%250 = add i32 %244, %249
	store i32 %250, i32* %offs
	br label %L.52
L.54:
	%251 = load %symb_SymbNode*, %symb_SymbNode** %f
	%252 = getelementptr %symb_SymbNode, %symb_SymbNode* %251, i32 0, i32 1
	%253 = load %type_TypeNode*, %type_TypeNode** %252
	%254 = getelementptr %type_TypeNode, %type_TypeNode* %253, i32 0, i32 12
	%255 = load i32, i32* %254
	store i32 %255, i32* %falign
	%256 = load %type_TypeNode*, %type_TypeNode** %t
	%257 = getelementptr %type_TypeNode, %type_TypeNode* %256, i32 0, i32 23
	%258 = load i8, i8* %257
	%259 = icmp ne i8 %258, 0
	br i1 %259, label %L.62, label %L.63
L.62:
	%260 = load %type_TypeNode*, %type_TypeNode** %t
	%261 = getelementptr %type_TypeNode, %type_TypeNode* %260, i32 0, i32 12
	%262 = load i32, i32* %261
	%263 = load i32, i32* %falign
	%264 = icmp ult i32 %262, %263
	br label %L.63
L.63:
	%265 = phi i1 [ false, %L.54 ], [ %264, %L.62 ]
	br i1 %265, label %L.65, label %L.64
L.65:
	%266 = load %symb_SymbNode*, %symb_SymbNode** %f
	%267 = getelementptr %symb_SymbNode, %symb_SymbNode* %266, i32 0, i32 1
	%268 = load %type_TypeNode*, %type_TypeNode** %267
	%269 = load %type_TypeNode*, %type_TypeNode** %t
	%270 = getelementptr %type_TypeNode, %type_TypeNode* %269, i32 0, i32 12
	%271 = load i32, i32* %270
	%272 = call %type_TypeNode* @type_ForceUnAligned(%type_TypeNode* %268, i32 %271)
	%273 = load %symb_SymbNode*, %symb_SymbNode** %f
	%274 = getelementptr %symb_SymbNode, %symb_SymbNode* %273, i32 0, i32 1
	store %type_TypeNode* %272, %type_TypeNode** %274
	br label %L.64
L.64:
	%275 = load %symb_SymbNode*, %symb_SymbNode** %f
	%276 = getelementptr %symb_SymbNode, %symb_SymbNode* %275, i32 0, i32 1
	%277 = load %type_TypeNode*, %type_TypeNode** %276
	%278 = getelementptr %type_TypeNode, %type_TypeNode* %277, i32 0, i32 25
	%279 = load i8, i8* %278
	%280 = icmp ne i8 %279, 0
	br i1 %280, label %L.67, label %L.68
L.67:
	%281 = load %type_TypeNode*, %type_TypeNode** %t
	%282 = getelementptr %type_TypeNode, %type_TypeNode* %281, i32 0, i32 27
	store i8 1, i8* %282
	br label %L.66
L.68:
	%283 = load i32, i32* %atoffs
	%284 = icmp ne i32 %283, 0
	br i1 %284, label %L.70, label %L.71
L.70:
	%285 = load i32, i32* %atoffs
	%286 = mul i32 %285, 8
	store i32 %286, i32* %atoffs
	%287 = load i32, i32* %atoffs
	%288 = icmp ne i32 %287, 0
	br i1 %288, label %L.72, label %L.73
L.72:
	%289 = load i32, i32* %atoffs
	%290 = load i32, i32* %offs
	%291 = icmp ult i32 %289, %290
	br label %L.73
L.73:
	%292 = phi i1 [ false, %L.70 ], [ %291, %L.72 ]
	br i1 %292, label %L.75, label %L.76
L.75:
	call void @lex_Error(i8 87)
	br label %L.74
L.76:
	%293 = load i32, i32* %atoffs
	%294 = load i32, i32* %offs
	%295 = icmp ugt i32 %293, %294
	br i1 %295, label %L.78, label %L.77
L.78:
	%296 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%297 = load i32, i32* %atoffs
	%298 = load i32, i32* %offs
	%299 = sub i32 %297, %298
	%300 = udiv i32 %299, 8
	%301 = load i16, i16* %index
	%302 = call i16 @type_FieldPad(%symb_SymbNode* %296, i32 %300, i16 %301)
	store i16 %302, i16* %index
	%303 = load i32, i32* %atoffs
	store i32 %303, i32* %offs
	br label %L.77
L.77:
	br label %L.74
L.74:
	br label %L.69
L.71:
	%304 = load i32, i32* %falign
	%305 = icmp eq i32 %304, 0
	br i1 %305, label %L.80, label %L.81
L.80:
	%306 = getelementptr [20 x i8], [20 x i8]* @S.592
	%307 = bitcast [20 x i8]* %306 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %307)
	br label %L.79
L.81:
	%308 = load i32, i32* %offs
	%309 = load i32, i32* %falign
	%310 = urem i32 %308, %309
	store i32 %310, i32* %mod
	%311 = load i32, i32* %mod
	%312 = icmp ne i32 %311, 0
	br i1 %312, label %L.83, label %L.82
L.83:
	%313 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%314 = load i32, i32* %falign
	%315 = load i32, i32* %mod
	%316 = sub i32 %314, %315
	%317 = udiv i32 %316, 8
	%318 = load i16, i16* %index
	%319 = call i16 @type_FieldPad(%symb_SymbNode* %313, i32 %317, i16 %318)
	store i16 %319, i16* %index
	%320 = load i32, i32* %offs
	%321 = load i32, i32* %falign
	%322 = load i32, i32* %mod
	%323 = sub i32 %321, %322
	%324 = add i32 %320, %323
	store i32 %324, i32* %offs
	br label %L.82
L.82:
	br label %L.79
L.79:
	br label %L.69
L.69:
	br label %L.66
L.66:
	%325 = load i32, i32* %offs
	%326 = load %symb_SymbNode*, %symb_SymbNode** %f
	%327 = getelementptr %symb_SymbNode, %symb_SymbNode* %326, i32 0, i32 1
	%328 = load %type_TypeNode*, %type_TypeNode** %327
	%329 = getelementptr %type_TypeNode, %type_TypeNode* %328, i32 0, i32 11
	%330 = load i32, i32* %329
	%331 = add i32 %325, %330
	store i32 %331, i32* %offs
	%332 = load i32, i32* %falign
	%333 = load i32, i32* %align
	%334 = icmp ugt i32 %332, %333
	br i1 %334, label %L.85, label %L.84
L.85:
	%335 = load i32, i32* %falign
	store i32 %335, i32* %align
	br label %L.84
L.84:
	br label %L.52
L.52:
	br label %L.45
L.45:
	%336 = load i16, i16* %index
	%337 = load %symb_SymbNode*, %symb_SymbNode** %f
	%338 = getelementptr %symb_SymbNode, %symb_SymbNode* %337, i32 0, i32 10
	store i16 %336, i16* %338
	%339 = load i16, i16* %index
	%340 = add i16 %339, 1
	store i16 %340, i16* %index
	%341 = load %symb_SymbNode*, %symb_SymbNode** %f
	store %symb_SymbNode* %341, %symb_SymbNode** %prev
	%342 = load %symb_SymbNode*, %symb_SymbNode** %f
	%343 = getelementptr %symb_SymbNode, %symb_SymbNode* %342, i32 0, i32 0
	%344 = load %symb_SymbNode*, %symb_SymbNode** %343
	store %symb_SymbNode* %344, %symb_SymbNode** %f
	br label %L.42
L.43:
	%345 = load %type_TypeNode*, %type_TypeNode** %t
	%346 = getelementptr %type_TypeNode, %type_TypeNode* %345, i32 0, i32 10
	%347 = load i32, i32* %346
	%348 = icmp eq i32 %347, 0
	br i1 %348, label %L.87, label %L.88
L.87:
	%349 = load i32, i32* %offs
	%350 = load %type_TypeNode*, %type_TypeNode** %t
	%351 = getelementptr %type_TypeNode, %type_TypeNode* %350, i32 0, i32 10
	store i32 %349, i32* %351
	br label %L.86
L.88:
	%352 = load %type_TypeNode*, %type_TypeNode** %t
	%353 = getelementptr %type_TypeNode, %type_TypeNode* %352, i32 0, i32 10
	%354 = load i32, i32* %353
	%355 = load i32, i32* %offs
	%356 = icmp ult i32 %354, %355
	br i1 %356, label %L.90, label %L.91
L.90:
	call void @lex_Error(i8 86)
	br label %L.89
L.91:
	%357 = load %type_TypeNode*, %type_TypeNode** %t
	%358 = getelementptr %type_TypeNode, %type_TypeNode* %357, i32 0, i32 24
	%359 = load i8, i8* %358
	%360 = icmp ne i8 %359, 0
	%361 = xor i1 %360, true
	br i1 %361, label %L.92, label %L.93
L.92:
	%362 = load %type_TypeNode*, %type_TypeNode** %t
	%363 = getelementptr %type_TypeNode, %type_TypeNode* %362, i32 0, i32 10
	%364 = load i32, i32* %363
	%365 = load i32, i32* %offs
	%366 = icmp ugt i32 %364, %365
	br label %L.93
L.93:
	%367 = phi i1 [ false, %L.91 ], [ %366, %L.92 ]
	br i1 %367, label %L.95, label %L.94
L.95:
	%368 = load %symb_SymbNode*, %symb_SymbNode** %prev
	%369 = load %type_TypeNode*, %type_TypeNode** %t
	%370 = getelementptr %type_TypeNode, %type_TypeNode* %369, i32 0, i32 10
	%371 = load i32, i32* %370
	%372 = load i32, i32* %offs
	%373 = sub i32 %371, %372
	%374 = udiv i32 %373, 8
	%375 = load i16, i16* %index
	%376 = call i16 @type_FieldPad(%symb_SymbNode* %368, i32 %374, i16 %375)
	store i16 %376, i16* %index
	br label %L.94
L.94:
	br label %L.89
L.89:
	br label %L.86
L.86:
	%377 = load %type_TypeNode*, %type_TypeNode** %t
	%378 = getelementptr %type_TypeNode, %type_TypeNode* %377, i32 0, i32 11
	%379 = load i32, i32* %378
	%380 = icmp eq i32 %379, 0
	br i1 %380, label %L.97, label %L.96
L.97:
	%381 = load i32, i32* %offs
	%382 = load %target_ModelT*, %target_ModelT** @target_Target
	%383 = getelementptr %target_ModelT, %target_ModelT* %382, i32 0, i32 2
	%384 = load i8, i8* %383
	%385 = zext i8 %384 to i32
	%386 = icmp ule i32 %381, %385
	br i1 %386, label %L.98, label %L.99
L.98:
	%387 = load %type_TypeNode*, %type_TypeNode** %t
	%388 = getelementptr %type_TypeNode, %type_TypeNode* %387, i32 0, i32 26
	%389 = load i8, i8* %388
	%390 = icmp ne i8 %389, 0
	%391 = xor i1 %390, true
	br label %L.99
L.99:
	%392 = phi i1 [ false, %L.97 ], [ %391, %L.98 ]
	br i1 %392, label %L.101, label %L.102
L.101:
	%393 = load i32, i32* %offs
	%394 = call i32 @target_isize(i32 %393)
	%395 = load %type_TypeNode*, %type_TypeNode** %t
	%396 = getelementptr %type_TypeNode, %type_TypeNode* %395, i32 0, i32 11
	store i32 %394, i32* %396
	br label %L.100
L.102:
	%397 = load i32, i32* %offs
	%398 = load %type_TypeNode*, %type_TypeNode** %t
	%399 = getelementptr %type_TypeNode, %type_TypeNode* %398, i32 0, i32 11
	store i32 %397, i32* %399
	br label %L.100
L.100:
	br label %L.96
L.96:
	%400 = load i32, i32* %align
	%401 = icmp ugt i32 %400, 0
	br i1 %401, label %L.104, label %L.105
L.104:
	%402 = load %type_TypeNode*, %type_TypeNode** %t
	%403 = getelementptr %type_TypeNode, %type_TypeNode* %402, i32 0, i32 11
	%404 = load i32, i32* %403
	%405 = load i32, i32* %align
	%406 = urem i32 %404, %405
	store i32 %406, i32* %mod
	%407 = load i32, i32* %mod
	%408 = icmp ne i32 %407, 0
	br i1 %408, label %L.106, label %L.107
L.106:
	%409 = load %type_TypeNode*, %type_TypeNode** %t
	%410 = getelementptr %type_TypeNode, %type_TypeNode* %409, i32 0, i32 26
	%411 = load i8, i8* %410
	%412 = icmp ne i8 %411, 0
	%413 = xor i1 %412, true
	br label %L.107
L.107:
	%414 = phi i1 [ false, %L.104 ], [ %413, %L.106 ]
	br i1 %414, label %L.109, label %L.108
L.109:
	%415 = load %type_TypeNode*, %type_TypeNode** %t
	%416 = getelementptr %type_TypeNode, %type_TypeNode* %415, i32 0, i32 11
	%417 = load i32, i32* %416
	%418 = load i32, i32* %align
	%419 = load i32, i32* %mod
	%420 = sub i32 %418, %419
	%421 = add i32 %417, %420
	store i32 %421, i32* %416
	br label %L.108
L.108:
	br label %L.103
L.105:
	%422 = load %type_TypeNode*, %type_TypeNode** %t
	%423 = getelementptr %type_TypeNode, %type_TypeNode* %422, i32 0, i32 26
	%424 = load i8, i8* %423
	%425 = icmp ne i8 %424, 0
	br i1 %425, label %L.111, label %L.112
L.111:
	%426 = load %type_TypeNode*, %type_TypeNode** %t
	%427 = getelementptr %type_TypeNode, %type_TypeNode* %426, i32 0, i32 24
	%428 = load i8, i8* %427
	%429 = icmp ne i8 %428, 0
	br i1 %429, label %L.114, label %L.115
L.114:
	store i32 1, i32* %align
	br label %L.113
L.115:
	store i32 8, i32* %align
	br label %L.113
L.113:
	br label %L.110
L.112:
	%430 = load %type_TypeNode*, %type_TypeNode** %t
	%431 = getelementptr %type_TypeNode, %type_TypeNode* %430, i32 0, i32 10
	%432 = load i32, i32* %431
	%433 = call i32 @target_ialign(i32 %432)
	store i32 %433, i32* %align
	br label %L.110
L.110:
	br label %L.103
L.103:
	%434 = load %type_TypeNode*, %type_TypeNode** %t
	%435 = getelementptr %type_TypeNode, %type_TypeNode* %434, i32 0, i32 24
	%436 = load i8, i8* %435
	%437 = icmp ne i8 %436, 0
	br i1 %437, label %L.116, label %L.117
L.116:
	%438 = load %type_TypeNode*, %type_TypeNode** %t
	%439 = getelementptr %type_TypeNode, %type_TypeNode* %438, i32 0, i32 10
	%440 = load i32, i32* %439
	%441 = call i32 @target_isize(i32 %440)
	%442 = icmp eq i32 %441, 0
	br label %L.117
L.117:
	%443 = phi i1 [ false, %L.103 ], [ %442, %L.116 ]
	br i1 %443, label %L.119, label %L.118
L.119:
	call void @lex_Error(i8 82)
	br label %L.118
L.118:
	br label %L.18
L.26:
	%444 = load %type_TypeNode*, %type_TypeNode** %t
	%445 = getelementptr %type_TypeNode, %type_TypeNode* %444, i32 0, i32 0
	%446 = load %type_TypeNode*, %type_TypeNode** %445
	%447 = icmp ne %type_TypeNode* %446, null
	br i1 %447, label %L.121, label %L.120
L.121:
	%448 = load %type_TypeNode*, %type_TypeNode** %t
	%449 = getelementptr %type_TypeNode, %type_TypeNode* %448, i32 0, i32 0
	%450 = load %type_TypeNode*, %type_TypeNode** %449
	call void @type_Final(%type_TypeNode* %450)
	%451 = load %type_TypeNode*, %type_TypeNode** %t
	%452 = getelementptr %type_TypeNode, %type_TypeNode* %451, i32 0, i32 24
	%453 = load i8, i8* %452
	%454 = icmp ne i8 %453, 0
	br i1 %454, label %L.123, label %L.122
L.123:
	%455 = load %type_TypeNode*, %type_TypeNode** %t
	%456 = getelementptr %type_TypeNode, %type_TypeNode* %455, i32 0, i32 0
	%457 = load %type_TypeNode*, %type_TypeNode** %456
	%458 = call %type_TypeNode* @type_ForcePacked(%type_TypeNode* %457)
	%459 = load %type_TypeNode*, %type_TypeNode** %t
	%460 = getelementptr %type_TypeNode, %type_TypeNode* %459, i32 0, i32 0
	store %type_TypeNode* %458, %type_TypeNode** %460
	br label %L.122
L.122:
	%461 = load %type_TypeNode*, %type_TypeNode** %t
	%462 = getelementptr %type_TypeNode, %type_TypeNode* %461, i32 0, i32 10
	%463 = load i32, i32* %462
	%464 = icmp eq i32 %463, 0
	br i1 %464, label %L.125, label %L.124
L.125:
	%465 = load %type_TypeNode*, %type_TypeNode** %t
	%466 = getelementptr %type_TypeNode, %type_TypeNode* %465, i32 0, i32 0
	%467 = load %type_TypeNode*, %type_TypeNode** %466
	%468 = getelementptr %type_TypeNode, %type_TypeNode* %467, i32 0, i32 10
	%469 = load i32, i32* %468
	%470 = load %type_TypeNode*, %type_TypeNode** %t
	%471 = call i32 @type_TypeNode_Span(%type_TypeNode* %470)
	%472 = mul i32 %469, %471
	%473 = load %type_TypeNode*, %type_TypeNode** %t
	%474 = getelementptr %type_TypeNode, %type_TypeNode* %473, i32 0, i32 10
	store i32 %472, i32* %474
	br label %L.124
L.124:
	%475 = load %type_TypeNode*, %type_TypeNode** %t
	%476 = getelementptr %type_TypeNode, %type_TypeNode* %475, i32 0, i32 11
	%477 = load i32, i32* %476
	%478 = icmp eq i32 %477, 0
	br i1 %478, label %L.127, label %L.126
L.127:
	%479 = load %type_TypeNode*, %type_TypeNode** %t
	%480 = getelementptr %type_TypeNode, %type_TypeNode* %479, i32 0, i32 10
	%481 = load i32, i32* %480
	%482 = load %type_TypeNode*, %type_TypeNode** %t
	%483 = getelementptr %type_TypeNode, %type_TypeNode* %482, i32 0, i32 11
	store i32 %481, i32* %483
	br label %L.126
L.126:
	%484 = load %type_TypeNode*, %type_TypeNode** %t
	%485 = getelementptr %type_TypeNode, %type_TypeNode* %484, i32 0, i32 0
	%486 = load %type_TypeNode*, %type_TypeNode** %485
	%487 = getelementptr %type_TypeNode, %type_TypeNode* %486, i32 0, i32 11
	%488 = load i32, i32* %487
	%489 = load %type_TypeNode*, %type_TypeNode** %t
	%490 = getelementptr %type_TypeNode, %type_TypeNode* %489, i32 0, i32 0
	%491 = load %type_TypeNode*, %type_TypeNode** %490
	%492 = getelementptr %type_TypeNode, %type_TypeNode* %491, i32 0, i32 12
	%493 = load i32, i32* %492
	%494 = icmp ult i32 %488, %493
	br i1 %494, label %L.129, label %L.128
L.129:
	%495 = getelementptr [23 x i8], [23 x i8]* @S.593
	%496 = bitcast [23 x i8]* %495 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %496)
	%497 = load %type_TypeNode*, %type_TypeNode** %t
	%498 = getelementptr %type_TypeNode, %type_TypeNode* %497, i32 0, i32 0
	%499 = load %type_TypeNode*, %type_TypeNode** %498
	call void @type_DumpT(%type_TypeNode* %499, i8 1)
	call void @sys_fildes_nl(i32 2)
	br label %L.128
L.128:
	%500 = load %type_TypeNode*, %type_TypeNode** %t
	%501 = getelementptr %type_TypeNode, %type_TypeNode* %500, i32 0, i32 24
	%502 = load i8, i8* %501
	%503 = icmp ne i8 %502, 0
	%504 = xor i1 %503, true
	br i1 %504, label %L.131, label %L.132
L.131:
	%505 = load %type_TypeNode*, %type_TypeNode** %t
	%506 = getelementptr %type_TypeNode, %type_TypeNode* %505, i32 0, i32 0
	%507 = load %type_TypeNode*, %type_TypeNode** %506
	%508 = getelementptr %type_TypeNode, %type_TypeNode* %507, i32 0, i32 12
	%509 = load i32, i32* %508
	store i32 %509, i32* %align
	br label %L.130
L.132:
	%510 = load %type_TypeNode*, %type_TypeNode** %t
	%511 = getelementptr %type_TypeNode, %type_TypeNode* %510, i32 0, i32 10
	%512 = load i32, i32* %511
	%513 = call i32 @target_ialign(i32 %512)
	store i32 %513, i32* %align
	br label %L.130
L.130:
	br label %L.120
L.120:
	%514 = load %type_TypeNode*, %type_TypeNode** %t
	%515 = getelementptr %type_TypeNode, %type_TypeNode* %514, i32 0, i32 24
	%516 = load i8, i8* %515
	%517 = icmp ne i8 %516, 0
	br i1 %517, label %L.133, label %L.134
L.133:
	%518 = load %type_TypeNode*, %type_TypeNode** %t
	%519 = getelementptr %type_TypeNode, %type_TypeNode* %518, i32 0, i32 10
	%520 = load i32, i32* %519
	%521 = call i32 @target_isize(i32 %520)
	%522 = icmp eq i32 %521, 0
	br label %L.134
L.134:
	%523 = phi i1 [ false, %L.120 ], [ %522, %L.133 ]
	br i1 %523, label %L.136, label %L.135
L.136:
	call void @lex_Error(i8 83)
	br label %L.135
L.135:
	br label %L.18
L.17:
	br label %L.18
L.18:
	%524 = load %type_TypeNode*, %type_TypeNode** %t
	%525 = getelementptr %type_TypeNode, %type_TypeNode* %524, i32 0, i32 23
	%526 = load i8, i8* %525
	%527 = icmp ne i8 %526, 0
	br i1 %527, label %L.138, label %L.139
L.138:
	%528 = load %type_TypeNode*, %type_TypeNode** %t
	%529 = getelementptr %type_TypeNode, %type_TypeNode* %528, i32 0, i32 12
	%530 = load i32, i32* %529
	%531 = load i32, i32* %align
	%532 = icmp ult i32 %530, %531
	br i1 %532, label %L.141, label %L.140
L.141:
	%533 = load %type_TypeNode*, %type_TypeNode** %t
	%534 = getelementptr %type_TypeNode, %type_TypeNode* %533, i32 0, i32 25
	store i8 1, i8* %534
	br label %L.140
L.140:
	br label %L.137
L.139:
	%535 = load i32, i32* %align
	%536 = load %type_TypeNode*, %type_TypeNode** %t
	%537 = getelementptr %type_TypeNode, %type_TypeNode* %536, i32 0, i32 12
	store i32 %535, i32* %537
	br label %L.137
L.137:
	%538 = load %type_TypeNode*, %type_TypeNode** %t
	%539 = getelementptr %type_TypeNode, %type_TypeNode* %538, i32 0, i32 31
	store i8 1, i8* %539
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal %type_TypeNode* @type_Enum(%type_TypeNode* %bt$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%vn = alloca %symb_SymbNode*
	%pvn = alloca %symb_SymbNode*
	%vnl = alloca %symb_SymbNode*
	%vv = alloca %ast_AstNode*
	%v = alloca i32
	%vmax = alloca i32
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = call %type_TypeNode* @type_New(i8 1)
	store %type_TypeNode* %1, %type_TypeNode** %t
	store i32 0, i32* %v
	store i32 0, i32* %vmax
	store %symb_SymbNode* null, %symb_SymbNode** %pvn
	%2 = load %type_TypeNode*, %type_TypeNode** %bt
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 0
	store %type_TypeNode* %2, %type_TypeNode** %4
	%5 = load %type_TypeNode*, %type_TypeNode** %bt
	%6 = icmp ne %type_TypeNode* %5, null
	br i1 %6, label %L.2, label %L.1
L.2:
	%vb = alloca %symb_SymbNode*
	%7 = load %type_TypeNode*, %type_TypeNode** %bt
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 16
	%9 = load i8, i8* %8
	%10 = icmp eq i8 %9, 1
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = load %type_TypeNode*, %type_TypeNode** %bt
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 4
	%13 = load %symb_SymbNode*, %symb_SymbNode** %12
	store %symb_SymbNode* %13, %symb_SymbNode** %vb
	br label %L.6
L.6:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%15 = icmp ne %symb_SymbNode* %14, null
	%16 = xor i1 %15, true
	br i1 %16, label %L.7, label %L.8
L.8:
	%17 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%18 = getelementptr %symb_SymbNode, %symb_SymbNode* %17, i32 0, i32 23
	%19 = getelementptr [0 x i8], [0 x i8]* %18
	%20 = bitcast [0 x i8]* %19 to [0 x i8]*
	%21 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %20, i8 2)
	store %symb_SymbNode* %21, %symb_SymbNode** %vn
	%22 = load %symb_SymbNode*, %symb_SymbNode** %pvn
	%23 = icmp ne %symb_SymbNode* %22, null
	br i1 %23, label %L.10, label %L.11
L.10:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%25 = load %symb_SymbNode*, %symb_SymbNode** %pvn
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 0
	store %symb_SymbNode* %24, %symb_SymbNode** %26
	br label %L.9
L.11:
	%27 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 4
	store %symb_SymbNode* %27, %symb_SymbNode** %29
	br label %L.9
L.9:
	%30 = load %symb_SymbNode*, %symb_SymbNode** %vn
	store %symb_SymbNode* %30, %symb_SymbNode** %pvn
	%31 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%32 = getelementptr %symb_SymbNode, %symb_SymbNode* %31, i32 0, i32 9
	%33 = load %ast_AstNode*, %ast_AstNode** %32
	%34 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%35 = getelementptr %symb_SymbNode, %symb_SymbNode* %34, i32 0, i32 9
	store %ast_AstNode* %33, %ast_AstNode** %35
	%36 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%37 = getelementptr %symb_SymbNode, %symb_SymbNode* %36, i32 0, i32 9
	%38 = load %ast_AstNode*, %ast_AstNode** %37
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 10
	%40 = load i64, i64* %39
	%41 = trunc i64 %40 to i32
	store i32 %41, i32* %v
	%42 = load i32, i32* %v
	%43 = load i32, i32* %vmax
	%44 = icmp ugt i32 %42, %43
	br i1 %44, label %L.13, label %L.12
L.13:
	%45 = load i32, i32* %v
	store i32 %45, i32* %vmax
	br label %L.12
L.12:
	%46 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 0
	%48 = load %symb_SymbNode*, %symb_SymbNode** %47
	store %symb_SymbNode* %48, %symb_SymbNode** %vb
	br label %L.6
L.7:
	%49 = load i32, i32* %v
	%50 = add i32 %49, 1
	store i32 %50, i32* %v
	br label %L.3
L.5:
	call void @lex_Error(i8 69)
	br label %L.3
L.3:
	br label %L.1
L.1:
	br label %L.14
L.14:
	store %symb_SymbNode* null, %symb_SymbNode** %vnl
	%51 = load i8, i8* %tok
	%52 = icmp eq i8 %51, 36
	br i1 %52, label %L.17, label %L.18
L.17:
	%53 = call i8 @lex_Next()
	store i8 %53, i8* %tok
	br label %L.19
L.19:
	%54 = load i8, i8* %tok
	%55 = icmp eq i8 %54, 46
	br i1 %55, label %L.22, label %L.23
L.22:
	%56 = load %type_TypeNode*, %type_TypeNode** %t
	%57 = getelementptr %type_TypeNode, %type_TypeNode* %56, i32 0, i32 4
	%58 = load %symb_SymbNode*, %symb_SymbNode** %57
	%59 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%60 = call i8 @symb_IsUniqueLocal(%symb_SymbNode* %58, [0 x i8]* %59)
	%61 = icmp ne i8 %60, 0
	%62 = xor i1 %61, true
	br i1 %62, label %L.25, label %L.24
L.25:
	%63 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %63)
	br label %L.24
L.24:
	%64 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%65 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %64, i8 2)
	store %symb_SymbNode* %65, %symb_SymbNode** %vn
	%66 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	%67 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%68 = getelementptr %symb_SymbNode, %symb_SymbNode* %67, i32 0, i32 0
	store %symb_SymbNode* %66, %symb_SymbNode** %68
	%69 = load %symb_SymbNode*, %symb_SymbNode** %vn
	store %symb_SymbNode* %69, %symb_SymbNode** %vnl
	%70 = call i8 @lex_Next()
	store i8 %70, i8* %tok
	br label %L.21
L.23:
	call void @lex_Error(i8 21)
	br label %L.21
L.21:
	%71 = load i8, i8* %tok
	%72 = icmp eq i8 %71, 37
	br i1 %72, label %L.20, label %L.26
L.26:
	%73 = call i8 @lex_Expect(i8 5)
	store i8 %73, i8* %tok
	%74 = load i8, i8* %tok
	%75 = icmp eq i8 %74, 37
	br i1 %75, label %L.20, label %L.27
L.27:
	br label %L.19
L.20:
	%76 = call i8 @lex_Expect(i8 37)
	store i8 %76, i8* %tok
	br label %L.16
L.18:
	%77 = load i8, i8* %tok
	%78 = icmp eq i8 %77, 46
	br i1 %78, label %L.29, label %L.30
L.29:
	%79 = load %type_TypeNode*, %type_TypeNode** %t
	%80 = getelementptr %type_TypeNode, %type_TypeNode* %79, i32 0, i32 4
	%81 = load %symb_SymbNode*, %symb_SymbNode** %80
	%82 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%83 = call i8 @symb_IsUniqueLocal(%symb_SymbNode* %81, [0 x i8]* %82)
	%84 = icmp ne i8 %83, 0
	%85 = xor i1 %84, true
	br i1 %85, label %L.32, label %L.31
L.32:
	%86 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %86)
	br label %L.31
L.31:
	%87 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%88 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %87, i8 2)
	store %symb_SymbNode* %88, %symb_SymbNode** %vnl
	%89 = call i8 @lex_Next()
	store i8 %89, i8* %tok
	br label %L.28
L.30:
	call void @lex_Error(i8 21)
	br label %L.28
L.28:
	br label %L.16
L.16:
	%90 = load i8, i8* %tok
	%91 = icmp eq i8 %90, 9
	br i1 %91, label %L.34, label %L.35
L.34:
	%92 = call i8 @lex_Next()
	store i8 %92, i8* %tok
	%93 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%94 = call %ast_AstNode* @expr_Const(%type_TypeNode* %93)
	store %ast_AstNode* %94, %ast_AstNode** %vv
	%95 = load %ast_AstNode*, %ast_AstNode** %vv
	%96 = icmp ne %ast_AstNode* %95, null
	br i1 %96, label %L.37, label %L.38
L.37:
	%97 = load %type_TypeNode*, %type_TypeNode** %t
	%98 = load %ast_AstNode*, %ast_AstNode** %vv
	%99 = getelementptr %ast_AstNode, %ast_AstNode* %98, i32 0, i32 8
	store %type_TypeNode* %97, %type_TypeNode** %99
	%100 = load %ast_AstNode*, %ast_AstNode** %vv
	%101 = getelementptr %ast_AstNode, %ast_AstNode* %100, i32 0, i32 10
	%102 = load i64, i64* %101
	%103 = trunc i64 %102 to i32
	store i32 %103, i32* %v
	br label %L.36
L.38:
	call void @lex_Error(i8 52)
	%104 = load %type_TypeNode*, %type_TypeNode** %t
	%105 = load i32, i32* %v
	%106 = zext i32 %105 to i64
	%107 = call %ast_AstNode* @ast_Const(%type_TypeNode* %104, i64 %106)
	store %ast_AstNode* %107, %ast_AstNode** %vv
	br label %L.36
L.36:
	%108 = load i8, i8* @lex_Token
	store i8 %108, i8* %tok
	br label %L.33
L.35:
	%109 = load %type_TypeNode*, %type_TypeNode** %t
	%110 = load i32, i32* %v
	%111 = zext i32 %110 to i64
	%112 = call %ast_AstNode* @ast_Const(%type_TypeNode* %109, i64 %111)
	store %ast_AstNode* %112, %ast_AstNode** %vv
	br label %L.33
L.33:
	br label %L.39
L.39:
	%113 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	%114 = icmp ne %symb_SymbNode* %113, null
	%115 = xor i1 %114, true
	br i1 %115, label %L.40, label %L.41
L.41:
	%116 = load %ast_AstNode*, %ast_AstNode** %vv
	%117 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	%118 = getelementptr %symb_SymbNode, %symb_SymbNode* %117, i32 0, i32 9
	store %ast_AstNode* %116, %ast_AstNode** %118
	%119 = load %symb_SymbNode*, %symb_SymbNode** %pvn
	%120 = icmp ne %symb_SymbNode* %119, null
	br i1 %120, label %L.43, label %L.44
L.43:
	%121 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	%122 = load %symb_SymbNode*, %symb_SymbNode** %pvn
	%123 = getelementptr %symb_SymbNode, %symb_SymbNode* %122, i32 0, i32 0
	store %symb_SymbNode* %121, %symb_SymbNode** %123
	br label %L.42
L.44:
	%124 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	%125 = load %type_TypeNode*, %type_TypeNode** %t
	%126 = getelementptr %type_TypeNode, %type_TypeNode* %125, i32 0, i32 4
	store %symb_SymbNode* %124, %symb_SymbNode** %126
	br label %L.42
L.42:
	%127 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	store %symb_SymbNode* %127, %symb_SymbNode** %pvn
	%128 = load %symb_SymbNode*, %symb_SymbNode** %vnl
	%129 = getelementptr %symb_SymbNode, %symb_SymbNode* %128, i32 0, i32 0
	%130 = load %symb_SymbNode*, %symb_SymbNode** %129
	store %symb_SymbNode* %130, %symb_SymbNode** %vnl
	br label %L.39
L.40:
	%131 = load i32, i32* %v
	%132 = load i32, i32* %vmax
	%133 = icmp ugt i32 %131, %132
	br i1 %133, label %L.46, label %L.45
L.46:
	%134 = load i32, i32* %v
	store i32 %134, i32* %vmax
	br label %L.45
L.45:
	%135 = load i8, i8* %tok
	%136 = icmp eq i8 %135, 37
	br i1 %136, label %L.15, label %L.47
L.47:
	%137 = call i8 @lex_Expect(i8 5)
	store i8 %137, i8* %tok
	%138 = load i8, i8* %tok
	%139 = icmp eq i8 %138, 37
	br i1 %139, label %L.15, label %L.48
L.48:
	%140 = load i32, i32* %v
	%141 = add i32 %140, 1
	store i32 %141, i32* %v
	br label %L.14
L.15:
	%142 = call i8 @lex_Expect(i8 37)
	%143 = load %type_TypeNode*, %type_TypeNode** %t
	%144 = getelementptr %type_TypeNode, %type_TypeNode* %143, i32 0, i32 8
	store i64 0, i64* %144
	%145 = load i32, i32* %vmax
	%146 = zext i32 %145 to i64
	%147 = load %type_TypeNode*, %type_TypeNode** %t
	%148 = getelementptr %type_TypeNode, %type_TypeNode* %147, i32 0, i32 9
	store i64 %146, i64* %148
	%149 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %149, %type_TypeNode** %rv.0
	br label %return
return:
	%150 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %150
}
define internal void @type_RangeEnum(%type_TypeNode* %t$, %type_TypeNode* %bt$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%vb = alloca %symb_SymbNode*
	%vn = alloca %symb_SymbNode*
	%pvn = alloca %symb_SymbNode*
	%v = alloca i32
	%vlo = alloca i32
	%vhi = alloca i32
	%0 = load %type_TypeNode*, %type_TypeNode** %bt
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = getelementptr %type_TypeNode, %type_TypeNode* %1, i32 0, i32 0
	store %type_TypeNode* %0, %type_TypeNode** %2
	%3 = load %type_TypeNode*, %type_TypeNode** %bt
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 4
	%5 = load %symb_SymbNode*, %symb_SymbNode** %4
	store %symb_SymbNode* %5, %symb_SymbNode** %vb
	store %symb_SymbNode* null, %symb_SymbNode** %pvn
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 8
	%8 = load i64, i64* %7
	%9 = trunc i64 %8 to i32
	store i32 %9, i32* %vlo
	br label %L.1
L.1:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%11 = icmp ne %symb_SymbNode* %10, null
	br i1 %11, label %L.4, label %L.5
L.4:
	%12 = load i32, i32* %vlo
	%13 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%14 = getelementptr %symb_SymbNode, %symb_SymbNode* %13, i32 0, i32 9
	%15 = load %ast_AstNode*, %ast_AstNode** %14
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 10
	%17 = load i64, i64* %16
	%18 = trunc i64 %17 to i32
	%19 = icmp ugt i32 %12, %18
	br label %L.5
L.5:
	%20 = phi i1 [ false, %L.1 ], [ %19, %L.4 ]
	%21 = xor i1 %20, true
	br i1 %21, label %L.2, label %L.3
L.3:
	%22 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%23 = getelementptr %symb_SymbNode, %symb_SymbNode* %22, i32 0, i32 0
	%24 = load %symb_SymbNode*, %symb_SymbNode** %23
	store %symb_SymbNode* %24, %symb_SymbNode** %vb
	br label %L.1
L.2:
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 9
	%27 = load i64, i64* %26
	%28 = trunc i64 %27 to i32
	store i32 %28, i32* %vhi
	br label %L.6
L.6:
	%29 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%30 = icmp ne %symb_SymbNode* %29, null
	br i1 %30, label %L.9, label %L.10
L.9:
	%31 = load i32, i32* %vhi
	%32 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%33 = getelementptr %symb_SymbNode, %symb_SymbNode* %32, i32 0, i32 9
	%34 = load %ast_AstNode*, %ast_AstNode** %33
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 10
	%36 = load i64, i64* %35
	%37 = trunc i64 %36 to i32
	%38 = icmp uge i32 %31, %37
	br label %L.10
L.10:
	%39 = phi i1 [ false, %L.6 ], [ %38, %L.9 ]
	%40 = xor i1 %39, true
	br i1 %40, label %L.7, label %L.8
L.8:
	%41 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%42 = getelementptr %symb_SymbNode, %symb_SymbNode* %41, i32 0, i32 23
	%43 = getelementptr [0 x i8], [0 x i8]* %42
	%44 = bitcast [0 x i8]* %43 to [0 x i8]*
	%45 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %44, i8 2)
	store %symb_SymbNode* %45, %symb_SymbNode** %vn
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%48 = getelementptr %symb_SymbNode, %symb_SymbNode* %47, i32 0, i32 9
	%49 = load %ast_AstNode*, %ast_AstNode** %48
	%50 = getelementptr %ast_AstNode, %ast_AstNode* %49, i32 0, i32 10
	%51 = load i64, i64* %50
	%52 = call %ast_AstNode* @ast_Const(%type_TypeNode* %46, i64 %51)
	%53 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%54 = getelementptr %symb_SymbNode, %symb_SymbNode* %53, i32 0, i32 9
	store %ast_AstNode* %52, %ast_AstNode** %54
	%55 = load %symb_SymbNode*, %symb_SymbNode** %pvn
	%56 = icmp ne %symb_SymbNode* %55, null
	br i1 %56, label %L.12, label %L.13
L.12:
	%57 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%58 = load %symb_SymbNode*, %symb_SymbNode** %pvn
	%59 = getelementptr %symb_SymbNode, %symb_SymbNode* %58, i32 0, i32 0
	store %symb_SymbNode* %57, %symb_SymbNode** %59
	br label %L.11
L.13:
	%60 = load %symb_SymbNode*, %symb_SymbNode** %vn
	%61 = load %type_TypeNode*, %type_TypeNode** %t
	%62 = getelementptr %type_TypeNode, %type_TypeNode* %61, i32 0, i32 4
	store %symb_SymbNode* %60, %symb_SymbNode** %62
	br label %L.11
L.11:
	%63 = load %symb_SymbNode*, %symb_SymbNode** %vn
	store %symb_SymbNode* %63, %symb_SymbNode** %pvn
	%64 = load %symb_SymbNode*, %symb_SymbNode** %vb
	%65 = getelementptr %symb_SymbNode, %symb_SymbNode* %64, i32 0, i32 0
	%66 = load %symb_SymbNode*, %symb_SymbNode** %65
	store %symb_SymbNode* %66, %symb_SymbNode** %vb
	br label %L.6
L.7:
	br label %return
return:
	ret void
}
define internal %type_TypeNode* @type_Range(%ast_AstNode* %vlo$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%vlo = alloca %ast_AstNode*
	store %ast_AstNode* %vlo$, %ast_AstNode** %vlo
	%t = alloca %type_TypeNode*
	%tok = alloca i8
	%vhi = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = load i8, i8* @lex_Token
	%2 = icmp eq i8 %1, 6
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %4, %ast_AstNode** %vhi
	%5 = load %ast_AstNode*, %ast_AstNode** %vlo
	%6 = icmp ne %ast_AstNode* %5, null
	br i1 %6, label %L.4, label %L.5
L.4:
	%7 = load %ast_AstNode*, %ast_AstNode** %vhi
	%8 = icmp ne %ast_AstNode* %7, null
	br label %L.5
L.5:
	%9 = phi i1 [ false, %L.2 ], [ %8, %L.4 ]
	br i1 %9, label %L.7, label %L.6
L.7:
	%10 = load %ast_AstNode*, %ast_AstNode** %vlo
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 0
	%12 = load i8, i8* %11
	%13 = icmp eq i8 %12, 6
	br i1 %13, label %L.8, label %L.9
L.8:
	%14 = load %ast_AstNode*, %ast_AstNode** %vhi
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 0
	%16 = load i8, i8* %15
	%17 = icmp eq i8 %16, 6
	br label %L.9
L.9:
	%18 = phi i1 [ false, %L.7 ], [ %17, %L.8 ]
	br i1 %18, label %L.11, label %L.12
L.11:
	%19 = load %ast_AstNode*, %ast_AstNode** %vlo
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 8
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 16
	%23 = load i8, i8* %22
	%24 = zext i8 %23 to i32
	switch i32 %24, label %L.13 [
		i32 1, label %L.15
		i32 2, label %L.15
		i32 3, label %L.15
	]
L.15:
	%25 = load %ast_AstNode*, %ast_AstNode** %vlo
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 8
	%27 = load %type_TypeNode*, %type_TypeNode** %26
	%28 = getelementptr %type_TypeNode, %type_TypeNode* %27, i32 0, i32 16
	%29 = load i8, i8* %28
	%30 = call %type_TypeNode* @type_New(i8 %29)
	store %type_TypeNode* %30, %type_TypeNode** %t
	%31 = load %ast_AstNode*, %ast_AstNode** %vlo
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 10
	%33 = load i64, i64* %32
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 8
	store i64 %33, i64* %35
	%36 = load %ast_AstNode*, %ast_AstNode** %vhi
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 10
	%38 = load i64, i64* %37
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 9
	store i64 %38, i64* %40
	%41 = load %ast_AstNode*, %ast_AstNode** %vlo
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 8
	%43 = load %type_TypeNode*, %type_TypeNode** %42
	%44 = getelementptr %type_TypeNode, %type_TypeNode* %43, i32 0, i32 16
	%45 = load i8, i8* %44
	%46 = icmp eq i8 %45, 1
	br i1 %46, label %L.17, label %L.16
L.17:
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = load %ast_AstNode*, %ast_AstNode** %vlo
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 8
	%50 = load %type_TypeNode*, %type_TypeNode** %49
	call void @type_RangeEnum(%type_TypeNode* %47, %type_TypeNode* %50)
	br label %L.16
L.16:
	br label %L.14
L.13:
	call void @lex_Error(i8 34)
	br label %L.14
L.14:
	br label %L.10
L.12:
	call void @lex_Error(i8 75)
	br label %L.10
L.10:
	br label %L.6
L.6:
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 20, i8 6)
	br label %L.1
L.1:
	%51 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %51, %type_TypeNode** %rv.0
	br label %return
return:
	%52 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %52
}
@S.594 = private unnamed_addr constant [20 x i8] c"field inital values\00"
define internal %type_TypeNode* @type_Record(%type_TypeNode* %bt$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%ft = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%ps = alloca %symb_SymbNode*
	%bs = alloca %symb_SymbNode*
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = call %type_TypeNode* @type_New(i8 7)
	store %type_TypeNode* %1, %type_TypeNode** %t
	store %symb_SymbNode* null, %symb_SymbNode** %ps
	%2 = load %type_TypeNode*, %type_TypeNode** %bt
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 0
	store %type_TypeNode* %2, %type_TypeNode** %4
	%5 = load %type_TypeNode*, %type_TypeNode** %bt
	%6 = icmp ne %type_TypeNode* %5, null
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load %type_TypeNode*, %type_TypeNode** %bt
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 16
	%9 = load i8, i8* %8
	%10 = icmp eq i8 %9, 7
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = load %type_TypeNode*, %type_TypeNode** %bt
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 4
	%13 = load %symb_SymbNode*, %symb_SymbNode** %12
	store %symb_SymbNode* %13, %symb_SymbNode** %bs
	br label %L.6
L.6:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%15 = icmp ne %symb_SymbNode* %14, null
	br i1 %15, label %L.9, label %L.10
L.9:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 1
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 28
	%20 = load i8, i8* %19
	%21 = icmp ne i8 %20, 0
	%22 = xor i1 %21, true
	br label %L.10
L.10:
	%23 = phi i1 [ false, %L.6 ], [ %22, %L.9 ]
	%24 = xor i1 %23, true
	br i1 %24, label %L.7, label %L.8
L.8:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 23
	%27 = getelementptr [0 x i8], [0 x i8]* %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	%29 = call %symb_SymbNode* @symb_New(i8 4, [0 x i8]* %28, i8 2)
	store %symb_SymbNode* %29, %symb_SymbNode** %s
	%30 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%31 = icmp ne %symb_SymbNode* %30, null
	br i1 %31, label %L.12, label %L.13
L.12:
	%32 = load %symb_SymbNode*, %symb_SymbNode** %s
	%33 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%34 = getelementptr %symb_SymbNode, %symb_SymbNode* %33, i32 0, i32 0
	store %symb_SymbNode* %32, %symb_SymbNode** %34
	br label %L.11
L.13:
	%35 = load %symb_SymbNode*, %symb_SymbNode** %s
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 4
	store %symb_SymbNode* %35, %symb_SymbNode** %37
	br label %L.11
L.11:
	%38 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %38, %symb_SymbNode** %ps
	%39 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%40 = getelementptr %symb_SymbNode, %symb_SymbNode* %39, i32 0, i32 1
	%41 = load %type_TypeNode*, %type_TypeNode** %40
	%42 = load %symb_SymbNode*, %symb_SymbNode** %s
	%43 = getelementptr %symb_SymbNode, %symb_SymbNode* %42, i32 0, i32 1
	store %type_TypeNode* %41, %type_TypeNode** %43
	%44 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%45 = getelementptr %symb_SymbNode, %symb_SymbNode* %44, i32 0, i32 0
	%46 = load %symb_SymbNode*, %symb_SymbNode** %45
	store %symb_SymbNode* %46, %symb_SymbNode** %bs
	br label %L.6
L.7:
	br label %L.3
L.5:
	store %type_TypeNode* null, %type_TypeNode** %bt
	call void @lex_Error(i8 68)
	br label %L.3
L.3:
	br label %L.1
L.1:
	br label %L.14
L.14:
	%47 = load i8, i8* %tok
	%48 = icmp eq i8 %47, 46
	%49 = xor i1 %48, true
	br i1 %49, label %L.15, label %L.16
L.16:
	%50 = call i8 @lex_Next()
	store i8 %50, i8* %tok
	%51 = load i8, i8* %tok
	%52 = zext i8 %51 to i32
	switch i32 %52, label %L.17 [
		i32 3, label %L.19
	]
L.19:
	%53 = load %type_TypeNode*, %type_TypeNode** %t
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 4
	%55 = load %symb_SymbNode*, %symb_SymbNode** %54
	%56 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%57 = call i8 @symb_IsUniqueLocal(%symb_SymbNode* %55, [0 x i8]* %56)
	%58 = icmp ne i8 %57, 0
	%59 = xor i1 %58, true
	br i1 %59, label %L.21, label %L.20
L.21:
	%60 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %60)
	br label %L.20
L.20:
	%61 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%62 = call %symb_SymbNode* @symb_New(i8 4, [0 x i8]* %61, i8 2)
	store %symb_SymbNode* %62, %symb_SymbNode** %s
	%63 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%64 = icmp ne %symb_SymbNode* %63, null
	br i1 %64, label %L.23, label %L.24
L.23:
	%65 = load %symb_SymbNode*, %symb_SymbNode** %s
	%66 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%67 = getelementptr %symb_SymbNode, %symb_SymbNode* %66, i32 0, i32 0
	store %symb_SymbNode* %65, %symb_SymbNode** %67
	br label %L.22
L.24:
	%68 = load %symb_SymbNode*, %symb_SymbNode** %s
	%69 = load %type_TypeNode*, %type_TypeNode** %t
	%70 = getelementptr %type_TypeNode, %type_TypeNode* %69, i32 0, i32 4
	store %symb_SymbNode* %68, %symb_SymbNode** %70
	br label %L.22
L.22:
	%71 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %71, %symb_SymbNode** %ps
	%72 = call i8 @lex_Next()
	store i8 %72, i8* %tok
	%73 = load i8, i8* %tok
	%74 = call %type_TypeNode* @type_Def(i8 %73, %type_TypeNode* null)
	store %type_TypeNode* %74, %type_TypeNode** %ft
	%75 = load %type_TypeNode*, %type_TypeNode** %ft
	%76 = load %symb_SymbNode*, %symb_SymbNode** %s
	%77 = getelementptr %symb_SymbNode, %symb_SymbNode* %76, i32 0, i32 1
	store %type_TypeNode* %75, %type_TypeNode** %77
	%78 = load i8, i8* @lex_Token
	store i8 %78, i8* %tok
	%79 = load i8, i8* %tok
	%80 = icmp eq i8 %79, 3
	br i1 %80, label %L.26, label %L.25
L.26:
	%81 = load %symb_SymbNode*, %symb_SymbNode** %s
	%82 = load %type_TypeNode*, %type_TypeNode** %ft
	%83 = call %type_TypeNode* @type_FieldAttributes(%symb_SymbNode* %81, %type_TypeNode* %82)
	%84 = load %symb_SymbNode*, %symb_SymbNode** %s
	%85 = getelementptr %symb_SymbNode, %symb_SymbNode* %84, i32 0, i32 1
	store %type_TypeNode* %83, %type_TypeNode** %85
	%86 = load i8, i8* @lex_Token
	store i8 %86, i8* %tok
	br label %L.25
L.25:
	%87 = load i8, i8* %tok
	%88 = icmp eq i8 %87, 9
	br i1 %88, label %L.28, label %L.27
L.28:
	%89 = call i8 @lex_Next()
	store i8 %89, i8* %tok
	%90 = getelementptr [20 x i8], [20 x i8]* @S.594
	%91 = bitcast [20 x i8]* %90 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %91)
	br label %L.27
L.27:
	br label %L.18
L.17:
	call void @lex_Error(i8 67)
	br label %L.18
L.18:
	%92 = call i8 @lex_Expect(i8 4)
	store i8 %92, i8* %tok
	br label %L.14
L.15:
	%93 = call i8 @lex_Expect(i8 41)
	store i8 %93, i8* %tok
	%94 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %94, %type_TypeNode** %rv.0
	br label %return
return:
	%95 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %95
}
@S.595 = private unnamed_addr constant [36 x i8] c"Array dimensions must be constants\0A\00"
define internal %type_TypeNode* @type_Array() nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	%lo = alloca %ast_AstNode*
	%hi = alloca %ast_AstNode*
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = call %type_TypeNode* @type_New(i8 6)
	store %type_TypeNode* %1, %type_TypeNode** %t
	%2 = load i8, i8* %tok
	%3 = icmp ne i8 %2, 39
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = call { %ast_AstNode*, %ast_AstNode* } @expr_GetRange()
	%5 = extractvalue  { %ast_AstNode*, %ast_AstNode* } %4, 0
	%6 = extractvalue  { %ast_AstNode*, %ast_AstNode* } %4, 1
	store %ast_AstNode* %5, %ast_AstNode** %lo
	store %ast_AstNode* %6, %ast_AstNode** %hi
	%7 = load %ast_AstNode*, %ast_AstNode** %lo
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 0
	%9 = load i8, i8* %8
	%10 = icmp eq i8 %9, 6
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = load %ast_AstNode*, %ast_AstNode** %hi
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 0
	%13 = load i8, i8* %12
	%14 = icmp eq i8 %13, 6
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.2 ], [ %14, %L.4 ]
	br i1 %15, label %L.7, label %L.8
L.7:
	%16 = load %ast_AstNode*, %ast_AstNode** %lo
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 10
	%18 = load i64, i64* %17
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 8
	store i64 %18, i64* %20
	%21 = load %ast_AstNode*, %ast_AstNode** %hi
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 10
	%23 = load i64, i64* %22
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 9
	store i64 %23, i64* %25
	%26 = load %ast_AstNode*, %ast_AstNode** %hi
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 8
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 2
	store %type_TypeNode* %28, %type_TypeNode** %30
	br label %L.6
L.8:
	%31 = getelementptr [36 x i8], [36 x i8]* @S.595
	%32 = bitcast [36 x i8]* %31 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %32)
	br label %L.6
L.6:
	br label %L.1
L.3:
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 28
	store i8 1, i8* %34
	br label %L.1
L.1:
	%35 = call i8 @lex_Expect(i8 39)
	store i8 %35, i8* %tok
	%36 = load i8, i8* %tok
	%37 = call %type_TypeNode* @type_Def(i8 %36, %type_TypeNode* null)
	store %type_TypeNode* %37, %type_TypeNode** %bt
	%38 = load %type_TypeNode*, %type_TypeNode** %bt
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 0
	store %type_TypeNode* %38, %type_TypeNode** %40
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %41, %type_TypeNode** %rv.0
	br label %return
return:
	%42 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %42
}
@S.596 = private unnamed_addr constant [36 x i8] c"Large aggregate as formal parameter\00"
define internal void @type_DefProc(%symb_SymbNode* %procs$, %symb_SymbNode* %meths$) nounwind {
L.0:
	%procs = alloca %symb_SymbNode*
	store %symb_SymbNode* %procs$, %symb_SymbNode** %procs
	%meths = alloca %symb_SymbNode*
	store %symb_SymbNode* %meths$, %symb_SymbNode** %meths
	%s = alloca %symb_SymbNode*
	%rs = alloca %symb_SymbNode*
	%prevs = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 36
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load %symb_SymbNode*, %symb_SymbNode** %meths
	%5 = icmp ne %symb_SymbNode* %4, null
	br i1 %5, label %L.5, label %L.4
L.5:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %meths
	%7 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 3
	store %symb_SymbNode* %6, %symb_SymbNode** %8
	br label %L.4
L.4:
	%9 = load i8, i8* %tok
	%10 = icmp ne i8 %9, 37
	br i1 %10, label %L.7, label %L.6
L.7:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %meths
	store %symb_SymbNode* %11, %symb_SymbNode** %prevs
	br label %L.8
L.8:
	%12 = load i8, i8* %tok
	%13 = icmp eq i8 %12, 46
	br i1 %13, label %L.11, label %L.12
L.11:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%15 = getelementptr %symb_SymbNode, %symb_SymbNode* %14, i32 0, i32 3
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	%17 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%18 = call i8 @symb_IsUniqueLocal(%symb_SymbNode* %16, [0 x i8]* %17)
	%19 = icmp ne i8 %18, 0
	%20 = xor i1 %19, true
	br i1 %20, label %L.14, label %L.13
L.14:
	%21 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %21)
	br label %L.13
L.13:
	%22 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%23 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %22, i8 2)
	store %symb_SymbNode* %23, %symb_SymbNode** %s
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 14
	store i8 0, i8* %26
	%27 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %27, %type_TypeNode** %t
	%28 = load i8, i8* %tok
	%29 = icmp eq i8 %28, 3
	br i1 %29, label %L.16, label %L.17
L.16:
	%30 = call i8 @lex_Next()
	store i8 %30, i8* %tok
	%31 = load i8, i8* %tok
	%32 = call %type_TypeNode* @type_Def(i8 %31, %type_TypeNode* null)
	store %type_TypeNode* %32, %type_TypeNode** %t
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %33)
	%34 = load i8, i8* @lex_Token
	store i8 %34, i8* %tok
	br label %L.15
L.17:
	call void @lex_ErrorT(i8 20, i8 3)
	br label %L.15
L.15:
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 16
	%37 = load i8, i8* %36
	%38 = zext i8 %37 to i32
	switch i32 %38, label %L.18 [
		i32 6, label %L.20
		i32 7, label %L.20
	]
L.20:
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 10
	%41 = load i32, i32* %40
	%42 = load %target_ModelT*, %target_ModelT** @target_Target
	%43 = getelementptr %target_ModelT, %target_ModelT* %42, i32 0, i32 2
	%44 = load i8, i8* %43
	%45 = zext i8 %44 to i32
	%46 = mul i32 4, %45
	%47 = icmp ugt i32 %41, %46
	br i1 %47, label %L.22, label %L.21
L.22:
	%48 = getelementptr [36 x i8], [36 x i8]* @S.596
	%49 = bitcast [36 x i8]* %48 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %49)
	br label %L.21
L.21:
	br label %L.19
L.18:
	br label %L.19
L.19:
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = load %symb_SymbNode*, %symb_SymbNode** %s
	%52 = getelementptr %symb_SymbNode, %symb_SymbNode* %51, i32 0, i32 1
	store %type_TypeNode* %50, %type_TypeNode** %52
	%53 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%54 = getelementptr %symb_SymbNode, %symb_SymbNode* %53, i32 0, i32 3
	%55 = load %symb_SymbNode*, %symb_SymbNode** %54
	%56 = icmp eq %symb_SymbNode* %55, null
	br i1 %56, label %L.24, label %L.23
L.24:
	%57 = load %symb_SymbNode*, %symb_SymbNode** %s
	%58 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%59 = getelementptr %symb_SymbNode, %symb_SymbNode* %58, i32 0, i32 3
	store %symb_SymbNode* %57, %symb_SymbNode** %59
	br label %L.23
L.23:
	%60 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%61 = icmp ne %symb_SymbNode* %60, null
	br i1 %61, label %L.26, label %L.25
L.26:
	%62 = load %symb_SymbNode*, %symb_SymbNode** %s
	%63 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%64 = getelementptr %symb_SymbNode, %symb_SymbNode* %63, i32 0, i32 0
	store %symb_SymbNode* %62, %symb_SymbNode** %64
	br label %L.25
L.25:
	%65 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %65, %symb_SymbNode** %prevs
	br label %L.10
L.12:
	call void @lex_Error(i8 21)
	br label %L.10
L.10:
	%66 = load i8, i8* %tok
	%67 = icmp ne i8 %66, 5
	br i1 %67, label %L.9, label %L.27
L.27:
	%68 = call i8 @lex_Next()
	store i8 %68, i8* %tok
	br label %L.8
L.9:
	br label %L.6
L.6:
	%69 = call i8 @lex_Expect(i8 37)
	store i8 %69, i8* %tok
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 20, i8 36)
	br label %L.1
L.1:
	%70 = load i8, i8* %tok
	%71 = zext i8 %70 to i32
	switch i32 %71, label %L.28 [
		i32 3, label %L.30
		i32 36, label %L.31
	]
L.30:
	%72 = call i8 @lex_Next()
	store i8 %72, i8* %tok
	%73 = load i8, i8* %tok
	%74 = icmp ne i8 %73, 3
	br i1 %74, label %L.33, label %L.32
L.33:
	store %symb_SymbNode* null, %symb_SymbNode** %prevs
	br label %L.34
L.34:
	%75 = load i8, i8* %tok
	%76 = call %type_TypeNode* @type_Def(i8 %75, %type_TypeNode* null)
	store %type_TypeNode* %76, %type_TypeNode** %t
	%77 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %77)
	%78 = bitcast [2 x i8]* @symb_anonid to [0 x i8]*
	%79 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %78, i8 2)
	store %symb_SymbNode* %79, %symb_SymbNode** %rs
	%80 = load %type_TypeNode*, %type_TypeNode** %t
	%81 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%82 = getelementptr %symb_SymbNode, %symb_SymbNode* %81, i32 0, i32 1
	store %type_TypeNode* %80, %type_TypeNode** %82
	%83 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%84 = getelementptr %symb_SymbNode, %symb_SymbNode* %83, i32 0, i32 4
	%85 = load %symb_SymbNode*, %symb_SymbNode** %84
	%86 = icmp eq %symb_SymbNode* %85, null
	br i1 %86, label %L.37, label %L.36
L.37:
	%87 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%88 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%89 = getelementptr %symb_SymbNode, %symb_SymbNode* %88, i32 0, i32 4
	store %symb_SymbNode* %87, %symb_SymbNode** %89
	br label %L.36
L.36:
	%90 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%91 = icmp ne %symb_SymbNode* %90, null
	br i1 %91, label %L.39, label %L.38
L.39:
	%92 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%93 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%94 = getelementptr %symb_SymbNode, %symb_SymbNode* %93, i32 0, i32 0
	store %symb_SymbNode* %92, %symb_SymbNode** %94
	br label %L.38
L.38:
	%95 = load %symb_SymbNode*, %symb_SymbNode** %rs
	store %symb_SymbNode* %95, %symb_SymbNode** %prevs
	%96 = load i8, i8* @lex_Token
	store i8 %96, i8* %tok
	%97 = load i8, i8* %tok
	%98 = icmp ne i8 %97, 5
	br i1 %98, label %L.35, label %L.40
L.40:
	%99 = call i8 @lex_Next()
	store i8 %99, i8* %tok
	br label %L.34
L.35:
	%100 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%101 = getelementptr %symb_SymbNode, %symb_SymbNode* %100, i32 0, i32 4
	%102 = load %symb_SymbNode*, %symb_SymbNode** %101
	%103 = getelementptr %symb_SymbNode, %symb_SymbNode* %102, i32 0, i32 0
	%104 = load %symb_SymbNode*, %symb_SymbNode** %103
	%105 = icmp ne %symb_SymbNode* %104, null
	br i1 %105, label %L.41, label %L.42
L.41:
	%106 = getelementptr %A.3, %A.3* @feature, i32 0, i32 8
	%107 = load i8, i8* %106
	%108 = icmp ne i8 %107, 0
	br label %L.42
L.42:
	%109 = phi i1 [ false, %L.35 ], [ %108, %L.41 ]
	br i1 %109, label %L.44, label %L.43
L.44:
	call void @lex_Error(i8 3)
	br label %L.43
L.43:
	%110 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%111 = getelementptr %symb_SymbNode, %symb_SymbNode* %110, i32 0, i32 4
	%112 = load %symb_SymbNode*, %symb_SymbNode** %111
	%113 = getelementptr %symb_SymbNode, %symb_SymbNode* %112, i32 0, i32 1
	%114 = load %type_TypeNode*, %type_TypeNode** %113
	%115 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%116 = getelementptr %symb_SymbNode, %symb_SymbNode* %115, i32 0, i32 1
	store %type_TypeNode* %114, %type_TypeNode** %116
	br label %L.32
L.32:
	br label %L.29
L.31:
	%117 = call i8 @lex_Next()
	store i8 %117, i8* %tok
	store %symb_SymbNode* null, %symb_SymbNode** %prevs
	br label %L.45
L.45:
	%118 = load i8, i8* %tok
	%119 = icmp eq i8 %118, 46
	br i1 %119, label %L.48, label %L.49
L.48:
	%120 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%121 = getelementptr %symb_SymbNode, %symb_SymbNode* %120, i32 0, i32 3
	%122 = load %symb_SymbNode*, %symb_SymbNode** %121
	%123 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%124 = call i8 @symb_IsUniqueLocal(%symb_SymbNode* %122, [0 x i8]* %123)
	%125 = icmp ne i8 %124, 0
	%126 = xor i1 %125, true
	br i1 %126, label %L.51, label %L.50
L.51:
	%127 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %127)
	br label %L.50
L.50:
	%128 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%129 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %128, i8 2)
	store %symb_SymbNode* %129, %symb_SymbNode** %rs
	%130 = call i8 @lex_Next()
	store i8 %130, i8* %tok
	%131 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%132 = getelementptr %symb_SymbNode, %symb_SymbNode* %131, i32 0, i32 14
	store i8 1, i8* %132
	%133 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %133, %type_TypeNode** %t
	%134 = load i8, i8* %tok
	%135 = icmp eq i8 %134, 3
	br i1 %135, label %L.53, label %L.54
L.53:
	%136 = call i8 @lex_Next()
	store i8 %136, i8* %tok
	%137 = load i8, i8* %tok
	%138 = call %type_TypeNode* @type_Def(i8 %137, %type_TypeNode* null)
	store %type_TypeNode* %138, %type_TypeNode** %t
	%139 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %139)
	%140 = load i8, i8* @lex_Token
	store i8 %140, i8* %tok
	br label %L.52
L.54:
	call void @lex_ErrorT(i8 20, i8 3)
	br label %L.52
L.52:
	%141 = load %type_TypeNode*, %type_TypeNode** %t
	%142 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%143 = getelementptr %symb_SymbNode, %symb_SymbNode* %142, i32 0, i32 1
	store %type_TypeNode* %141, %type_TypeNode** %143
	%144 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%145 = getelementptr %symb_SymbNode, %symb_SymbNode* %144, i32 0, i32 4
	%146 = load %symb_SymbNode*, %symb_SymbNode** %145
	%147 = icmp eq %symb_SymbNode* %146, null
	br i1 %147, label %L.56, label %L.55
L.56:
	%148 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%149 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%150 = getelementptr %symb_SymbNode, %symb_SymbNode* %149, i32 0, i32 4
	store %symb_SymbNode* %148, %symb_SymbNode** %150
	br label %L.55
L.55:
	%151 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%152 = icmp ne %symb_SymbNode* %151, null
	br i1 %152, label %L.58, label %L.57
L.58:
	%153 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%154 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%155 = getelementptr %symb_SymbNode, %symb_SymbNode* %154, i32 0, i32 0
	store %symb_SymbNode* %153, %symb_SymbNode** %155
	br label %L.57
L.57:
	%156 = load %symb_SymbNode*, %symb_SymbNode** %rs
	store %symb_SymbNode* %156, %symb_SymbNode** %prevs
	br label %L.47
L.49:
	call void @lex_Error(i8 21)
	br label %L.47
L.47:
	%157 = load i8, i8* %tok
	%158 = icmp ne i8 %157, 5
	br i1 %158, label %L.46, label %L.59
L.59:
	%159 = call i8 @lex_Next()
	store i8 %159, i8* %tok
	br label %L.45
L.46:
	%160 = call i8 @lex_Expect(i8 37)
	store i8 %160, i8* %tok
	%161 = load %symb_SymbNode*, %symb_SymbNode** %procs
	%162 = getelementptr %symb_SymbNode, %symb_SymbNode* %161, i32 0, i32 16
	store i8 1, i8* %162
	br label %L.29
L.28:
	br label %L.29
L.29:
	br label %return
return:
	ret void
}
define internal %symb_SymbNode* @type_Name() nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%s = alloca %symb_SymbNode*
	%0 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%1 = call %symb_SymbNode* @symb_Find([0 x i8]* %0)
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.1, label %L.2
L.1:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 13
	%6 = load i8, i8* %5
	%7 = icmp ne i8 %6, 2
	br label %L.2
L.2:
	%8 = phi i1 [ false, %L.0 ], [ %7, %L.1 ]
	br i1 %8, label %L.4, label %L.3
L.4:
	call void @lex_Error(i8 29)
	br label %L.3
L.3:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %9, %symb_SymbNode** %rv.0
	br label %return
return:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %10
}
define internal %type_TypeNode* @type_Ref() nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%bs = alloca %symb_SymbNode*
	%0 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = call i8 @lex_Next()
	store i8 %1, i8* %tok
	%2 = load i8, i8* %tok
	%3 = icmp eq i8 %2, 46
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%5 = call i8 @symb_IsAnon([0 x i8]* %4)
	%6 = icmp ne i8 %5, 0
	br i1 %6, label %L.5, label %L.6
L.5:
	%7 = call %type_TypeNode* @type_New(i8 8)
	store %type_TypeNode* %7, %type_TypeNode** %t
	%8 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%9 = call %symb_SymbNode* @symb_New(i8 5, [0 x i8]* %8, i8 2)
	store %symb_SymbNode* %9, %symb_SymbNode** %bs
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = load %symb_SymbNode*, %symb_SymbNode** %bs
	call void @type_DefProc(%symb_SymbNode* %11, %symb_SymbNode* null)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 4
	store %symb_SymbNode* %12, %symb_SymbNode** %14
	br label %L.4
L.6:
	%15 = call %type_TypeNode* @type_New(i8 5)
	store %type_TypeNode* %15, %type_TypeNode** %t
	%16 = call %symb_SymbNode* @type_Name()
	store %symb_SymbNode* %16, %symb_SymbNode** %bs
	%17 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%18 = icmp ne %symb_SymbNode* %17, null
	br i1 %18, label %L.8, label %L.9
L.8:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = icmp ne %type_TypeNode* %21, null
	br i1 %22, label %L.11, label %L.12
L.11:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 1
	%25 = load %type_TypeNode*, %type_TypeNode** %24
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = getelementptr %type_TypeNode, %type_TypeNode* %26, i32 0, i32 0
	store %type_TypeNode* %25, %type_TypeNode** %27
	br label %L.10
L.12:
	%28 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_FwdAdd(%symb_SymbNode* %28, %type_TypeNode* %29)
	br label %L.10
L.10:
	br label %L.7
L.9:
	%30 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%31 = call %symb_SymbNode* @symb_New(i8 2, [0 x i8]* %30, i8 0)
	store %symb_SymbNode* %31, %symb_SymbNode** %bs
	%32 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_FwdAdd(%symb_SymbNode* %32, %type_TypeNode* %33)
	br label %L.7
L.7:
	%34 = call i8 @lex_Next()
	store i8 %34, i8* %tok
	br label %L.4
L.4:
	br label %L.1
L.3:
	%35 = call %type_TypeNode* @type_New(i8 5)
	store %type_TypeNode* %35, %type_TypeNode** %t
	%36 = load i8, i8* %tok
	%37 = call %type_TypeNode* @type_Def(i8 %36, %type_TypeNode* null)
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = getelementptr %type_TypeNode, %type_TypeNode* %38, i32 0, i32 0
	store %type_TypeNode* %37, %type_TypeNode** %39
	br label %L.1
L.1:
	%40 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %40, %type_TypeNode** %rv.0
	br label %return
return:
	%41 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %41
}
define internal %type_TypeNode* @type_Def(i8 zeroext %tok$, %type_TypeNode* %bt$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%tok = alloca i8
	store i8 %tok$, i8* %tok
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%vlo = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = load i8, i8* %tok
	%2 = zext i8 %1 to i32
	switch i32 %2, label %L.1 [
		i32 42, label %L.3
		i32 18, label %L.3
		i32 19, label %L.3
		i32 46, label %L.4
		i32 7, label %L.5
		i32 36, label %L.6
		i32 40, label %L.7
		i32 38, label %L.8
		i32 8, label %L.9
	]
L.3:
	%3 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %3, %ast_AstNode** %vlo
	%4 = load %ast_AstNode*, %ast_AstNode** %vlo
	%5 = call %type_TypeNode* @type_Range(%ast_AstNode* %4)
	store %type_TypeNode* %5, %type_TypeNode** %t
	br label %L.2
L.4:
	%6 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%7 = call %symb_SymbNode* @symb_Find([0 x i8]* %6)
	store %symb_SymbNode* %7, %symb_SymbNode** %s
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = icmp ne %symb_SymbNode* %8, null
	br i1 %9, label %L.11, label %L.12
L.11:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 13
	%12 = load i8, i8* %11
	%13 = zext i8 %12 to i32
	switch i32 %13, label %L.13 [
		i32 2, label %L.15
		i32 1, label %L.16
	]
L.15:
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = load i8, i8* %tok
	%16 = icmp eq i8 %15, 2
	br i1 %16, label %L.18, label %L.19
L.18:
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 1
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = call %ast_AstNode* @expr_EnumConst(%type_TypeNode* %20)
	store %ast_AstNode* %21, %ast_AstNode** %vlo
	%22 = call i8 @lex_Next()
	store i8 %22, i8* %tok
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 1
	%25 = load %type_TypeNode*, %type_TypeNode** %24
	%26 = call %ast_AstNode* @expr_EnumConst(%type_TypeNode* %25)
	%27 = call %type_TypeNode* @type_Range(%ast_AstNode* %26)
	store %type_TypeNode* %27, %type_TypeNode** %t
	br label %L.17
L.19:
	%28 = load %symb_SymbNode*, %symb_SymbNode** %s
	%29 = getelementptr %symb_SymbNode, %symb_SymbNode* %28, i32 0, i32 1
	%30 = load %type_TypeNode*, %type_TypeNode** %29
	store %type_TypeNode* %30, %type_TypeNode** %t
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = icmp eq %type_TypeNode* %31, null
	br i1 %32, label %L.21, label %L.20
L.21:
	call void @lex_Error(i8 28)
	%33 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %33, %type_TypeNode** %t
	br label %L.20
L.20:
	br label %L.17
L.17:
	br label %L.14
L.16:
	%34 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %34, %ast_AstNode** %vlo
	%35 = load %ast_AstNode*, %ast_AstNode** %vlo
	%36 = call %type_TypeNode* @type_Range(%ast_AstNode* %35)
	store %type_TypeNode* %36, %type_TypeNode** %t
	br label %L.14
L.13:
	%37 = call i8 @lex_Next()
	store i8 %37, i8* %tok
	call void @lex_Error(i8 29)
	br label %L.14
L.14:
	br label %L.10
L.12:
	%38 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %38)
	br label %L.10
L.10:
	br label %L.2
L.5:
	%39 = call %type_TypeNode* @type_Ref()
	store %type_TypeNode* %39, %type_TypeNode** %t
	br label %L.2
L.6:
	%40 = load %type_TypeNode*, %type_TypeNode** %bt
	%41 = call %type_TypeNode* @type_Enum(%type_TypeNode* %40)
	store %type_TypeNode* %41, %type_TypeNode** %t
	br label %L.2
L.7:
	%42 = load %type_TypeNode*, %type_TypeNode** %bt
	%43 = call %type_TypeNode* @type_Record(%type_TypeNode* %42)
	store %type_TypeNode* %43, %type_TypeNode** %t
	br label %L.2
L.8:
	%44 = call %type_TypeNode* @type_Array()
	store %type_TypeNode* %44, %type_TypeNode** %t
	br label %L.2
L.9:
	%tree = alloca %ast_AstNode*
	%45 = call i8 @lex_Next()
	store i8 %45, i8* %tok
	%46 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* null)
	store %ast_AstNode* %46, %ast_AstNode** %tree
	%47 = load %ast_AstNode*, %ast_AstNode** %tree
	%48 = icmp ne %ast_AstNode* %47, null
	br i1 %48, label %L.23, label %L.22
L.23:
	%49 = load %ast_AstNode*, %ast_AstNode** %tree
	%50 = getelementptr %ast_AstNode, %ast_AstNode* %49, i32 0, i32 0
	%51 = load i8, i8* %50
	%52 = icmp eq i8 %51, 11
	br i1 %52, label %L.25, label %L.26
L.25:
	%53 = load %ast_AstNode*, %ast_AstNode** %tree
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 8
	%55 = load %type_TypeNode*, %type_TypeNode** %54
	store %type_TypeNode* %55, %type_TypeNode** %t
	br label %L.24
L.26:
	%56 = load %ast_AstNode*, %ast_AstNode** %tree
	%57 = getelementptr %ast_AstNode, %ast_AstNode* %56, i32 0, i32 8
	%58 = load %type_TypeNode*, %type_TypeNode** %57
	%59 = getelementptr %type_TypeNode, %type_TypeNode* %58, i32 0, i32 0
	%60 = load %type_TypeNode*, %type_TypeNode** %59
	store %type_TypeNode* %60, %type_TypeNode** %t
	br label %L.24
L.24:
	br label %L.22
L.22:
	br label %L.2
L.1:
	call void @lex_Error(i8 30)
	br label %L.2
L.2:
	%61 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %61, %type_TypeNode** %rv.0
	br label %return
return:
	%62 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %62
}
define internal %type_TypeNode* @type_NewBuiltin(i8 zeroext %kind$, [0 x i8]* %name$, i32 %size$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%kind = alloca i8
	store i8 %kind$, i8* %kind
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%size = alloca i32
	store i32 %size$, i32* %size
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%levelsave = alloca i8
	%0 = load i8, i8* %kind
	%1 = call %type_TypeNode* @type_New(i8 %0)
	store %type_TypeNode* %1, %type_TypeNode** %t
	%2 = load i32, i32* %size
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 10
	store i32 %2, i32* %4
	%5 = load i8, i8* %kind
	%6 = zext i8 %5 to i32
	switch i32 %6, label %L.1 [
		i32 1, label %L.3
		i32 2, label %L.3
		i32 3, label %L.4
		i32 4, label %L.5
	]
L.3:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 8
	store i64 0, i64* %8
	%9 = load i32, i32* %size
	%10 = zext i32 %9 to i64
	%11 = sub i64 %10, 1
	%12 = shl i64 1, %11
	%13 = sub i64 %12, 1
	%14 = shl i64 %13, 1
	%15 = or i64 %14, 1
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 9
	store i64 %15, i64* %17
	br label %L.2
L.4:
	%18 = load i32, i32* %size
	%19 = zext i32 %18 to i64
	%20 = sub i64 %19, 1
	%21 = shl i64 1, %20
	%22 = sub i64 %21, 1
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	%24 = getelementptr %type_TypeNode, %type_TypeNode* %23, i32 0, i32 9
	store i64 %22, i64* %24
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 9
	%27 = load i64, i64* %26
	%28 = xor i64 %27, -1
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 8
	store i64 %28, i64* %30
	br label %L.2
L.5:
	%31 = load i32, i32* %size
	%32 = icmp eq i32 %31, 32
	br i1 %32, label %L.7, label %L.8
L.7:
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 9
	store i64 5183643170566569984, i64* %34
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 8
	store i64 4039728865751334912, i64* %36
	br label %L.6
L.8:
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 9
	store i64 9218868437227405311, i64* %38
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 8
	store i64 4503599627370496, i64* %40
	br label %L.6
L.6:
	br label %L.2
L.1:
	br label %L.2
L.2:
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %41)
	%42 = load i8, i8* @symb_level
	store i8 %42, i8* %levelsave
	store i8 0, i8* @symb_level
	%43 = load [0 x i8]*, [0 x i8]** %name
	%44 = call %symb_SymbNode* @symb_New(i8 2, [0 x i8]* %43, i8 0)
	store %symb_SymbNode* %44, %symb_SymbNode** %s
	%45 = load i8, i8* %levelsave
	store i8 %45, i8* @symb_level
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = load %symb_SymbNode*, %symb_SymbNode** %s
	%48 = getelementptr %symb_SymbNode, %symb_SymbNode* %47, i32 0, i32 1
	store %type_TypeNode* %46, %type_TypeNode** %48
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = getelementptr %type_TypeNode, %type_TypeNode* %50, i32 0, i32 3
	store %symb_SymbNode* %49, %symb_SymbNode** %51
	%52 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %52, %type_TypeNode** %rv.0
	br label %return
return:
	%53 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %53
}
@S.598 = private unnamed_addr constant [1 x i8] c"\00"
@S.599 = private unnamed_addr constant [4 x i8] c"msb\00"
@S.600 = private unnamed_addr constant [4 x i8] c"lsb\00"
@type_bitorderstr = internal constant [3 x [0 x i8]*] [ [0 x i8]* bitcast( [1 x i8]* getelementptr( [1 x i8], [1 x i8]* @S.598 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.599 )  to [0 x i8]* ), [0 x i8]* bitcast( [4 x i8]* getelementptr( [4 x i8], [4 x i8]* @S.600 )  to [0 x i8]* ) ], align 4
@S.602 = private unnamed_addr constant [1 x i8] c"\00"
@S.603 = private unnamed_addr constant [3 x i8] c"be\00"
@S.604 = private unnamed_addr constant [3 x i8] c"le\00"
@type_memorderstr = internal constant [3 x [0 x i8]*] [ [0 x i8]* bitcast( [1 x i8]* getelementptr( [1 x i8], [1 x i8]* @S.602 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.603 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.604 )  to [0 x i8]* ) ], align 4
@S.606 = private unnamed_addr constant [3 x i8] c"RW\00"
@S.607 = private unnamed_addr constant [3 x i8] c"RO\00"
@S.608 = private unnamed_addr constant [3 x i8] c"WO\00"
@type_accessstr = internal constant [3 x [0 x i8]*] [ [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.606 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.607 )  to [0 x i8]* ), [0 x i8]* bitcast( [3 x i8]* getelementptr( [3 x i8], [3 x i8]* @S.608 )  to [0 x i8]* ) ], align 4
@type_blanks = internal constant [65 x i8] c"                                                                \00", align 1
@S.610 = private unnamed_addr constant [3 x i8] c"..\00"
@S.611 = private unnamed_addr constant [7 x i8] c"_ufix(\00"
@S.612 = private unnamed_addr constant [3 x i8] c"..\00"
@S.613 = private unnamed_addr constant [7 x i8] c"_sfix(\00"
@S.614 = private unnamed_addr constant [3 x i8] c", \00"
@S.615 = private unnamed_addr constant [8 x i8] c"<float>\00"
@S.616 = private unnamed_addr constant [3 x i8] c"{\0A\00"
@S.617 = private unnamed_addr constant [3 x i8] c" (\00"
@S.618 = private unnamed_addr constant [3 x i8] c"0x\00"
@S.619 = private unnamed_addr constant [4 x i8] c"): \00"
@S.620 = private unnamed_addr constant [3 x i8] c"..\00"
@S.621 = private unnamed_addr constant [3 x i8] c"@_\00"
@S.622 = private unnamed_addr constant [10 x i8] c"*UNKNOWN*\00"
@S.623 = private unnamed_addr constant [7 x i8] c" size=\00"
@S.624 = private unnamed_addr constant [7 x i8] c" attr=\00"
@S.625 = private unnamed_addr constant [8 x i8] c"unalgn \00"
@S.626 = private unnamed_addr constant [8 x i8] c"packed \00"
@S.627 = private unnamed_addr constant [8 x i8] c"noepad \00"
@S.628 = private unnamed_addr constant [8 x i8] c"nofpad \00"
@S.629 = private unnamed_addr constant [13 x i8] c"\0A\09methods:\0A\09\00"
@S.630 = private unnamed_addr constant [4 x i8] c"???\00"
define internal void @type_Dump2(%type_TypeNode* %t$, i32 %indent$, i8 zeroext %full$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%indent = alloca i32
	store i32 %indent$, i32* %indent
	%full = alloca i8
	store i8 %full$, i8* %full
	%s = alloca %symb_SymbNode*
	%offs = alloca i16
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 3
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	%5 = icmp ne %symb_SymbNode* %4, null
	br i1 %5, label %L.4, label %L.5
L.4:
	%6 = load i8, i8* %full
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.5
L.5:
	%9 = phi i1 [ false, %L.2 ], [ %8, %L.4 ]
	br i1 %9, label %L.7, label %L.8
L.7:
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 3
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 23
	%14 = getelementptr [0 x i8], [0 x i8]* %13
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %15)
	br label %L.6
L.8:
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 16
	%18 = load i8, i8* %17
	%19 = zext i8 %18 to i32
	switch i32 %19, label %L.9 [
		i32 2, label %L.11
		i32 3, label %L.12
		i32 1, label %L.13
		i32 4, label %L.14
		i32 7, label %L.15
		i32 6, label %L.16
		i32 5, label %L.17
		i32 8, label %L.18
	]
L.11:
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 13
	%22 = load i16, i16* %21
	%23 = icmp eq i16 %22, 0
	br i1 %23, label %L.20, label %L.21
L.20:
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 8
	%26 = load i64, i64* %25
	call void @sys_fildes_uint64(i32 2, i64 %26)
	%27 = getelementptr [3 x i8], [3 x i8]* @S.610
	%28 = bitcast [3 x i8]* %27 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %28)
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 9
	%31 = load i64, i64* %30
	call void @sys_fildes_uint64(i32 2, i64 %31)
	br label %L.19
L.21:
	%32 = getelementptr [7 x i8], [7 x i8]* @S.611
	%33 = bitcast [7 x i8]* %32 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %33)
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 11
	%36 = load i32, i32* %35
	call void @sys_fildes_uint(i32 2, i32 %36)
	call void @sys_fildes_chr(i32 2, i8 44)
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 13
	%39 = load i16, i16* %38
	%40 = sext i16 %39 to i32
	call void @sys_fildes_int(i32 2, i32 %40)
	call void @sys_fildes_chr(i32 2, i8 41)
	br label %L.19
L.19:
	br label %L.10
L.12:
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	%42 = getelementptr %type_TypeNode, %type_TypeNode* %41, i32 0, i32 13
	%43 = load i16, i16* %42
	%44 = icmp eq i16 %43, 0
	br i1 %44, label %L.23, label %L.24
L.23:
	%45 = load %type_TypeNode*, %type_TypeNode** %t
	%46 = getelementptr %type_TypeNode, %type_TypeNode* %45, i32 0, i32 8
	%47 = load i64, i64* %46
	call void @sys_fildes_int64(i32 2, i64 %47)
	%48 = getelementptr [3 x i8], [3 x i8]* @S.612
	%49 = bitcast [3 x i8]* %48 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %49)
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = getelementptr %type_TypeNode, %type_TypeNode* %50, i32 0, i32 9
	%52 = load i64, i64* %51
	call void @sys_fildes_int64(i32 2, i64 %52)
	br label %L.22
L.24:
	%53 = getelementptr [7 x i8], [7 x i8]* @S.613
	%54 = bitcast [7 x i8]* %53 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %54)
	%55 = load %type_TypeNode*, %type_TypeNode** %t
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 11
	%57 = load i32, i32* %56
	call void @sys_fildes_uint(i32 2, i32 %57)
	call void @sys_fildes_chr(i32 2, i8 44)
	%58 = load %type_TypeNode*, %type_TypeNode** %t
	%59 = getelementptr %type_TypeNode, %type_TypeNode* %58, i32 0, i32 13
	%60 = load i16, i16* %59
	%61 = sext i16 %60 to i32
	call void @sys_fildes_int(i32 2, i32 %61)
	call void @sys_fildes_chr(i32 2, i8 41)
	br label %L.22
L.22:
	br label %L.10
L.13:
	call void @sys_fildes_chr(i32 2, i8 40)
	%62 = load %type_TypeNode*, %type_TypeNode** %t
	%63 = getelementptr %type_TypeNode, %type_TypeNode* %62, i32 0, i32 4
	%64 = load %symb_SymbNode*, %symb_SymbNode** %63
	store %symb_SymbNode* %64, %symb_SymbNode** %s
	br label %L.25
L.25:
	%65 = load %symb_SymbNode*, %symb_SymbNode** %s
	%66 = icmp ne %symb_SymbNode* %65, null
	%67 = xor i1 %66, true
	br i1 %67, label %L.26, label %L.27
L.27:
	%68 = load %symb_SymbNode*, %symb_SymbNode** %s
	%69 = getelementptr %symb_SymbNode, %symb_SymbNode* %68, i32 0, i32 23
	%70 = getelementptr [0 x i8], [0 x i8]* %69
	%71 = bitcast [0 x i8]* %70 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %71)
	call void @sys_fildes_chr(i32 2, i8 61)
	%72 = load %symb_SymbNode*, %symb_SymbNode** %s
	%73 = getelementptr %symb_SymbNode, %symb_SymbNode* %72, i32 0, i32 9
	%74 = load %ast_AstNode*, %ast_AstNode** %73
	%75 = getelementptr %ast_AstNode, %ast_AstNode* %74, i32 0, i32 10
	%76 = load i64, i64* %75
	%77 = trunc i64 %76 to i32
	call void @sys_fildes_uint32(i32 2, i32 %77)
	%78 = load %symb_SymbNode*, %symb_SymbNode** %s
	%79 = getelementptr %symb_SymbNode, %symb_SymbNode* %78, i32 0, i32 0
	%80 = load %symb_SymbNode*, %symb_SymbNode** %79
	store %symb_SymbNode* %80, %symb_SymbNode** %s
	%81 = load %symb_SymbNode*, %symb_SymbNode** %s
	%82 = icmp eq %symb_SymbNode* %81, null
	br i1 %82, label %L.26, label %L.28
L.28:
	%83 = getelementptr [3 x i8], [3 x i8]* @S.614
	%84 = bitcast [3 x i8]* %83 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %84)
	br label %L.25
L.26:
	call void @sys_fildes_chr(i32 2, i8 41)
	br label %L.10
L.14:
	%85 = getelementptr [8 x i8], [8 x i8]* @S.615
	%86 = bitcast [8 x i8]* %85 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %86)
	br label %L.10
L.15:
	%87 = getelementptr [3 x i8], [3 x i8]* @S.616
	%88 = bitcast [3 x i8]* %87 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %88)
	store i16 0, i16* %offs
	%89 = load %type_TypeNode*, %type_TypeNode** %t
	%90 = getelementptr %type_TypeNode, %type_TypeNode* %89, i32 0, i32 4
	%91 = load %symb_SymbNode*, %symb_SymbNode** %90
	store %symb_SymbNode* %91, %symb_SymbNode** %s
	br label %L.29
L.29:
	%92 = load %symb_SymbNode*, %symb_SymbNode** %s
	%93 = icmp ne %symb_SymbNode* %92, null
	%94 = xor i1 %93, true
	br i1 %94, label %L.30, label %L.31
L.31:
	%95 = bitcast [65 x i8]* @type_blanks to [0 x i8]*
	%96 = load i32, i32* %indent
	%97 = add i32 %96, 2
	call void @sys_fildes_strn(i32 2, [0 x i8]* %95, i32 %97)
	%98 = load %symb_SymbNode*, %symb_SymbNode** %s
	%99 = getelementptr %symb_SymbNode, %symb_SymbNode* %98, i32 0, i32 23
	%100 = getelementptr [0 x i8], [0 x i8]* %99
	%101 = bitcast [0 x i8]* %100 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %101)
	%102 = getelementptr [3 x i8], [3 x i8]* @S.617
	%103 = bitcast [3 x i8]* %102 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %103)
	%104 = load %type_TypeNode*, %type_TypeNode** %t
	%105 = getelementptr %type_TypeNode, %type_TypeNode* %104, i32 0, i32 24
	%106 = load i8, i8* %105
	%107 = icmp ne i8 %106, 0
	br i1 %107, label %L.33, label %L.34
L.33:
	%108 = load i16, i16* %offs
	call void @sys_fildes_uint16(i32 2, i16 %108)
	br label %L.32
L.34:
	%109 = getelementptr [3 x i8], [3 x i8]* @S.618
	%110 = bitcast [3 x i8]* %109 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %110)
	%111 = load i16, i16* %offs
	call void @sys_fildes_hex16(i32 2, i16 %111)
	br label %L.32
L.32:
	%112 = getelementptr [4 x i8], [4 x i8]* @S.619
	%113 = bitcast [4 x i8]* %112 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %113)
	%114 = load %symb_SymbNode*, %symb_SymbNode** %s
	%115 = getelementptr %symb_SymbNode, %symb_SymbNode* %114, i32 0, i32 1
	%116 = load %type_TypeNode*, %type_TypeNode** %115
	%117 = load i32, i32* %indent
	%118 = add i32 %117, 2
	%119 = load i8, i8* %full
	call void @type_Dump2(%type_TypeNode* %116, i32 %118, i8 %119)
	%120 = load %type_TypeNode*, %type_TypeNode** %t
	%121 = getelementptr %type_TypeNode, %type_TypeNode* %120, i32 0, i32 24
	%122 = load i8, i8* %121
	%123 = icmp ne i8 %122, 0
	br i1 %123, label %L.36, label %L.37
L.36:
	%124 = load i16, i16* %offs
	%125 = load %symb_SymbNode*, %symb_SymbNode** %s
	%126 = getelementptr %symb_SymbNode, %symb_SymbNode* %125, i32 0, i32 1
	%127 = load %type_TypeNode*, %type_TypeNode** %126
	%128 = getelementptr %type_TypeNode, %type_TypeNode* %127, i32 0, i32 10
	%129 = load i32, i32* %128
	%130 = trunc i32 %129 to i16
	%131 = add i16 %124, %130
	store i16 %131, i16* %offs
	br label %L.35
L.37:
	%132 = load i16, i16* %offs
	%133 = load %symb_SymbNode*, %symb_SymbNode** %s
	%134 = getelementptr %symb_SymbNode, %symb_SymbNode* %133, i32 0, i32 1
	%135 = load %type_TypeNode*, %type_TypeNode** %134
	%136 = getelementptr %type_TypeNode, %type_TypeNode* %135, i32 0, i32 11
	%137 = load i32, i32* %136
	%138 = udiv i32 %137, 8
	%139 = trunc i32 %138 to i16
	%140 = add i16 %132, %139
	store i16 %140, i16* %offs
	br label %L.35
L.35:
	call void @sys_fildes_nl(i32 2)
	%141 = load %symb_SymbNode*, %symb_SymbNode** %s
	%142 = getelementptr %symb_SymbNode, %symb_SymbNode* %141, i32 0, i32 0
	%143 = load %symb_SymbNode*, %symb_SymbNode** %142
	store %symb_SymbNode* %143, %symb_SymbNode** %s
	br label %L.29
L.30:
	call void @sys_fildes_chr(i32 2, i8 125)
	br label %L.10
L.16:
	call void @sys_fildes_chr(i32 2, i8 91)
	%144 = load %type_TypeNode*, %type_TypeNode** %t
	%145 = getelementptr %type_TypeNode, %type_TypeNode* %144, i32 0, i32 28
	%146 = load i8, i8* %145
	%147 = icmp ne i8 %146, 0
	br i1 %147, label %L.39, label %L.40
L.39:
	call void @sys_fildes_chr(i32 2, i8 42)
	br label %L.38
L.40:
	%148 = load %type_TypeNode*, %type_TypeNode** %t
	%149 = getelementptr %type_TypeNode, %type_TypeNode* %148, i32 0, i32 8
	%150 = load i64, i64* %149
	%151 = trunc i64 %150 to i32
	call void @sys_fildes_uint32(i32 2, i32 %151)
	%152 = getelementptr [3 x i8], [3 x i8]* @S.620
	%153 = bitcast [3 x i8]* %152 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %153)
	%154 = load %type_TypeNode*, %type_TypeNode** %t
	%155 = getelementptr %type_TypeNode, %type_TypeNode* %154, i32 0, i32 9
	%156 = load i64, i64* %155
	%157 = trunc i64 %156 to i32
	call void @sys_fildes_uint32(i32 2, i32 %157)
	call void @sys_fildes_chr(i32 2, i8 58)
	%158 = load %type_TypeNode*, %type_TypeNode** %t
	%159 = getelementptr %type_TypeNode, %type_TypeNode* %158, i32 0, i32 2
	%160 = load %type_TypeNode*, %type_TypeNode** %159
	%161 = load i32, i32* %indent
	%162 = load i8, i8* %full
	call void @type_Dump2(%type_TypeNode* %160, i32 %161, i8 %162)
	br label %L.38
L.38:
	call void @sys_fildes_chr(i32 2, i8 93)
	%163 = load %type_TypeNode*, %type_TypeNode** %t
	%164 = getelementptr %type_TypeNode, %type_TypeNode* %163, i32 0, i32 0
	%165 = load %type_TypeNode*, %type_TypeNode** %164
	%166 = load i32, i32* %indent
	%167 = load i8, i8* %full
	call void @type_Dump2(%type_TypeNode* %165, i32 %166, i8 %167)
	br label %L.10
L.17:
	call void @sys_fildes_chr(i32 2, i8 64)
	%168 = load %type_TypeNode*, %type_TypeNode** %t
	%169 = getelementptr %type_TypeNode, %type_TypeNode* %168, i32 0, i32 0
	%170 = load %type_TypeNode*, %type_TypeNode** %169
	%171 = icmp ne %type_TypeNode* %170, null
	br i1 %171, label %L.41, label %L.42
L.41:
	%172 = load %type_TypeNode*, %type_TypeNode** %t
	%173 = getelementptr %type_TypeNode, %type_TypeNode* %172, i32 0, i32 0
	%174 = load %type_TypeNode*, %type_TypeNode** %173
	%175 = getelementptr %type_TypeNode, %type_TypeNode* %174, i32 0, i32 3
	%176 = load %symb_SymbNode*, %symb_SymbNode** %175
	%177 = icmp ne %symb_SymbNode* %176, null
	br label %L.42
L.42:
	%178 = phi i1 [ false, %L.17 ], [ %177, %L.41 ]
	br i1 %178, label %L.44, label %L.45
L.44:
	%179 = load %type_TypeNode*, %type_TypeNode** %t
	%180 = getelementptr %type_TypeNode, %type_TypeNode* %179, i32 0, i32 0
	%181 = load %type_TypeNode*, %type_TypeNode** %180
	%182 = getelementptr %type_TypeNode, %type_TypeNode* %181, i32 0, i32 3
	%183 = load %symb_SymbNode*, %symb_SymbNode** %182
	%184 = getelementptr %symb_SymbNode, %symb_SymbNode* %183, i32 0, i32 23
	%185 = getelementptr [0 x i8], [0 x i8]* %184
	%186 = bitcast [0 x i8]* %185 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %186)
	br label %L.43
L.45:
	%187 = load %type_TypeNode*, %type_TypeNode** %t
	%188 = getelementptr %type_TypeNode, %type_TypeNode* %187, i32 0, i32 0
	%189 = load %type_TypeNode*, %type_TypeNode** %188
	%190 = load i32, i32* %indent
	%191 = load i8, i8* %full
	call void @type_Dump2(%type_TypeNode* %189, i32 %190, i8 %191)
	br label %L.43
L.43:
	br label %L.10
L.18:
	%192 = getelementptr [3 x i8], [3 x i8]* @S.621
	%193 = bitcast [3 x i8]* %192 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %193)
	%194 = load %type_TypeNode*, %type_TypeNode** %t
	%195 = getelementptr %type_TypeNode, %type_TypeNode* %194, i32 0, i32 4
	%196 = load %symb_SymbNode*, %symb_SymbNode** %195
	%197 = getelementptr %symb_SymbNode, %symb_SymbNode* %196, i32 0, i32 3
	%198 = load %symb_SymbNode*, %symb_SymbNode** %197
	call void @symb_DumpFormals(%symb_SymbNode* %198)
	%199 = load %type_TypeNode*, %type_TypeNode** %t
	%200 = getelementptr %type_TypeNode, %type_TypeNode* %199, i32 0, i32 4
	%201 = load %symb_SymbNode*, %symb_SymbNode** %200
	%202 = getelementptr %symb_SymbNode, %symb_SymbNode* %201, i32 0, i32 4
	%203 = load %symb_SymbNode*, %symb_SymbNode** %202
	call void @symb_DumpReturns(%symb_SymbNode* %203)
	br label %L.10
L.9:
	%204 = getelementptr [10 x i8], [10 x i8]* @S.622
	%205 = bitcast [10 x i8]* %204 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %205)
	br label %L.10
L.10:
	%206 = getelementptr [7 x i8], [7 x i8]* @S.623
	%207 = bitcast [7 x i8]* %206 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %207)
	%208 = load %type_TypeNode*, %type_TypeNode** %t
	%209 = getelementptr %type_TypeNode, %type_TypeNode* %208, i32 0, i32 10
	%210 = load i32, i32* %209
	call void @sys_fildes_uint(i32 2, i32 %210)
	call void @sys_fildes_chr(i32 2, i8 58)
	%211 = load %type_TypeNode*, %type_TypeNode** %t
	%212 = getelementptr %type_TypeNode, %type_TypeNode* %211, i32 0, i32 11
	%213 = load i32, i32* %212
	call void @sys_fildes_uint(i32 2, i32 %213)
	call void @sys_fildes_chr(i32 2, i8 58)
	%214 = load %type_TypeNode*, %type_TypeNode** %t
	%215 = getelementptr %type_TypeNode, %type_TypeNode* %214, i32 0, i32 12
	%216 = load i32, i32* %215
	call void @sys_fildes_uint(i32 2, i32 %216)
	%217 = getelementptr [7 x i8], [7 x i8]* @S.624
	%218 = bitcast [7 x i8]* %217 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %218)
	%219 = load %type_TypeNode*, %type_TypeNode** %t
	%220 = getelementptr %type_TypeNode, %type_TypeNode* %219, i32 0, i32 25
	%221 = load i8, i8* %220
	%222 = icmp ne i8 %221, 0
	br i1 %222, label %L.47, label %L.46
L.47:
	%223 = getelementptr [8 x i8], [8 x i8]* @S.625
	%224 = bitcast [8 x i8]* %223 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %224)
	br label %L.46
L.46:
	%225 = load %type_TypeNode*, %type_TypeNode** %t
	%226 = getelementptr %type_TypeNode, %type_TypeNode* %225, i32 0, i32 24
	%227 = load i8, i8* %226
	%228 = icmp ne i8 %227, 0
	br i1 %228, label %L.49, label %L.48
L.49:
	%229 = getelementptr [8 x i8], [8 x i8]* @S.626
	%230 = bitcast [8 x i8]* %229 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %230)
	br label %L.48
L.48:
	%231 = load %type_TypeNode*, %type_TypeNode** %t
	%232 = getelementptr %type_TypeNode, %type_TypeNode* %231, i32 0, i32 26
	%233 = load i8, i8* %232
	%234 = icmp ne i8 %233, 0
	br i1 %234, label %L.51, label %L.50
L.51:
	%235 = getelementptr [8 x i8], [8 x i8]* @S.627
	%236 = bitcast [8 x i8]* %235 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %236)
	br label %L.50
L.50:
	%237 = load %type_TypeNode*, %type_TypeNode** %t
	%238 = getelementptr %type_TypeNode, %type_TypeNode* %237, i32 0, i32 27
	%239 = load i8, i8* %238
	%240 = icmp ne i8 %239, 0
	br i1 %240, label %L.53, label %L.52
L.53:
	%241 = getelementptr [8 x i8], [8 x i8]* @S.628
	%242 = bitcast [8 x i8]* %241 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %242)
	br label %L.52
L.52:
	call void @sys_fildes_chr(i32 2, i8 58)
	%243 = load %type_TypeNode*, %type_TypeNode** %t
	%244 = getelementptr %type_TypeNode, %type_TypeNode* %243, i32 0, i32 18
	%245 = load i8, i8* %244
	%246 = load %target_ModelT*, %target_ModelT** @target_Target
	%247 = getelementptr %target_ModelT, %target_ModelT* %246, i32 0, i32 0
	%248 = load i8, i8* %247
	%249 = icmp ne i8 %245, %248
	br i1 %249, label %L.55, label %L.54
L.55:
	%250 = load %type_TypeNode*, %type_TypeNode** %t
	%251 = getelementptr %type_TypeNode, %type_TypeNode* %250, i32 0, i32 18
	%252 = load i8, i8* %251
	%253 = zext i8 %252 to i32
	%254 = getelementptr [3 x [0 x i8]*], [3 x [0 x i8]*]* @type_memorderstr, i32 0, i32 %253
	%255 = load [0 x i8]*, [0 x i8]** %254
	%256 = bitcast [0 x i8]* %255 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %256)
	br label %L.54
L.54:
	call void @sys_fildes_chr(i32 2, i8 58)
	%257 = load %type_TypeNode*, %type_TypeNode** %t
	%258 = getelementptr %type_TypeNode, %type_TypeNode* %257, i32 0, i32 17
	%259 = load i8, i8* %258
	%260 = load %target_ModelT*, %target_ModelT** @target_Target
	%261 = getelementptr %target_ModelT, %target_ModelT* %260, i32 0, i32 1
	%262 = load i8, i8* %261
	%263 = icmp ne i8 %259, %262
	br i1 %263, label %L.57, label %L.56
L.57:
	%264 = load %type_TypeNode*, %type_TypeNode** %t
	%265 = getelementptr %type_TypeNode, %type_TypeNode* %264, i32 0, i32 17
	%266 = load i8, i8* %265
	%267 = zext i8 %266 to i32
	%268 = getelementptr [3 x [0 x i8]*], [3 x [0 x i8]*]* @type_bitorderstr, i32 0, i32 %267
	%269 = load [0 x i8]*, [0 x i8]** %268
	%270 = bitcast [0 x i8]* %269 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %270)
	br label %L.56
L.56:
	call void @sys_fildes_chr(i32 2, i8 58)
	%271 = load %type_TypeNode*, %type_TypeNode** %t
	%272 = getelementptr %type_TypeNode, %type_TypeNode* %271, i32 0, i32 19
	%273 = load i8, i8* %272
	%274 = icmp ne i8 %273, 0
	br i1 %274, label %L.59, label %L.58
L.59:
	%275 = load %type_TypeNode*, %type_TypeNode** %t
	%276 = getelementptr %type_TypeNode, %type_TypeNode* %275, i32 0, i32 19
	%277 = load i8, i8* %276
	%278 = zext i8 %277 to i32
	%279 = getelementptr [3 x [0 x i8]*], [3 x [0 x i8]*]* @type_accessstr, i32 0, i32 %278
	%280 = load [0 x i8]*, [0 x i8]** %279
	%281 = bitcast [0 x i8]* %280 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %281)
	br label %L.58
L.58:
	call void @sys_fildes_chr(i32 2, i8 58)
	%282 = load %type_TypeNode*, %type_TypeNode** %t
	%283 = getelementptr %type_TypeNode, %type_TypeNode* %282, i32 0, i32 20
	%284 = load i8, i8* %283
	%285 = zext i8 %284 to i32
	%286 = and i32 %285, 1
	%287 = trunc i32 %286 to i8
	%288 = icmp ne i8 %287, 0
	br i1 %288, label %L.61, label %L.60
L.61:
	call void @sys_fildes_chr(i32 2, i8 73)
	br label %L.60
L.60:
	%289 = load %type_TypeNode*, %type_TypeNode** %t
	%290 = getelementptr %type_TypeNode, %type_TypeNode* %289, i32 0, i32 20
	%291 = load i8, i8* %290
	%292 = zext i8 %291 to i32
	%293 = lshr i32 %292, 1
	%294 = and i32 %293, 1
	%295 = trunc i32 %294 to i8
	%296 = icmp ne i8 %295, 0
	br i1 %296, label %L.63, label %L.62
L.63:
	call void @sys_fildes_chr(i32 2, i8 79)
	br label %L.62
L.62:
	%297 = load %type_TypeNode*, %type_TypeNode** %t
	%298 = getelementptr %type_TypeNode, %type_TypeNode* %297, i32 0, i32 30
	store i8 1, i8* %298
	%299 = load %type_TypeNode*, %type_TypeNode** %t
	%300 = getelementptr %type_TypeNode, %type_TypeNode* %299, i32 0, i32 5
	%301 = load %symb_SymbNode*, %symb_SymbNode** %300
	%302 = icmp ne %symb_SymbNode* %301, null
	br i1 %302, label %L.65, label %L.64
L.65:
	%303 = load %type_TypeNode*, %type_TypeNode** %t
	%304 = getelementptr %type_TypeNode, %type_TypeNode* %303, i32 0, i32 5
	%305 = load %symb_SymbNode*, %symb_SymbNode** %304
	store %symb_SymbNode* %305, %symb_SymbNode** %s
	%306 = getelementptr [13 x i8], [13 x i8]* @S.629
	%307 = bitcast [13 x i8]* %306 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %307)
	br label %L.66
L.66:
	%308 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpS(%symb_SymbNode* %308)
	%309 = load %symb_SymbNode*, %symb_SymbNode** %s
	%310 = getelementptr %symb_SymbNode, %symb_SymbNode* %309, i32 0, i32 0
	%311 = load %symb_SymbNode*, %symb_SymbNode** %310
	store %symb_SymbNode* %311, %symb_SymbNode** %s
	%312 = load %symb_SymbNode*, %symb_SymbNode** %s
	%313 = icmp eq %symb_SymbNode* %312, null
	br i1 %313, label %L.67, label %L.68
L.68:
	call void @sys_fildes_chr(i32 2, i8 9)
	br label %L.66
L.67:
	br label %L.64
L.64:
	br label %L.6
L.6:
	br label %L.1
L.3:
	%314 = getelementptr [4 x i8], [4 x i8]* @S.630
	%315 = bitcast [4 x i8]* %314 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %315)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @type_DumpT(%type_TypeNode* %t$, i8 zeroext %full$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%full = alloca i8
	store i8 %full$, i8* %full
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = load i8, i8* %full
	call void @type_Dump2(%type_TypeNode* %0, i32 0, i8 %1)
	br label %return
return:
	ret void
}
@expr_skiplist = internal constant [4 x i8] [ i8 37, i8 41, i8 4, i8 0 ], align 1
@expr_proplist = internal constant [7 x i8] [ i8 95, i8 96, i8 97, i8 99, i8 90, i8 100, i8 0 ], align 1
define internal %ast_AstNode* @expr_TypeProperty(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [7 x i8]* @expr_proplist to [0 x i8]*
	%4 = call i8 @lex_Keyword([0 x i8]* %3)
	store i8 %4, i8* %tok
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = icmp ne %type_TypeNode* %5, null
	br i1 %6, label %L.5, label %L.6
L.5:
	%7 = load i8, i8* %tok
	%8 = zext i8 %7 to i32
	switch i32 %8, label %L.7 [
		i32 97, label %L.9
		i32 99, label %L.10
		i32 90, label %L.11
		i32 95, label %L.12
		i32 96, label %L.13
		i32 100, label %L.14
	]
L.9:
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 10
	%11 = load i32, i32* %10
	%12 = zext i32 %11 to i64
	%13 = call %ast_AstNode* @ast_ConstW(i64 %12)
	store %ast_AstNode* %13, %ast_AstNode** %tree
	br label %L.8
L.10:
	%14 = load %type_TypeNode*, %type_TypeNode** %t
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 11
	%16 = load i32, i32* %15
	%17 = zext i32 %16 to i64
	%18 = udiv i64 %17, 8
	%19 = call %ast_AstNode* @ast_ConstW(i64 %18)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.8
L.11:
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 12
	%22 = load i32, i32* %21
	%23 = zext i32 %22 to i64
	%24 = udiv i64 %23, 8
	%25 = call %ast_AstNode* @ast_ConstW(i64 %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	br label %L.8
L.12:
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = getelementptr %type_TypeNode, %type_TypeNode* %26, i32 0, i32 16
	%28 = load i8, i8* %27
	%29 = icmp eq i8 %28, 6
	br i1 %29, label %L.16, label %L.17
L.16:
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 28
	%32 = load i8, i8* %31
	%33 = icmp ne i8 %32, 0
	%34 = xor i1 %33, true
	br i1 %34, label %L.19, label %L.20
L.19:
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 0
	%37 = load %type_TypeNode*, %type_TypeNode** %36
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = getelementptr %type_TypeNode, %type_TypeNode* %38, i32 0, i32 8
	%40 = load i64, i64* %39
	%41 = call %ast_AstNode* @ast_Const(%type_TypeNode* %37, i64 %40)
	store %ast_AstNode* %41, %ast_AstNode** %tree
	br label %L.18
L.20:
	call void @lex_Error(i8 90)
	br label %L.18
L.18:
	br label %L.15
L.17:
	%42 = load %type_TypeNode*, %type_TypeNode** %t
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	%44 = getelementptr %type_TypeNode, %type_TypeNode* %43, i32 0, i32 8
	%45 = load i64, i64* %44
	%46 = call %ast_AstNode* @ast_Const(%type_TypeNode* %42, i64 %45)
	store %ast_AstNode* %46, %ast_AstNode** %tree
	br label %L.15
L.15:
	br label %L.8
L.13:
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = getelementptr %type_TypeNode, %type_TypeNode* %47, i32 0, i32 16
	%49 = load i8, i8* %48
	%50 = icmp eq i8 %49, 6
	br i1 %50, label %L.22, label %L.23
L.22:
	%51 = load %type_TypeNode*, %type_TypeNode** %t
	%52 = getelementptr %type_TypeNode, %type_TypeNode* %51, i32 0, i32 28
	%53 = load i8, i8* %52
	%54 = icmp ne i8 %53, 0
	%55 = xor i1 %54, true
	br i1 %55, label %L.25, label %L.26
L.25:
	%56 = load %type_TypeNode*, %type_TypeNode** %t
	%57 = getelementptr %type_TypeNode, %type_TypeNode* %56, i32 0, i32 0
	%58 = load %type_TypeNode*, %type_TypeNode** %57
	%59 = load %type_TypeNode*, %type_TypeNode** %t
	%60 = getelementptr %type_TypeNode, %type_TypeNode* %59, i32 0, i32 9
	%61 = load i64, i64* %60
	%62 = call %ast_AstNode* @ast_Const(%type_TypeNode* %58, i64 %61)
	store %ast_AstNode* %62, %ast_AstNode** %tree
	br label %L.24
L.26:
	call void @lex_Error(i8 90)
	br label %L.24
L.24:
	br label %L.21
L.23:
	%63 = load %type_TypeNode*, %type_TypeNode** %t
	%64 = load %type_TypeNode*, %type_TypeNode** %t
	%65 = getelementptr %type_TypeNode, %type_TypeNode* %64, i32 0, i32 9
	%66 = load i64, i64* %65
	%67 = call %ast_AstNode* @ast_Const(%type_TypeNode* %63, i64 %66)
	store %ast_AstNode* %67, %ast_AstNode** %tree
	br label %L.21
L.21:
	br label %L.8
L.14:
	%68 = load %type_TypeNode*, %type_TypeNode** %t
	%69 = getelementptr %type_TypeNode, %type_TypeNode* %68, i32 0, i32 16
	%70 = load i8, i8* %69
	%71 = icmp eq i8 %70, 6
	br i1 %71, label %L.27, label %L.28
L.27:
	%72 = load %type_TypeNode*, %type_TypeNode** %t
	%73 = getelementptr %type_TypeNode, %type_TypeNode* %72, i32 0, i32 28
	%74 = load i8, i8* %73
	%75 = icmp ne i8 %74, 0
	%76 = xor i1 %75, true
	br label %L.28
L.28:
	%77 = phi i1 [ false, %L.14 ], [ %76, %L.27 ]
	br i1 %77, label %L.30, label %L.31
L.30:
	%78 = load %type_TypeNode*, %type_TypeNode** %t
	%79 = call i32 @type_TypeNode_Span(%type_TypeNode* %78)
	%80 = zext i32 %79 to i64
	%81 = call %ast_AstNode* @ast_ConstW(i64 %80)
	store %ast_AstNode* %81, %ast_AstNode** %tree
	br label %L.29
L.31:
	call void @lex_Error(i8 90)
	br label %L.29
L.29:
	br label %L.8
L.7:
	call void @lex_Error(i8 56)
	br label %L.8
L.8:
	br label %L.4
L.6:
	%82 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %82, %ast_AstNode** %tree
	br label %L.4
L.4:
	br label %L.1
L.3:
	call void @lex_Error(i8 56)
	br label %L.1
L.1:
	%83 = call i8 @lex_Next()
	store i8 %83, i8* %tok
	%84 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %84, %ast_AstNode** %rv.0
	br label %return
return:
	%85 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %85
}
@expr_strid = internal global i64 0, align 8
define internal %ast_AstNode* @expr_NewString([0 x i8]* %s$, i32 %n$, i8 zeroext %nul$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%n = alloca i32
	store i32 %n$, i32* %n
	%nul = alloca i8
	store i8 %nul$, i8* %nul
	%tree = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%0 = call %type_TypeNode* @type_New(i8 6)
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 0
	store %type_TypeNode* %1, %type_TypeNode** %3
	%4 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 2
	store %type_TypeNode* %4, %type_TypeNode** %6
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 8
	store i64 0, i64* %8
	%9 = load i32, i32* %n
	%10 = zext i32 %9 to i64
	%11 = sub i64 %10, 1
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 9
	store i64 %11, i64* %13
	%14 = load %type_TypeNode*, %type_TypeNode** %t
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 0
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 12
	%18 = load i32, i32* %17
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 12
	store i32 %18, i32* %20
	%21 = load %target_ModelT*, %target_ModelT** @target_Target
	%22 = getelementptr %target_ModelT, %target_ModelT* %21, i32 0, i32 0
	%23 = load i8, i8* %22
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 18
	store i8 %23, i8* %25
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = call %ast_AstNode* @ast_New(i8 8, %type_TypeNode* %26)
	store %ast_AstNode* %27, %ast_AstNode** %tree
	%28 = load [0 x i8]*, [0 x i8]** %s
	%29 = bitcast [0 x i8]* %28 to [0 x i8]*
	%30 = load i32, i32* %n
	%31 = load i8, i8* %nul
	%32 = icmp ne i8 %31, 0
	%33 = xor i1 %32, true
	%34 = zext i1 %33 to i8
	%35 = call %symb_SymbNode* @symb_NewString([0 x i8]* %29, i32 %30, i8 %34)
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 9
	store %symb_SymbNode* %35, %symb_SymbNode** %37
	%38 = load i64, i64* @expr_strid
	%39 = add i64 %38, 1
	store i64 %39, i64* @expr_strid
	%40 = load i64, i64* @expr_strid
	%41 = load %ast_AstNode*, %ast_AstNode** %tree
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 10
	store i64 %40, i64* %42
	%43 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %43, %ast_AstNode** %rv.0
	br label %return
return:
	%44 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %44
}
define internal %ast_AstNode* @expr_StringCat(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%t = alloca %type_TypeNode*
	%nl = alloca i32
	%nr = alloca i32
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 9
	%5 = load i64, i64* %4
	%6 = add i64 %5, 1
	%7 = trunc i64 %6 to i32
	store i32 %7, i32* %nl
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 9
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 19
	%12 = load i8, i8* %11
	%13 = icmp ne i8 %12, 0
	%14 = xor i1 %13, true
	br i1 %14, label %L.2, label %L.1
L.2:
	%15 = load i32, i32* %nl
	%16 = sub i32 %15, 1
	store i32 %16, i32* %nl
	br label %L.1
L.1:
	%17 = load i16, i16* @lex_StringLen
	%18 = zext i16 %17 to i32
	store i32 %18, i32* %nr
	%19 = load i32, i32* %nl
	%20 = zext i32 %19 to i64
	%21 = load i32, i32* %nr
	%22 = zext i32 %21 to i64
	%23 = add i64 %20, %22
	%24 = sub i64 %23, 1
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 9
	store i64 %24, i64* %26
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 9
	%29 = load %symb_SymbNode*, %symb_SymbNode** %28
	%30 = getelementptr %symb_SymbNode, %symb_SymbNode* %29, i32 0, i32 23
	%31 = getelementptr [0 x i8], [0 x i8]* %30
	%32 = bitcast [0 x i8]* %31 to [0 x i8]*
	%33 = load i32, i32* %nl
	%34 = bitcast [4096 x i8]* @lex_StringBuf to [0 x i8]*
	%35 = load i32, i32* %nr
	%36 = load i8, i8* @lex_StringNul
	%37 = icmp ne i8 %36, 0
	%38 = xor i1 %37, true
	%39 = zext i1 %38 to i8
	%40 = call %symb_SymbNode* @symb_NewString2([0 x i8]* %32, i32 %33, [0 x i8]* %34, i32 %35, i8 %39)
	%41 = load %ast_AstNode*, %ast_AstNode** %tree
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 9
	store %symb_SymbNode* %40, %symb_SymbNode** %42
	%43 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %43, %ast_AstNode** %rv.0
	br label %return
return:
	%44 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %44
}
define internal %ast_AstNode* @expr_String() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = bitcast [4096 x i8]* @lex_StringBuf to [0 x i8]*
	%1 = load i16, i16* @lex_StringLen
	%2 = zext i16 %1 to i32
	%3 = load i8, i8* @lex_StringNul
	%4 = call %ast_AstNode* @expr_NewString([0 x i8]* %0, i32 %2, i8 %3)
	store %ast_AstNode* %4, %ast_AstNode** %tree
	br label %L.1
L.1:
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load i8, i8* %tok
	%7 = icmp ne i8 %6, 45
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = call %ast_AstNode* @expr_StringCat(%ast_AstNode* %8)
	store %ast_AstNode* %9, %ast_AstNode** %tree
	br label %L.1
L.2:
	%10 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %10, %ast_AstNode** %rv.0
	br label %return
return:
	%11 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %11
}
define internal %ast_AstNode* @expr_EnumConst(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%s = alloca %symb_SymbNode*
	%tree = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 4
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %s
	br label %L.1
L.1:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 23
	%8 = getelementptr [0 x i8], [0 x i8]* %7
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	%10 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%11 = call i8 @zstr_eq([0 x i8]* %9, [0 x i8]* %10, i32 255)
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.5, label %L.4
L.5:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = getelementptr %symb_SymbNode, %symb_SymbNode* %13, i32 0, i32 9
	%15 = load %ast_AstNode*, %ast_AstNode** %14
	%16 = call %ast_AstNode* @ast_Dup(%ast_AstNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s
	%18 = getelementptr %symb_SymbNode, %symb_SymbNode* %17, i32 0, i32 9
	%19 = load %ast_AstNode*, %ast_AstNode** %18
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 8
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 11
	%23 = load i32, i32* %22
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 7
	store i32 %23, i32* %25
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %26, %ast_AstNode** %rv.0
	br label %return
L.4:
	%27 = load %symb_SymbNode*, %symb_SymbNode** %s
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 0
	%29 = load %symb_SymbNode*, %symb_SymbNode** %28
	store %symb_SymbNode* %29, %symb_SymbNode** %s
	br label %L.1
L.2:
	%30 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %30)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
return:
	%31 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %31
}
define internal zeroext i8 @expr_IsAggregateConst(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 8, label %L.3
		i32 7, label %L.3
		i32 6, label %L.3
		i32 12, label %L.4
		i32 16, label %L.5
		i32 17, label %L.5
		i32 9, label %L.6
	]
L.3:
	store i8 1, i8* %rv.0
	br label %return
L.4:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	%9 = icmp eq i8 %8, 8
	br i1 %9, label %L.8, label %L.9
L.8:
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 9
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 13
	%14 = load i8, i8* %13
	%15 = icmp eq i8 %14, 5
	%16 = zext i1 %15 to i8
	store i8 %16, i8* %rv.0
	br label %return
L.9:
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 9
	%19 = load %symb_SymbNode*, %symb_SymbNode** %18
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 13
	%21 = load i8, i8* %20
	%22 = icmp eq i8 %21, 1
	%23 = zext i1 %22 to i8
	store i8 %23, i8* %rv.0
	br label %return
L.7:
	br label %L.2
L.5:
	%24 = load %ast_AstNode*, %ast_AstNode** %node
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 11
	%26 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %25, i32 0, i32 0
	%27 = load %ast_AstNode*, %ast_AstNode** %26
	%28 = call i8 @expr_IsAggregateConst(%ast_AstNode* %27)
	store i8 %28, i8* %rv.0
	br label %return
L.6:
	store i16 0, i16* %i
	br label %L.10
L.10:
	%29 = load i16, i16* %i
	%30 = load %ast_AstNode*, %ast_AstNode** %node
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 2
	%32 = load i16, i16* %31
	%33 = icmp ult i16 %29, %32
	%34 = xor i1 %33, true
	br i1 %34, label %L.11, label %L.12
L.12:
	%35 = load %ast_AstNode*, %ast_AstNode** %node
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 11
	%37 = load i16, i16* %i
	%38 = zext i16 %37 to i32
	%39 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %36, i32 0, i32 %38
	%40 = load %ast_AstNode*, %ast_AstNode** %39
	%41 = call i8 @expr_IsAggregateConst(%ast_AstNode* %40)
	%42 = icmp ne i8 %41, 0
	%43 = xor i1 %42, true
	br i1 %43, label %L.14, label %L.13
L.14:
	store i8 0, i8* %rv.0
	br label %return
L.13:
	%44 = load i16, i16* %i
	%45 = add i16 %44, 1
	store i16 %45, i16* %i
	br label %L.10
L.11:
	store i8 1, i8* %rv.0
	br label %return
L.1:
	br label %L.2
L.2:
	store i8 0, i8* %rv.0
	br label %return
return:
	%46 = load i8, i8* %rv.0
	ret i8 %46
}
define internal %ast_AstNode* @expr_CompositeNamedConstant(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%cs = alloca %symb_SymbNode*
	%ct = alloca %type_TypeNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%1 = call %symb_SymbNode* @symb_Find([0 x i8]* %0)
	store %symb_SymbNode* %1, %symb_SymbNode** %cs
	%2 = load %symb_SymbNode*, %symb_SymbNode** %cs
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %cs
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 13
	%6 = load i8, i8* %5
	%7 = icmp eq i8 %6, 1
	br i1 %7, label %L.5, label %L.6
L.5:
	%8 = load %symb_SymbNode*, %symb_SymbNode** %cs
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 1
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	store %type_TypeNode* %10, %type_TypeNode** %ct
	%11 = load %type_TypeNode*, %type_TypeNode** %ct
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = call i8 @type_Compat(%type_TypeNode* %11, %type_TypeNode* %12)
	%14 = icmp ne i8 %13, 0
	br i1 %14, label %L.8, label %L.9
L.8:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %cs
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 9
	%17 = load %ast_AstNode*, %ast_AstNode** %16
	store %ast_AstNode* %17, %ast_AstNode** %tree
	%18 = load %type_TypeNode*, %type_TypeNode** %ct
	%19 = load %ast_AstNode*, %ast_AstNode** %tree
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 8
	store %type_TypeNode* %18, %type_TypeNode** %20
	br label %L.7
L.9:
	call void @lex_Error(i8 55)
	br label %L.7
L.7:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	br label %L.4
L.6:
	%22 = load %symb_SymbNode*, %symb_SymbNode** %cs
	%23 = getelementptr %symb_SymbNode, %symb_SymbNode* %22, i32 0, i32 13
	%24 = load i8, i8* %23
	%25 = icmp eq i8 %24, 2
	br i1 %25, label %L.11, label %L.12
L.11:
	%26 = call i8 @lex_Next()
	store i8 %26, i8* %tok
	%27 = load i8, i8* %tok
	%28 = icmp eq i8 %27, 36
	br i1 %28, label %L.14, label %L.13
L.14:
	%29 = call i8 @lex_Next()
	store i8 %29, i8* %tok
	%30 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %30, %ast_AstNode** %tree
	%31 = call i8 @lex_Expect(i8 37)
	%32 = load %ast_AstNode*, %ast_AstNode** %tree
	%33 = load %symb_SymbNode*, %symb_SymbNode** %cs
	%34 = getelementptr %symb_SymbNode, %symb_SymbNode* %33, i32 0, i32 1
	%35 = load %type_TypeNode*, %type_TypeNode** %34
	%36 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %32, %type_TypeNode* %35)
	store %ast_AstNode* %36, %ast_AstNode** %tree
	br label %L.13
L.13:
	br label %L.10
L.12:
	call void @lex_Error(i8 75)
	%37 = call i8 @lex_Next()
	store i8 %37, i8* %tok
	br label %L.10
L.10:
	br label %L.4
L.4:
	br label %L.1
L.3:
	%38 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %38)
	br label %L.1
L.1:
	%39 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %39, %ast_AstNode** %rv.0
	br label %return
return:
	%40 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %40
}
@S.633 = private unnamed_addr constant [26 x i8] c"No CLIST for packed array\00"
define internal %ast_AstNode* @expr_ArrayPack(%type_TypeNode* %t$, %ast_AstNode* %intree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%intree = alloca %ast_AstNode*
	store %ast_AstNode* %intree$, %ast_AstNode** %intree
	%offs = alloca i32
	%tsize = alloca i32
	%fsize = alloca i32
	%i = alloca i16
	%tree = alloca %ast_AstNode*
	%vpart = alloca %ast_AstNode*
	%node = alloca %ast_AstNode*
	%cpart = alloca i64
	%mask = alloca i64
	%bt = alloca %type_TypeNode*
	store %ast_AstNode* null, %ast_AstNode** %vpart
	store i64 0, i64* %cpart
	%0 = load %ast_AstNode*, %ast_AstNode** %intree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp ne i8 %2, 9
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = getelementptr [26 x i8], [26 x i8]* @S.633
	%5 = bitcast [26 x i8]* %4 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %5)
	%6 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %6, %ast_AstNode** %rv.0
	br label %return
L.1:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 11
	%9 = load i32, i32* %8
	store i32 %9, i32* %tsize
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 0
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	store %type_TypeNode* %12, %type_TypeNode** %bt
	%13 = load %type_TypeNode*, %type_TypeNode** %bt
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 10
	%15 = load i32, i32* %14
	store i32 %15, i32* %fsize
	%16 = load i32, i32* %fsize
	%17 = zext i32 %16 to i64
	%18 = shl i64 1, %17
	%19 = sub i64 %18, 1
	store i64 %19, i64* %mask
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 17
	%22 = load i8, i8* %21
	%23 = icmp eq i8 %22, 1
	br i1 %23, label %L.4, label %L.5
L.4:
	%24 = load i32, i32* %tsize
	store i32 %24, i32* %offs
	br label %L.3
L.5:
	store i32 0, i32* %offs
	br label %L.3
L.3:
	store i16 0, i16* %i
	br label %L.6
L.6:
	%25 = load i16, i16* %i
	%26 = load %ast_AstNode*, %ast_AstNode** %intree
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 2
	%28 = load i16, i16* %27
	%29 = icmp ult i16 %25, %28
	%30 = xor i1 %29, true
	br i1 %30, label %L.7, label %L.8
L.8:
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 17
	%33 = load i8, i8* %32
	%34 = icmp eq i8 %33, 1
	br i1 %34, label %L.10, label %L.9
L.10:
	%35 = load i32, i32* %offs
	%36 = load i32, i32* %fsize
	%37 = sub i32 %35, %36
	store i32 %37, i32* %offs
	br label %L.9
L.9:
	%38 = load %ast_AstNode*, %ast_AstNode** %intree
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 11
	%40 = load i16, i16* %i
	%41 = zext i16 %40 to i32
	%42 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %39, i32 0, i32 %41
	%43 = load %ast_AstNode*, %ast_AstNode** %42
	store %ast_AstNode* %43, %ast_AstNode** %node
	%44 = load %ast_AstNode*, %ast_AstNode** %node
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 0
	%46 = load i8, i8* %45
	%47 = icmp eq i8 %46, 6
	br i1 %47, label %L.12, label %L.13
L.12:
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	%49 = load i32, i32* %fsize
	call void @ast_CheckConstTruncate(%ast_AstNode* %48, i32 %49)
	%50 = load i64, i64* %cpart
	%51 = load %ast_AstNode*, %ast_AstNode** %node
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 10
	%53 = load i64, i64* %52
	%54 = load i64, i64* %mask
	%55 = and i64 %53, %54
	%56 = load i32, i32* %offs
	%57 = zext i32 %56 to i64
	%58 = shl i64 %55, %57
	%59 = or i64 %50, %58
	store i64 %59, i64* %cpart
	br label %L.11
L.13:
	%60 = load %ast_AstNode*, %ast_AstNode** %node
	%61 = load i32, i32* %tsize
	%62 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %60, i32 %61, i8 0)
	store %ast_AstNode* %62, %ast_AstNode** %node
	%63 = load %type_TypeNode*, %type_TypeNode** %bt
	%64 = load %ast_AstNode*, %ast_AstNode** %node
	%65 = load i32, i32* %offs
	%66 = zext i32 %65 to i64
	%67 = call %ast_AstNode* @ast_ConstW(i64 %66)
	%68 = call %ast_AstNode* @ast_New2(i8 63, %type_TypeNode* %63, %ast_AstNode* %64, %ast_AstNode* %67)
	store %ast_AstNode* %68, %ast_AstNode** %node
	%69 = load %ast_AstNode*, %ast_AstNode** %vpart
	%70 = icmp eq %ast_AstNode* %69, null
	br i1 %70, label %L.15, label %L.16
L.15:
	%71 = load %ast_AstNode*, %ast_AstNode** %node
	store %ast_AstNode* %71, %ast_AstNode** %vpart
	br label %L.14
L.16:
	%72 = load %type_TypeNode*, %type_TypeNode** %bt
	%73 = load %ast_AstNode*, %ast_AstNode** %vpart
	%74 = load %ast_AstNode*, %ast_AstNode** %node
	%75 = call %ast_AstNode* @ast_New2(i8 52, %type_TypeNode* %72, %ast_AstNode* %73, %ast_AstNode* %74)
	store %ast_AstNode* %75, %ast_AstNode** %vpart
	br label %L.14
L.14:
	br label %L.11
L.11:
	%76 = load %type_TypeNode*, %type_TypeNode** %t
	%77 = getelementptr %type_TypeNode, %type_TypeNode* %76, i32 0, i32 17
	%78 = load i8, i8* %77
	%79 = icmp ne i8 %78, 1
	br i1 %79, label %L.18, label %L.17
L.18:
	%80 = load i32, i32* %offs
	%81 = load i32, i32* %fsize
	%82 = add i32 %80, %81
	store i32 %82, i32* %offs
	br label %L.17
L.17:
	%83 = load i16, i16* %i
	%84 = add i16 %83, 1
	store i16 %84, i16* %i
	br label %L.6
L.7:
	%85 = load i64, i64* %cpart
	%86 = call %ast_AstNode* @ast_ConstW(i64 %85)
	%87 = load i32, i32* %tsize
	%88 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %86, i32 %87, i8 0)
	store %ast_AstNode* %88, %ast_AstNode** %tree
	%89 = load %ast_AstNode*, %ast_AstNode** %vpart
	%90 = icmp ne %ast_AstNode* %89, null
	br i1 %90, label %L.20, label %L.19
L.20:
	%91 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%92 = load %ast_AstNode*, %ast_AstNode** %tree
	%93 = load %ast_AstNode*, %ast_AstNode** %vpart
	%94 = call %ast_AstNode* @ast_New2(i8 52, %type_TypeNode* %91, %ast_AstNode* %92, %ast_AstNode* %93)
	store %ast_AstNode* %94, %ast_AstNode** %tree
	br label %L.19
L.19:
	%95 = load %type_TypeNode*, %type_TypeNode** %t
	%96 = load %ast_AstNode*, %ast_AstNode** %tree
	%97 = getelementptr %ast_AstNode, %ast_AstNode* %96, i32 0, i32 8
	store %type_TypeNode* %95, %type_TypeNode** %97
	%98 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %98, %ast_AstNode** %rv.0
	br label %return
return:
	%99 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %99
}
define internal %type_TypeNode* @expr_ArrayFixFlex(%type_TypeNode* %bt$, i32 %len$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%len = alloca i32
	store i32 %len$, i32* %len
	%t = alloca %type_TypeNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %bt
	%1 = call %type_TypeNode* @type_Clone(%type_TypeNode* %0)
	store %type_TypeNode* %1, %type_TypeNode** %t
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 28
	store i8 0, i8* %3
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 8
	store i64 0, i64* %5
	%6 = load i32, i32* %len
	%7 = zext i32 %6 to i64
	%8 = sub i64 %7, 1
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 9
	store i64 %8, i64* %10
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 10
	store i32 0, i32* %12
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 11
	store i32 0, i32* %14
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 31
	store i8 0, i8* %16
	%17 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %17)
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %18, %type_TypeNode** %rv.0
	br label %return
return:
	%19 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %19
}
define internal %ast_AstNode* @expr_ArrayConst(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%i = alloca i16
	%j = alloca i16
	%m = alloca i16
	%n = alloca i16
	%tok = alloca i8
	%once = alloca i8
	%isnamed = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	store i8 0, i8* %isnamed
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = call %ast_AstNode* @ast_New(i8 9, %type_TypeNode* %3)
	store %ast_AstNode* %4, %ast_AstNode** %tree
	%5 = load i64, i64* @expr_strid
	%6 = add i64 %5, 1
	store i64 %6, i64* @expr_strid
	%7 = load i64, i64* @expr_strid
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 10
	store i64 %7, i64* %9
	store i8 0, i8* %once
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 28
	%12 = load i8, i8* %11
	%13 = icmp ne i8 %12, 0
	br i1 %13, label %L.5, label %L.6
L.5:
	store i16 0, i16* %n
	br label %L.4
L.6:
	%14 = load %type_TypeNode*, %type_TypeNode** %t
	%15 = call i32 @type_TypeNode_Span(%type_TypeNode* %14)
	%16 = trunc i32 %15 to i16
	store i16 %16, i16* %n
	br label %L.4
L.4:
	store i16 0, i16* %i
	store i16 0, i16* %m
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	br label %L.7
L.7:
	%18 = load i16, i16* %i
	store i16 %18, i16* %j
	%19 = load i8, i8* %tok
	%20 = icmp eq i8 %19, 38
	br i1 %20, label %L.10, label %L.9
L.10:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	%22 = load %type_TypeNode*, %type_TypeNode** %t
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 2
	%24 = load %type_TypeNode*, %type_TypeNode** %23
	%25 = call i64 @expr_ConstValue(%type_TypeNode* %24)
	%26 = trunc i64 %25 to i16
	%27 = load %type_TypeNode*, %type_TypeNode** %t
	%28 = getelementptr %type_TypeNode, %type_TypeNode* %27, i32 0, i32 8
	%29 = load i64, i64* %28
	%30 = trunc i64 %29 to i16
	%31 = sub i16 %26, %30
	store i16 %31, i16* %i
	%32 = load i16, i16* %i
	store i16 %32, i16* %j
	%33 = load i8, i8* @lex_Token
	%34 = icmp eq i8 %33, 6
	br i1 %34, label %L.12, label %L.11
L.12:
	%35 = call i8 @lex_Next()
	store i8 %35, i8* %tok
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 2
	%38 = load %type_TypeNode*, %type_TypeNode** %37
	%39 = call i64 @expr_ConstValue(%type_TypeNode* %38)
	%40 = trunc i64 %39 to i16
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	%42 = getelementptr %type_TypeNode, %type_TypeNode* %41, i32 0, i32 8
	%43 = load i64, i64* %42
	%44 = trunc i64 %43 to i16
	%45 = sub i16 %40, %44
	store i16 %45, i16* %j
	br label %L.11
L.11:
	%46 = call i8 @lex_Expect(i8 39)
	store i8 %46, i8* %tok
	%47 = call i8 @lex_Expect(i8 9)
	store i8 %47, i8* %tok
	br label %L.9
L.9:
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	%49 = getelementptr %type_TypeNode, %type_TypeNode* %48, i32 0, i32 0
	%50 = load %type_TypeNode*, %type_TypeNode** %49
	%51 = call %ast_AstNode* @expr_Const(%type_TypeNode* %50)
	store %ast_AstNode* %51, %ast_AstNode** %stree
	%52 = load i16, i16* %n
	%53 = icmp eq i16 %52, 0
	br i1 %53, label %L.16, label %L.15
L.15:
	%54 = load i16, i16* %j
	%55 = load i16, i16* %n
	%56 = icmp ult i16 %54, %55
	br label %L.16
L.16:
	%57 = phi i1 [ true, %L.9 ], [ %56, %L.15 ]
	br i1 %57, label %L.13, label %L.14
L.13:
	%58 = load i16, i16* %i
	%59 = load i16, i16* %j
	%60 = icmp ule i16 %58, %59
	br label %L.14
L.14:
	%61 = phi i1 [ false, %L.16 ], [ %60, %L.13 ]
	br i1 %61, label %L.18, label %L.19
L.18:
	br label %L.20
L.20:
	%62 = load i16, i16* %i
	%63 = load i16, i16* %j
	%64 = icmp ule i16 %62, %63
	%65 = xor i1 %64, true
	br i1 %65, label %L.21, label %L.22
L.22:
	%66 = load %ast_AstNode*, %ast_AstNode** %tree
	%67 = load i16, i16* %i
	%68 = load %ast_AstNode*, %ast_AstNode** %stree
	%69 = call %ast_AstNode* @ast_ChildIndexed(%ast_AstNode* %66, i16 %67, %ast_AstNode* %68)
	store %ast_AstNode* %69, %ast_AstNode** %tree
	%70 = load i16, i16* %i
	%71 = add i16 %70, 1
	store i16 %71, i16* %i
	br label %L.20
L.21:
	%72 = load i16, i16* %i
	%73 = load i16, i16* %m
	%74 = icmp ugt i16 %72, %73
	br i1 %74, label %L.24, label %L.23
L.24:
	%75 = load i16, i16* %i
	store i16 %75, i16* %m
	br label %L.23
L.23:
	br label %L.17
L.19:
	%76 = load i8, i8* %once
	%77 = icmp ne i8 %76, 0
	%78 = xor i1 %77, true
	br i1 %78, label %L.26, label %L.25
L.26:
	store i8 1, i8* %once
	call void @lex_Error(i8 73)
	br label %L.25
L.25:
	br label %L.17
L.17:
	%79 = load i8, i8* @lex_Token
	store i8 %79, i8* %tok
	%80 = load i8, i8* %tok
	%81 = icmp eq i8 %80, 41
	br i1 %81, label %L.8, label %L.27
L.27:
	%82 = call i8 @lex_Expect(i8 5)
	store i8 %82, i8* %tok
	%83 = load i8, i8* %tok
	%84 = icmp eq i8 %83, 41
	br i1 %84, label %L.8, label %L.28
L.28:
	br label %L.7
L.8:
	%85 = call i8 @lex_Expect(i8 41)
	store i8 %85, i8* %tok
	%86 = load %type_TypeNode*, %type_TypeNode** %t
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 28
	%88 = load i8, i8* %87
	%89 = icmp ne i8 %88, 0
	br i1 %89, label %L.30, label %L.29
L.30:
	%90 = load %type_TypeNode*, %type_TypeNode** %t
	%91 = load i16, i16* %m
	%92 = zext i16 %91 to i32
	%93 = call %type_TypeNode* @expr_ArrayFixFlex(%type_TypeNode* %90, i32 %92)
	store %type_TypeNode* %93, %type_TypeNode** %t
	br label %L.29
L.29:
	store i16 0, i16* %i
	br label %L.31
L.31:
	%94 = load i16, i16* %i
	%95 = load i16, i16* %m
	%96 = icmp ult i16 %94, %95
	%97 = xor i1 %96, true
	br i1 %97, label %L.32, label %L.33
L.33:
	%98 = load %ast_AstNode*, %ast_AstNode** %tree
	%99 = getelementptr %ast_AstNode, %ast_AstNode* %98, i32 0, i32 11
	%100 = load i16, i16* %i
	%101 = zext i16 %100 to i32
	%102 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %99, i32 0, i32 %101
	%103 = load %ast_AstNode*, %ast_AstNode** %102
	%104 = icmp eq %ast_AstNode* %103, null
	br i1 %104, label %L.35, label %L.34
L.35:
	%105 = load %type_TypeNode*, %type_TypeNode** %t
	%106 = getelementptr %type_TypeNode, %type_TypeNode* %105, i32 0, i32 0
	%107 = load %type_TypeNode*, %type_TypeNode** %106
	%108 = call %ast_AstNode* @ast_Const(%type_TypeNode* %107, i64 0)
	%109 = load %ast_AstNode*, %ast_AstNode** %tree
	%110 = getelementptr %ast_AstNode, %ast_AstNode* %109, i32 0, i32 11
	%111 = load i16, i16* %i
	%112 = zext i16 %111 to i32
	%113 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %110, i32 0, i32 %112
	store %ast_AstNode* %108, %ast_AstNode** %113
	br label %L.34
L.34:
	%114 = load i16, i16* %i
	%115 = add i16 %114, 1
	store i16 %115, i16* %i
	br label %L.31
L.32:
	br label %L.36
L.36:
	%116 = load i16, i16* %i
	%117 = load i16, i16* %n
	%118 = icmp ult i16 %116, %117
	%119 = xor i1 %118, true
	br i1 %119, label %L.37, label %L.38
L.38:
	%120 = load %ast_AstNode*, %ast_AstNode** %tree
	%121 = load i16, i16* %i
	%122 = load %type_TypeNode*, %type_TypeNode** %t
	%123 = getelementptr %type_TypeNode, %type_TypeNode* %122, i32 0, i32 0
	%124 = load %type_TypeNode*, %type_TypeNode** %123
	%125 = call %ast_AstNode* @ast_Const(%type_TypeNode* %124, i64 0)
	%126 = call %ast_AstNode* @ast_ChildIndexed(%ast_AstNode* %120, i16 %121, %ast_AstNode* %125)
	store %ast_AstNode* %126, %ast_AstNode** %tree
	%127 = load i16, i16* %i
	%128 = add i16 %127, 1
	store i16 %128, i16* %i
	br label %L.36
L.37:
	%129 = load %type_TypeNode*, %type_TypeNode** %t
	%130 = load %ast_AstNode*, %ast_AstNode** %tree
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 8
	store %type_TypeNode* %129, %type_TypeNode** %131
	%132 = load %type_TypeNode*, %type_TypeNode** %t
	%133 = getelementptr %type_TypeNode, %type_TypeNode* %132, i32 0, i32 24
	%134 = load i8, i8* %133
	%135 = icmp ne i8 %134, 0
	br i1 %135, label %L.40, label %L.41
L.40:
	%136 = load %type_TypeNode*, %type_TypeNode** %t
	%137 = load %ast_AstNode*, %ast_AstNode** %tree
	%138 = call %ast_AstNode* @expr_ArrayPack(%type_TypeNode* %136, %ast_AstNode* %137)
	store %ast_AstNode* %138, %ast_AstNode** %tree
	br label %L.39
L.41:
	%139 = load %ast_AstNode*, %ast_AstNode** %tree
	%140 = call i8 @expr_IsAggregateConst(%ast_AstNode* %139)
	%141 = icmp ne i8 %140, 0
	%142 = xor i1 %141, true
	br i1 %142, label %L.43, label %L.42
L.43:
	call void @lex_Error(i8 74)
	br label %L.42
L.42:
	br label %L.39
L.39:
	br label %L.1
L.3:
	%143 = load i8, i8* %tok
	%144 = icmp eq i8 %143, 45
	br i1 %144, label %L.45, label %L.46
L.45:
	%145 = call %ast_AstNode* @expr_String()
	store %ast_AstNode* %145, %ast_AstNode** %tree
	br label %L.44
L.46:
	%146 = load i8, i8* %tok
	%147 = icmp eq i8 %146, 46
	br i1 %147, label %L.48, label %L.49
L.48:
	%148 = load %type_TypeNode*, %type_TypeNode** %t
	%149 = call %ast_AstNode* @expr_CompositeNamedConstant(%type_TypeNode* %148)
	store %ast_AstNode* %149, %ast_AstNode** %tree
	store i8 1, i8* %isnamed
	br label %L.47
L.49:
	call void @lex_ErrorT(i8 20, i8 40)
	br label %L.47
L.47:
	br label %L.44
L.44:
	br label %L.1
L.1:
	%150 = load %ast_AstNode*, %ast_AstNode** %tree
	%151 = icmp ne %ast_AstNode* %150, null
	br i1 %151, label %L.52, label %L.53
L.52:
	%152 = load %ast_AstNode*, %ast_AstNode** %tree
	%153 = getelementptr %ast_AstNode, %ast_AstNode* %152, i32 0, i32 0
	%154 = load i8, i8* %153
	%155 = icmp eq i8 %154, 8
	br label %L.53
L.53:
	%156 = phi i1 [ false, %L.1 ], [ %155, %L.52 ]
	br i1 %156, label %L.50, label %L.51
L.50:
	%157 = load %type_TypeNode*, %type_TypeNode** %t
	%158 = getelementptr %type_TypeNode, %type_TypeNode* %157, i32 0, i32 28
	%159 = load i8, i8* %158
	%160 = icmp ne i8 %159, 0
	%161 = xor i1 %160, true
	br label %L.51
L.51:
	%162 = phi i1 [ false, %L.53 ], [ %161, %L.50 ]
	br i1 %162, label %L.55, label %L.54
L.55:
	%163 = load %ast_AstNode*, %ast_AstNode** %tree
	%164 = getelementptr %ast_AstNode, %ast_AstNode* %163, i32 0, i32 8
	%165 = load %type_TypeNode*, %type_TypeNode** %164
	%166 = getelementptr %type_TypeNode, %type_TypeNode* %165, i32 0, i32 9
	%167 = load i64, i64* %166
	%168 = load %type_TypeNode*, %type_TypeNode** %t
	%169 = getelementptr %type_TypeNode, %type_TypeNode* %168, i32 0, i32 9
	%170 = load i64, i64* %169
	%171 = icmp ugt i64 %167, %170
	br i1 %171, label %L.57, label %L.56
L.57:
	call void @lex_Error(i8 4)
	br label %L.56
L.56:
	%172 = load i8, i8* %isnamed
	%173 = icmp ne i8 %172, 0
	br i1 %173, label %L.59, label %L.58
L.59:
	%174 = load %ast_AstNode*, %ast_AstNode** %tree
	%175 = call %ast_AstNode* @ast_Dup(%ast_AstNode* %174)
	store %ast_AstNode* %175, %ast_AstNode** %tree
	br label %L.58
L.58:
	%176 = load %type_TypeNode*, %type_TypeNode** %t
	%177 = load %ast_AstNode*, %ast_AstNode** %tree
	%178 = getelementptr %ast_AstNode, %ast_AstNode* %177, i32 0, i32 8
	store %type_TypeNode* %176, %type_TypeNode** %178
	br label %L.54
L.54:
	%179 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %179, %ast_AstNode** %rv.0
	br label %return
return:
	%180 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %180
}
@S.634 = private unnamed_addr constant [27 x i8] c"No CLIST for packed record\00"
@S.635 = private unnamed_addr constant [33 x i8] c"Malformed LIST for packed record\00"
define internal %ast_AstNode* @expr_RecordPack(%type_TypeNode* %t$, %ast_AstNode* %intree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%intree = alloca %ast_AstNode*
	store %ast_AstNode* %intree$, %ast_AstNode** %intree
	%offs = alloca i32
	%tsize = alloca i32
	%fsize = alloca i32
	%f = alloca %symb_SymbNode*
	%i = alloca i16
	%tree = alloca %ast_AstNode*
	%vpart = alloca %ast_AstNode*
	%node = alloca %ast_AstNode*
	%cpart = alloca i64
	%mask = alloca i64
	%ft = alloca %type_TypeNode*
	store %ast_AstNode* null, %ast_AstNode** %vpart
	store i64 0, i64* %cpart
	%0 = load %ast_AstNode*, %ast_AstNode** %intree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp ne i8 %2, 9
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = getelementptr [27 x i8], [27 x i8]* @S.634
	%5 = bitcast [27 x i8]* %4 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %5)
	%6 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %6, %ast_AstNode** %rv.0
	br label %return
L.1:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 11
	%9 = load i32, i32* %8
	store i32 %9, i32* %tsize
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 4
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	store %symb_SymbNode* %12, %symb_SymbNode** %f
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 17
	%15 = load i8, i8* %14
	%16 = icmp eq i8 %15, 1
	br i1 %16, label %L.4, label %L.5
L.4:
	%17 = load i32, i32* %tsize
	store i32 %17, i32* %offs
	br label %L.3
L.5:
	store i32 0, i32* %offs
	br label %L.3
L.3:
	store i16 0, i16* %i
	br label %L.6
L.6:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %f
	%19 = icmp ne %symb_SymbNode* %18, null
	%20 = xor i1 %19, true
	br i1 %20, label %L.7, label %L.8
L.8:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %f
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 1
	%23 = load %type_TypeNode*, %type_TypeNode** %22
	%24 = icmp ne %type_TypeNode* %23, null
	br i1 %24, label %L.10, label %L.9
L.10:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %f
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 1
	%27 = load %type_TypeNode*, %type_TypeNode** %26
	store %type_TypeNode* %27, %type_TypeNode** %ft
	%28 = load %type_TypeNode*, %type_TypeNode** %ft
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 10
	%30 = load i32, i32* %29
	store i32 %30, i32* %fsize
	%31 = load i32, i32* %fsize
	%32 = zext i32 %31 to i64
	%33 = shl i64 1, %32
	%34 = sub i64 %33, 1
	store i64 %34, i64* %mask
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 17
	%37 = load i8, i8* %36
	%38 = icmp eq i8 %37, 1
	br i1 %38, label %L.12, label %L.11
L.12:
	%39 = load i32, i32* %offs
	%40 = load i32, i32* %fsize
	%41 = sub i32 %39, %40
	store i32 %41, i32* %offs
	br label %L.11
L.11:
	%42 = load i16, i16* %i
	%43 = load %ast_AstNode*, %ast_AstNode** %intree
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 2
	%45 = load i16, i16* %44
	%46 = icmp uge i16 %42, %45
	br i1 %46, label %L.14, label %L.13
L.14:
	%47 = getelementptr [33 x i8], [33 x i8]* @S.635
	%48 = bitcast [33 x i8]* %47 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %48)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.13:
	%49 = load %ast_AstNode*, %ast_AstNode** %intree
	%50 = getelementptr %ast_AstNode, %ast_AstNode* %49, i32 0, i32 11
	%51 = load i16, i16* %i
	%52 = zext i16 %51 to i32
	%53 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %50, i32 0, i32 %52
	%54 = load %ast_AstNode*, %ast_AstNode** %53
	store %ast_AstNode* %54, %ast_AstNode** %node
	%55 = load %ast_AstNode*, %ast_AstNode** %node
	%56 = getelementptr %ast_AstNode, %ast_AstNode* %55, i32 0, i32 0
	%57 = load i8, i8* %56
	%58 = icmp eq i8 %57, 6
	br i1 %58, label %L.16, label %L.17
L.16:
	%59 = load %ast_AstNode*, %ast_AstNode** %node
	%60 = load i32, i32* %fsize
	call void @ast_CheckConstTruncate(%ast_AstNode* %59, i32 %60)
	%61 = load i64, i64* %cpart
	%62 = load %ast_AstNode*, %ast_AstNode** %node
	%63 = getelementptr %ast_AstNode, %ast_AstNode* %62, i32 0, i32 10
	%64 = load i64, i64* %63
	%65 = load i64, i64* %mask
	%66 = and i64 %64, %65
	%67 = load i32, i32* %offs
	%68 = zext i32 %67 to i64
	%69 = shl i64 %66, %68
	%70 = or i64 %61, %69
	store i64 %70, i64* %cpart
	br label %L.15
L.17:
	%71 = load %ast_AstNode*, %ast_AstNode** %node
	%72 = load i32, i32* %tsize
	%73 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %71, i32 %72, i8 0)
	store %ast_AstNode* %73, %ast_AstNode** %node
	%74 = load %type_TypeNode*, %type_TypeNode** %ft
	%75 = load %ast_AstNode*, %ast_AstNode** %node
	%76 = load i32, i32* %offs
	%77 = zext i32 %76 to i64
	%78 = call %ast_AstNode* @ast_ConstW(i64 %77)
	%79 = call %ast_AstNode* @ast_New2(i8 63, %type_TypeNode* %74, %ast_AstNode* %75, %ast_AstNode* %78)
	store %ast_AstNode* %79, %ast_AstNode** %node
	%80 = load %ast_AstNode*, %ast_AstNode** %vpart
	%81 = icmp eq %ast_AstNode* %80, null
	br i1 %81, label %L.19, label %L.20
L.19:
	%82 = load %ast_AstNode*, %ast_AstNode** %node
	store %ast_AstNode* %82, %ast_AstNode** %vpart
	br label %L.18
L.20:
	%83 = load %type_TypeNode*, %type_TypeNode** %ft
	%84 = load %ast_AstNode*, %ast_AstNode** %vpart
	%85 = load %ast_AstNode*, %ast_AstNode** %node
	%86 = call %ast_AstNode* @ast_New2(i8 52, %type_TypeNode* %83, %ast_AstNode* %84, %ast_AstNode* %85)
	store %ast_AstNode* %86, %ast_AstNode** %vpart
	br label %L.18
L.18:
	br label %L.15
L.15:
	%87 = load %type_TypeNode*, %type_TypeNode** %t
	%88 = getelementptr %type_TypeNode, %type_TypeNode* %87, i32 0, i32 17
	%89 = load i8, i8* %88
	%90 = icmp ne i8 %89, 1
	br i1 %90, label %L.22, label %L.21
L.22:
	%91 = load i32, i32* %offs
	%92 = load i32, i32* %fsize
	%93 = add i32 %91, %92
	store i32 %93, i32* %offs
	br label %L.21
L.21:
	br label %L.9
L.9:
	%94 = load %symb_SymbNode*, %symb_SymbNode** %f
	%95 = getelementptr %symb_SymbNode, %symb_SymbNode* %94, i32 0, i32 0
	%96 = load %symb_SymbNode*, %symb_SymbNode** %95
	store %symb_SymbNode* %96, %symb_SymbNode** %f
	%97 = load i16, i16* %i
	%98 = add i16 %97, 1
	store i16 %98, i16* %i
	br label %L.6
L.7:
	%99 = load i64, i64* %cpart
	%100 = call %ast_AstNode* @ast_ConstW(i64 %99)
	%101 = load i32, i32* %tsize
	%102 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %100, i32 %101, i8 0)
	store %ast_AstNode* %102, %ast_AstNode** %tree
	%103 = load %ast_AstNode*, %ast_AstNode** %vpart
	%104 = icmp ne %ast_AstNode* %103, null
	br i1 %104, label %L.24, label %L.23
L.24:
	%105 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%106 = load %ast_AstNode*, %ast_AstNode** %tree
	%107 = load %ast_AstNode*, %ast_AstNode** %vpart
	%108 = call %ast_AstNode* @ast_New2(i8 52, %type_TypeNode* %105, %ast_AstNode* %106, %ast_AstNode* %107)
	store %ast_AstNode* %108, %ast_AstNode** %tree
	br label %L.23
L.23:
	%109 = load %type_TypeNode*, %type_TypeNode** %t
	%110 = load %ast_AstNode*, %ast_AstNode** %tree
	%111 = getelementptr %ast_AstNode, %ast_AstNode* %110, i32 0, i32 8
	store %type_TypeNode* %109, %type_TypeNode** %111
	%112 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %112, %ast_AstNode** %rv.0
	br label %return
return:
	%113 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %113
}
define internal %type_TypeNode* @expr_RecordFixFlex(%type_TypeNode* %bt$, i32 %len$) nounwind {
L.0:
	%rv.0 = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	store %type_TypeNode* %bt$, %type_TypeNode** %bt
	%len = alloca i32
	store i32 %len$, i32* %len
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%ps = alloca %symb_SymbNode*
	%bs = alloca %symb_SymbNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %bt
	%1 = call %type_TypeNode* @type_Clone(%type_TypeNode* %0)
	store %type_TypeNode* %1, %type_TypeNode** %t
	store %symb_SymbNode* null, %symb_SymbNode** %ps
	%2 = load %type_TypeNode*, %type_TypeNode** %bt
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 4
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	store %symb_SymbNode* %4, %symb_SymbNode** %bs
	br label %L.1
L.1:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%6 = icmp ne %symb_SymbNode* %5, null
	%7 = xor i1 %6, true
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 23
	%10 = getelementptr [0 x i8], [0 x i8]* %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	%12 = call %symb_SymbNode* @symb_New(i8 4, [0 x i8]* %11, i8 2)
	store %symb_SymbNode* %12, %symb_SymbNode** %s
	%13 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%14 = icmp ne %symb_SymbNode* %13, null
	br i1 %14, label %L.5, label %L.6
L.5:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 0
	store %symb_SymbNode* %15, %symb_SymbNode** %17
	br label %L.4
L.6:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 4
	store %symb_SymbNode* %18, %symb_SymbNode** %20
	br label %L.4
L.4:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %21, %symb_SymbNode** %ps
	%22 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%23 = getelementptr %symb_SymbNode, %symb_SymbNode* %22, i32 0, i32 1
	%24 = load %type_TypeNode*, %type_TypeNode** %23
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 1
	store %type_TypeNode* %24, %type_TypeNode** %26
	%27 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 0
	%29 = load %symb_SymbNode*, %symb_SymbNode** %28
	store %symb_SymbNode* %29, %symb_SymbNode** %bs
	br label %L.1
L.2:
	%30 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%31 = getelementptr %symb_SymbNode, %symb_SymbNode* %30, i32 0, i32 1
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	%33 = load i32, i32* %len
	%34 = call %type_TypeNode* @expr_ArrayFixFlex(%type_TypeNode* %32, i32 %33)
	%35 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%36 = getelementptr %symb_SymbNode, %symb_SymbNode* %35, i32 0, i32 1
	store %type_TypeNode* %34, %type_TypeNode** %36
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 28
	store i8 0, i8* %38
	%39 = load %type_TypeNode*, %type_TypeNode** %bt
	%40 = load %type_TypeNode*, %type_TypeNode** %t
	%41 = getelementptr %type_TypeNode, %type_TypeNode* %40, i32 0, i32 0
	store %type_TypeNode* %39, %type_TypeNode** %41
	%42 = load %type_TypeNode*, %type_TypeNode** %t
	%43 = getelementptr %type_TypeNode, %type_TypeNode* %42, i32 0, i32 10
	store i32 0, i32* %43
	%44 = load %type_TypeNode*, %type_TypeNode** %t
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 11
	store i32 0, i32* %45
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = getelementptr %type_TypeNode, %type_TypeNode* %46, i32 0, i32 31
	store i8 0, i8* %47
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %48)
	%49 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %49, %type_TypeNode** %rv.0
	br label %return
return:
	%50 = load %type_TypeNode*, %type_TypeNode** %rv.0
	ret %type_TypeNode* %50
}
define internal %ast_AstNode* @expr_RecordConst(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%fs = alloca %symb_SymbNode*
	%ds = alloca %symb_SymbNode*
	%ft = alloca %type_TypeNode*
	%max = alloca i16
	%tok = alloca i8
	%once = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = call %ast_AstNode* @ast_New(i8 9, %type_TypeNode* %3)
	store %ast_AstNode* %4, %ast_AstNode** %tree
	%5 = load i64, i64* @expr_strid
	%6 = add i64 %5, 1
	store i64 %6, i64* @expr_strid
	%7 = load i64, i64* @expr_strid
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 10
	store i64 %7, i64* %9
	store i8 0, i8* %once
	store i16 0, i16* %max
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 4
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	store %symb_SymbNode* %12, %symb_SymbNode** %fs
	br label %L.4
L.4:
	%13 = call i8 @lex_Next()
	store i8 %13, i8* %tok
	%14 = load i8, i8* %tok
	%15 = icmp eq i8 %14, 2
	br i1 %15, label %L.7, label %L.8
L.7:
	%16 = call i8 @lex_Next()
	store i8 %16, i8* %tok
	%17 = load i8, i8* %tok
	%18 = icmp eq i8 %17, 46
	br i1 %18, label %L.10, label %L.11
L.10:
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 4
	%21 = load %symb_SymbNode*, %symb_SymbNode** %20
	%22 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%23 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %21, [0 x i8]* %22)
	store %symb_SymbNode* %23, %symb_SymbNode** %ds
	%24 = load %symb_SymbNode*, %symb_SymbNode** %ds
	%25 = icmp ne %symb_SymbNode* %24, null
	br i1 %25, label %L.13, label %L.14
L.13:
	%26 = load %symb_SymbNode*, %symb_SymbNode** %ds
	store %symb_SymbNode* %26, %symb_SymbNode** %fs
	br label %L.12
L.14:
	%27 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %27)
	br label %L.12
L.12:
	%28 = call i8 @lex_Next()
	store i8 %28, i8* %tok
	br label %L.9
L.11:
	call void @lex_Error(i8 21)
	br label %L.9
L.9:
	%29 = call i8 @lex_Expect(i8 9)
	store i8 %29, i8* %tok
	br label %L.6
L.8:
	br label %L.15
L.15:
	%30 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%31 = icmp ne %symb_SymbNode* %30, null
	br i1 %31, label %L.18, label %L.19
L.18:
	%32 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%33 = getelementptr %symb_SymbNode, %symb_SymbNode* %32, i32 0, i32 19
	%34 = load i8, i8* %33
	%35 = icmp ne i8 %34, 0
	br label %L.19
L.19:
	%36 = phi i1 [ false, %L.15 ], [ %35, %L.18 ]
	%37 = xor i1 %36, true
	br i1 %37, label %L.16, label %L.17
L.17:
	%38 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%39 = getelementptr %symb_SymbNode, %symb_SymbNode* %38, i32 0, i32 0
	%40 = load %symb_SymbNode*, %symb_SymbNode** %39
	store %symb_SymbNode* %40, %symb_SymbNode** %fs
	br label %L.15
L.16:
	br label %L.6
L.6:
	store %type_TypeNode* null, %type_TypeNode** %ft
	%41 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%42 = icmp ne %symb_SymbNode* %41, null
	br i1 %42, label %L.21, label %L.20
L.21:
	%43 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%44 = getelementptr %symb_SymbNode, %symb_SymbNode* %43, i32 0, i32 1
	%45 = load %type_TypeNode*, %type_TypeNode** %44
	store %type_TypeNode* %45, %type_TypeNode** %ft
	br label %L.20
L.20:
	%46 = load %type_TypeNode*, %type_TypeNode** %ft
	%47 = call %ast_AstNode* @expr_Const(%type_TypeNode* %46)
	store %ast_AstNode* %47, %ast_AstNode** %stree
	%48 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%49 = icmp ne %symb_SymbNode* %48, null
	br i1 %49, label %L.23, label %L.24
L.23:
	%50 = load %ast_AstNode*, %ast_AstNode** %tree
	%51 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%52 = getelementptr %symb_SymbNode, %symb_SymbNode* %51, i32 0, i32 10
	%53 = load i16, i16* %52
	%54 = load %ast_AstNode*, %ast_AstNode** %stree
	%55 = call %ast_AstNode* @ast_ChildIndexed(%ast_AstNode* %50, i16 %53, %ast_AstNode* %54)
	store %ast_AstNode* %55, %ast_AstNode** %tree
	%56 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%57 = getelementptr %symb_SymbNode, %symb_SymbNode* %56, i32 0, i32 10
	%58 = load i16, i16* %57
	%59 = load i16, i16* %max
	%60 = icmp ugt i16 %58, %59
	br i1 %60, label %L.26, label %L.25
L.26:
	%61 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%62 = getelementptr %symb_SymbNode, %symb_SymbNode* %61, i32 0, i32 10
	%63 = load i16, i16* %62
	store i16 %63, i16* %max
	br label %L.25
L.25:
	%64 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%65 = getelementptr %symb_SymbNode, %symb_SymbNode* %64, i32 0, i32 0
	%66 = load %symb_SymbNode*, %symb_SymbNode** %65
	store %symb_SymbNode* %66, %symb_SymbNode** %fs
	br label %L.22
L.24:
	%67 = load i8, i8* %once
	%68 = icmp ne i8 %67, 0
	%69 = xor i1 %68, true
	br i1 %69, label %L.28, label %L.27
L.28:
	store i8 1, i8* %once
	call void @lex_Error(i8 73)
	br label %L.27
L.27:
	br label %L.22
L.22:
	%70 = load i8, i8* @lex_Token
	store i8 %70, i8* %tok
	%71 = load i8, i8* %tok
	%72 = icmp ne i8 %71, 5
	br i1 %72, label %L.5, label %L.29
L.29:
	br label %L.4
L.5:
	%73 = call i8 @lex_Expect(i8 41)
	store i8 %73, i8* %tok
	%74 = load %type_TypeNode*, %type_TypeNode** %t
	%75 = getelementptr %type_TypeNode, %type_TypeNode* %74, i32 0, i32 4
	%76 = load %symb_SymbNode*, %symb_SymbNode** %75
	store %symb_SymbNode* %76, %symb_SymbNode** %fs
	br label %L.30
L.30:
	%77 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%78 = icmp ne %symb_SymbNode* %77, null
	br i1 %78, label %L.33, label %L.34
L.33:
	%79 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%80 = getelementptr %symb_SymbNode, %symb_SymbNode* %79, i32 0, i32 10
	%81 = load i16, i16* %80
	%82 = load i16, i16* %max
	%83 = icmp ule i16 %81, %82
	br label %L.34
L.34:
	%84 = phi i1 [ false, %L.30 ], [ %83, %L.33 ]
	%85 = xor i1 %84, true
	br i1 %85, label %L.31, label %L.32
L.32:
	%86 = load %ast_AstNode*, %ast_AstNode** %tree
	%87 = getelementptr %ast_AstNode, %ast_AstNode* %86, i32 0, i32 11
	%88 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%89 = getelementptr %symb_SymbNode, %symb_SymbNode* %88, i32 0, i32 10
	%90 = load i16, i16* %89
	%91 = zext i16 %90 to i32
	%92 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %87, i32 0, i32 %91
	%93 = load %ast_AstNode*, %ast_AstNode** %92
	%94 = icmp eq %ast_AstNode* %93, null
	br i1 %94, label %L.36, label %L.35
L.36:
	%95 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%96 = getelementptr %symb_SymbNode, %symb_SymbNode* %95, i32 0, i32 1
	%97 = load %type_TypeNode*, %type_TypeNode** %96
	%98 = call %ast_AstNode* @ast_Const(%type_TypeNode* %97, i64 0)
	%99 = load %ast_AstNode*, %ast_AstNode** %tree
	%100 = getelementptr %ast_AstNode, %ast_AstNode* %99, i32 0, i32 11
	%101 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%102 = getelementptr %symb_SymbNode, %symb_SymbNode* %101, i32 0, i32 10
	%103 = load i16, i16* %102
	%104 = zext i16 %103 to i32
	%105 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %100, i32 0, i32 %104
	store %ast_AstNode* %98, %ast_AstNode** %105
	br label %L.35
L.35:
	%106 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%107 = getelementptr %symb_SymbNode, %symb_SymbNode* %106, i32 0, i32 0
	%108 = load %symb_SymbNode*, %symb_SymbNode** %107
	store %symb_SymbNode* %108, %symb_SymbNode** %fs
	br label %L.30
L.31:
	br label %L.37
L.37:
	%109 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%110 = icmp ne %symb_SymbNode* %109, null
	%111 = xor i1 %110, true
	br i1 %111, label %L.38, label %L.39
L.39:
	%112 = load %ast_AstNode*, %ast_AstNode** %tree
	%113 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%114 = getelementptr %symb_SymbNode, %symb_SymbNode* %113, i32 0, i32 10
	%115 = load i16, i16* %114
	%116 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%117 = getelementptr %symb_SymbNode, %symb_SymbNode* %116, i32 0, i32 1
	%118 = load %type_TypeNode*, %type_TypeNode** %117
	%119 = call %ast_AstNode* @ast_Const(%type_TypeNode* %118, i64 0)
	%120 = call %ast_AstNode* @ast_ChildIndexed(%ast_AstNode* %112, i16 %115, %ast_AstNode* %119)
	store %ast_AstNode* %120, %ast_AstNode** %tree
	%121 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%122 = getelementptr %symb_SymbNode, %symb_SymbNode* %121, i32 0, i32 0
	%123 = load %symb_SymbNode*, %symb_SymbNode** %122
	store %symb_SymbNode* %123, %symb_SymbNode** %fs
	br label %L.37
L.38:
	%124 = load %type_TypeNode*, %type_TypeNode** %t
	%125 = getelementptr %type_TypeNode, %type_TypeNode* %124, i32 0, i32 28
	%126 = load i8, i8* %125
	%127 = icmp ne i8 %126, 0
	br i1 %127, label %L.41, label %L.40
L.41:
	%128 = load %ast_AstNode*, %ast_AstNode** %tree
	%129 = getelementptr %ast_AstNode, %ast_AstNode* %128, i32 0, i32 11
	%130 = load %ast_AstNode*, %ast_AstNode** %tree
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 2
	%132 = load i16, i16* %131
	%133 = sub i16 %132, 1
	%134 = zext i16 %133 to i32
	%135 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %129, i32 0, i32 %134
	%136 = load %ast_AstNode*, %ast_AstNode** %135
	%137 = getelementptr %ast_AstNode, %ast_AstNode* %136, i32 0, i32 8
	%138 = load %type_TypeNode*, %type_TypeNode** %137
	store %type_TypeNode* %138, %type_TypeNode** %ft
	%139 = load %type_TypeNode*, %type_TypeNode** %t
	%140 = load %type_TypeNode*, %type_TypeNode** %ft
	%141 = getelementptr %type_TypeNode, %type_TypeNode* %140, i32 0, i32 9
	%142 = load i64, i64* %141
	%143 = load %type_TypeNode*, %type_TypeNode** %ft
	%144 = getelementptr %type_TypeNode, %type_TypeNode* %143, i32 0, i32 8
	%145 = load i64, i64* %144
	%146 = sub i64 %142, %145
	%147 = add i64 %146, 1
	%148 = trunc i64 %147 to i32
	%149 = call %type_TypeNode* @expr_RecordFixFlex(%type_TypeNode* %139, i32 %148)
	%150 = load %ast_AstNode*, %ast_AstNode** %tree
	%151 = getelementptr %ast_AstNode, %ast_AstNode* %150, i32 0, i32 8
	store %type_TypeNode* %149, %type_TypeNode** %151
	br label %L.40
L.40:
	%152 = load %type_TypeNode*, %type_TypeNode** %t
	%153 = getelementptr %type_TypeNode, %type_TypeNode* %152, i32 0, i32 24
	%154 = load i8, i8* %153
	%155 = icmp ne i8 %154, 0
	br i1 %155, label %L.43, label %L.44
L.43:
	%156 = load %type_TypeNode*, %type_TypeNode** %t
	%157 = load %ast_AstNode*, %ast_AstNode** %tree
	%158 = call %ast_AstNode* @expr_RecordPack(%type_TypeNode* %156, %ast_AstNode* %157)
	store %ast_AstNode* %158, %ast_AstNode** %tree
	br label %L.42
L.44:
	%159 = load %ast_AstNode*, %ast_AstNode** %tree
	%160 = call i8 @expr_IsAggregateConst(%ast_AstNode* %159)
	%161 = icmp ne i8 %160, 0
	%162 = xor i1 %161, true
	br i1 %162, label %L.46, label %L.45
L.46:
	call void @lex_Error(i8 74)
	br label %L.45
L.45:
	br label %L.42
L.42:
	br label %L.1
L.3:
	%163 = load i8, i8* %tok
	%164 = icmp eq i8 %163, 46
	br i1 %164, label %L.48, label %L.49
L.48:
	%165 = load %type_TypeNode*, %type_TypeNode** %t
	%166 = call %ast_AstNode* @expr_CompositeNamedConstant(%type_TypeNode* %165)
	store %ast_AstNode* %166, %ast_AstNode** %tree
	br label %L.47
L.49:
	call void @lex_ErrorT(i8 20, i8 40)
	br label %L.47
L.47:
	br label %L.1
L.1:
	%167 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %167, %ast_AstNode** %rv.0
	br label %return
return:
	%168 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %168
}
define internal %ast_AstNode* @expr_CompositeValue(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.4 [
		i32 7, label %L.6
		i32 6, label %L.7
		i32 5, label %L.8
	]
L.6:
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = call %ast_AstNode* @expr_RecordConst(%type_TypeNode* %6)
	store %ast_AstNode* %7, %ast_AstNode** %tree
	br label %L.5
L.7:
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = call %ast_AstNode* @expr_ArrayConst(%type_TypeNode* %8)
	store %ast_AstNode* %9, %ast_AstNode** %tree
	br label %L.5
L.8:
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 0
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	%13 = call %ast_AstNode* @expr_CompositeValue(%type_TypeNode* %12)
	store %ast_AstNode* %13, %ast_AstNode** %tree
	br label %L.5
L.4:
	call void @lex_Error(i8 55)
	br label %L.5
L.5:
	br label %L.1
L.3:
	call void @lex_Error(i8 54)
	br label %L.1
L.1:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %14, %ast_AstNode** %rv.0
	br label %return
return:
	%15 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %15
}
define internal i32 @expr_CalcAlign(i32 %base$, i32 %offset$) nounwind {
L.0:
	%rv.0 = alloca i32
	%base = alloca i32
	store i32 %base$, i32* %base
	%offset = alloca i32
	store i32 %offset$, i32* %offset
	%new = alloca i32
	%tz = alloca i32
	%0 = load i32, i32* %offset
	%1 = icmp eq i32 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %base
	store i32 %2, i32* %new
	br label %L.1
L.3:
	store i32 0, i32* %tz
	br label %L.4
L.4:
	%3 = load i32, i32* %offset
	%4 = and i32 %3, 1
	%5 = icmp eq i32 %4, 0
	%6 = xor i1 %5, true
	br i1 %6, label %L.5, label %L.6
L.6:
	%7 = load i32, i32* %offset
	%8 = lshr i32 %7, 1
	store i32 %8, i32* %offset
	%9 = load i32, i32* %tz
	%10 = add i32 %9, 1
	store i32 %10, i32* %tz
	br label %L.4
L.5:
	%11 = load i32, i32* %tz
	%12 = shl i32 1, %11
	store i32 %12, i32* %new
	%13 = load i32, i32* %base
	%14 = load i32, i32* %new
	%15 = icmp ult i32 %13, %14
	%16 = select i1 %15, i32 %13, i32 %14
	store i32 %16, i32* %new
	br label %L.1
L.1:
	%17 = load i32, i32* %new
	store i32 %17, i32* %rv.0
	br label %return
return:
	%18 = load i32, i32* %rv.0
	ret i32 %18
}
define internal i32 @expr_FieldAlign(i32 %base$, %type_TypeNode* %record$, i32 %fieldno$) nounwind {
L.0:
	%rv.0 = alloca i32
	%base = alloca i32
	store i32 %base$, i32* %base
	%record = alloca %type_TypeNode*
	store %type_TypeNode* %record$, %type_TypeNode** %record
	%fieldno = alloca i32
	store i32 %fieldno$, i32* %fieldno
	%offs = alloca i32
	%i = alloca i32
	%s = alloca %symb_SymbNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %record
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 16
	%2 = load i8, i8* %1
	%3 = icmp ne i8 %2, 7
	br i1 %3, label %L.2, label %L.1
L.2:
	store i32 0, i32* %rv.0
	br label %return
L.1:
	store i32 0, i32* %offs
	store i32 0, i32* %i
	%4 = load %type_TypeNode*, %type_TypeNode** %record
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 4
	%6 = load %symb_SymbNode*, %symb_SymbNode** %5
	store %symb_SymbNode* %6, %symb_SymbNode** %s
	br label %L.3
L.3:
	%7 = load i32, i32* %i
	%8 = load i32, i32* %fieldno
	%9 = icmp ult i32 %7, %8
	br i1 %9, label %L.6, label %L.7
L.6:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = icmp ne %symb_SymbNode* %10, null
	br label %L.7
L.7:
	%12 = phi i1 [ false, %L.3 ], [ %11, %L.6 ]
	%13 = xor i1 %12, true
	br i1 %13, label %L.4, label %L.5
L.5:
	%14 = load %type_TypeNode*, %type_TypeNode** %record
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 24
	%16 = load i8, i8* %15
	%17 = icmp ne i8 %16, 0
	br i1 %17, label %L.9, label %L.10
L.9:
	%18 = load i32, i32* %offs
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 10
	%23 = load i32, i32* %22
	%24 = add i32 %18, %23
	store i32 %24, i32* %offs
	br label %L.8
L.10:
	%25 = load i32, i32* %offs
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 1
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 11
	%30 = load i32, i32* %29
	%31 = udiv i32 %30, 8
	%32 = add i32 %25, %31
	store i32 %32, i32* %offs
	br label %L.8
L.8:
	%33 = load i32, i32* %i
	%34 = add i32 %33, 1
	store i32 %34, i32* %i
	%35 = load %symb_SymbNode*, %symb_SymbNode** %s
	%36 = getelementptr %symb_SymbNode, %symb_SymbNode* %35, i32 0, i32 0
	%37 = load %symb_SymbNode*, %symb_SymbNode** %36
	store %symb_SymbNode* %37, %symb_SymbNode** %s
	br label %L.3
L.4:
	%38 = load i32, i32* %base
	%39 = load i32, i32* %offs
	%40 = call i32 @expr_CalcAlign(i32 %38, i32 %39)
	store i32 %40, i32* %rv.0
	br label %return
return:
	%41 = load i32, i32* %rv.0
	ret i32 %41
}
@S.636 = private unnamed_addr constant [30 x i8] c"GetAlignment: unexpected node\00"
define internal i32 @expr_GetAlignment(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca i32
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%alignment = alloca i32
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = icmp eq %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	store i32 0, i32* %rv.0
	br label %return
L.1:
	store i32 0, i32* %alignment
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	%3 = getelementptr %ast_AstNode, %ast_AstNode* %2, i32 0, i32 0
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 12, label %L.5
		i32 27, label %L.6
		i32 32, label %L.7
		i32 16, label %L.7
		i32 13, label %L.8
		i32 14, label %L.9
		i32 15, label %L.9
		i32 9, label %L.10
		i32 8, label %L.10
	]
L.5:
	%6 = load %ast_AstNode*, %ast_AstNode** %tree
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = icmp ne %type_TypeNode* %8, null
	br i1 %9, label %L.12, label %L.11
L.12:
	%10 = load %ast_AstNode*, %ast_AstNode** %tree
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 8
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 0
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 12
	%16 = load i32, i32* %15
	%17 = udiv i32 %16, 8
	store i32 %17, i32* %alignment
	br label %L.11
L.11:
	br label %L.4
L.6:
	%18 = load %ast_AstNode*, %ast_AstNode** %tree
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 8
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 16
	%22 = load i8, i8* %21
	%23 = icmp eq i8 %22, 5
	br i1 %23, label %L.13, label %L.14
L.13:
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 8
	%26 = load %type_TypeNode*, %type_TypeNode** %25
	%27 = icmp ne %type_TypeNode* %26, null
	br label %L.14
L.14:
	%28 = phi i1 [ false, %L.6 ], [ %27, %L.13 ]
	br i1 %28, label %L.16, label %L.15
L.16:
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 8
	%31 = load %type_TypeNode*, %type_TypeNode** %30
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 0
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 12
	%35 = load i32, i32* %34
	%36 = udiv i32 %35, 8
	store i32 %36, i32* %alignment
	br label %L.15
L.15:
	br label %L.4
L.7:
	%37 = load %ast_AstNode*, %ast_AstNode** %tree
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 11
	%39 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %38, i32 0, i32 0
	%40 = load %ast_AstNode*, %ast_AstNode** %39
	%41 = call i32 @expr_GetAlignment(%ast_AstNode* %40)
	store i32 %41, i32* %alignment
	br label %L.4
L.8:
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 11
	%44 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %43, i32 0, i32 0
	%45 = load %ast_AstNode*, %ast_AstNode** %44
	%46 = call i32 @expr_GetAlignment(%ast_AstNode* %45)
	store i32 %46, i32* %alignment
	%47 = load i32, i32* %alignment
	%48 = icmp ne i32 %47, 0
	br i1 %48, label %L.18, label %L.17
L.18:
	%49 = load i32, i32* %alignment
	%50 = load %ast_AstNode*, %ast_AstNode** %tree
	%51 = getelementptr %ast_AstNode, %ast_AstNode* %50, i32 0, i32 11
	%52 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %51, i32 0, i32 0
	%53 = load %ast_AstNode*, %ast_AstNode** %52
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 8
	%55 = load %type_TypeNode*, %type_TypeNode** %54
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 0
	%57 = load %type_TypeNode*, %type_TypeNode** %56
	%58 = load %ast_AstNode*, %ast_AstNode** %tree
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 10
	%60 = load i64, i64* %59
	%61 = trunc i64 %60 to i32
	%62 = call i32 @expr_FieldAlign(i32 %49, %type_TypeNode* %57, i32 %61)
	store i32 %62, i32* %alignment
	br label %L.17
L.17:
	br label %L.4
L.9:
	%63 = load %ast_AstNode*, %ast_AstNode** %tree
	%64 = getelementptr %ast_AstNode, %ast_AstNode* %63, i32 0, i32 11
	%65 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %64, i32 0, i32 0
	%66 = load %ast_AstNode*, %ast_AstNode** %65
	%67 = call i32 @expr_GetAlignment(%ast_AstNode* %66)
	store i32 %67, i32* %alignment
	%68 = load i32, i32* %alignment
	%69 = icmp ne i32 %68, 0
	br i1 %69, label %L.20, label %L.19
L.20:
	%70 = load %ast_AstNode*, %ast_AstNode** %tree
	%71 = getelementptr %ast_AstNode, %ast_AstNode* %70, i32 0, i32 11
	%72 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %71, i32 0, i32 1
	%73 = load %ast_AstNode*, %ast_AstNode** %72
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 0
	%75 = load i8, i8* %74
	%76 = icmp eq i8 %75, 6
	br i1 %76, label %L.22, label %L.23
L.22:
	%size = alloca i32
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	%78 = getelementptr %ast_AstNode, %ast_AstNode* %77, i32 0, i32 11
	%79 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %78, i32 0, i32 0
	%80 = load %ast_AstNode*, %ast_AstNode** %79
	%81 = getelementptr %ast_AstNode, %ast_AstNode* %80, i32 0, i32 8
	%82 = load %type_TypeNode*, %type_TypeNode** %81
	%83 = getelementptr %type_TypeNode, %type_TypeNode* %82, i32 0, i32 0
	%84 = load %type_TypeNode*, %type_TypeNode** %83
	%85 = getelementptr %type_TypeNode, %type_TypeNode* %84, i32 0, i32 0
	%86 = load %type_TypeNode*, %type_TypeNode** %85
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 11
	%88 = load i32, i32* %87
	%89 = udiv i32 %88, 8
	store i32 %89, i32* %size
	%90 = load i32, i32* %alignment
	%91 = load %ast_AstNode*, %ast_AstNode** %tree
	%92 = getelementptr %ast_AstNode, %ast_AstNode* %91, i32 0, i32 11
	%93 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %92, i32 0, i32 1
	%94 = load %ast_AstNode*, %ast_AstNode** %93
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 10
	%96 = load i64, i64* %95
	%97 = trunc i64 %96 to i32
	%98 = load i32, i32* %size
	%99 = mul i32 %97, %98
	%100 = call i32 @expr_CalcAlign(i32 %90, i32 %99)
	store i32 %100, i32* %alignment
	br label %L.21
L.23:
	%101 = load %ast_AstNode*, %ast_AstNode** %tree
	%102 = getelementptr %ast_AstNode, %ast_AstNode* %101, i32 0, i32 0
	%103 = load i8, i8* %102
	%104 = icmp eq i8 %103, 15
	br i1 %104, label %L.25, label %L.26
L.25:
	%105 = load %ast_AstNode*, %ast_AstNode** %tree
	%106 = getelementptr %ast_AstNode, %ast_AstNode* %105, i32 0, i32 8
	%107 = load %type_TypeNode*, %type_TypeNode** %106
	%108 = getelementptr %type_TypeNode, %type_TypeNode* %107, i32 0, i32 0
	%109 = load %type_TypeNode*, %type_TypeNode** %108
	%110 = getelementptr %type_TypeNode, %type_TypeNode* %109, i32 0, i32 0
	%111 = load %type_TypeNode*, %type_TypeNode** %110
	%112 = getelementptr %type_TypeNode, %type_TypeNode* %111, i32 0, i32 12
	%113 = load i32, i32* %112
	%114 = udiv i32 %113, 8
	store i32 %114, i32* %alignment
	br label %L.24
L.26:
	%115 = load %ast_AstNode*, %ast_AstNode** %tree
	%116 = getelementptr %ast_AstNode, %ast_AstNode* %115, i32 0, i32 8
	%117 = load %type_TypeNode*, %type_TypeNode** %116
	%118 = getelementptr %type_TypeNode, %type_TypeNode* %117, i32 0, i32 0
	%119 = load %type_TypeNode*, %type_TypeNode** %118
	%120 = getelementptr %type_TypeNode, %type_TypeNode* %119, i32 0, i32 12
	%121 = load i32, i32* %120
	%122 = udiv i32 %121, 8
	store i32 %122, i32* %alignment
	br label %L.24
L.24:
	br label %L.21
L.21:
	br label %L.19
L.19:
	br label %L.4
L.10:
	%123 = load %ast_AstNode*, %ast_AstNode** %tree
	%124 = getelementptr %ast_AstNode, %ast_AstNode* %123, i32 0, i32 8
	%125 = load %type_TypeNode*, %type_TypeNode** %124
	%126 = getelementptr %type_TypeNode, %type_TypeNode* %125, i32 0, i32 12
	%127 = load i32, i32* %126
	store i32 %127, i32* %alignment
	br label %L.4
L.3:
	%128 = getelementptr [30 x i8], [30 x i8]* @S.636
	%129 = bitcast [30 x i8]* %128 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %129)
	%130 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @ast_Dump(%ast_AstNode* %130)
	br label %L.4
L.4:
	%131 = load i32, i32* %alignment
	store i32 %131, i32* %rv.0
	br label %return
return:
	%132 = load i32, i32* %rv.0
	ret i32 %132
}
@S.637 = private unnamed_addr constant [17 x i8] c"Load via non-REF\00"
@S.638 = private unnamed_addr constant [25 x i8] c"GetSize: unexpected node\00"
define internal %ast_AstNode* @expr_GetSize(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%size = alloca %ast_AstNode*
	%nsize = alloca %ast_AstNode*
	%tsize = alloca i32
	store %ast_AstNode* null, %ast_AstNode** %size
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 12, label %L.3
		i32 27, label %L.4
		i32 14, label %L.5
		i32 13, label %L.5
		i32 15, label %L.6
	]
L.3:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 0
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 11
	%10 = load i32, i32* %9
	%11 = zext i32 %10 to i64
	%12 = udiv i64 %11, 8
	%13 = call %ast_AstNode* @ast_ConstW(i64 %12)
	store %ast_AstNode* %13, %ast_AstNode** %size
	br label %L.2
L.4:
	%14 = load %ast_AstNode*, %ast_AstNode** %node
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 8
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 16
	%18 = load i8, i8* %17
	%19 = icmp eq i8 %18, 5
	br i1 %19, label %L.8, label %L.9
L.8:
	%20 = load %ast_AstNode*, %ast_AstNode** %node
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 8
	%22 = load %type_TypeNode*, %type_TypeNode** %21
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 0
	%24 = load %type_TypeNode*, %type_TypeNode** %23
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 11
	%26 = load i32, i32* %25
	%27 = zext i32 %26 to i64
	%28 = udiv i64 %27, 8
	%29 = call %ast_AstNode* @ast_ConstW(i64 %28)
	store %ast_AstNode* %29, %ast_AstNode** %size
	br label %L.7
L.9:
	%30 = getelementptr [17 x i8], [17 x i8]* @S.637
	%31 = bitcast [17 x i8]* %30 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %31)
	br label %L.7
L.7:
	br label %L.2
L.5:
	%32 = load %ast_AstNode*, %ast_AstNode** %node
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 8
	%34 = load %type_TypeNode*, %type_TypeNode** %33
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 0
	%36 = load %type_TypeNode*, %type_TypeNode** %35
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 11
	%38 = load i32, i32* %37
	%39 = zext i32 %38 to i64
	%40 = udiv i64 %39, 8
	%41 = call %ast_AstNode* @ast_ConstW(i64 %40)
	store %ast_AstNode* %41, %ast_AstNode** %size
	br label %L.2
L.6:
	%42 = load %ast_AstNode*, %ast_AstNode** %node
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 8
	%44 = load %type_TypeNode*, %type_TypeNode** %43
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 0
	%46 = load %type_TypeNode*, %type_TypeNode** %45
	%47 = getelementptr %type_TypeNode, %type_TypeNode* %46, i32 0, i32 0
	%48 = load %type_TypeNode*, %type_TypeNode** %47
	%49 = getelementptr %type_TypeNode, %type_TypeNode* %48, i32 0, i32 11
	%50 = load i32, i32* %49
	%51 = zext i32 %50 to i64
	%52 = udiv i64 %51, 8
	%53 = call %ast_AstNode* @ast_ConstW(i64 %52)
	store %ast_AstNode* %53, %ast_AstNode** %size
	%54 = load %ast_AstNode*, %ast_AstNode** %node
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 11
	%56 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %55, i32 0, i32 2
	%57 = load %ast_AstNode*, %ast_AstNode** %56
	%58 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%59 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %57, %type_TypeNode* %58)
	%60 = load %ast_AstNode*, %ast_AstNode** %size
	%61 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%62 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %59, %ast_AstNode* %60, %type_TypeNode* %61)
	store %ast_AstNode* %62, %ast_AstNode** %size
	br label %L.2
L.1:
	%63 = getelementptr [25 x i8], [25 x i8]* @S.638
	%64 = bitcast [25 x i8]* %63 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %64)
	%65 = load %ast_AstNode*, %ast_AstNode** %node
	call void @ast_Dump(%ast_AstNode* %65)
	br label %L.2
L.2:
	%66 = load %ast_AstNode*, %ast_AstNode** %size
	%67 = icmp eq %ast_AstNode* %66, null
	br i1 %67, label %L.11, label %L.10
L.11:
	%68 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %68, %ast_AstNode** %size
	br label %L.10
L.10:
	%69 = load %ast_AstNode*, %ast_AstNode** %size
	store %ast_AstNode* %69, %ast_AstNode** %rv.0
	br label %return
return:
	%70 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %70
}
define internal %ast_AstNode* @expr_GetOffset(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%tree = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 13, label %L.3
		i32 14, label %L.4
	]
L.3:
	%f = alloca %symb_SymbNode*
	%n = alloca i32
	%offset = alloca i32
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 0
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	%8 = call %ast_AstNode* @expr_GetOffset(%ast_AstNode* %7)
	store %ast_AstNode* %8, %ast_AstNode** %ctree
	store i32 0, i32* %offset
	store i32 0, i32* %n
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 11
	%11 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %10, i32 0, i32 0
	%12 = load %ast_AstNode*, %ast_AstNode** %11
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 8
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 0
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 4
	%18 = load %symb_SymbNode*, %symb_SymbNode** %17
	store %symb_SymbNode* %18, %symb_SymbNode** %f
	br label %L.5
L.5:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %f
	%20 = icmp ne %symb_SymbNode* %19, null
	br i1 %20, label %L.8, label %L.9
L.8:
	%21 = load i32, i32* %n
	%22 = zext i32 %21 to i64
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 10
	%25 = load i64, i64* %24
	%26 = icmp ult i64 %22, %25
	br label %L.9
L.9:
	%27 = phi i1 [ false, %L.5 ], [ %26, %L.8 ]
	%28 = xor i1 %27, true
	br i1 %28, label %L.6, label %L.7
L.7:
	%29 = load i32, i32* %offset
	%30 = load %symb_SymbNode*, %symb_SymbNode** %f
	%31 = getelementptr %symb_SymbNode, %symb_SymbNode* %30, i32 0, i32 1
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 11
	%34 = load i32, i32* %33
	%35 = udiv i32 %34, 8
	%36 = add i32 %29, %35
	store i32 %36, i32* %offset
	%37 = load %symb_SymbNode*, %symb_SymbNode** %f
	%38 = getelementptr %symb_SymbNode, %symb_SymbNode* %37, i32 0, i32 0
	%39 = load %symb_SymbNode*, %symb_SymbNode** %38
	store %symb_SymbNode* %39, %symb_SymbNode** %f
	%40 = load i32, i32* %n
	%41 = add i32 %40, 1
	store i32 %41, i32* %n
	br label %L.5
L.6:
	%42 = load i32, i32* %offset
	%43 = zext i32 %42 to i64
	%44 = call %ast_AstNode* @ast_ConstW(i64 %43)
	store %ast_AstNode* %44, %ast_AstNode** %tree
	br label %L.2
L.4:
	%45 = load %ast_AstNode*, %ast_AstNode** %node
	%46 = getelementptr %ast_AstNode, %ast_AstNode* %45, i32 0, i32 11
	%47 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %46, i32 0, i32 0
	%48 = load %ast_AstNode*, %ast_AstNode** %47
	%49 = call %ast_AstNode* @expr_GetOffset(%ast_AstNode* %48)
	store %ast_AstNode* %49, %ast_AstNode** %ctree
	%50 = load %ast_AstNode*, %ast_AstNode** %node
	%51 = getelementptr %ast_AstNode, %ast_AstNode* %50, i32 0, i32 11
	%52 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %51, i32 0, i32 0
	%53 = load %ast_AstNode*, %ast_AstNode** %52
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 8
	%55 = load %type_TypeNode*, %type_TypeNode** %54
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 0
	%57 = load %type_TypeNode*, %type_TypeNode** %56
	%58 = getelementptr %type_TypeNode, %type_TypeNode* %57, i32 0, i32 0
	%59 = load %type_TypeNode*, %type_TypeNode** %58
	%60 = getelementptr %type_TypeNode, %type_TypeNode* %59, i32 0, i32 11
	%61 = load i32, i32* %60
	%62 = zext i32 %61 to i64
	%63 = udiv i64 %62, 8
	%64 = call %ast_AstNode* @ast_ConstW(i64 %63)
	store %ast_AstNode* %64, %ast_AstNode** %tree
	%65 = load %ast_AstNode*, %ast_AstNode** %node
	%66 = getelementptr %ast_AstNode, %ast_AstNode* %65, i32 0, i32 11
	%67 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %66, i32 0, i32 1
	%68 = load %ast_AstNode*, %ast_AstNode** %67
	%69 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%70 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %68, %type_TypeNode* %69)
	%71 = load %ast_AstNode*, %ast_AstNode** %tree
	%72 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%73 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %70, %ast_AstNode* %71, %type_TypeNode* %72)
	store %ast_AstNode* %73, %ast_AstNode** %tree
	br label %L.2
L.1:
	br label %L.2
L.2:
	%74 = load %ast_AstNode*, %ast_AstNode** %tree
	%75 = icmp ne %ast_AstNode* %74, null
	br i1 %75, label %L.10, label %L.11
L.10:
	%76 = load %ast_AstNode*, %ast_AstNode** %ctree
	%77 = icmp ne %ast_AstNode* %76, null
	br label %L.11
L.11:
	%78 = phi i1 [ false, %L.2 ], [ %77, %L.10 ]
	br i1 %78, label %L.13, label %L.12
L.13:
	%79 = load %ast_AstNode*, %ast_AstNode** %tree
	%80 = load %ast_AstNode*, %ast_AstNode** %ctree
	%81 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%82 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %79, %ast_AstNode* %80, %type_TypeNode* %81)
	store %ast_AstNode* %82, %ast_AstNode** %tree
	br label %L.12
L.12:
	%83 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %83, %ast_AstNode** %rv.0
	br label %return
return:
	%84 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %84
}
define internal %ast_AstNode* @expr_Slice(%ast_AstNode* %array$, %ast_AstNode* %inx$, %ast_AstNode* %len$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%array = alloca %ast_AstNode*
	store %ast_AstNode* %array$, %ast_AstNode** %array
	%inx = alloca %ast_AstNode*
	store %ast_AstNode* %inx$, %ast_AstNode** %inx
	%len = alloca %ast_AstNode*
	store %ast_AstNode* %len$, %ast_AstNode** %len
	%at = alloca %type_TypeNode*
	%st = alloca %type_TypeNode*
	%tree = alloca %ast_AstNode*
	%blen = alloca i32
	%slen = alloca i32
	%0 = load %ast_AstNode*, %ast_AstNode** %array
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 0
	%4 = load %type_TypeNode*, %type_TypeNode** %3
	store %type_TypeNode* %4, %type_TypeNode** %at
	%5 = call %type_TypeNode* @type_New(i8 6)
	store %type_TypeNode* %5, %type_TypeNode** %st
	%6 = load %type_TypeNode*, %type_TypeNode** %at
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 0
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = load %type_TypeNode*, %type_TypeNode** %st
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 0
	store %type_TypeNode* %8, %type_TypeNode** %10
	%11 = load %type_TypeNode*, %type_TypeNode** %at
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 24
	%13 = load i8, i8* %12
	%14 = load %type_TypeNode*, %type_TypeNode** %st
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 24
	store i8 %13, i8* %15
	%16 = load %type_TypeNode*, %type_TypeNode** %at
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 18
	%18 = load i8, i8* %17
	%19 = load %type_TypeNode*, %type_TypeNode** %st
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 18
	store i8 %18, i8* %20
	store i32 0, i32* %blen
	store i32 0, i32* %slen
	%21 = load %type_TypeNode*, %type_TypeNode** %at
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 28
	%23 = load i8, i8* %22
	%24 = icmp ne i8 %23, 0
	br i1 %24, label %L.2, label %L.3
L.2:
	%25 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%26 = load %type_TypeNode*, %type_TypeNode** %st
	%27 = getelementptr %type_TypeNode, %type_TypeNode* %26, i32 0, i32 2
	store %type_TypeNode* %25, %type_TypeNode** %27
	br label %L.1
L.3:
	%28 = load %type_TypeNode*, %type_TypeNode** %at
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 2
	%30 = load %type_TypeNode*, %type_TypeNode** %29
	%31 = load %type_TypeNode*, %type_TypeNode** %st
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 2
	store %type_TypeNode* %30, %type_TypeNode** %32
	%33 = load %type_TypeNode*, %type_TypeNode** %at
	%34 = call i32 @type_TypeNode_Span(%type_TypeNode* %33)
	store i32 %34, i32* %blen
	br label %L.1
L.1:
	%35 = load %ast_AstNode*, %ast_AstNode** %len
	%36 = icmp ne %ast_AstNode* %35, null
	br i1 %36, label %L.5, label %L.6
L.5:
	%37 = load %ast_AstNode*, %ast_AstNode** %len
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 0
	%39 = load i8, i8* %38
	%40 = icmp eq i8 %39, 6
	br i1 %40, label %L.8, label %L.7
L.8:
	%41 = load %ast_AstNode*, %ast_AstNode** %len
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 10
	%43 = load i64, i64* %42
	%44 = trunc i64 %43 to i32
	store i32 %44, i32* %slen
	br label %L.7
L.7:
	br label %L.4
L.6:
	%45 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %45, %ast_AstNode** %len
	br label %L.4
L.4:
	%46 = load i32, i32* %blen
	%47 = icmp eq i32 %46, 0
	br i1 %47, label %L.9, label %L.10
L.9:
	%48 = load i32, i32* %slen
	%49 = icmp eq i32 %48, 0
	br label %L.10
L.10:
	%50 = phi i1 [ false, %L.4 ], [ %49, %L.9 ]
	br i1 %50, label %L.12, label %L.13
L.12:
	%51 = load %type_TypeNode*, %type_TypeNode** %st
	%52 = getelementptr %type_TypeNode, %type_TypeNode* %51, i32 0, i32 28
	store i8 1, i8* %52
	br label %L.11
L.13:
	%53 = load i32, i32* %slen
	%54 = icmp eq i32 %53, 0
	br i1 %54, label %L.15, label %L.16
L.15:
	%55 = load i32, i32* %blen
	store i32 %55, i32* %slen
	%56 = load %ast_AstNode*, %ast_AstNode** %inx
	%57 = getelementptr %ast_AstNode, %ast_AstNode* %56, i32 0, i32 0
	%58 = load i8, i8* %57
	%59 = icmp eq i8 %58, 6
	br i1 %59, label %L.18, label %L.17
L.18:
	%60 = load i32, i32* %blen
	%61 = load %ast_AstNode*, %ast_AstNode** %inx
	%62 = getelementptr %ast_AstNode, %ast_AstNode* %61, i32 0, i32 10
	%63 = load i64, i64* %62
	%64 = trunc i64 %63 to i32
	%65 = sub i32 %60, %64
	store i32 %65, i32* %slen
	br label %L.17
L.17:
	br label %L.14
L.16:
	br label %L.14
L.14:
	%66 = load i32, i32* %slen
	%67 = zext i32 %66 to i64
	%68 = sub i64 %67, 1
	%69 = load %type_TypeNode*, %type_TypeNode** %st
	%70 = getelementptr %type_TypeNode, %type_TypeNode* %69, i32 0, i32 9
	store i64 %68, i64* %70
	br label %L.11
L.11:
	%71 = load %type_TypeNode*, %type_TypeNode** %at
	%72 = getelementptr %type_TypeNode, %type_TypeNode* %71, i32 0, i32 0
	%73 = load %type_TypeNode*, %type_TypeNode** %72
	%74 = getelementptr %type_TypeNode, %type_TypeNode* %73, i32 0, i32 10
	%75 = load i32, i32* %74
	%76 = load i32, i32* %slen
	%77 = mul i32 %75, %76
	%78 = load %type_TypeNode*, %type_TypeNode** %st
	%79 = getelementptr %type_TypeNode, %type_TypeNode* %78, i32 0, i32 10
	store i32 %77, i32* %79
	%80 = load %type_TypeNode*, %type_TypeNode** %st
	%81 = getelementptr %type_TypeNode, %type_TypeNode* %80, i32 0, i32 10
	%82 = load i32, i32* %81
	%83 = load %type_TypeNode*, %type_TypeNode** %st
	%84 = getelementptr %type_TypeNode, %type_TypeNode* %83, i32 0, i32 11
	store i32 %82, i32* %84
	%85 = load %ast_AstNode*, %ast_AstNode** %inx
	%86 = icmp ne %ast_AstNode* %85, null
	br i1 %86, label %L.20, label %L.21
L.20:
	%87 = load %ast_AstNode*, %ast_AstNode** %inx
	%88 = getelementptr %ast_AstNode, %ast_AstNode* %87, i32 0, i32 0
	%89 = load i8, i8* %88
	%90 = icmp eq i8 %89, 6
	br i1 %90, label %L.23, label %L.24
L.23:
	%offs = alloca i32
	%91 = load %ast_AstNode*, %ast_AstNode** %inx
	%92 = getelementptr %ast_AstNode, %ast_AstNode* %91, i32 0, i32 10
	%93 = load i64, i64* %92
	%94 = trunc i64 %93 to i32
	%95 = load %type_TypeNode*, %type_TypeNode** %at
	%96 = getelementptr %type_TypeNode, %type_TypeNode* %95, i32 0, i32 0
	%97 = load %type_TypeNode*, %type_TypeNode** %96
	%98 = getelementptr %type_TypeNode, %type_TypeNode* %97, i32 0, i32 11
	%99 = load i32, i32* %98
	%100 = udiv i32 %99, 8
	%101 = mul i32 %94, %100
	store i32 %101, i32* %offs
	%102 = load %type_TypeNode*, %type_TypeNode** %at
	%103 = getelementptr %type_TypeNode, %type_TypeNode* %102, i32 0, i32 12
	%104 = load i32, i32* %103
	%105 = udiv i32 %104, 8
	%106 = load i32, i32* %offs
	%107 = call i32 @expr_CalcAlign(i32 %105, i32 %106)
	%108 = mul i32 %107, 8
	%109 = load %type_TypeNode*, %type_TypeNode** %st
	%110 = getelementptr %type_TypeNode, %type_TypeNode* %109, i32 0, i32 12
	store i32 %108, i32* %110
	br label %L.22
L.24:
	%111 = load %type_TypeNode*, %type_TypeNode** %at
	%112 = getelementptr %type_TypeNode, %type_TypeNode* %111, i32 0, i32 0
	%113 = load %type_TypeNode*, %type_TypeNode** %112
	%114 = getelementptr %type_TypeNode, %type_TypeNode* %113, i32 0, i32 12
	%115 = load i32, i32* %114
	%116 = load %type_TypeNode*, %type_TypeNode** %st
	%117 = getelementptr %type_TypeNode, %type_TypeNode* %116, i32 0, i32 12
	store i32 %115, i32* %117
	br label %L.22
L.22:
	br label %L.19
L.21:
	%118 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %118, %ast_AstNode** %inx
	br label %L.19
L.19:
	%119 = load %type_TypeNode*, %type_TypeNode** %st
	%120 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %119)
	%121 = load %ast_AstNode*, %ast_AstNode** %array
	%122 = load %ast_AstNode*, %ast_AstNode** %inx
	%123 = load %ast_AstNode*, %ast_AstNode** %len
	%124 = call %ast_AstNode* @ast_New3(i8 15, %type_TypeNode* %120, %ast_AstNode* %121, %ast_AstNode* %122, %ast_AstNode* %123)
	store %ast_AstNode* %124, %ast_AstNode** %tree
	%125 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %125, %ast_AstNode** %rv.0
	br label %return
return:
	%126 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %126
}
@S.639 = private unnamed_addr constant [17 x i8] c"Load via non-REF\00"
define internal %ast_AstNode* @expr_Load(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%t = alloca %type_TypeNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = icmp eq %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %2, %ast_AstNode** %rv.0
	br label %return
L.1:
	%3 = load %ast_AstNode*, %ast_AstNode** %tree
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 8
	%5 = load %type_TypeNode*, %type_TypeNode** %4
	store %type_TypeNode* %5, %type_TypeNode** %t
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	%9 = icmp eq i8 %8, 5
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 0
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	store %type_TypeNode* %12, %type_TypeNode** %t
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = icmp ne %type_TypeNode* %13, null
	br i1 %14, label %L.7, label %L.8
L.7:
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = call %ast_AstNode* @ast_New1(i8 27, %type_TypeNode* %15, %ast_AstNode* %16)
	store %ast_AstNode* %17, %ast_AstNode** %tree
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 11
	%20 = load i32, i32* %19
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 7
	store i32 %20, i32* %22
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 8
	%25 = load %type_TypeNode*, %type_TypeNode** %24
	%26 = load %target_ModelT*, %target_ModelT** @target_Target
	%27 = getelementptr %target_ModelT, %target_ModelT* %26, i32 0, i32 0
	%28 = load i8, i8* %27
	%29 = call i8 @type_NeedSwap(%type_TypeNode* %25, i8 %28)
	%30 = icmp ne i8 %29, 0
	br i1 %30, label %L.10, label %L.9
L.10:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 8
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	%35 = call %ast_AstNode* @ast_New1(i8 32, %type_TypeNode* %33, %ast_AstNode* %34)
	store %ast_AstNode* %35, %ast_AstNode** %tree
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 8
	%38 = load %type_TypeNode*, %type_TypeNode** %37
	%39 = load %target_ModelT*, %target_ModelT** @target_Target
	%40 = getelementptr %target_ModelT, %target_ModelT* %39, i32 0, i32 0
	%41 = load i8, i8* %40
	%42 = call %type_TypeNode* @type_ChangeOrder(%type_TypeNode* %38, i8 %41)
	%43 = load %ast_AstNode*, %ast_AstNode** %tree
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 8
	store %type_TypeNode* %42, %type_TypeNode** %44
	br label %L.9
L.9:
	br label %L.6
L.8:
	call void @lex_Error(i8 26)
	br label %L.6
L.6:
	br label %L.3
L.5:
	%45 = load %ast_AstNode*, %ast_AstNode** %tree
	%46 = getelementptr %ast_AstNode, %ast_AstNode* %45, i32 0, i32 0
	%47 = load i8, i8* %46
	%48 = icmp ne i8 %47, 11
	br i1 %48, label %L.12, label %L.11
L.12:
	%49 = getelementptr [17 x i8], [17 x i8]* @S.639
	%50 = bitcast [17 x i8]* %49 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %50)
	%51 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @ast_Dump(%ast_AstNode* %51)
	br label %L.11
L.11:
	br label %L.3
L.3:
	%52 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %52, %ast_AstNode** %rv.0
	br label %return
return:
	%53 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %53
}
define internal zeroext i8 @expr_IsSignedBinOp(%ast_AstNode* %lhs$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca i8
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = icmp eq i8 %4, 3
	br i1 %5, label %L.2, label %L.1
L.1:
	%6 = load %ast_AstNode*, %ast_AstNode** %rhs
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 16
	%10 = load i8, i8* %9
	%11 = icmp eq i8 %10, 3
	br label %L.2
L.2:
	%12 = phi i1 [ true, %L.0 ], [ %11, %L.1 ]
	br i1 %12, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	store i8 0, i8* %rv.0
	br label %return
return:
	%13 = load i8, i8* %rv.0
	ret i8 %13
}
define internal zeroext i8 @expr_IsFloatBinOp(%ast_AstNode* %lhs$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca i8
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = icmp eq i8 %4, 4
	br i1 %5, label %L.2, label %L.1
L.1:
	%6 = load %ast_AstNode*, %ast_AstNode** %rhs
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 16
	%10 = load i8, i8* %9
	%11 = icmp eq i8 %10, 4
	br label %L.2
L.2:
	%12 = phi i1 [ true, %L.0 ], [ %11, %L.1 ]
	br i1 %12, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	store i8 0, i8* %rv.0
	br label %return
return:
	%13 = load i8, i8* %rv.0
	ret i8 %13
}
define internal i32 @expr_FindFlexSize(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i32
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%size = alloca i32
	%bt = alloca %type_TypeNode*
	store i32 1, i32* %size
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 28
	%4 = load i8, i8* %3
	%5 = icmp ne i8 %4, 0
	br i1 %5, label %L.4, label %L.5
L.4:
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	%9 = zext i8 %8 to i32
	switch i32 %9, label %L.6 [
		i32 6, label %L.8
		i32 7, label %L.9
	]
L.8:
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 0
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	store %type_TypeNode* %12, %type_TypeNode** %bt
	br label %L.7
L.9:
	%f = alloca %symb_SymbNode*
	store %type_TypeNode* null, %type_TypeNode** %bt
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 4
	%15 = load %symb_SymbNode*, %symb_SymbNode** %14
	store %symb_SymbNode* %15, %symb_SymbNode** %f
	br label %L.10
L.10:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %f
	%17 = icmp ne %symb_SymbNode* %16, null
	%18 = xor i1 %17, true
	br i1 %18, label %L.11, label %L.12
L.12:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %f
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	store %type_TypeNode* %21, %type_TypeNode** %bt
	%22 = load %symb_SymbNode*, %symb_SymbNode** %f
	%23 = getelementptr %symb_SymbNode, %symb_SymbNode* %22, i32 0, i32 0
	%24 = load %symb_SymbNode*, %symb_SymbNode** %23
	store %symb_SymbNode* %24, %symb_SymbNode** %f
	br label %L.10
L.11:
	br label %L.7
L.6:
	br label %L.7
L.7:
	%25 = load %type_TypeNode*, %type_TypeNode** %bt
	%26 = icmp ne %type_TypeNode* %25, null
	br i1 %26, label %L.14, label %L.13
L.14:
	%27 = load %type_TypeNode*, %type_TypeNode** %bt
	%28 = call i32 @expr_FindFlexSize(%type_TypeNode* %27)
	store i32 %28, i32* %size
	br label %L.13
L.13:
	br label %L.3
L.5:
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 11
	%31 = load i32, i32* %30
	%32 = udiv i32 %31, 8
	store i32 %32, i32* %size
	br label %L.3
L.3:
	br label %L.1
L.1:
	%33 = load i32, i32* %size
	store i32 %33, i32* %rv.0
	br label %return
return:
	%34 = load i32, i32* %rv.0
	ret i32 %34
}
define internal %ast_AstNode* @expr_GetSizeSpec(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%size = alloca %ast_AstNode*
	%temp = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = getelementptr %type_TypeNode, %type_TypeNode* %1, i32 0, i32 11
	%3 = load i32, i32* %2
	%4 = zext i32 %3 to i64
	%5 = udiv i64 %4, 8
	%6 = call %ast_AstNode* @ast_ConstW(i64 %5)
	store %ast_AstNode* %6, %ast_AstNode** %size
	%7 = load i8, i8* %tok
	%8 = icmp eq i8 %7, 36
	br i1 %8, label %L.2, label %L.3
L.2:
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 28
	%12 = load i8, i8* %11
	%13 = icmp ne i8 %12, 0
	%14 = xor i1 %13, true
	br i1 %14, label %L.5, label %L.4
L.5:
	call void @lex_Error(i8 84)
	br label %L.4
L.4:
	%15 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%16 = call %ast_AstNode* @expr_Const(%type_TypeNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %temp
	%17 = load %ast_AstNode*, %ast_AstNode** %temp
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = call i32 @expr_FindFlexSize(%type_TypeNode* %18)
	%20 = zext i32 %19 to i64
	%21 = call %ast_AstNode* @ast_ConstW(i64 %20)
	%22 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%23 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %17, %ast_AstNode* %21, %type_TypeNode* %22)
	store %ast_AstNode* %23, %ast_AstNode** %temp
	%24 = load %ast_AstNode*, %ast_AstNode** %size
	%25 = load %ast_AstNode*, %ast_AstNode** %temp
	%26 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%27 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %24, %ast_AstNode* %25, %type_TypeNode* %26)
	store %ast_AstNode* %27, %ast_AstNode** %size
	%28 = call i8 @lex_Expect(i8 37)
	store i8 %28, i8* %tok
	br label %L.1
L.3:
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 28
	%31 = load i8, i8* %30
	%32 = icmp ne i8 %31, 0
	br i1 %32, label %L.7, label %L.6
L.7:
	call void @lex_Error(i8 85)
	br label %L.6
L.6:
	br label %L.1
L.1:
	%33 = load %ast_AstNode*, %ast_AstNode** %size
	store %ast_AstNode* %33, %ast_AstNode** %rv.0
	br label %return
return:
	%34 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %34
}
define internal %ast_AstNode* @expr_GetSpaceSpec(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%space = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 5
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%5 = call %ast_AstNode* @expr_Const(%type_TypeNode* %4)
	store %ast_AstNode* %5, %ast_AstNode** %space
	br label %L.1
L.3:
	%6 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %6, %ast_AstNode** %space
	br label %L.1
L.1:
	%7 = load %ast_AstNode*, %ast_AstNode** %space
	store %ast_AstNode* %7, %ast_AstNode** %rv.0
	br label %return
return:
	%8 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %8
}
define internal { %ast_AstNode*, %ast_AstNode* } @expr_SizeSpace(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%rv.1 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%size = alloca %ast_AstNode*
	%space = alloca %ast_AstNode*
	%temp = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load %type_TypeNode*, %type_TypeNode** %t
	%2 = getelementptr %type_TypeNode, %type_TypeNode* %1, i32 0, i32 11
	%3 = load i32, i32* %2
	%4 = zext i32 %3 to i64
	%5 = udiv i64 %4, 8
	%6 = call %ast_AstNode* @ast_ConstW(i64 %5)
	store %ast_AstNode* %6, %ast_AstNode** %size
	%7 = load i8, i8* %tok
	%8 = icmp eq i8 %7, 36
	br i1 %8, label %L.2, label %L.3
L.2:
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 28
	%12 = load i8, i8* %11
	%13 = icmp ne i8 %12, 0
	%14 = xor i1 %13, true
	br i1 %14, label %L.5, label %L.4
L.5:
	call void @lex_Error(i8 84)
	br label %L.4
L.4:
	%15 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%16 = call %ast_AstNode* @expr_Const(%type_TypeNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %temp
	%17 = load %ast_AstNode*, %ast_AstNode** %temp
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = call i32 @expr_FindFlexSize(%type_TypeNode* %18)
	%20 = zext i32 %19 to i64
	%21 = call %ast_AstNode* @ast_ConstW(i64 %20)
	%22 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%23 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %17, %ast_AstNode* %21, %type_TypeNode* %22)
	store %ast_AstNode* %23, %ast_AstNode** %temp
	%24 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%25 = load %ast_AstNode*, %ast_AstNode** %temp
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = call i32 @expr_FindFlexSize(%type_TypeNode* %26)
	%28 = zext i32 %27 to i64
	%29 = call %ast_AstNode* @ast_ConstW(i64 %28)
	%30 = call %ast_AstNode* @ast_New2(i8 56, %type_TypeNode* %24, %ast_AstNode* %25, %ast_AstNode* %29)
	store %ast_AstNode* %30, %ast_AstNode** %temp
	%31 = load %ast_AstNode*, %ast_AstNode** %size
	%32 = load %ast_AstNode*, %ast_AstNode** %temp
	%33 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%34 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %31, %ast_AstNode* %32, %type_TypeNode* %33)
	store %ast_AstNode* %34, %ast_AstNode** %size
	%35 = call i8 @lex_Expect(i8 37)
	store i8 %35, i8* %tok
	br label %L.1
L.3:
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 28
	%38 = load i8, i8* %37
	%39 = icmp ne i8 %38, 0
	br i1 %39, label %L.7, label %L.6
L.7:
	call void @lex_Error(i8 85)
	br label %L.6
L.6:
	br label %L.1
L.1:
	%40 = load i8, i8* %tok
	%41 = icmp eq i8 %40, 5
	br i1 %41, label %L.9, label %L.10
L.9:
	%42 = call i8 @lex_Next()
	store i8 %42, i8* %tok
	%43 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%44 = call %ast_AstNode* @expr_Const(%type_TypeNode* %43)
	store %ast_AstNode* %44, %ast_AstNode** %space
	br label %L.8
L.10:
	%45 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %45, %ast_AstNode** %space
	br label %L.8
L.8:
	%46 = load %ast_AstNode*, %ast_AstNode** %size
	store %ast_AstNode* %46, %ast_AstNode** %rv.0
	%47 = load %ast_AstNode*, %ast_AstNode** %space
	store %ast_AstNode* %47, %ast_AstNode** %rv.1
	br label %return
return:
	%48 = load %ast_AstNode*, %ast_AstNode** %rv.0
	%49 = load %ast_AstNode*, %ast_AstNode** %rv.1
	%mrv0 = insertvalue { %ast_AstNode*, %ast_AstNode* } undef,%ast_AstNode* %48,0
	%mrv1 = insertvalue { %ast_AstNode*, %ast_AstNode* } %mrv0,%ast_AstNode* %49,1
	ret  { %ast_AstNode*, %ast_AstNode* } %mrv1
}
@S.640 = private unnamed_addr constant [13 x i8] c"UnLoad error\00"
define internal %ast_AstNode* @expr_UnLoad(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 27
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 0
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	store %ast_AstNode* %7, %ast_AstNode** %tree
	br label %L.1
L.3:
	%8 = getelementptr [13 x i8], [13 x i8]* @S.640
	%9 = bitcast [13 x i8]* %8 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %9)
	%10 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @ast_Dump(%ast_AstNode* %10)
	br label %L.1
L.1:
	%11 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %11, %ast_AstNode** %rv.0
	br label %return
return:
	%12 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %12
}
define internal %ast_AstNode* @expr_New() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%size = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.3
L.2:
	store %type_TypeNode* null, %type_TypeNode** %t
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_FindKind([0 x i8]* %3, i8 2)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = icmp ne %symb_SymbNode* %5, null
	br i1 %6, label %L.5, label %L.4
L.5:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 1
	%9 = load %type_TypeNode*, %type_TypeNode** %8
	store %type_TypeNode* %9, %type_TypeNode** %t
	br label %L.4
L.4:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = icmp ne %type_TypeNode* %11, null
	br i1 %12, label %L.7, label %L.6
L.7:
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = call %ast_AstNode* @expr_GetSizeSpec(%type_TypeNode* %13)
	store %ast_AstNode* %14, %ast_AstNode** %size
	%15 = load %ast_AstNode*, %ast_AstNode** %size
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 12
	%18 = load i32, i32* %17
	%19 = zext i32 %18 to i64
	%20 = udiv i64 %19, 8
	%21 = call %ast_AstNode* @ast_ConstW(i64 %20)
	%22 = load %type_TypeNode*, %type_TypeNode** %t
	%23 = call %ast_AstNode* @expr_GetSpaceSpec(%type_TypeNode* %22)
	%24 = call %ast_AstNode* @ast_New3(i8 18, %type_TypeNode* null, %ast_AstNode* %15, %ast_AstNode* %21, %ast_AstNode* %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	%25 = load %symb_SymbNode*, %symb_SymbNode** @symb_libnew
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 9
	store %symb_SymbNode* %25, %symb_SymbNode** %27
	%28 = load %type_TypeNode*, %type_TypeNode** @type_addrtype
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 8
	store %type_TypeNode* %28, %type_TypeNode** %30
	%31 = load %target_ModelT*, %target_ModelT** @target_Target
	%32 = getelementptr %target_ModelT, %target_ModelT* %31, i32 0, i32 5
	%33 = getelementptr %target_SizeAlign, %target_SizeAlign* %32, i32 0, i32 0
	%34 = load i8, i8* %33
	%35 = zext i8 %34 to i32
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 7
	store i32 %35, i32* %37
	%38 = load %symb_SymbNode*, %symb_SymbNode** %s
	%39 = getelementptr %symb_SymbNode, %symb_SymbNode* %38, i32 0, i32 1
	%40 = load %type_TypeNode*, %type_TypeNode** %39
	%41 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %40)
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	%43 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %41, %ast_AstNode* %42)
	store %ast_AstNode* %43, %ast_AstNode** %tree
	br label %L.6
L.6:
	br label %L.1
L.3:
	call void @lex_Error(i8 21)
	br label %L.1
L.1:
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %44, %ast_AstNode** %rv.0
	br label %return
return:
	%45 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %45
}
define internal %ast_AstNode* @expr_Delete() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%varb = alloca %ast_AstNode*
	%size = alloca %ast_AstNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %varb
	%1 = load i8, i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load %ast_AstNode*, %ast_AstNode** %varb
	%3 = icmp ne %ast_AstNode* %2, null
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %varb
	%5 = call %ast_AstNode* @expr_Load(%ast_AstNode* %4)
	store %ast_AstNode* %5, %ast_AstNode** %varb
	%6 = load %ast_AstNode*, %ast_AstNode** %varb
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 0
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	store %type_TypeNode* %10, %type_TypeNode** %t
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = icmp ne %type_TypeNode* %11, null
	br i1 %12, label %L.5, label %L.4
L.5:
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = call %ast_AstNode* @expr_GetSizeSpec(%type_TypeNode* %13)
	store %ast_AstNode* %14, %ast_AstNode** %size
	%15 = load %type_TypeNode*, %type_TypeNode** @type_addrtype
	%16 = load %ast_AstNode*, %ast_AstNode** %varb
	%17 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %15, %ast_AstNode* %16)
	%18 = load %ast_AstNode*, %ast_AstNode** %size
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = call %ast_AstNode* @expr_GetSpaceSpec(%type_TypeNode* %19)
	%21 = call %ast_AstNode* @ast_New3(i8 18, %type_TypeNode* null, %ast_AstNode* %17, %ast_AstNode* %18, %ast_AstNode* %20)
	store %ast_AstNode* %21, %ast_AstNode** %tree
	%22 = load %symb_SymbNode*, %symb_SymbNode** @symb_libdel
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 9
	store %symb_SymbNode* %22, %symb_SymbNode** %24
	br label %L.4
L.4:
	br label %L.1
L.3:
	call void @lex_Error(i8 21)
	br label %L.1
L.1:
	%25 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %25, %ast_AstNode** %rv.0
	br label %return
return:
	%26 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %26
}
@S.641 = private unnamed_addr constant [23 x i8] c"expr.Zero: VAR not REF\00"
define internal %ast_AstNode* @expr_Zero() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%temp = alloca %ast_AstNode*
	%size = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%align = alloca i32
	%tok = alloca i8
	%0 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %tree
	%1 = load i8, i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	%3 = icmp ne %ast_AstNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 0
	%6 = load i8, i8* %5
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.3 [
		i32 12, label %L.5
	]
L.5:
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 8
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 16
	%12 = load i8, i8* %11
	%13 = icmp eq i8 %12, 5
	br i1 %13, label %L.7, label %L.8
L.7:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 8
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 0
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	store %type_TypeNode* %18, %type_TypeNode** %t
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 16
	%21 = load i8, i8* %20
	%22 = icmp eq i8 %21, 5
	br i1 %22, label %L.10, label %L.9
L.10:
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = call %ast_AstNode* @ast_New1(i8 27, %type_TypeNode* %23, %ast_AstNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = getelementptr %type_TypeNode, %type_TypeNode* %26, i32 0, i32 0
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	store %type_TypeNode* %28, %type_TypeNode** %t
	br label %L.9
L.9:
	br label %L.6
L.8:
	%29 = getelementptr [23 x i8], [23 x i8]* @S.641
	%30 = bitcast [23 x i8]* %29 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %30)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.6:
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 11
	%33 = load i32, i32* %32
	%34 = zext i32 %33 to i64
	%35 = udiv i64 %34, 8
	%36 = call %ast_AstNode* @ast_ConstW(i64 %35)
	store %ast_AstNode* %36, %ast_AstNode** %size
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 12
	%39 = load i32, i32* %38
	%40 = udiv i32 %39, 8
	store i32 %40, i32* %align
	%41 = load i8, i8* %tok
	%42 = icmp eq i8 %41, 36
	br i1 %42, label %L.12, label %L.11
L.12:
	%43 = call i8 @lex_Next()
	store i8 %43, i8* %tok
	%44 = load %type_TypeNode*, %type_TypeNode** %t
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 28
	%46 = load i8, i8* %45
	%47 = icmp ne i8 %46, 0
	%48 = xor i1 %47, true
	br i1 %48, label %L.14, label %L.13
L.14:
	call void @lex_Error(i8 84)
	br label %L.13
L.13:
	%49 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%50 = call %ast_AstNode* @expr_Const(%type_TypeNode* %49)
	store %ast_AstNode* %50, %ast_AstNode** %temp
	%51 = load %ast_AstNode*, %ast_AstNode** %temp
	%52 = load %type_TypeNode*, %type_TypeNode** %t
	%53 = call i32 @expr_FindFlexSize(%type_TypeNode* %52)
	%54 = zext i32 %53 to i64
	%55 = call %ast_AstNode* @ast_ConstW(i64 %54)
	%56 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%57 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %51, %ast_AstNode* %55, %type_TypeNode* %56)
	store %ast_AstNode* %57, %ast_AstNode** %temp
	%58 = load %ast_AstNode*, %ast_AstNode** %size
	%59 = load %ast_AstNode*, %ast_AstNode** %temp
	%60 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%61 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %58, %ast_AstNode* %59, %type_TypeNode* %60)
	store %ast_AstNode* %61, %ast_AstNode** %size
	%62 = call i8 @lex_Expect(i8 37)
	store i8 %62, i8* %tok
	br label %L.11
L.11:
	br label %L.4
L.3:
	%63 = load %ast_AstNode*, %ast_AstNode** %tree
	%64 = call %ast_AstNode* @expr_GetSize(%ast_AstNode* %63)
	store %ast_AstNode* %64, %ast_AstNode** %size
	%65 = load %ast_AstNode*, %ast_AstNode** %tree
	%66 = call i32 @expr_GetAlignment(%ast_AstNode* %65)
	store i32 %66, i32* %align
	br label %L.4
L.4:
	%67 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	%68 = load %ast_AstNode*, %ast_AstNode** %tree
	%69 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%70 = call %ast_AstNode* @ast_Const(%type_TypeNode* %69, i64 0)
	%71 = load %ast_AstNode*, %ast_AstNode** %size
	%72 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%73 = load i32, i32* %align
	%74 = zext i32 %73 to i64
	%75 = call %ast_AstNode* @ast_Const(%type_TypeNode* %72, i64 %74)
	%76 = call %ast_AstNode* @ast_New4(i8 21, %type_TypeNode* %67, %ast_AstNode* %68, %ast_AstNode* %70, %ast_AstNode* %71, %ast_AstNode* %75)
	store %ast_AstNode* %76, %ast_AstNode** %tree
	br label %L.1
L.1:
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %77, %ast_AstNode** %rv.0
	br label %return
return:
	%78 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %78
}
define internal %ast_AstNode* @expr_IntrinsicUnary(i8 zeroext %op$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%tree = alloca %ast_AstNode*
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %tree
	%1 = load i8, i8* %op
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	%3 = call %ast_AstNode* @ast_OpUnary(i8 %1, %ast_AstNode* %2)
	store %ast_AstNode* %3, %ast_AstNode** %tree
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %4, %ast_AstNode** %rv.0
	br label %return
return:
	%5 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %5
}
@S.642 = private unnamed_addr constant [13 x i8] c"_rol or _ror\00"
define internal %ast_AstNode* @expr_Rotate(i8 zeroext %right$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%right = alloca i8
	store i8 %right$, i8* %right
	%tok = alloca i8
	%tree = alloca %ast_AstNode*
	%shft = alloca %ast_AstNode*
	%op = alloca i8
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %tree
	%1 = load %ast_AstNode*, %ast_AstNode** %tree
	%2 = getelementptr %ast_AstNode, %ast_AstNode* %1, i32 0, i32 8
	%3 = load %type_TypeNode*, %type_TypeNode** %2
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 16
	%5 = load i8, i8* %4
	%6 = icmp ne i8 %5, 2
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = getelementptr [13 x i8], [13 x i8]* @S.642
	%8 = bitcast [13 x i8]* %7 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %8)
	br label %L.1
L.1:
	%9 = load i8, i8* @lex_Token
	%10 = icmp eq i8 %9, 5
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %12, %ast_AstNode** %shft
	br label %L.3
L.5:
	call void @lex_ErrorT(i8 20, i8 5)
	br label %L.3
L.3:
	%13 = load i8, i8* %right
	%14 = icmp ne i8 %13, 0
	br i1 %14, label %L.7, label %L.8
L.7:
	store i8 68, i8* %op
	br label %L.6
L.8:
	store i8 67, i8* %op
	br label %L.6
L.6:
	%15 = load i8, i8* %op
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 8
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	%19 = load %ast_AstNode*, %ast_AstNode** %tree
	%20 = load %ast_AstNode*, %ast_AstNode** %shft
	%21 = call %ast_AstNode* @ast_New2(i8 %15, %type_TypeNode* %18, %ast_AstNode* %19, %ast_AstNode* %20)
	store %ast_AstNode* %21, %ast_AstNode** %tree
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %22, %ast_AstNode** %rv.0
	br label %return
return:
	%23 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %23
}
@S.643 = private unnamed_addr constant [8 x i8] c"_splice\00"
@S.644 = private unnamed_addr constant [8 x i8] c"_splice\00"
define internal %ast_AstNode* @expr_Splice(%type_TypeNode* %et$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%et = alloca %type_TypeNode*
	store %type_TypeNode* %et$, %type_TypeNode** %et
	%tree = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%dbltype = alloca %type_TypeNode*
	%dblsize = alloca i32
	%orgsize = alloca i32
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %lhs
	%1 = call i8 @lex_Expect(i8 5)
	%2 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %2, %ast_AstNode** %rhs
	%3 = load %ast_AstNode*, %ast_AstNode** %lhs
	%4 = icmp ne %ast_AstNode* %3, null
	br i1 %4, label %L.1, label %L.2
L.1:
	%5 = load %ast_AstNode*, %ast_AstNode** %rhs
	%6 = icmp ne %ast_AstNode* %5, null
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %ast_AstNode*, %ast_AstNode** %lhs
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 8
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 16
	%12 = load i8, i8* %11
	%13 = icmp eq i8 %12, 2
	br i1 %13, label %L.5, label %L.6
L.5:
	%14 = load %ast_AstNode*, %ast_AstNode** %rhs
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 8
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 16
	%18 = load i8, i8* %17
	%19 = icmp eq i8 %18, 2
	br label %L.6
L.6:
	%20 = phi i1 [ false, %L.4 ], [ %19, %L.5 ]
	br i1 %20, label %L.8, label %L.9
L.8:
	%21 = load %type_TypeNode*, %type_TypeNode** %et
	%22 = icmp ne %type_TypeNode* %21, null
	br i1 %22, label %L.11, label %L.12
L.11:
	%23 = load %type_TypeNode*, %type_TypeNode** %et
	store %type_TypeNode* %23, %type_TypeNode** %dbltype
	%24 = load %type_TypeNode*, %type_TypeNode** %et
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 10
	%26 = load i32, i32* %25
	store i32 %26, i32* %dblsize
	%27 = load i32, i32* %dblsize
	%28 = udiv i32 %27, 2
	store i32 %28, i32* %orgsize
	br label %L.10
L.12:
	%29 = load %ast_AstNode*, %ast_AstNode** %lhs
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 0
	%31 = load i8, i8* %30
	%32 = icmp ne i8 %31, 6
	br i1 %32, label %L.14, label %L.15
L.14:
	%33 = load %ast_AstNode*, %ast_AstNode** %lhs
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 8
	%35 = load %type_TypeNode*, %type_TypeNode** %34
	%36 = getelementptr %type_TypeNode, %type_TypeNode* %35, i32 0, i32 10
	%37 = load i32, i32* %36
	store i32 %37, i32* %orgsize
	%38 = load i32, i32* %orgsize
	%39 = mul i32 %38, 2
	store i32 %39, i32* %dblsize
	br label %L.13
L.15:
	%40 = load %ast_AstNode*, %ast_AstNode** %rhs
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 0
	%42 = load i8, i8* %41
	%43 = icmp ne i8 %42, 6
	br i1 %43, label %L.17, label %L.18
L.17:
	%44 = load %ast_AstNode*, %ast_AstNode** %rhs
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 8
	%46 = load %type_TypeNode*, %type_TypeNode** %45
	%47 = getelementptr %type_TypeNode, %type_TypeNode* %46, i32 0, i32 10
	%48 = load i32, i32* %47
	store i32 %48, i32* %orgsize
	%49 = load i32, i32* %orgsize
	%50 = mul i32 %49, 2
	store i32 %50, i32* %dblsize
	br label %L.16
L.18:
	%51 = load %ast_AstNode*, %ast_AstNode** %lhs
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 8
	%53 = load %type_TypeNode*, %type_TypeNode** %52
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 10
	%55 = load i32, i32* %54
	store i32 %55, i32* %dblsize
	%56 = load i32, i32* %dblsize
	%57 = udiv i32 %56, 2
	store i32 %57, i32* %orgsize
	br label %L.16
L.16:
	br label %L.13
L.13:
	%58 = load i32, i32* %dblsize
	%59 = call %type_TypeNode* @target_utype(i32 %58)
	store %type_TypeNode* %59, %type_TypeNode** %dbltype
	%60 = load %type_TypeNode*, %type_TypeNode** %dbltype
	%61 = icmp eq %type_TypeNode* %60, null
	br i1 %61, label %L.20, label %L.19
L.20:
	%62 = getelementptr [8 x i8], [8 x i8]* @S.643
	%63 = bitcast [8 x i8]* %62 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %63)
	%64 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %64, %ast_AstNode** %rv.0
	br label %return
L.19:
	br label %L.10
L.10:
	%65 = load %type_TypeNode*, %type_TypeNode** %dbltype
	%66 = load %ast_AstNode*, %ast_AstNode** %lhs
	%67 = call %ast_AstNode* @ast_New1(i8 29, %type_TypeNode* %65, %ast_AstNode* %66)
	store %ast_AstNode* %67, %ast_AstNode** %lhs
	%68 = load i32, i32* %dblsize
	%69 = load %ast_AstNode*, %ast_AstNode** %lhs
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 7
	store i32 %68, i32* %70
	%71 = load %ast_AstNode*, %ast_AstNode** %lhs
	%72 = load i32, i32* %orgsize
	%73 = zext i32 %72 to i64
	%74 = call %ast_AstNode* @ast_ConstW(i64 %73)
	%75 = load %type_TypeNode*, %type_TypeNode** %dbltype
	%76 = call %ast_AstNode* @ast_OpBinary(i8 63, %ast_AstNode* %71, %ast_AstNode* %74, %type_TypeNode* %75)
	store %ast_AstNode* %76, %ast_AstNode** %lhs
	%77 = load %type_TypeNode*, %type_TypeNode** %dbltype
	%78 = load %ast_AstNode*, %ast_AstNode** %rhs
	%79 = call %ast_AstNode* @ast_New1(i8 29, %type_TypeNode* %77, %ast_AstNode* %78)
	store %ast_AstNode* %79, %ast_AstNode** %rhs
	%80 = load i32, i32* %dblsize
	%81 = load %ast_AstNode*, %ast_AstNode** %rhs
	%82 = getelementptr %ast_AstNode, %ast_AstNode* %81, i32 0, i32 7
	store i32 %80, i32* %82
	%83 = load %ast_AstNode*, %ast_AstNode** %lhs
	%84 = load %ast_AstNode*, %ast_AstNode** %rhs
	%85 = call %ast_AstNode* @ast_OpBinary(i8 52, %ast_AstNode* %83, %ast_AstNode* %84, %type_TypeNode* null)
	store %ast_AstNode* %85, %ast_AstNode** %tree
	br label %L.7
L.9:
	%86 = getelementptr [8 x i8], [8 x i8]* @S.644
	%87 = bitcast [8 x i8]* %86 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %87)
	br label %L.7
L.7:
	br label %L.3
L.3:
	%88 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %88, %ast_AstNode** %rv.0
	br label %return
return:
	%89 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %89
}
define internal { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } @expr_GetArrayArg() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%rv.1 = alloca %type_TypeNode*
	%rv.2 = alloca %type_TypeNode*
	%arg = alloca %ast_AstNode*
	%nb = alloca i32
	%na = alloca i32
	%ta = alloca %type_TypeNode*
	%tn = alloca %type_TypeNode*
	%t = alloca %type_TypeNode*
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %arg
	%1 = load %ast_AstNode*, %ast_AstNode** %arg
	%2 = icmp eq %ast_AstNode* %1, null
	br i1 %2, label %L.2, label %L.1
L.2:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	store %type_TypeNode* null, %type_TypeNode** %rv.1
	store %type_TypeNode* null, %type_TypeNode** %rv.2
	br label %return
L.1:
	%3 = load %ast_AstNode*, %ast_AstNode** %arg
	%4 = call %ast_AstNode* @expr_UnLoad(%ast_AstNode* %3)
	store %ast_AstNode* %4, %ast_AstNode** %arg
	%5 = load %ast_AstNode*, %ast_AstNode** %arg
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 8
	%7 = load %type_TypeNode*, %type_TypeNode** %6
	store %type_TypeNode* %7, %type_TypeNode** %t
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = load %type_TypeNode*, %type_TypeNode** @type_addrtype
	%10 = call i8 @type_Compat(%type_TypeNode* %8, %type_TypeNode* %9)
	%11 = icmp ne i8 %10, 0
	%12 = xor i1 %11, true
	br i1 %12, label %L.4, label %L.3
L.4:
	call void @lex_Error(i8 92)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	store %type_TypeNode* null, %type_TypeNode** %rv.1
	store %type_TypeNode* null, %type_TypeNode** %rv.2
	br label %return
L.3:
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 0
	%15 = load %type_TypeNode*, %type_TypeNode** %14
	store %type_TypeNode* %15, %type_TypeNode** %t
	store i32 0, i32* %nb
	%16 = load %ast_AstNode*, %ast_AstNode** %arg
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 0
	%18 = load i8, i8* %17
	%19 = icmp eq i8 %18, 15
	br i1 %19, label %L.6, label %L.7
L.6:
	%20 = load %ast_AstNode*, %ast_AstNode** %arg
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 11
	%22 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %21, i32 0, i32 2
	%23 = load %ast_AstNode*, %ast_AstNode** %22
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 0
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 6
	br i1 %26, label %L.9, label %L.8
L.9:
	%27 = load %ast_AstNode*, %ast_AstNode** %arg
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 2
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 10
	%32 = load i64, i64* %31
	%33 = trunc i64 %32 to i32
	store i32 %33, i32* %nb
	br label %L.8
L.8:
	br label %L.5
L.7:
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 28
	%36 = load i8, i8* %35
	%37 = icmp ne i8 %36, 0
	%38 = xor i1 %37, true
	br i1 %38, label %L.11, label %L.10
L.11:
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = call i32 @type_TypeNode_Span(%type_TypeNode* %39)
	store i32 %40, i32* %nb
	br label %L.10
L.10:
	br label %L.5
L.5:
	%41 = load i32, i32* %nb
	%42 = icmp eq i32 %41, 0
	br i1 %42, label %L.13, label %L.12
L.13:
	call void @lex_Error(i8 93)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	store %type_TypeNode* null, %type_TypeNode** %rv.1
	store %type_TypeNode* null, %type_TypeNode** %rv.2
	br label %return
L.12:
	%43 = load %ast_AstNode*, %ast_AstNode** %arg
	%44 = call i32 @expr_GetAlignment(%ast_AstNode* %43)
	store i32 %44, i32* %na
	%45 = load i32, i32* %nb
	%46 = mul i32 %45, 8
	%47 = call %type_TypeNode* @target_utype(i32 %46)
	store %type_TypeNode* %47, %type_TypeNode** %tn
	%48 = load %type_TypeNode*, %type_TypeNode** %tn
	%49 = icmp eq %type_TypeNode* %48, null
	br i1 %49, label %L.15, label %L.14
L.15:
	call void @lex_Error(i8 94)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	store %type_TypeNode* null, %type_TypeNode** %rv.1
	store %type_TypeNode* null, %type_TypeNode** %rv.2
	br label %return
L.14:
	%50 = load %type_TypeNode*, %type_TypeNode** %tn
	store %type_TypeNode* %50, %type_TypeNode** %ta
	%51 = load %type_TypeNode*, %type_TypeNode** %tn
	%52 = getelementptr %type_TypeNode, %type_TypeNode* %51, i32 0, i32 10
	%53 = load i32, i32* %52
	%54 = load i32, i32* %nb
	%55 = mul i32 %54, 8
	%56 = icmp ugt i32 %53, %55
	br i1 %56, label %L.17, label %L.16
L.16:
	%57 = load %type_TypeNode*, %type_TypeNode** %tn
	%58 = getelementptr %type_TypeNode, %type_TypeNode* %57, i32 0, i32 12
	%59 = load i32, i32* %58
	%60 = load i32, i32* %na
	%61 = mul i32 %60, 8
	%62 = icmp ugt i32 %59, %61
	br label %L.17
L.17:
	%63 = phi i1 [ true, %L.14 ], [ %62, %L.16 ]
	br i1 %63, label %L.19, label %L.18
L.19:
	%64 = load %type_TypeNode*, %type_TypeNode** %ta
	%65 = call %type_TypeNode* @type_Clone(%type_TypeNode* %64)
	store %type_TypeNode* %65, %type_TypeNode** %ta
	%66 = load i32, i32* %nb
	%67 = mul i32 %66, 8
	%68 = load %type_TypeNode*, %type_TypeNode** %ta
	%69 = getelementptr %type_TypeNode, %type_TypeNode* %68, i32 0, i32 10
	store i32 %67, i32* %69
	%70 = load i32, i32* %nb
	%71 = mul i32 %70, 8
	%72 = load %type_TypeNode*, %type_TypeNode** %ta
	%73 = getelementptr %type_TypeNode, %type_TypeNode* %72, i32 0, i32 11
	store i32 %71, i32* %73
	%74 = load i32, i32* %na
	%75 = mul i32 %74, 8
	%76 = load %type_TypeNode*, %type_TypeNode** %ta
	%77 = getelementptr %type_TypeNode, %type_TypeNode* %76, i32 0, i32 12
	store i32 %75, i32* %77
	%78 = load %type_TypeNode*, %type_TypeNode** %ta
	%79 = getelementptr %type_TypeNode, %type_TypeNode* %78, i32 0, i32 25
	store i8 1, i8* %79
	%80 = load %type_TypeNode*, %type_TypeNode** %ta
	%81 = getelementptr %type_TypeNode, %type_TypeNode* %80, i32 0, i32 6
	store %type_TypeNode* null, %type_TypeNode** %81
	%82 = load %type_TypeNode*, %type_TypeNode** %ta
	%83 = getelementptr %type_TypeNode, %type_TypeNode* %82, i32 0, i32 31
	store i8 1, i8* %83
	br label %L.18
L.18:
	%84 = load %ast_AstNode*, %ast_AstNode** %arg
	store %ast_AstNode* %84, %ast_AstNode** %rv.0
	%85 = load %type_TypeNode*, %type_TypeNode** %ta
	store %type_TypeNode* %85, %type_TypeNode** %rv.1
	%86 = load %type_TypeNode*, %type_TypeNode** %tn
	store %type_TypeNode* %86, %type_TypeNode** %rv.2
	br label %return
return:
	%87 = load %ast_AstNode*, %ast_AstNode** %rv.0
	%88 = load %type_TypeNode*, %type_TypeNode** %rv.1
	%89 = load %type_TypeNode*, %type_TypeNode** %rv.2
	%mrv0 = insertvalue { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } undef,%ast_AstNode* %87,0
	%mrv1 = insertvalue { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %mrv0,%type_TypeNode* %88,1
	%mrv2 = insertvalue { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %mrv1,%type_TypeNode* %89,2
	ret  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %mrv2
}
define internal %ast_AstNode* @expr_Pack(i8 zeroext %endian$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%endian = alloca i8
	store i8 %endian$, i8* %endian
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%arg = alloca %ast_AstNode*
	%ta = alloca %type_TypeNode*
	%tn = alloca %type_TypeNode*
	%shf = alloca i32
	%tok = alloca i8
	%0 = call { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } @expr_GetArrayArg()
	%1 = extractvalue  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %0, 0
	%2 = extractvalue  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %0, 1
	%3 = extractvalue  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %0, 2
	store %ast_AstNode* %1, %ast_AstNode** %arg
	store %type_TypeNode* %2, %type_TypeNode** %ta
	store %type_TypeNode* %3, %type_TypeNode** %tn
	%4 = load i8, i8* %tok
	%5 = icmp ne i8 %4, 5
	br i1 %5, label %L.2, label %L.1
L.2:
	call void @lex_ErrorT(i8 20, i8 5)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.1:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %7, %ast_AstNode** %rhs
	%8 = load %ast_AstNode*, %ast_AstNode** %arg
	%9 = icmp eq %ast_AstNode* %8, null
	br i1 %9, label %L.4, label %L.3
L.3:
	%10 = load %ast_AstNode*, %ast_AstNode** %rhs
	%11 = icmp eq %ast_AstNode* %10, null
	br label %L.4
L.4:
	%12 = phi i1 [ true, %L.1 ], [ %11, %L.3 ]
	br i1 %12, label %L.6, label %L.5
L.6:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.5:
	%13 = load %ast_AstNode*, %ast_AstNode** %rhs
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 8
	%15 = load %type_TypeNode*, %type_TypeNode** %14
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 16
	%17 = load i8, i8* %16
	%18 = icmp ne i8 %17, 2
	br i1 %18, label %L.8, label %L.7
L.8:
	call void @lex_Error(i8 95)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.7:
	%19 = load %type_TypeNode*, %type_TypeNode** %tn
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 10
	%21 = load i32, i32* %20
	%22 = load %type_TypeNode*, %type_TypeNode** %ta
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 10
	%24 = load i32, i32* %23
	%25 = sub i32 %21, %24
	store i32 %25, i32* %shf
	%26 = load i8, i8* %endian
	%27 = load %target_ModelT*, %target_ModelT** @target_Target
	%28 = getelementptr %target_ModelT, %target_ModelT* %27, i32 0, i32 0
	%29 = load i8, i8* %28
	%30 = icmp ne i8 %26, %29
	br i1 %30, label %L.10, label %L.9
L.10:
	%31 = load %ast_AstNode*, %ast_AstNode** %rhs
	%32 = load %type_TypeNode*, %type_TypeNode** %tn
	%33 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %31, %type_TypeNode* %32)
	store %ast_AstNode* %33, %ast_AstNode** %rhs
	%34 = load %ast_AstNode*, %ast_AstNode** %rhs
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 8
	%36 = load %type_TypeNode*, %type_TypeNode** %35
	%37 = load %ast_AstNode*, %ast_AstNode** %rhs
	%38 = call %ast_AstNode* @ast_New1(i8 32, %type_TypeNode* %36, %ast_AstNode* %37)
	store %ast_AstNode* %38, %ast_AstNode** %rhs
	%39 = load i32, i32* %shf
	%40 = icmp ne i32 %39, 0
	br i1 %40, label %L.12, label %L.11
L.12:
	%41 = load %ast_AstNode*, %ast_AstNode** %rhs
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 8
	%43 = load %type_TypeNode*, %type_TypeNode** %42
	%44 = load %ast_AstNode*, %ast_AstNode** %rhs
	%45 = load i32, i32* %shf
	%46 = zext i32 %45 to i64
	%47 = call %ast_AstNode* @ast_ConstW(i64 %46)
	%48 = call %ast_AstNode* @ast_New2(i8 64, %type_TypeNode* %43, %ast_AstNode* %44, %ast_AstNode* %47)
	store %ast_AstNode* %48, %ast_AstNode** %rhs
	br label %L.11
L.11:
	br label %L.9
L.9:
	%49 = load %ast_AstNode*, %ast_AstNode** %rhs
	%50 = load %type_TypeNode*, %type_TypeNode** %ta
	%51 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %49, %type_TypeNode* %50)
	store %ast_AstNode* %51, %ast_AstNode** %rhs
	%52 = load %type_TypeNode*, %type_TypeNode** %ta
	%53 = getelementptr %type_TypeNode, %type_TypeNode* %52, i32 0, i32 11
	%54 = load i32, i32* %53
	%55 = load %ast_AstNode*, %ast_AstNode** %rhs
	%56 = getelementptr %ast_AstNode, %ast_AstNode* %55, i32 0, i32 7
	store i32 %54, i32* %56
	%57 = load %ast_AstNode*, %ast_AstNode** %arg
	%58 = load %type_TypeNode*, %type_TypeNode** %ta
	%59 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %58)
	%60 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %57, %type_TypeNode* %59)
	store %ast_AstNode* %60, %ast_AstNode** %arg
	%61 = load %type_TypeNode*, %type_TypeNode** %ta
	%62 = getelementptr %type_TypeNode, %type_TypeNode* %61, i32 0, i32 11
	%63 = load i32, i32* %62
	%64 = load %ast_AstNode*, %ast_AstNode** %arg
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 7
	store i32 %63, i32* %65
	%66 = load %type_TypeNode*, %type_TypeNode** %ta
	%67 = load %ast_AstNode*, %ast_AstNode** %arg
	%68 = load %ast_AstNode*, %ast_AstNode** %rhs
	%69 = call %ast_AstNode* @ast_New2(i8 28, %type_TypeNode* %66, %ast_AstNode* %67, %ast_AstNode* %68)
	store %ast_AstNode* %69, %ast_AstNode** %tree
	%70 = load %type_TypeNode*, %type_TypeNode** %ta
	%71 = getelementptr %type_TypeNode, %type_TypeNode* %70, i32 0, i32 11
	%72 = load i32, i32* %71
	%73 = load %ast_AstNode*, %ast_AstNode** %tree
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 7
	store i32 %72, i32* %74
	%75 = load %ast_AstNode*, %ast_AstNode** %tree
	%76 = call %ast_AstNode* @ast_New1(i8 1, %type_TypeNode* null, %ast_AstNode* %75)
	store %ast_AstNode* %76, %ast_AstNode** %tree
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %77, %ast_AstNode** %rv.0
	br label %return
return:
	%78 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %78
}
define internal %ast_AstNode* @expr_Unpk(i8 zeroext %endian$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%endian = alloca i8
	store i8 %endian$, i8* %endian
	%tree = alloca %ast_AstNode*
	%arg = alloca %ast_AstNode*
	%ta = alloca %type_TypeNode*
	%tn = alloca %type_TypeNode*
	%shf = alloca i32
	%0 = call { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } @expr_GetArrayArg()
	%1 = extractvalue  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %0, 0
	%2 = extractvalue  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %0, 1
	%3 = extractvalue  { %ast_AstNode*, %type_TypeNode*, %type_TypeNode* } %0, 2
	store %ast_AstNode* %1, %ast_AstNode** %arg
	store %type_TypeNode* %2, %type_TypeNode** %ta
	store %type_TypeNode* %3, %type_TypeNode** %tn
	%4 = load %ast_AstNode*, %ast_AstNode** %arg
	%5 = icmp eq %ast_AstNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.1:
	%6 = load %type_TypeNode*, %type_TypeNode** %tn
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 10
	%8 = load i32, i32* %7
	%9 = load %type_TypeNode*, %type_TypeNode** %ta
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 10
	%11 = load i32, i32* %10
	%12 = sub i32 %8, %11
	store i32 %12, i32* %shf
	%13 = load %ast_AstNode*, %ast_AstNode** %arg
	%14 = load %type_TypeNode*, %type_TypeNode** %ta
	%15 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %14)
	%16 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %13, %type_TypeNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = call %ast_AstNode* @expr_Load(%ast_AstNode* %17)
	store %ast_AstNode* %18, %ast_AstNode** %tree
	%19 = load i8, i8* %endian
	%20 = load %target_ModelT*, %target_ModelT** @target_Target
	%21 = getelementptr %target_ModelT, %target_ModelT* %20, i32 0, i32 0
	%22 = load i8, i8* %21
	%23 = icmp ne i8 %19, %22
	br i1 %23, label %L.4, label %L.3
L.4:
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = load %type_TypeNode*, %type_TypeNode** %tn
	%26 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %24, %type_TypeNode* %25)
	store %ast_AstNode* %26, %ast_AstNode** %tree
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 8
	%29 = load %type_TypeNode*, %type_TypeNode** %28
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	%31 = call %ast_AstNode* @ast_New1(i8 32, %type_TypeNode* %29, %ast_AstNode* %30)
	store %ast_AstNode* %31, %ast_AstNode** %tree
	%32 = load i32, i32* %shf
	%33 = icmp ne i32 %32, 0
	br i1 %33, label %L.6, label %L.5
L.6:
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 8
	%36 = load %type_TypeNode*, %type_TypeNode** %35
	%37 = load %ast_AstNode*, %ast_AstNode** %tree
	%38 = load i32, i32* %shf
	%39 = zext i32 %38 to i64
	%40 = call %ast_AstNode* @ast_ConstW(i64 %39)
	%41 = call %ast_AstNode* @ast_New2(i8 64, %type_TypeNode* %36, %ast_AstNode* %37, %ast_AstNode* %40)
	store %ast_AstNode* %41, %ast_AstNode** %tree
	br label %L.5
L.5:
	br label %L.3
L.3:
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %42, %ast_AstNode** %rv.0
	br label %return
return:
	%43 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %43
}
define internal %ast_AstNode* @expr_Convert(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%to = alloca i8
	%fm = alloca i8
	%op = alloca i8
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %tree
	%1 = load %ast_AstNode*, %ast_AstNode** %tree
	%2 = icmp ne %ast_AstNode* %1, null
	br i1 %2, label %L.1, label %L.2
L.1:
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = icmp ne %type_TypeNode* %3, null
	br label %L.2
L.2:
	%5 = phi i1 [ false, %L.0 ], [ %4, %L.1 ]
	br i1 %5, label %L.4, label %L.3
L.4:
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	store i8 %8, i8* %to
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 8
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 16
	%13 = load i8, i8* %12
	store i8 %13, i8* %fm
	store i8 0, i8* %op
	%14 = load i8, i8* %to
	%15 = zext i8 %14 to i32
	switch i32 %15, label %L.5 [
		i32 4, label %L.7
		i32 2, label %L.8
		i32 3, label %L.9
	]
L.7:
	%16 = load i8, i8* %fm
	%17 = zext i8 %16 to i32
	switch i32 %17, label %L.10 [
		i32 2, label %L.12
		i32 3, label %L.13
	]
L.12:
	store i8 47, i8* %op
	br label %L.11
L.13:
	store i8 48, i8* %op
	br label %L.11
L.10:
	br label %L.11
L.11:
	br label %L.6
L.8:
	%18 = load i8, i8* %fm
	%19 = icmp eq i8 %18, 4
	br i1 %19, label %L.15, label %L.14
L.15:
	store i8 49, i8* %op
	br label %L.14
L.14:
	br label %L.6
L.9:
	%20 = load i8, i8* %fm
	%21 = icmp eq i8 %20, 4
	br i1 %21, label %L.17, label %L.16
L.17:
	store i8 50, i8* %op
	br label %L.16
L.16:
	br label %L.6
L.5:
	br label %L.6
L.6:
	%22 = load i8, i8* %op
	%23 = icmp ne i8 %22, 0
	br i1 %23, label %L.19, label %L.18
L.19:
	%24 = load i8, i8* %op
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = call %ast_AstNode* @ast_New1(i8 %24, %type_TypeNode* %25, %ast_AstNode* %26)
	store %ast_AstNode* %27, %ast_AstNode** %tree
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 11
	%30 = load i32, i32* %29
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 7
	store i32 %30, i32* %32
	br label %L.18
L.18:
	br label %L.3
L.3:
	%33 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %33, %ast_AstNode** %rv.0
	br label %return
return:
	%34 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %34
}
define internal %ast_AstNode* @expr_ConvertOld() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tok = alloca i8
	%tree = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%to = alloca i8
	%fm = alloca i8
	%op = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	store %type_TypeNode* null, %type_TypeNode** %t
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_Find([0 x i8]* %3)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = icmp ne %symb_SymbNode* %5, null
	br i1 %6, label %L.5, label %L.6
L.5:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 13
	%9 = load i8, i8* %8
	%10 = icmp eq i8 %9, 2
	br i1 %10, label %L.8, label %L.9
L.8:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 1
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	store %type_TypeNode* %13, %type_TypeNode** %t
	br label %L.7
L.9:
	call void @lex_Error(i8 29)
	br label %L.7
L.7:
	br label %L.4
L.6:
	%14 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorS(i8 22, [0 x i8]* %14)
	br label %L.4
L.4:
	%15 = call i8 @lex_Next()
	store i8 %15, i8* %tok
	%16 = load i8, i8* %tok
	%17 = icmp eq i8 %16, 5
	br i1 %17, label %L.11, label %L.10
L.11:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = call %ast_AstNode* @expr_Convert(%type_TypeNode* %19)
	store %ast_AstNode* %20, %ast_AstNode** %tree
	br label %L.10
L.10:
	br label %L.1
L.3:
	call void @lex_Error(i8 29)
	br label %L.1
L.1:
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %21, %ast_AstNode** %rv.0
	br label %return
return:
	%22 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %22
}
@S.645 = private unnamed_addr constant [6 x i8] c"_sqrt\00"
@S.646 = private unnamed_addr constant [11 x i8] c"_lo or _hi\00"
@S.647 = private unnamed_addr constant [6 x i8] c"_zlen\00"
@S.648 = private unnamed_addr constant [18 x i8] c"Intrinsic unknown\00"
define internal %ast_AstNode* @expr_Intrinsic(%symb_SymbNode* %ps$, %type_TypeNode* %et$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%et = alloca %type_TypeNode*
	store %type_TypeNode* %et$, %type_TypeNode** %et
	%tree = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%tok = alloca i8
	%which = alloca i8
	%op = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 36
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 10
	%6 = load i16, i16* %5
	%7 = trunc i16 %6 to i8
	store i8 %7, i8* %which
	%8 = load i8, i8* %which
	%9 = zext i8 %8 to i32
	switch i32 %9, label %L.4 [
		i32 1, label %L.6
		i32 2, label %L.7
		i32 26, label %L.8
		i32 3, label %L.9
		i32 4, label %L.9
		i32 23, label %L.10
		i32 24, label %L.10
		i32 25, label %L.11
		i32 14, label %L.12
		i32 5, label %L.13
		i32 6, label %L.14
		i32 7, label %L.15
		i32 8, label %L.16
		i32 9, label %L.17
		i32 19, label %L.18
		i32 20, label %L.19
		i32 21, label %L.20
		i32 22, label %L.21
		i32 15, label %L.22
		i32 16, label %L.23
		i32 17, label %L.24
		i32 18, label %L.25
		i32 10, label %L.26
		i32 13, label %L.27
		i32 11, label %L.28
		i32 12, label %L.29
	]
L.6:
	%10 = load i8, i8* %tok
	%11 = icmp eq i8 %10, 46
	br i1 %11, label %L.31, label %L.32
L.31:
	%12 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%13 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%14 = call i8 @symb_IsDefined([0 x i8]* %13)
	%15 = zext i8 %14 to i32
	%16 = zext i32 %15 to i64
	%17 = call %ast_AstNode* @ast_Const(%type_TypeNode* %12, i64 %16)
	store %ast_AstNode* %17, %ast_AstNode** %tree
	br label %L.30
L.32:
	call void @lex_Error(i8 21)
	br label %L.30
L.30:
	br label %L.5
L.7:
	%18 = call %ast_AstNode* @expr_IntrinsicUnary(i8 41)
	store %ast_AstNode* %18, %ast_AstNode** %tree
	%19 = load %ast_AstNode*, %ast_AstNode** %tree
	%20 = icmp ne %ast_AstNode* %19, null
	br i1 %20, label %L.33, label %L.34
L.33:
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 8
	%23 = load %type_TypeNode*, %type_TypeNode** %22
	%24 = getelementptr %type_TypeNode, %type_TypeNode* %23, i32 0, i32 16
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 3
	br label %L.34
L.34:
	%27 = phi i1 [ false, %L.7 ], [ %26, %L.33 ]
	br i1 %27, label %L.36, label %L.35
L.36:
	%28 = load %ast_AstNode*, %ast_AstNode** %tree
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 7
	%30 = load i32, i32* %29
	%31 = call %type_TypeNode* @target_utype(i32 %30)
	%32 = load %ast_AstNode*, %ast_AstNode** %tree
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 8
	store %type_TypeNode* %31, %type_TypeNode** %33
	br label %L.35
L.35:
	br label %L.5
L.8:
	%34 = call %ast_AstNode* @expr_IntrinsicUnary(i8 42)
	store %ast_AstNode* %34, %ast_AstNode** %tree
	%35 = load %ast_AstNode*, %ast_AstNode** %tree
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 8
	%37 = load %type_TypeNode*, %type_TypeNode** %36
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 16
	%39 = load i8, i8* %38
	%40 = icmp eq i8 %39, 3
	br i1 %40, label %L.38, label %L.37
L.38:
	%41 = getelementptr [6 x i8], [6 x i8]* @S.645
	%42 = bitcast [6 x i8]* %41 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %42)
	br label %L.37
L.37:
	br label %L.5
L.9:
	%43 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %43, %ast_AstNode** %lhs
	%44 = call i8 @lex_Expect(i8 5)
	%45 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %45, %ast_AstNode** %rhs
	%46 = load %ast_AstNode*, %ast_AstNode** %lhs
	%47 = icmp ne %ast_AstNode* %46, null
	br i1 %47, label %L.39, label %L.40
L.39:
	%48 = load %ast_AstNode*, %ast_AstNode** %rhs
	%49 = icmp ne %ast_AstNode* %48, null
	br label %L.40
L.40:
	%50 = phi i1 [ false, %L.9 ], [ %49, %L.39 ]
	br i1 %50, label %L.42, label %L.41
L.42:
	%51 = load %ast_AstNode*, %ast_AstNode** %lhs
	%52 = load %ast_AstNode*, %ast_AstNode** %rhs
	%53 = call i8 @expr_IsFloatBinOp(%ast_AstNode* %51, %ast_AstNode* %52)
	%54 = icmp ne i8 %53, 0
	br i1 %54, label %L.44, label %L.45
L.44:
	%55 = load i8, i8* %which
	%56 = icmp eq i8 %55, 3
	br i1 %56, label %L.47, label %L.48
L.47:
	store i8 90, i8* %op
	br label %L.46
L.48:
	store i8 91, i8* %op
	br label %L.46
L.46:
	%57 = load i8, i8* %op
	%58 = load %ast_AstNode*, %ast_AstNode** %lhs
	%59 = load %ast_AstNode*, %ast_AstNode** %rhs
	%60 = load %type_TypeNode*, %type_TypeNode** %et
	%61 = call %ast_AstNode* @ast_OpFloat(i8 %57, %ast_AstNode* %58, %ast_AstNode* %59, %type_TypeNode* %60)
	store %ast_AstNode* %61, %ast_AstNode** %tree
	br label %L.43
L.45:
	%62 = load %ast_AstNode*, %ast_AstNode** %lhs
	%63 = load %ast_AstNode*, %ast_AstNode** %rhs
	%64 = call i8 @expr_IsSignedBinOp(%ast_AstNode* %62, %ast_AstNode* %63)
	%65 = icmp ne i8 %64, 0
	br i1 %65, label %L.50, label %L.51
L.50:
	%66 = load i8, i8* %which
	%67 = icmp eq i8 %66, 3
	br i1 %67, label %L.53, label %L.54
L.53:
	store i8 61, i8* %op
	br label %L.52
L.54:
	store i8 62, i8* %op
	br label %L.52
L.52:
	br label %L.49
L.51:
	%68 = load i8, i8* %which
	%69 = icmp eq i8 %68, 3
	br i1 %69, label %L.56, label %L.57
L.56:
	store i8 59, i8* %op
	br label %L.55
L.57:
	store i8 60, i8* %op
	br label %L.55
L.55:
	br label %L.49
L.49:
	%70 = load i8, i8* %op
	%71 = load %ast_AstNode*, %ast_AstNode** %lhs
	%72 = load %ast_AstNode*, %ast_AstNode** %rhs
	%73 = load %type_TypeNode*, %type_TypeNode** %et
	%74 = call %ast_AstNode* @ast_OpBinary(i8 %70, %ast_AstNode* %71, %ast_AstNode* %72, %type_TypeNode* %73)
	store %ast_AstNode* %74, %ast_AstNode** %tree
	br label %L.43
L.43:
	br label %L.41
L.41:
	br label %L.5
L.10:
	%haft = alloca %type_TypeNode*
	%hafsize = alloca i32
	%75 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %75, %ast_AstNode** %tree
	%76 = load %ast_AstNode*, %ast_AstNode** %tree
	%77 = getelementptr %ast_AstNode, %ast_AstNode* %76, i32 0, i32 8
	%78 = load %type_TypeNode*, %type_TypeNode** %77
	%79 = getelementptr %type_TypeNode, %type_TypeNode* %78, i32 0, i32 16
	%80 = load i8, i8* %79
	%81 = icmp eq i8 %80, 2
	br i1 %81, label %L.58, label %L.59
L.58:
	%82 = load %ast_AstNode*, %ast_AstNode** %tree
	%83 = getelementptr %ast_AstNode, %ast_AstNode* %82, i32 0, i32 8
	%84 = load %type_TypeNode*, %type_TypeNode** %83
	%85 = getelementptr %type_TypeNode, %type_TypeNode* %84, i32 0, i32 10
	%86 = load i32, i32* %85
	%87 = icmp uge i32 %86, 16
	br label %L.59
L.59:
	%88 = phi i1 [ false, %L.10 ], [ %87, %L.58 ]
	br i1 %88, label %L.61, label %L.62
L.61:
	%89 = load %ast_AstNode*, %ast_AstNode** %tree
	%90 = getelementptr %ast_AstNode, %ast_AstNode* %89, i32 0, i32 8
	%91 = load %type_TypeNode*, %type_TypeNode** %90
	%92 = getelementptr %type_TypeNode, %type_TypeNode* %91, i32 0, i32 10
	%93 = load i32, i32* %92
	%94 = udiv i32 %93, 2
	store i32 %94, i32* %hafsize
	%95 = load i8, i8* %which
	%96 = icmp eq i8 %95, 24
	br i1 %96, label %L.64, label %L.63
L.64:
	%97 = load %ast_AstNode*, %ast_AstNode** %tree
	%98 = load i32, i32* %hafsize
	%99 = zext i32 %98 to i64
	%100 = call %ast_AstNode* @ast_ConstW(i64 %99)
	%101 = load %ast_AstNode*, %ast_AstNode** %tree
	%102 = getelementptr %ast_AstNode, %ast_AstNode* %101, i32 0, i32 8
	%103 = load %type_TypeNode*, %type_TypeNode** %102
	%104 = call %ast_AstNode* @ast_OpBinary(i8 64, %ast_AstNode* %97, %ast_AstNode* %100, %type_TypeNode* %103)
	store %ast_AstNode* %104, %ast_AstNode** %tree
	br label %L.63
L.63:
	%105 = load i32, i32* %hafsize
	%106 = call %type_TypeNode* @target_utype(i32 %105)
	store %type_TypeNode* %106, %type_TypeNode** %haft
	%107 = load %type_TypeNode*, %type_TypeNode** %haft
	%108 = load %ast_AstNode*, %ast_AstNode** %tree
	%109 = call %ast_AstNode* @ast_New1(i8 31, %type_TypeNode* %107, %ast_AstNode* %108)
	store %ast_AstNode* %109, %ast_AstNode** %tree
	%110 = load i32, i32* %hafsize
	%111 = load %ast_AstNode*, %ast_AstNode** %tree
	%112 = getelementptr %ast_AstNode, %ast_AstNode* %111, i32 0, i32 7
	store i32 %110, i32* %112
	br label %L.60
L.62:
	%113 = getelementptr [11 x i8], [11 x i8]* @S.646
	%114 = bitcast [11 x i8]* %113 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %114)
	br label %L.60
L.60:
	br label %L.5
L.11:
	%115 = load %type_TypeNode*, %type_TypeNode** %et
	%116 = call %ast_AstNode* @expr_Splice(%type_TypeNode* %115)
	store %ast_AstNode* %116, %ast_AstNode** %tree
	br label %L.5
L.12:
	%align = alloca i32
	%117 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* null)
	store %ast_AstNode* %117, %ast_AstNode** %lhs
	%118 = load %ast_AstNode*, %ast_AstNode** %lhs
	%119 = icmp ne %ast_AstNode* %118, null
	br i1 %119, label %L.66, label %L.65
L.66:
	%120 = load %ast_AstNode*, %ast_AstNode** %lhs
	%121 = getelementptr %ast_AstNode, %ast_AstNode* %120, i32 0, i32 0
	%122 = load i8, i8* %121
	%123 = icmp eq i8 %122, 27
	br i1 %123, label %L.67, label %L.68
L.67:
	%124 = load %ast_AstNode*, %ast_AstNode** %lhs
	%125 = getelementptr %ast_AstNode, %ast_AstNode* %124, i32 0, i32 8
	%126 = load %type_TypeNode*, %type_TypeNode** %125
	%127 = getelementptr %type_TypeNode, %type_TypeNode* %126, i32 0, i32 16
	%128 = load i8, i8* %127
	%129 = icmp eq i8 %128, 6
	br label %L.68
L.68:
	%130 = phi i1 [ false, %L.66 ], [ %129, %L.67 ]
	br i1 %130, label %L.70, label %L.69
L.70:
	%131 = load %ast_AstNode*, %ast_AstNode** %lhs
	%132 = getelementptr %ast_AstNode, %ast_AstNode* %131, i32 0, i32 11
	%133 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %132, i32 0, i32 0
	%134 = load %ast_AstNode*, %ast_AstNode** %133
	store %ast_AstNode* %134, %ast_AstNode** %lhs
	br label %L.69
L.69:
	%135 = load %ast_AstNode*, %ast_AstNode** %lhs
	%136 = getelementptr %ast_AstNode, %ast_AstNode* %135, i32 0, i32 8
	%137 = load %type_TypeNode*, %type_TypeNode** %136
	%138 = getelementptr %type_TypeNode, %type_TypeNode* %137, i32 0, i32 16
	%139 = load i8, i8* %138
	%140 = icmp ne i8 %139, 5
	br i1 %140, label %L.76, label %L.75
L.75:
	%141 = load %ast_AstNode*, %ast_AstNode** %lhs
	%142 = getelementptr %ast_AstNode, %ast_AstNode* %141, i32 0, i32 8
	%143 = load %type_TypeNode*, %type_TypeNode** %142
	%144 = getelementptr %type_TypeNode, %type_TypeNode* %143, i32 0, i32 0
	%145 = load %type_TypeNode*, %type_TypeNode** %144
	%146 = getelementptr %type_TypeNode, %type_TypeNode* %145, i32 0, i32 16
	%147 = load i8, i8* %146
	%148 = icmp ne i8 %147, 6
	br label %L.76
L.76:
	%149 = phi i1 [ true, %L.69 ], [ %148, %L.75 ]
	br i1 %149, label %L.74, label %L.73
L.73:
	%150 = load %ast_AstNode*, %ast_AstNode** %lhs
	%151 = getelementptr %ast_AstNode, %ast_AstNode* %150, i32 0, i32 8
	%152 = load %type_TypeNode*, %type_TypeNode** %151
	%153 = getelementptr %type_TypeNode, %type_TypeNode* %152, i32 0, i32 0
	%154 = load %type_TypeNode*, %type_TypeNode** %153
	%155 = getelementptr %type_TypeNode, %type_TypeNode* %154, i32 0, i32 0
	%156 = load %type_TypeNode*, %type_TypeNode** %155
	%157 = getelementptr %type_TypeNode, %type_TypeNode* %156, i32 0, i32 16
	%158 = load i8, i8* %157
	%159 = icmp ne i8 %158, 2
	br label %L.74
L.74:
	%160 = phi i1 [ true, %L.76 ], [ %159, %L.73 ]
	br i1 %160, label %L.72, label %L.71
L.71:
	%161 = load %ast_AstNode*, %ast_AstNode** %lhs
	%162 = getelementptr %ast_AstNode, %ast_AstNode* %161, i32 0, i32 8
	%163 = load %type_TypeNode*, %type_TypeNode** %162
	%164 = getelementptr %type_TypeNode, %type_TypeNode* %163, i32 0, i32 0
	%165 = load %type_TypeNode*, %type_TypeNode** %164
	%166 = getelementptr %type_TypeNode, %type_TypeNode* %165, i32 0, i32 0
	%167 = load %type_TypeNode*, %type_TypeNode** %166
	%168 = getelementptr %type_TypeNode, %type_TypeNode* %167, i32 0, i32 11
	%169 = load i32, i32* %168
	%170 = icmp ne i32 %169, 8
	br label %L.72
L.72:
	%171 = phi i1 [ true, %L.74 ], [ %170, %L.71 ]
	br i1 %171, label %L.78, label %L.77
L.78:
	%172 = getelementptr [6 x i8], [6 x i8]* @S.647
	%173 = bitcast [6 x i8]* %172 to [0 x i8]*
	call void @lex_ErrorS(i8 33, [0 x i8]* %173)
	br label %L.77
L.77:
	%174 = load %ast_AstNode*, %ast_AstNode** %lhs
	%175 = call i32 @expr_GetAlignment(%ast_AstNode* %174)
	store i32 %175, i32* %align
	%176 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%177 = load %ast_AstNode*, %ast_AstNode** %lhs
	%178 = load i32, i32* %align
	%179 = zext i32 %178 to i64
	%180 = call %ast_AstNode* @ast_ConstW(i64 %179)
	%181 = call %ast_AstNode* @ast_New2(i8 43, %type_TypeNode* %176, %ast_AstNode* %177, %ast_AstNode* %180)
	store %ast_AstNode* %181, %ast_AstNode** %tree
	%182 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%183 = getelementptr %type_TypeNode, %type_TypeNode* %182, i32 0, i32 11
	%184 = load i32, i32* %183
	%185 = load %ast_AstNode*, %ast_AstNode** %tree
	%186 = getelementptr %ast_AstNode, %ast_AstNode* %185, i32 0, i32 7
	store i32 %184, i32* %186
	br label %L.65
L.65:
	br label %L.5
L.13:
	%187 = call %ast_AstNode* @expr_IntrinsicUnary(i8 34)
	store %ast_AstNode* %187, %ast_AstNode** %tree
	br label %L.5
L.14:
	%188 = call %ast_AstNode* @expr_IntrinsicUnary(i8 35)
	store %ast_AstNode* %188, %ast_AstNode** %tree
	br label %L.5
L.15:
	%189 = call %ast_AstNode* @expr_IntrinsicUnary(i8 36)
	store %ast_AstNode* %189, %ast_AstNode** %tree
	br label %L.5
L.16:
	%190 = call %ast_AstNode* @expr_IntrinsicUnary(i8 37)
	store %ast_AstNode* %190, %ast_AstNode** %tree
	br label %L.5
L.17:
	%191 = call %ast_AstNode* @expr_IntrinsicUnary(i8 38)
	store %ast_AstNode* %191, %ast_AstNode** %tree
	br label %L.5
L.18:
	%192 = call %ast_AstNode* @expr_Rotate(i8 0)
	store %ast_AstNode* %192, %ast_AstNode** %tree
	br label %L.5
L.19:
	%193 = call %ast_AstNode* @expr_Rotate(i8 1)
	store %ast_AstNode* %193, %ast_AstNode** %tree
	br label %L.5
L.20:
	%194 = call %ast_AstNode* @expr_IntrinsicUnary(i8 32)
	store %ast_AstNode* %194, %ast_AstNode** %tree
	br label %L.5
L.21:
	%195 = call %ast_AstNode* @expr_IntrinsicUnary(i8 33)
	store %ast_AstNode* %195, %ast_AstNode** %tree
	br label %L.5
L.22:
	%196 = call %ast_AstNode* @expr_Pack(i8 2)
	store %ast_AstNode* %196, %ast_AstNode** %tree
	br label %L.5
L.23:
	%197 = call %ast_AstNode* @expr_Pack(i8 1)
	store %ast_AstNode* %197, %ast_AstNode** %tree
	br label %L.5
L.24:
	%198 = call %ast_AstNode* @expr_Unpk(i8 2)
	store %ast_AstNode* %198, %ast_AstNode** %tree
	br label %L.5
L.25:
	%199 = call %ast_AstNode* @expr_Unpk(i8 1)
	store %ast_AstNode* %199, %ast_AstNode** %tree
	br label %L.5
L.26:
	%200 = call %ast_AstNode* @expr_ConvertOld()
	store %ast_AstNode* %200, %ast_AstNode** %tree
	br label %L.5
L.27:
	%201 = call %ast_AstNode* @expr_Zero()
	store %ast_AstNode* %201, %ast_AstNode** %tree
	br label %L.5
L.28:
	%202 = call %ast_AstNode* @expr_New()
	store %ast_AstNode* %202, %ast_AstNode** %tree
	br label %L.5
L.29:
	%203 = call %ast_AstNode* @expr_Delete()
	store %ast_AstNode* %203, %ast_AstNode** %tree
	br label %L.5
L.4:
	%204 = getelementptr [18 x i8], [18 x i8]* @S.648
	%205 = bitcast [18 x i8]* %204 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %205)
	br label %L.5
L.5:
	%206 = call i8 @lex_Expect(i8 37)
	store i8 %206, i8* %tok
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 20, i8 36)
	br label %L.1
L.1:
	%207 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %207, %ast_AstNode** %rv.0
	br label %return
return:
	%208 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %208
}
define internal %ast_AstNode* @expr_Call(%symb_SymbNode* %ps$, %ast_AstNode* %tree$, %ast_AstNode* %arg$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%arg = alloca %ast_AstNode*
	store %ast_AstNode* %arg$, %ast_AstNode** %arg
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%tok = alloca i8
	%0 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 1
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %ast_AstNode*, %ast_AstNode** %tree
	%4 = icmp eq %ast_AstNode* %3, null
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = call %ast_AstNode* @ast_New(i8 18, %type_TypeNode* %5)
	store %ast_AstNode* %6, %ast_AstNode** %tree
	br label %L.1
L.3:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = call %ast_AstNode* @ast_New1(i8 19, %type_TypeNode* %7, %ast_AstNode* %8)
	store %ast_AstNode* %9, %ast_AstNode** %tree
	br label %L.1
L.1:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%11 = load %ast_AstNode*, %ast_AstNode** %tree
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 9
	store %symb_SymbNode* %10, %symb_SymbNode** %12
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = icmp ne %type_TypeNode* %13, null
	br i1 %14, label %L.5, label %L.6
L.5:
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 11
	%17 = load i32, i32* %16
	%18 = load %ast_AstNode*, %ast_AstNode** %tree
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 7
	store i32 %17, i32* %19
	br label %L.4
L.6:
	%20 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 8
	store %type_TypeNode* %20, %type_TypeNode** %22
	br label %L.4
L.4:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 3
	%25 = load %symb_SymbNode*, %symb_SymbNode** %24
	store %symb_SymbNode* %25, %symb_SymbNode** %s
	%26 = load %ast_AstNode*, %ast_AstNode** %arg
	%27 = icmp ne %ast_AstNode* %26, null
	br i1 %27, label %L.8, label %L.7
L.8:
	%28 = load %ast_AstNode*, %ast_AstNode** %arg
	%29 = load %symb_SymbNode*, %symb_SymbNode** %s
	%30 = getelementptr %symb_SymbNode, %symb_SymbNode* %29, i32 0, i32 1
	%31 = load %type_TypeNode*, %type_TypeNode** %30
	%32 = call %ast_AstNode* @ast_Adjust(%ast_AstNode* %28, %type_TypeNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %arg
	%33 = load %ast_AstNode*, %ast_AstNode** %tree
	%34 = load %ast_AstNode*, %ast_AstNode** %arg
	%35 = call %ast_AstNode* @ast_Child(%ast_AstNode* %33, %ast_AstNode* %34)
	store %ast_AstNode* %35, %ast_AstNode** %tree
	%36 = load %symb_SymbNode*, %symb_SymbNode** %s
	%37 = getelementptr %symb_SymbNode, %symb_SymbNode* %36, i32 0, i32 0
	%38 = load %symb_SymbNode*, %symb_SymbNode** %37
	store %symb_SymbNode* %38, %symb_SymbNode** %s
	br label %L.7
L.7:
	%39 = load i8, i8* @lex_Token
	store i8 %39, i8* %tok
	%40 = load i8, i8* %tok
	%41 = icmp eq i8 %40, 36
	br i1 %41, label %L.10, label %L.11
L.10:
	%42 = call i8 @lex_Next()
	store i8 %42, i8* %tok
	%43 = load i8, i8* %tok
	%44 = icmp ne i8 %43, 37
	br i1 %44, label %L.13, label %L.12
L.13:
	br label %L.14
L.14:
	%45 = load %symb_SymbNode*, %symb_SymbNode** %s
	%46 = icmp eq %symb_SymbNode* %45, null
	br i1 %46, label %L.17, label %L.16
L.17:
	call void @lex_Error(i8 71)
	%47 = bitcast [4 x i8]* @expr_skiplist to [0 x i8]*
	%48 = call i8 @lex_Skip([0 x i8]* %47)
	store i8 %48, i8* %tok
	br label %L.15
L.16:
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = getelementptr %symb_SymbNode, %symb_SymbNode* %49, i32 0, i32 1
	%51 = load %type_TypeNode*, %type_TypeNode** %50
	%52 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %51)
	store %ast_AstNode* %52, %ast_AstNode** %arg
	%53 = load %ast_AstNode*, %ast_AstNode** %arg
	%54 = icmp ne %ast_AstNode* %53, null
	br i1 %54, label %L.19, label %L.18
L.19:
	%55 = load %ast_AstNode*, %ast_AstNode** %arg
	%56 = load %symb_SymbNode*, %symb_SymbNode** %s
	%57 = getelementptr %symb_SymbNode, %symb_SymbNode* %56, i32 0, i32 1
	%58 = load %type_TypeNode*, %type_TypeNode** %57
	%59 = call %ast_AstNode* @ast_Adjust(%ast_AstNode* %55, %type_TypeNode* %58)
	store %ast_AstNode* %59, %ast_AstNode** %arg
	br label %L.18
L.18:
	%60 = load %ast_AstNode*, %ast_AstNode** %tree
	%61 = load %ast_AstNode*, %ast_AstNode** %arg
	%62 = call %ast_AstNode* @ast_Child(%ast_AstNode* %60, %ast_AstNode* %61)
	store %ast_AstNode* %62, %ast_AstNode** %tree
	%63 = load %symb_SymbNode*, %symb_SymbNode** %s
	%64 = getelementptr %symb_SymbNode, %symb_SymbNode* %63, i32 0, i32 0
	%65 = load %symb_SymbNode*, %symb_SymbNode** %64
	store %symb_SymbNode* %65, %symb_SymbNode** %s
	%66 = load i8, i8* @lex_Token
	store i8 %66, i8* %tok
	%67 = load i8, i8* %tok
	%68 = icmp ne i8 %67, 5
	br i1 %68, label %L.15, label %L.20
L.20:
	%69 = call i8 @lex_Next()
	store i8 %69, i8* %tok
	br label %L.14
L.15:
	br label %L.12
L.12:
	%70 = call i8 @lex_Expect(i8 37)
	store i8 %70, i8* %tok
	br label %L.9
L.11:
	call void @lex_ErrorT(i8 20, i8 36)
	br label %L.9
L.9:
	%71 = load %symb_SymbNode*, %symb_SymbNode** %s
	%72 = icmp ne %symb_SymbNode* %71, null
	br i1 %72, label %L.21, label %L.22
L.21:
	%73 = load %symb_SymbNode*, %symb_SymbNode** %s
	%74 = getelementptr %symb_SymbNode, %symb_SymbNode* %73, i32 0, i32 14
	%75 = load i8, i8* %74
	%76 = icmp eq i8 %75, 0
	br label %L.22
L.22:
	%77 = phi i1 [ false, %L.9 ], [ %76, %L.21 ]
	br i1 %77, label %L.24, label %L.23
L.24:
	call void @lex_Error(i8 70)
	br label %L.23
L.23:
	%78 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %78, %ast_AstNode** %rv.0
	br label %return
return:
	%79 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %79
}
define internal %ast_AstNode* @expr_RefProc(%symb_SymbNode* %s$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	%tree = alloca %ast_AstNode*
	%0 = call %type_TypeNode* @type_New(i8 8)
	store %type_TypeNode* %0, %type_TypeNode** %t
	%1 = load %symb_SymbNode*, %symb_SymbNode** %s
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 4
	store %symb_SymbNode* %1, %symb_SymbNode** %3
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = call %ast_AstNode* @ast_New(i8 12, %type_TypeNode* %4)
	store %ast_AstNode* %5, %ast_AstNode** %tree
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 9
	store %symb_SymbNode* %6, %symb_SymbNode** %8
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %9, %ast_AstNode** %rv.0
	br label %return
return:
	%10 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %10
}
define internal i32 @expr_BitfieldOffset(%type_TypeNode* %t$, i64 %fno$) nounwind {
L.0:
	%rv.0 = alloca i32
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%fno = alloca i64
	store i64 %fno$, i64* %fno
	%foffs = alloca i32
	%rsize = alloca i32
	%fsize = alloca i32
	%s = alloca %symb_SymbNode*
	%i = alloca i16
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 11
	%2 = load i32, i32* %1
	store i32 %2, i32* %rsize
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 17
	%5 = load i8, i8* %4
	%6 = icmp eq i8 %5, 1
	br i1 %6, label %L.2, label %L.3
L.2:
	%7 = load i32, i32* %rsize
	store i32 %7, i32* %foffs
	br label %L.1
L.3:
	store i32 0, i32* %foffs
	br label %L.1
L.1:
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 4
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	store %symb_SymbNode* %10, %symb_SymbNode** %s
	store i16 0, i16* %i
	br label %L.4
L.4:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = icmp ne %symb_SymbNode* %11, null
	%13 = xor i1 %12, true
	br i1 %13, label %L.5, label %L.6
L.6:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %s
	%15 = getelementptr %symb_SymbNode, %symb_SymbNode* %14, i32 0, i32 1
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 10
	%18 = load i32, i32* %17
	store i32 %18, i32* %fsize
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 17
	%21 = load i8, i8* %20
	%22 = icmp eq i8 %21, 1
	br i1 %22, label %L.8, label %L.7
L.8:
	%23 = load i32, i32* %foffs
	%24 = load i32, i32* %fsize
	%25 = sub i32 %23, %24
	store i32 %25, i32* %foffs
	br label %L.7
L.7:
	%26 = load i16, i16* %i
	%27 = zext i16 %26 to i64
	%28 = load i64, i64* %fno
	%29 = icmp eq i64 %27, %28
	br i1 %29, label %L.5, label %L.9
L.9:
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 17
	%32 = load i8, i8* %31
	%33 = icmp ne i8 %32, 1
	br i1 %33, label %L.11, label %L.10
L.11:
	%34 = load i32, i32* %foffs
	%35 = load i32, i32* %fsize
	%36 = add i32 %34, %35
	store i32 %36, i32* %foffs
	br label %L.10
L.10:
	%37 = load %symb_SymbNode*, %symb_SymbNode** %s
	%38 = getelementptr %symb_SymbNode, %symb_SymbNode* %37, i32 0, i32 0
	%39 = load %symb_SymbNode*, %symb_SymbNode** %38
	store %symb_SymbNode* %39, %symb_SymbNode** %s
	%40 = load i16, i16* %i
	%41 = add i16 %40, 1
	store i16 %41, i16* %i
	br label %L.4
L.5:
	%42 = load i32, i32* %foffs
	store i32 %42, i32* %rv.0
	br label %return
return:
	%43 = load i32, i32* %rv.0
	ret i32 %43
}
define internal %ast_AstNode* @expr_Suffix(%ast_AstNode* %tree$, %type_TypeNode* %et$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%et = alloca %type_TypeNode*
	store %type_TypeNode* %et$, %type_TypeNode** %et
	%t = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	%tok = alloca i8
	%done = alloca i8
	%s = alloca %symb_SymbNode*
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	store i8 0, i8* %done
	br label %L.1
L.1:
	%1 = load i8, i8* %done
	%2 = icmp ne i8 %1, 0
	%3 = xor i1 %2, true
	br i1 %3, label %L.6, label %L.7
L.6:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = icmp ne %ast_AstNode* %4, null
	br label %L.7
L.7:
	%6 = phi i1 [ false, %L.1 ], [ %5, %L.6 ]
	br i1 %6, label %L.4, label %L.5
L.4:
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 8
	%9 = load %type_TypeNode*, %type_TypeNode** %8
	%10 = icmp ne %type_TypeNode* %9, null
	br label %L.5
L.5:
	%11 = phi i1 [ false, %L.7 ], [ %10, %L.4 ]
	%12 = xor i1 %11, true
	br i1 %12, label %L.2, label %L.3
L.3:
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 8
	%15 = load %type_TypeNode*, %type_TypeNode** %14
	store %type_TypeNode* %15, %type_TypeNode** %t
	%16 = load i8, i8* %tok
	%17 = zext i8 %16 to i32
	switch i32 %17, label %L.8 [
		i32 7, label %L.10
		i32 2, label %L.11
		i32 38, label %L.12
	]
L.10:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 16
	%21 = load i8, i8* %20
	%22 = icmp eq i8 %21, 5
	br i1 %22, label %L.14, label %L.15
L.14:
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = call %ast_AstNode* @expr_Load(%ast_AstNode* %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	br label %L.13
L.15:
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 16
	%27 = load i8, i8* %26
	%28 = icmp eq i8 %27, 8
	br i1 %28, label %L.17, label %L.18
L.17:
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 4
	%31 = load %symb_SymbNode*, %symb_SymbNode** %30
	%32 = load %ast_AstNode*, %ast_AstNode** %tree
	%33 = call %ast_AstNode* @expr_Call(%symb_SymbNode* %31, %ast_AstNode* %32, %ast_AstNode* null)
	store %ast_AstNode* %33, %ast_AstNode** %tree
	%34 = load i8, i8* @lex_Token
	store i8 %34, i8* %tok
	br label %L.16
L.18:
	call void @lex_Error(i8 62)
	br label %L.16
L.16:
	br label %L.13
L.13:
	br label %L.9
L.11:
	%35 = call i8 @lex_Next()
	store i8 %35, i8* %tok
	%36 = load i8, i8* %tok
	%37 = icmp eq i8 %36, 46
	br i1 %37, label %L.20, label %L.21
L.20:
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %38, %type_TypeNode** %bt
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 16
	%41 = load i8, i8* %40
	%42 = icmp eq i8 %41, 5
	br i1 %42, label %L.23, label %L.22
L.23:
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	%44 = getelementptr %type_TypeNode, %type_TypeNode* %43, i32 0, i32 0
	%45 = load %type_TypeNode*, %type_TypeNode** %44
	store %type_TypeNode* %45, %type_TypeNode** %bt
	br label %L.22
L.22:
	store %symb_SymbNode* null, %symb_SymbNode** %s
	br label %L.24
L.24:
	%46 = load %type_TypeNode*, %type_TypeNode** %bt
	%47 = icmp eq %type_TypeNode* %46, null
	br i1 %47, label %L.25, label %L.26
L.26:
	%48 = load %type_TypeNode*, %type_TypeNode** %bt
	%49 = getelementptr %type_TypeNode, %type_TypeNode* %48, i32 0, i32 5
	%50 = load %symb_SymbNode*, %symb_SymbNode** %49
	%51 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%52 = call %symb_SymbNode* @symb_FindMethod(%symb_SymbNode* %50, [0 x i8]* %51)
	store %symb_SymbNode* %52, %symb_SymbNode** %s
	%53 = load %symb_SymbNode*, %symb_SymbNode** %s
	%54 = icmp ne %symb_SymbNode* %53, null
	br i1 %54, label %L.25, label %L.27
L.27:
	%55 = load %type_TypeNode*, %type_TypeNode** %bt
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 0
	%57 = load %type_TypeNode*, %type_TypeNode** %56
	store %type_TypeNode* %57, %type_TypeNode** %bt
	br label %L.24
L.25:
	%58 = load %symb_SymbNode*, %symb_SymbNode** %s
	%59 = icmp ne %symb_SymbNode* %58, null
	br i1 %59, label %L.29, label %L.30
L.29:
	%60 = call i8 @lex_Next()
	store i8 %60, i8* %tok
	%61 = load i8, i8* %tok
	%62 = icmp eq i8 %61, 36
	br i1 %62, label %L.32, label %L.33
L.32:
	%63 = load %symb_SymbNode*, %symb_SymbNode** %s
	%64 = load %ast_AstNode*, %ast_AstNode** %tree
	%65 = call %ast_AstNode* @expr_Call(%symb_SymbNode* %63, %ast_AstNode* null, %ast_AstNode* %64)
	store %ast_AstNode* %65, %ast_AstNode** %tree
	%66 = load i8, i8* @lex_Token
	store i8 %66, i8* %tok
	br label %L.31
L.33:
	%67 = load %symb_SymbNode*, %symb_SymbNode** %s
	%68 = call %ast_AstNode* @expr_RefProc(%symb_SymbNode* %67)
	store %ast_AstNode* %68, %ast_AstNode** %tree
	br label %L.31
L.31:
	br label %L.28
L.30:
	%69 = load %type_TypeNode*, %type_TypeNode** %t
	%70 = getelementptr %type_TypeNode, %type_TypeNode* %69, i32 0, i32 16
	%71 = load i8, i8* %70
	%72 = icmp eq i8 %71, 5
	br i1 %72, label %L.35, label %L.34
L.35:
	%73 = load %type_TypeNode*, %type_TypeNode** %t
	%74 = getelementptr %type_TypeNode, %type_TypeNode* %73, i32 0, i32 0
	%75 = load %type_TypeNode*, %type_TypeNode** %74
	%76 = icmp ne %type_TypeNode* %75, null
	br i1 %76, label %L.37, label %L.38
L.37:
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	%78 = call %ast_AstNode* @expr_Load(%ast_AstNode* %77)
	store %ast_AstNode* %78, %ast_AstNode** %tree
	%79 = load %type_TypeNode*, %type_TypeNode** %t
	%80 = getelementptr %type_TypeNode, %type_TypeNode* %79, i32 0, i32 0
	%81 = load %type_TypeNode*, %type_TypeNode** %80
	store %type_TypeNode* %81, %type_TypeNode** %t
	br label %L.36
L.38:
	call void @lex_Error(i8 26)
	store %ast_AstNode* null, %ast_AstNode** %tree
	br label %L.36
L.36:
	br label %L.34
L.34:
	%82 = load %type_TypeNode*, %type_TypeNode** %t
	%83 = getelementptr %type_TypeNode, %type_TypeNode* %82, i32 0, i32 16
	%84 = load i8, i8* %83
	%85 = icmp eq i8 %84, 7
	br i1 %85, label %L.40, label %L.41
L.40:
	%86 = load %type_TypeNode*, %type_TypeNode** %t
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 4
	%88 = load %symb_SymbNode*, %symb_SymbNode** %87
	%89 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%90 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %88, [0 x i8]* %89)
	store %symb_SymbNode* %90, %symb_SymbNode** %s
	%91 = load %symb_SymbNode*, %symb_SymbNode** %s
	%92 = icmp ne %symb_SymbNode* %91, null
	br i1 %92, label %L.43, label %L.44
L.43:
	%93 = load %type_TypeNode*, %type_TypeNode** %t
	%94 = getelementptr %type_TypeNode, %type_TypeNode* %93, i32 0, i32 24
	%95 = load i8, i8* %94
	%96 = icmp ne i8 %95, 0
	br i1 %96, label %L.46, label %L.47
L.46:
	%97 = load %symb_SymbNode*, %symb_SymbNode** %s
	%98 = getelementptr %symb_SymbNode, %symb_SymbNode* %97, i32 0, i32 1
	%99 = load %type_TypeNode*, %type_TypeNode** %98
	%100 = load %ast_AstNode*, %ast_AstNode** %tree
	%101 = load %type_TypeNode*, %type_TypeNode** %t
	%102 = load %symb_SymbNode*, %symb_SymbNode** %s
	%103 = getelementptr %symb_SymbNode, %symb_SymbNode* %102, i32 0, i32 10
	%104 = load i16, i16* %103
	%105 = zext i16 %104 to i64
	%106 = call i32 @expr_BitfieldOffset(%type_TypeNode* %101, i64 %105)
	%107 = zext i32 %106 to i64
	%108 = call %ast_AstNode* @ast_ConstW(i64 %107)
	%109 = call %ast_AstNode* @ast_New2(i8 11, %type_TypeNode* %99, %ast_AstNode* %100, %ast_AstNode* %108)
	store %ast_AstNode* %109, %ast_AstNode** %tree
	%110 = load %symb_SymbNode*, %symb_SymbNode** %s
	%111 = getelementptr %symb_SymbNode, %symb_SymbNode* %110, i32 0, i32 1
	%112 = load %type_TypeNode*, %type_TypeNode** %111
	%113 = getelementptr %type_TypeNode, %type_TypeNode* %112, i32 0, i32 10
	%114 = load i32, i32* %113
	%115 = zext i32 %114 to i64
	%116 = load %ast_AstNode*, %ast_AstNode** %tree
	%117 = getelementptr %ast_AstNode, %ast_AstNode* %116, i32 0, i32 10
	store i64 %115, i64* %117
	%118 = load %symb_SymbNode*, %symb_SymbNode** %s
	%119 = getelementptr %symb_SymbNode, %symb_SymbNode* %118, i32 0, i32 1
	%120 = load %type_TypeNode*, %type_TypeNode** %119
	%121 = getelementptr %type_TypeNode, %type_TypeNode* %120, i32 0, i32 11
	%122 = load i32, i32* %121
	%123 = load %ast_AstNode*, %ast_AstNode** %tree
	%124 = getelementptr %ast_AstNode, %ast_AstNode* %123, i32 0, i32 7
	store i32 %122, i32* %124
	br label %L.45
L.47:
	%125 = load %ast_AstNode*, %ast_AstNode** %tree
	%126 = call %ast_AstNode* @expr_UnLoad(%ast_AstNode* %125)
	store %ast_AstNode* %126, %ast_AstNode** %tree
	%127 = load %symb_SymbNode*, %symb_SymbNode** %s
	%128 = getelementptr %symb_SymbNode, %symb_SymbNode* %127, i32 0, i32 1
	%129 = load %type_TypeNode*, %type_TypeNode** %128
	%130 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %129)
	%131 = load %ast_AstNode*, %ast_AstNode** %tree
	%132 = call %ast_AstNode* @ast_New1(i8 13, %type_TypeNode* %130, %ast_AstNode* %131)
	store %ast_AstNode* %132, %ast_AstNode** %tree
	%133 = load %symb_SymbNode*, %symb_SymbNode** %s
	%134 = getelementptr %symb_SymbNode, %symb_SymbNode* %133, i32 0, i32 10
	%135 = load i16, i16* %134
	%136 = zext i16 %135 to i64
	%137 = load %ast_AstNode*, %ast_AstNode** %tree
	%138 = getelementptr %ast_AstNode, %ast_AstNode* %137, i32 0, i32 10
	store i64 %136, i64* %138
	%139 = load %target_ModelT*, %target_ModelT** @target_Target
	%140 = getelementptr %target_ModelT, %target_ModelT* %139, i32 0, i32 5
	%141 = getelementptr %target_SizeAlign, %target_SizeAlign* %140, i32 0, i32 0
	%142 = load i8, i8* %141
	%143 = zext i8 %142 to i32
	%144 = load %ast_AstNode*, %ast_AstNode** %tree
	%145 = getelementptr %ast_AstNode, %ast_AstNode* %144, i32 0, i32 7
	store i32 %143, i32* %145
	%146 = load %ast_AstNode*, %ast_AstNode** %tree
	%147 = call %ast_AstNode* @expr_Load(%ast_AstNode* %146)
	store %ast_AstNode* %147, %ast_AstNode** %tree
	br label %L.45
L.45:
	br label %L.42
L.44:
	%148 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorS(i8 24, [0 x i8]* %148)
	br label %L.42
L.42:
	%149 = call i8 @lex_Next()
	store i8 %149, i8* %tok
	br label %L.39
L.41:
	call void @lex_Error(i8 66)
	%150 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_DumpT(%type_TypeNode* %150, i8 0)
	call void @sys_fildes_nl(i32 2)
	br label %L.39
L.39:
	br label %L.28
L.28:
	br label %L.19
L.21:
	call void @lex_Error(i8 21)
	br label %L.19
L.19:
	br label %L.9
L.12:
	%151 = call i8 @lex_Next()
	store i8 %151, i8* %tok
	%152 = load %type_TypeNode*, %type_TypeNode** %t
	%153 = getelementptr %type_TypeNode, %type_TypeNode* %152, i32 0, i32 16
	%154 = load i8, i8* %153
	%155 = icmp eq i8 %154, 5
	br i1 %155, label %L.49, label %L.48
L.49:
	%156 = load %type_TypeNode*, %type_TypeNode** %t
	%157 = getelementptr %type_TypeNode, %type_TypeNode* %156, i32 0, i32 0
	%158 = load %type_TypeNode*, %type_TypeNode** %157
	%159 = icmp ne %type_TypeNode* %158, null
	br i1 %159, label %L.51, label %L.52
L.51:
	%160 = load %ast_AstNode*, %ast_AstNode** %tree
	%161 = call %ast_AstNode* @expr_Load(%ast_AstNode* %160)
	store %ast_AstNode* %161, %ast_AstNode** %tree
	%162 = load %type_TypeNode*, %type_TypeNode** %t
	%163 = getelementptr %type_TypeNode, %type_TypeNode* %162, i32 0, i32 0
	%164 = load %type_TypeNode*, %type_TypeNode** %163
	store %type_TypeNode* %164, %type_TypeNode** %t
	br label %L.50
L.52:
	call void @lex_Error(i8 26)
	store %ast_AstNode* null, %ast_AstNode** %tree
	br label %L.50
L.50:
	br label %L.48
L.48:
	%165 = load %type_TypeNode*, %type_TypeNode** %t
	%166 = getelementptr %type_TypeNode, %type_TypeNode* %165, i32 0, i32 16
	%167 = load i8, i8* %166
	%168 = icmp eq i8 %167, 6
	br i1 %168, label %L.54, label %L.55
L.54:
	%index = alloca %ast_AstNode*
	%169 = load %type_TypeNode*, %type_TypeNode** %t
	%170 = getelementptr %type_TypeNode, %type_TypeNode* %169, i32 0, i32 2
	%171 = load %type_TypeNode*, %type_TypeNode** %170
	%172 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %171)
	store %ast_AstNode* %172, %ast_AstNode** %index
	%173 = load %ast_AstNode*, %ast_AstNode** %index
	%174 = icmp eq %ast_AstNode* %173, null
	br i1 %174, label %L.57, label %L.56
L.57:
	call void @lex_Error(i8 65)
	%175 = load %ast_AstNode*, %ast_AstNode** @ast_Null
	store %ast_AstNode* %175, %ast_AstNode** %index
	br label %L.56
L.56:
	%176 = load %ast_AstNode*, %ast_AstNode** %index
	%177 = getelementptr %ast_AstNode, %ast_AstNode* %176, i32 0, i32 0
	%178 = load i8, i8* %177
	%179 = icmp eq i8 %178, 6
	br i1 %179, label %L.60, label %L.61
L.60:
	%180 = load %type_TypeNode*, %type_TypeNode** %t
	%181 = getelementptr %type_TypeNode, %type_TypeNode* %180, i32 0, i32 28
	%182 = load i8, i8* %181
	%183 = icmp ne i8 %182, 0
	%184 = xor i1 %183, true
	br label %L.61
L.61:
	%185 = phi i1 [ false, %L.56 ], [ %184, %L.60 ]
	br i1 %185, label %L.58, label %L.59
L.58:
	%186 = load %ast_AstNode*, %ast_AstNode** %index
	%187 = getelementptr %ast_AstNode, %ast_AstNode* %186, i32 0, i32 10
	%188 = load i64, i64* %187
	%189 = load %type_TypeNode*, %type_TypeNode** %t
	%190 = getelementptr %type_TypeNode, %type_TypeNode* %189, i32 0, i32 9
	%191 = load i64, i64* %190
	%192 = icmp ugt i64 %188, %191
	br i1 %192, label %L.63, label %L.62
L.62:
	%193 = load %ast_AstNode*, %ast_AstNode** %index
	%194 = getelementptr %ast_AstNode, %ast_AstNode* %193, i32 0, i32 10
	%195 = load i64, i64* %194
	%196 = load %type_TypeNode*, %type_TypeNode** %t
	%197 = getelementptr %type_TypeNode, %type_TypeNode* %196, i32 0, i32 8
	%198 = load i64, i64* %197
	%199 = icmp ult i64 %195, %198
	br label %L.63
L.63:
	%200 = phi i1 [ true, %L.58 ], [ %199, %L.62 ]
	br label %L.59
L.59:
	%201 = phi i1 [ false, %L.61 ], [ %200, %L.63 ]
	br i1 %201, label %L.65, label %L.64
L.65:
	call void @lex_Error(i8 91)
	%202 = load %type_TypeNode*, %type_TypeNode** %t
	%203 = getelementptr %type_TypeNode, %type_TypeNode* %202, i32 0, i32 8
	%204 = load i64, i64* %203
	%205 = load %ast_AstNode*, %ast_AstNode** %index
	%206 = getelementptr %ast_AstNode, %ast_AstNode* %205, i32 0, i32 10
	store i64 %204, i64* %206
	br label %L.64
L.64:
	%207 = load %type_TypeNode*, %type_TypeNode** %t
	%208 = getelementptr %type_TypeNode, %type_TypeNode* %207, i32 0, i32 8
	%209 = load i64, i64* %208
	%210 = icmp ne i64 %209, 0
	br i1 %210, label %L.67, label %L.66
L.67:
	%211 = load %ast_AstNode*, %ast_AstNode** %index
	%212 = getelementptr %ast_AstNode, %ast_AstNode* %211, i32 0, i32 0
	%213 = load i8, i8* %212
	%214 = icmp eq i8 %213, 6
	br i1 %214, label %L.69, label %L.70
L.69:
	%215 = load %ast_AstNode*, %ast_AstNode** %index
	%216 = getelementptr %ast_AstNode, %ast_AstNode* %215, i32 0, i32 10
	%217 = load i64, i64* %216
	%218 = load %type_TypeNode*, %type_TypeNode** %t
	%219 = getelementptr %type_TypeNode, %type_TypeNode* %218, i32 0, i32 8
	%220 = load i64, i64* %219
	%221 = sub i64 %217, %220
	store i64 %221, i64* %216
	br label %L.68
L.70:
	%222 = load %ast_AstNode*, %ast_AstNode** %index
	%223 = load %type_TypeNode*, %type_TypeNode** %t
	%224 = getelementptr %type_TypeNode, %type_TypeNode* %223, i32 0, i32 8
	%225 = load i64, i64* %224
	%226 = call %ast_AstNode* @ast_ConstW(i64 %225)
	%227 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%228 = call %ast_AstNode* @ast_OpBinary(i8 55, %ast_AstNode* %222, %ast_AstNode* %226, %type_TypeNode* %227)
	store %ast_AstNode* %228, %ast_AstNode** %index
	br label %L.68
L.68:
	br label %L.66
L.66:
	%229 = load i8, i8* @lex_Token
	store i8 %229, i8* %tok
	%230 = load i8, i8* %tok
	%231 = icmp eq i8 %230, 3
	br i1 %231, label %L.72, label %L.73
L.72:
	%len = alloca %ast_AstNode*
	%232 = call i8 @lex_Next()
	store i8 %232, i8* %tok
	%233 = load %ast_AstNode*, %ast_AstNode** %tree
	%234 = call %ast_AstNode* @expr_UnLoad(%ast_AstNode* %233)
	store %ast_AstNode* %234, %ast_AstNode** %tree
	%235 = load %type_TypeNode*, %type_TypeNode** %t
	%236 = getelementptr %type_TypeNode, %type_TypeNode* %235, i32 0, i32 2
	%237 = load %type_TypeNode*, %type_TypeNode** %236
	%238 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %237)
	store %ast_AstNode* %238, %ast_AstNode** %len
	%239 = load %ast_AstNode*, %ast_AstNode** %len
	%240 = icmp ne %ast_AstNode* %239, null
	br i1 %240, label %L.80, label %L.81
L.80:
	%241 = load %ast_AstNode*, %ast_AstNode** %len
	%242 = getelementptr %ast_AstNode, %ast_AstNode* %241, i32 0, i32 0
	%243 = load i8, i8* %242
	%244 = icmp eq i8 %243, 6
	br label %L.81
L.81:
	%245 = phi i1 [ false, %L.72 ], [ %244, %L.80 ]
	br i1 %245, label %L.78, label %L.79
L.78:
	%246 = load %ast_AstNode*, %ast_AstNode** %index
	%247 = getelementptr %ast_AstNode, %ast_AstNode* %246, i32 0, i32 0
	%248 = load i8, i8* %247
	%249 = icmp eq i8 %248, 6
	br label %L.79
L.79:
	%250 = phi i1 [ false, %L.81 ], [ %249, %L.78 ]
	br i1 %250, label %L.76, label %L.77
L.76:
	%251 = load %type_TypeNode*, %type_TypeNode** %t
	%252 = getelementptr %type_TypeNode, %type_TypeNode* %251, i32 0, i32 28
	%253 = load i8, i8* %252
	%254 = icmp ne i8 %253, 0
	%255 = xor i1 %254, true
	br label %L.77
L.77:
	%256 = phi i1 [ false, %L.79 ], [ %255, %L.76 ]
	br i1 %256, label %L.74, label %L.75
L.74:
	%257 = load %ast_AstNode*, %ast_AstNode** %index
	%258 = getelementptr %ast_AstNode, %ast_AstNode* %257, i32 0, i32 10
	%259 = load i64, i64* %258
	%260 = load %ast_AstNode*, %ast_AstNode** %len
	%261 = getelementptr %ast_AstNode, %ast_AstNode* %260, i32 0, i32 10
	%262 = load i64, i64* %261
	%263 = add i64 %259, %262
	%264 = sub i64 %263, 1
	%265 = load %type_TypeNode*, %type_TypeNode** %t
	%266 = getelementptr %type_TypeNode, %type_TypeNode* %265, i32 0, i32 9
	%267 = load i64, i64* %266
	%268 = load %type_TypeNode*, %type_TypeNode** %t
	%269 = getelementptr %type_TypeNode, %type_TypeNode* %268, i32 0, i32 8
	%270 = load i64, i64* %269
	%271 = sub i64 %267, %270
	%272 = icmp ugt i64 %264, %271
	br label %L.75
L.75:
	%273 = phi i1 [ false, %L.77 ], [ %272, %L.74 ]
	br i1 %273, label %L.83, label %L.82
L.83:
	call void @lex_Error(i8 91)
	br label %L.82
L.82:
	%274 = load %ast_AstNode*, %ast_AstNode** %tree
	%275 = load %ast_AstNode*, %ast_AstNode** %index
	%276 = load %ast_AstNode*, %ast_AstNode** %len
	%277 = call %ast_AstNode* @expr_Slice(%ast_AstNode* %274, %ast_AstNode* %275, %ast_AstNode* %276)
	store %ast_AstNode* %277, %ast_AstNode** %tree
	%278 = load %ast_AstNode*, %ast_AstNode** %tree
	%279 = call %ast_AstNode* @expr_Load(%ast_AstNode* %278)
	store %ast_AstNode* %279, %ast_AstNode** %tree
	store i8 1, i8* %done
	br label %L.71
L.73:
	%280 = load %type_TypeNode*, %type_TypeNode** %t
	%281 = getelementptr %type_TypeNode, %type_TypeNode* %280, i32 0, i32 24
	%282 = load i8, i8* %281
	%283 = icmp ne i8 %282, 0
	br i1 %283, label %L.85, label %L.86
L.85:
	%284 = load %ast_AstNode*, %ast_AstNode** %index
	%285 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%286 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %284, %type_TypeNode* %285)
	store %ast_AstNode* %286, %ast_AstNode** %index
	%287 = load %ast_AstNode*, %ast_AstNode** %index
	%288 = load %type_TypeNode*, %type_TypeNode** %t
	%289 = getelementptr %type_TypeNode, %type_TypeNode* %288, i32 0, i32 0
	%290 = load %type_TypeNode*, %type_TypeNode** %289
	%291 = getelementptr %type_TypeNode, %type_TypeNode* %290, i32 0, i32 10
	%292 = load i32, i32* %291
	%293 = zext i32 %292 to i64
	%294 = call %ast_AstNode* @ast_ConstW(i64 %293)
	%295 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%296 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %287, %ast_AstNode* %294, %type_TypeNode* %295)
	store %ast_AstNode* %296, %ast_AstNode** %index
	%297 = load %type_TypeNode*, %type_TypeNode** %t
	%298 = getelementptr %type_TypeNode, %type_TypeNode* %297, i32 0, i32 0
	%299 = load %type_TypeNode*, %type_TypeNode** %298
	%300 = load %ast_AstNode*, %ast_AstNode** %tree
	%301 = load %ast_AstNode*, %ast_AstNode** %index
	%302 = call %ast_AstNode* @ast_New2(i8 11, %type_TypeNode* %299, %ast_AstNode* %300, %ast_AstNode* %301)
	store %ast_AstNode* %302, %ast_AstNode** %tree
	%303 = load %type_TypeNode*, %type_TypeNode** %t
	%304 = getelementptr %type_TypeNode, %type_TypeNode* %303, i32 0, i32 0
	%305 = load %type_TypeNode*, %type_TypeNode** %304
	%306 = getelementptr %type_TypeNode, %type_TypeNode* %305, i32 0, i32 10
	%307 = load i32, i32* %306
	%308 = zext i32 %307 to i64
	%309 = load %ast_AstNode*, %ast_AstNode** %tree
	%310 = getelementptr %ast_AstNode, %ast_AstNode* %309, i32 0, i32 10
	store i64 %308, i64* %310
	%311 = load %type_TypeNode*, %type_TypeNode** %t
	%312 = getelementptr %type_TypeNode, %type_TypeNode* %311, i32 0, i32 0
	%313 = load %type_TypeNode*, %type_TypeNode** %312
	%314 = getelementptr %type_TypeNode, %type_TypeNode* %313, i32 0, i32 11
	%315 = load i32, i32* %314
	%316 = load %ast_AstNode*, %ast_AstNode** %tree
	%317 = getelementptr %ast_AstNode, %ast_AstNode* %316, i32 0, i32 7
	store i32 %315, i32* %317
	br label %L.84
L.86:
	%318 = load %ast_AstNode*, %ast_AstNode** %tree
	%319 = call %ast_AstNode* @expr_UnLoad(%ast_AstNode* %318)
	store %ast_AstNode* %319, %ast_AstNode** %tree
	%320 = load %type_TypeNode*, %type_TypeNode** %t
	%321 = getelementptr %type_TypeNode, %type_TypeNode* %320, i32 0, i32 0
	%322 = load %type_TypeNode*, %type_TypeNode** %321
	%323 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %322)
	%324 = load %ast_AstNode*, %ast_AstNode** %tree
	%325 = load %ast_AstNode*, %ast_AstNode** %index
	%326 = call %ast_AstNode* @ast_New2(i8 14, %type_TypeNode* %323, %ast_AstNode* %324, %ast_AstNode* %325)
	store %ast_AstNode* %326, %ast_AstNode** %tree
	%327 = load %target_ModelT*, %target_ModelT** @target_Target
	%328 = getelementptr %target_ModelT, %target_ModelT* %327, i32 0, i32 5
	%329 = getelementptr %target_SizeAlign, %target_SizeAlign* %328, i32 0, i32 0
	%330 = load i8, i8* %329
	%331 = zext i8 %330 to i32
	%332 = load %ast_AstNode*, %ast_AstNode** %tree
	%333 = getelementptr %ast_AstNode, %ast_AstNode* %332, i32 0, i32 7
	store i32 %331, i32* %333
	%334 = load %ast_AstNode*, %ast_AstNode** %tree
	%335 = call %ast_AstNode* @expr_Load(%ast_AstNode* %334)
	store %ast_AstNode* %335, %ast_AstNode** %tree
	br label %L.84
L.84:
	br label %L.71
L.71:
	br label %L.53
L.55:
	call void @lex_Error(i8 63)
	br label %L.53
L.53:
	%336 = call i8 @lex_Expect(i8 39)
	store i8 %336, i8* %tok
	br label %L.9
L.8:
	store i8 1, i8* %done
	br label %L.9
L.9:
	br label %L.1
L.2:
	%337 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %337, %ast_AstNode** %rv.0
	br label %return
return:
	%338 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %338
}
define internal %ast_AstNode* @expr_Primary(%symb_SymbNode* %s$, %type_TypeNode* %et$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%et = alloca %type_TypeNode*
	store %type_TypeNode* %et$, %type_TypeNode** %et
	%tree = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 1
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 13
	%5 = load i8, i8* %4
	%6 = zext i8 %5 to i32
	switch i32 %6, label %L.1 [
		i32 3, label %L.3
		i32 1, label %L.4
		i32 5, label %L.5
	]
L.3:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %7)
	%9 = call %ast_AstNode* @ast_New(i8 12, %type_TypeNode* %8)
	store %ast_AstNode* %9, %ast_AstNode** %tree
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = load %ast_AstNode*, %ast_AstNode** %tree
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 9
	store %symb_SymbNode* %10, %symb_SymbNode** %12
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 11
	%15 = load i32, i32* %14
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 7
	store i32 %15, i32* %17
	%18 = load %ast_AstNode*, %ast_AstNode** %tree
	%19 = call %ast_AstNode* @expr_Load(%ast_AstNode* %18)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.2
L.4:
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 16
	%22 = load i8, i8* %21
	%23 = icmp ule i8 %22, 5
	br i1 %23, label %L.7, label %L.6
L.6:
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 24
	%26 = load i8, i8* %25
	%27 = icmp ne i8 %26, 0
	br label %L.7
L.7:
	%28 = phi i1 [ true, %L.4 ], [ %27, %L.6 ]
	br i1 %28, label %L.9, label %L.10
L.9:
	%29 = load %symb_SymbNode*, %symb_SymbNode** %s
	%30 = getelementptr %symb_SymbNode, %symb_SymbNode* %29, i32 0, i32 9
	%31 = load %ast_AstNode*, %ast_AstNode** %30
	%32 = call %ast_AstNode* @ast_Dup(%ast_AstNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	br label %L.8
L.10:
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %33)
	%35 = call %ast_AstNode* @ast_New(i8 12, %type_TypeNode* %34)
	store %ast_AstNode* %35, %ast_AstNode** %tree
	%36 = load %symb_SymbNode*, %symb_SymbNode** %s
	%37 = load %ast_AstNode*, %ast_AstNode** %tree
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 9
	store %symb_SymbNode* %36, %symb_SymbNode** %38
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 11
	%41 = load i32, i32* %40
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 7
	store i32 %41, i32* %43
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	%45 = call %ast_AstNode* @expr_Load(%ast_AstNode* %44)
	store %ast_AstNode* %45, %ast_AstNode** %tree
	br label %L.8
L.8:
	br label %L.2
L.5:
	%46 = load %symb_SymbNode*, %symb_SymbNode** %s
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 10
	%48 = load i16, i16* %47
	%49 = icmp ne i16 %48, 0
	br i1 %49, label %L.12, label %L.13
L.12:
	%50 = load %symb_SymbNode*, %symb_SymbNode** %s
	%51 = load %type_TypeNode*, %type_TypeNode** %et
	%52 = call %ast_AstNode* @expr_Intrinsic(%symb_SymbNode* %50, %type_TypeNode* %51)
	store %ast_AstNode* %52, %ast_AstNode** %tree
	br label %L.11
L.13:
	%53 = load i8, i8* @lex_Token
	%54 = icmp eq i8 %53, 36
	br i1 %54, label %L.15, label %L.16
L.15:
	%55 = load %symb_SymbNode*, %symb_SymbNode** %s
	%56 = call %ast_AstNode* @expr_Call(%symb_SymbNode* %55, %ast_AstNode* null, %ast_AstNode* null)
	store %ast_AstNode* %56, %ast_AstNode** %tree
	br label %L.14
L.16:
	%57 = load %symb_SymbNode*, %symb_SymbNode** %s
	%58 = call %ast_AstNode* @expr_RefProc(%symb_SymbNode* %57)
	store %ast_AstNode* %58, %ast_AstNode** %tree
	br label %L.14
L.14:
	br label %L.11
L.11:
	br label %L.2
L.1:
	%59 = load %symb_SymbNode*, %symb_SymbNode** %s
	%60 = getelementptr %symb_SymbNode, %symb_SymbNode* %59, i32 0, i32 23
	%61 = getelementptr [0 x i8], [0 x i8]* %60
	%62 = bitcast [0 x i8]* %61 to [0 x i8]*
	call void @lex_ErrorI(i8 25, [0 x i8]* %62)
	br label %L.2
L.2:
	%63 = load %ast_AstNode*, %ast_AstNode** %tree
	%64 = load %type_TypeNode*, %type_TypeNode** %et
	%65 = call %ast_AstNode* @expr_Suffix(%ast_AstNode* %63, %type_TypeNode* %64)
	store %ast_AstNode* %65, %ast_AstNode** %tree
	%66 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %66, %ast_AstNode** %rv.0
	br label %return
return:
	%67 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %67
}
define internal %ast_AstNode* @expr_GetLHS(%symb_SymbNode* %s$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%tok = alloca i8
	%tree = alloca %ast_AstNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = icmp eq %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* @lex_Token
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	%4 = icmp eq i8 %3, 46
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%6 = call %symb_SymbNode* @symb_Find([0 x i8]* %5)
	store %symb_SymbNode* %6, %symb_SymbNode** %s
	%7 = call i8 @lex_Next()
	store i8 %7, i8* %tok
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = icmp eq %symb_SymbNode* %8, null
	br i1 %9, label %L.7, label %L.6
L.7:
	%10 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %10)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.6:
	br label %L.3
L.5:
	call void @lex_Error(i8 21)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.3:
	br label %L.1
L.1:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = call %ast_AstNode* @expr_Primary(%symb_SymbNode* %11, %type_TypeNode* null)
	store %ast_AstNode* %12, %ast_AstNode** %tree
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = icmp ne %ast_AstNode* %13, null
	br i1 %14, label %L.9, label %L.8
L.9:
	%15 = load %ast_AstNode*, %ast_AstNode** %tree
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 0
	%17 = load i8, i8* %16
	%18 = icmp eq i8 %17, 27
	br i1 %18, label %L.11, label %L.12
L.11:
	%19 = load %ast_AstNode*, %ast_AstNode** %tree
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 11
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %20, i32 0, i32 0
	%22 = load %ast_AstNode*, %ast_AstNode** %21
	store %ast_AstNode* %22, %ast_AstNode** %tree
	br label %L.10
L.12:
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 0
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 32
	br i1 %26, label %L.13, label %L.14
L.13:
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 0
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 0
	%32 = load i8, i8* %31
	%33 = icmp eq i8 %32, 27
	br label %L.14
L.14:
	%34 = phi i1 [ false, %L.12 ], [ %33, %L.13 ]
	br i1 %34, label %L.16, label %L.15
L.16:
	%35 = load %ast_AstNode*, %ast_AstNode** %tree
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 11
	%37 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %36, i32 0, i32 0
	%38 = load %ast_AstNode*, %ast_AstNode** %37
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 11
	%40 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %39, i32 0, i32 0
	%41 = load %ast_AstNode*, %ast_AstNode** %40
	store %ast_AstNode* %41, %ast_AstNode** %tree
	br label %L.15
L.15:
	br label %L.10
L.10:
	br label %L.8
L.8:
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %42, %ast_AstNode** %rv.0
	br label %return
return:
	%43 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %43
}
define internal %ast_AstNode* @expr_Container(%ast_AstNode* %tree$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%otree = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %0)
	%2 = call %ast_AstNode* @ast_New(i8 12, %type_TypeNode* %1)
	store %ast_AstNode* %2, %ast_AstNode** %otree
	%3 = load %ast_AstNode*, %ast_AstNode** %otree
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 9
	store %symb_SymbNode* null, %symb_SymbNode** %4
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 11
	%7 = load i32, i32* %6
	%8 = load %ast_AstNode*, %ast_AstNode** %otree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 7
	store i32 %7, i32* %9
	%10 = load %ast_AstNode*, %ast_AstNode** %otree
	%11 = call %ast_AstNode* @expr_Load(%ast_AstNode* %10)
	store %ast_AstNode* %11, %ast_AstNode** %otree
	%12 = load %ast_AstNode*, %ast_AstNode** %otree
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = call %ast_AstNode* @expr_Suffix(%ast_AstNode* %12, %type_TypeNode* %13)
	store %ast_AstNode* %14, %ast_AstNode** %otree
	%15 = load %ast_AstNode*, %ast_AstNode** %otree
	%16 = call %ast_AstNode* @expr_UnLoad(%ast_AstNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %otree
	%17 = load %ast_AstNode*, %ast_AstNode** %otree
	%18 = icmp ne %ast_AstNode* %17, null
	br i1 %18, label %L.2, label %L.1
L.2:
	%19 = load %ast_AstNode*, %ast_AstNode** %otree
	%20 = call %ast_AstNode* @expr_GetOffset(%ast_AstNode* %19)
	store %ast_AstNode* %20, %ast_AstNode** %otree
	br label %L.1
L.1:
	%21 = load %ast_AstNode*, %ast_AstNode** %otree
	%22 = icmp ne %ast_AstNode* %21, null
	br i1 %22, label %L.4, label %L.3
L.4:
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%25 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %23, %type_TypeNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = load %ast_AstNode*, %ast_AstNode** %otree
	%28 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%29 = call %ast_AstNode* @ast_OpBinary(i8 55, %ast_AstNode* %26, %ast_AstNode* %27, %type_TypeNode* %28)
	store %ast_AstNode* %29, %ast_AstNode** %tree
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %30, %type_TypeNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	br label %L.3
L.3:
	%33 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %33, %ast_AstNode** %rv.0
	br label %return
return:
	%34 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %34
}
@S.649 = private unnamed_addr constant [14 x i8] c"must be float\00"
define internal %ast_AstNode* @expr_Term(%type_TypeNode* %et$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%et = alloca %type_TypeNode*
	store %type_TypeNode* %et$, %type_TypeNode** %et
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load %symb_SymbNode*, %symb_SymbNode** @expr_savedsym
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	store %symb_SymbNode* null, %symb_SymbNode** @expr_savedsym
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = icmp eq %symb_SymbNode* %2, null
	br i1 %3, label %L.1, label %L.2
L.1:
	%4 = load i8, i8* %tok
	%5 = icmp eq i8 %4, 46
	br label %L.2
L.2:
	%6 = phi i1 [ false, %L.0 ], [ %5, %L.1 ]
	br i1 %6, label %L.4, label %L.3
L.4:
	%7 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%8 = call %symb_SymbNode* @symb_Find([0 x i8]* %7)
	store %symb_SymbNode* %8, %symb_SymbNode** %s
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = icmp eq %symb_SymbNode* %9, null
	br i1 %10, label %L.6, label %L.5
L.6:
	%11 = load %type_TypeNode*, %type_TypeNode** %et
	%12 = icmp ne %type_TypeNode* %11, null
	br i1 %12, label %L.7, label %L.8
L.7:
	%13 = load %type_TypeNode*, %type_TypeNode** %et
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 16
	%15 = load i8, i8* %14
	%16 = icmp eq i8 %15, 1
	br label %L.8
L.8:
	%17 = phi i1 [ false, %L.6 ], [ %16, %L.7 ]
	br i1 %17, label %L.10, label %L.11
L.10:
	%18 = load %type_TypeNode*, %type_TypeNode** %et
	%19 = call %ast_AstNode* @expr_EnumConst(%type_TypeNode* %18)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.9
L.11:
	%20 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %20)
	br label %L.9
L.9:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %22, %ast_AstNode** %rv.0
	br label %return
L.5:
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	br label %L.3
L.3:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = icmp ne %symb_SymbNode* %24, null
	br i1 %25, label %L.13, label %L.14
L.13:
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 13
	%28 = load i8, i8* %27
	%29 = icmp eq i8 %28, 2
	br i1 %29, label %L.16, label %L.17
L.16:
	%30 = load %symb_SymbNode*, %symb_SymbNode** %s
	%31 = getelementptr %symb_SymbNode, %symb_SymbNode* %30, i32 0, i32 1
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	store %type_TypeNode* %32, %type_TypeNode** %t
	%33 = load i8, i8* %tok
	%34 = zext i8 %33 to i32
	switch i32 %34, label %L.18 [
		i32 2, label %L.20
		i32 8, label %L.21
		i32 36, label %L.22
		i32 22, label %L.23
		i32 40, label %L.24
	]
L.20:
	%35 = call i8 @lex_Next()
	store i8 %35, i8* %tok
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr %type_TypeNode, %type_TypeNode* %36, i32 0, i32 16
	%38 = load i8, i8* %37
	%39 = icmp eq i8 %38, 1
	br i1 %39, label %L.26, label %L.27
L.26:
	%40 = load %type_TypeNode*, %type_TypeNode** %t
	%41 = call %ast_AstNode* @expr_EnumConst(%type_TypeNode* %40)
	store %ast_AstNode* %41, %ast_AstNode** %tree
	%42 = call i8 @lex_Next()
	store i8 %42, i8* %tok
	br label %L.25
L.27:
	%43 = load %symb_SymbNode*, %symb_SymbNode** %s
	%44 = getelementptr %symb_SymbNode, %symb_SymbNode* %43, i32 0, i32 23
	%45 = getelementptr [0 x i8], [0 x i8]* %44
	%46 = bitcast [0 x i8]* %45 to [0 x i8]*
	call void @lex_ErrorI(i8 32, [0 x i8]* %46)
	br label %L.25
L.25:
	br label %L.19
L.21:
	%47 = call i8 @lex_Next()
	store i8 %47, i8* %tok
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	%49 = call %ast_AstNode* @expr_TypeProperty(%type_TypeNode* %48)
	store %ast_AstNode* %49, %ast_AstNode** %tree
	br label %L.19
L.22:
	%50 = call i8 @lex_Next()
	store i8 %50, i8* %tok
	%51 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %51, %ast_AstNode** %tree
	%52 = load i8, i8* @lex_Token
	store i8 %52, i8* %tok
	%53 = load i8, i8* %tok
	%54 = icmp eq i8 %53, 5
	br i1 %54, label %L.29, label %L.30
L.29:
	%55 = call i8 @lex_Next()
	store i8 %55, i8* %tok
	%56 = load %ast_AstNode*, %ast_AstNode** %tree
	%57 = load %type_TypeNode*, %type_TypeNode** %t
	%58 = call %ast_AstNode* @expr_Container(%ast_AstNode* %56, %type_TypeNode* %57)
	store %ast_AstNode* %58, %ast_AstNode** %tree
	br label %L.28
L.30:
	%59 = load %ast_AstNode*, %ast_AstNode** %tree
	%60 = load %type_TypeNode*, %type_TypeNode** %t
	%61 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %59, %type_TypeNode* %60)
	store %ast_AstNode* %61, %ast_AstNode** %tree
	br label %L.28
L.28:
	%62 = call i8 @lex_Expect(i8 37)
	store i8 %62, i8* %tok
	br label %L.19
L.23:
	%63 = call i8 @lex_Next()
	store i8 %63, i8* %tok
	%64 = call i8 @lex_Expect(i8 36)
	store i8 %64, i8* %tok
	%65 = load %type_TypeNode*, %type_TypeNode** %t
	%66 = call %ast_AstNode* @expr_Convert(%type_TypeNode* %65)
	store %ast_AstNode* %66, %ast_AstNode** %tree
	%67 = call i8 @lex_Expect(i8 37)
	store i8 %67, i8* %tok
	br label %L.19
L.24:
	%68 = load %type_TypeNode*, %type_TypeNode** %t
	%69 = call %ast_AstNode* @expr_CompositeValue(%type_TypeNode* %68)
	store %ast_AstNode* %69, %ast_AstNode** %tree
	br label %L.19
L.18:
	%70 = load %symb_SymbNode*, %symb_SymbNode** %s
	%71 = getelementptr %symb_SymbNode, %symb_SymbNode* %70, i32 0, i32 23
	%72 = getelementptr [0 x i8], [0 x i8]* %71
	%73 = bitcast [0 x i8]* %72 to [0 x i8]*
	call void @lex_ErrorI(i8 32, [0 x i8]* %73)
	br label %L.19
L.19:
	br label %L.15
L.17:
	%74 = load %symb_SymbNode*, %symb_SymbNode** %s
	%75 = load %type_TypeNode*, %type_TypeNode** %et
	%76 = call %ast_AstNode* @expr_Primary(%symb_SymbNode* %74, %type_TypeNode* %75)
	store %ast_AstNode* %76, %ast_AstNode** %tree
	%77 = load i8, i8* @lex_Token
	store i8 %77, i8* %tok
	%78 = load i8, i8* %tok
	%79 = icmp eq i8 %78, 8
	br i1 %79, label %L.32, label %L.31
L.32:
	%80 = call i8 @lex_Next()
	store i8 %80, i8* %tok
	%81 = load %ast_AstNode*, %ast_AstNode** %tree
	%82 = getelementptr %ast_AstNode, %ast_AstNode* %81, i32 0, i32 8
	%83 = load %type_TypeNode*, %type_TypeNode** %82
	%84 = call %ast_AstNode* @expr_TypeProperty(%type_TypeNode* %83)
	store %ast_AstNode* %84, %ast_AstNode** %tree
	br label %L.31
L.31:
	br label %L.15
L.15:
	br label %L.12
L.14:
	%85 = load i8, i8* %tok
	%86 = zext i8 %85 to i32
	switch i32 %86, label %L.33 [
		i32 42, label %L.35
		i32 43, label %L.36
		i32 44, label %L.37
		i32 45, label %L.38
		i32 36, label %L.39
		i32 40, label %L.40
	]
L.35:
	%87 = load %type_TypeNode*, %type_TypeNode** %et
	%88 = call %ast_AstNode* @ast_New(i8 6, %type_TypeNode* %87)
	store %ast_AstNode* %88, %ast_AstNode** %tree
	%89 = load i64, i64* @lex_Number
	%90 = load %ast_AstNode*, %ast_AstNode** %tree
	%91 = getelementptr %ast_AstNode, %ast_AstNode* %90, i32 0, i32 10
	store i64 %89, i64* %91
	%92 = load i64, i64* @lex_Number
	%93 = call i32 @type_bitsize(i64 %92)
	%94 = load %ast_AstNode*, %ast_AstNode** %tree
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 7
	store i32 %93, i32* %95
	%96 = load %type_TypeNode*, %type_TypeNode** %et
	%97 = icmp eq %type_TypeNode* %96, null
	br i1 %97, label %L.42, label %L.43
L.42:
	%98 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%99 = load %ast_AstNode*, %ast_AstNode** %tree
	%100 = getelementptr %ast_AstNode, %ast_AstNode* %99, i32 0, i32 8
	store %type_TypeNode* %98, %type_TypeNode** %100
	br label %L.41
L.43:
	%101 = load %type_TypeNode*, %type_TypeNode** %et
	%102 = getelementptr %type_TypeNode, %type_TypeNode* %101, i32 0, i32 16
	%103 = load i8, i8* %102
	%104 = zext i8 %103 to i32
	switch i32 %104, label %L.44 [
		i32 2, label %L.46
		i32 3, label %L.46
		i32 5, label %L.47
		i32 8, label %L.47
	]
L.46:
	%105 = load %type_TypeNode*, %type_TypeNode** %et
	%106 = getelementptr %type_TypeNode, %type_TypeNode* %105, i32 0, i32 10
	%107 = load i32, i32* %106
	%108 = load %ast_AstNode*, %ast_AstNode** %tree
	%109 = getelementptr %ast_AstNode, %ast_AstNode* %108, i32 0, i32 7
	%110 = load i32, i32* %109
	%111 = icmp ugt i32 %107, %110
	br i1 %111, label %L.49, label %L.48
L.49:
	%112 = load %type_TypeNode*, %type_TypeNode** %et
	%113 = getelementptr %type_TypeNode, %type_TypeNode* %112, i32 0, i32 10
	%114 = load i32, i32* %113
	%115 = load %ast_AstNode*, %ast_AstNode** %tree
	%116 = getelementptr %ast_AstNode, %ast_AstNode* %115, i32 0, i32 7
	store i32 %114, i32* %116
	br label %L.48
L.48:
	br label %L.45
L.47:
	%117 = load %target_ModelT*, %target_ModelT** @target_Target
	%118 = getelementptr %target_ModelT, %target_ModelT* %117, i32 0, i32 5
	%119 = getelementptr %target_SizeAlign, %target_SizeAlign* %118, i32 0, i32 0
	%120 = load i8, i8* %119
	%121 = zext i8 %120 to i32
	%122 = load %ast_AstNode*, %ast_AstNode** %tree
	%123 = getelementptr %ast_AstNode, %ast_AstNode* %122, i32 0, i32 7
	store i32 %121, i32* %123
	br label %L.45
L.44:
	%124 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%125 = load %ast_AstNode*, %ast_AstNode** %tree
	%126 = getelementptr %ast_AstNode, %ast_AstNode* %125, i32 0, i32 8
	store %type_TypeNode* %124, %type_TypeNode** %126
	br label %L.45
L.45:
	br label %L.41
L.41:
	%127 = call i8 @lex_Next()
	store i8 %127, i8* %tok
	br label %L.34
L.36:
	%128 = load %type_TypeNode*, %type_TypeNode** %et
	%129 = icmp eq %type_TypeNode* %128, null
	br i1 %129, label %L.51, label %L.50
L.51:
	%130 = load %type_TypeNode*, %type_TypeNode** @type_floattype
	store %type_TypeNode* %130, %type_TypeNode** %et
	br label %L.50
L.50:
	%131 = load %type_TypeNode*, %type_TypeNode** %et
	%132 = getelementptr %type_TypeNode, %type_TypeNode* %131, i32 0, i32 16
	%133 = load i8, i8* %132
	%134 = zext i8 %133 to i32
	switch i32 %134, label %L.52 [
		i32 4, label %L.54
	]
L.54:
	%135 = load %type_TypeNode*, %type_TypeNode** %et
	%136 = call %ast_AstNode* @ast_New(i8 7, %type_TypeNode* %135)
	store %ast_AstNode* %136, %ast_AstNode** %tree
	%137 = load %type_TypeNode*, %type_TypeNode** %et
	%138 = getelementptr %type_TypeNode, %type_TypeNode* %137, i32 0, i32 10
	%139 = load i32, i32* %138
	%140 = load %ast_AstNode*, %ast_AstNode** %tree
	%141 = getelementptr %ast_AstNode, %ast_AstNode* %140, i32 0, i32 7
	store i32 %139, i32* %141
	%142 = call double @lex_MakeFloat(i8 0)
	%143 = bitcast double %142 to i64
	%144 = load %ast_AstNode*, %ast_AstNode** %tree
	%145 = getelementptr %ast_AstNode, %ast_AstNode* %144, i32 0, i32 10
	store i64 %143, i64* %145
	br label %L.53
L.52:
	%146 = getelementptr [14 x i8], [14 x i8]* @S.649
	%147 = bitcast [14 x i8]* %146 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %147)
	br label %L.53
L.53:
	%148 = call i8 @lex_Next()
	store i8 %148, i8* %tok
	br label %L.34
L.37:
	%149 = load %type_TypeNode*, %type_TypeNode** %et
	%150 = icmp eq %type_TypeNode* %149, null
	br i1 %150, label %L.56, label %L.55
L.56:
	%151 = load %type_TypeNode*, %type_TypeNode** @type_floattype
	store %type_TypeNode* %151, %type_TypeNode** %et
	br label %L.55
L.55:
	%152 = load %type_TypeNode*, %type_TypeNode** %et
	%153 = call %ast_AstNode* @ast_New(i8 7, %type_TypeNode* %152)
	store %ast_AstNode* %153, %ast_AstNode** %tree
	%154 = load %ast_AstNode*, %ast_AstNode** %tree
	%155 = getelementptr %ast_AstNode, %ast_AstNode* %154, i32 0, i32 7
	store i32 64, i32* %155
	%156 = call double @lex_MakeFloat(i8 1)
	%157 = bitcast double %156 to i64
	%158 = load %ast_AstNode*, %ast_AstNode** %tree
	%159 = getelementptr %ast_AstNode, %ast_AstNode* %158, i32 0, i32 10
	store i64 %157, i64* %159
	%160 = call i8 @lex_Next()
	store i8 %160, i8* %tok
	br label %L.34
L.38:
	%161 = call %ast_AstNode* @expr_String()
	store %ast_AstNode* %161, %ast_AstNode** %tree
	br label %L.34
L.39:
	%162 = call i8 @lex_Next()
	store i8 %162, i8* %tok
	%163 = load %type_TypeNode*, %type_TypeNode** %et
	%164 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %163)
	store %ast_AstNode* %164, %ast_AstNode** %tree
	%165 = load i8, i8* @lex_Token
	store i8 %165, i8* %tok
	%166 = call i8 @lex_Expect(i8 37)
	br label %L.34
L.40:
	%167 = load %type_TypeNode*, %type_TypeNode** %et
	%168 = call %ast_AstNode* @expr_CompositeValue(%type_TypeNode* %167)
	store %ast_AstNode* %168, %ast_AstNode** %tree
	br label %L.34
L.33:
	br label %L.34
L.34:
	br label %L.12
L.12:
	%169 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %169, %ast_AstNode** %rv.0
	br label %return
return:
	%170 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %170
}
define internal %ast_AstNode* @expr_Unary(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%tl = alloca %type_TypeNode*
	%tok = alloca i8
	%savetok = alloca i8
	store i8 0, i8* %savetok
	%0 = load %symb_SymbNode*, %symb_SymbNode** @expr_savedsym
	%1 = icmp eq %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* @lex_Token
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	store i8 %3, i8* %savetok
	%4 = load i8, i8* %tok
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 19, label %L.5
		i32 18, label %L.5
		i32 17, label %L.5
		i32 16, label %L.5
	]
L.5:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = call %ast_AstNode* @expr_Term(%type_TypeNode* %7)
	store %ast_AstNode* %8, %ast_AstNode** %tree
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	%10 = icmp ne %ast_AstNode* %9, null
	br i1 %10, label %L.7, label %L.6
L.7:
	%11 = load %ast_AstNode*, %ast_AstNode** %tree
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 8
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	store %type_TypeNode* %13, %type_TypeNode** %tl
	%14 = load i8, i8* %savetok
	%15 = zext i8 %14 to i32
	switch i32 %15, label %L.8 [
		i32 19, label %L.10
		i32 17, label %L.11
		i32 16, label %L.12
	]
L.10:
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 8
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 16
	%20 = load i8, i8* %19
	%21 = icmp eq i8 %20, 4
	br i1 %21, label %L.14, label %L.15
L.14:
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	%23 = call %ast_AstNode* @ast_OpUnary(i8 44, %ast_AstNode* %22)
	store %ast_AstNode* %23, %ast_AstNode** %tree
	br label %L.13
L.15:
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = call %ast_AstNode* @ast_OpUnary(i8 39, %ast_AstNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 8
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 16
	%30 = load i8, i8* %29
	%31 = icmp eq i8 %30, 2
	br i1 %31, label %L.17, label %L.16
L.17:
	%32 = load %ast_AstNode*, %ast_AstNode** %tree
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 7
	%34 = load i32, i32* %33
	%35 = call %type_TypeNode* @target_stype(i32 %34)
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 8
	store %type_TypeNode* %35, %type_TypeNode** %37
	br label %L.16
L.16:
	br label %L.13
L.13:
	br label %L.9
L.11:
	%38 = load %ast_AstNode*, %ast_AstNode** %tree
	%39 = call %ast_AstNode* @ast_OpUnary(i8 40, %ast_AstNode* %38)
	store %ast_AstNode* %39, %ast_AstNode** %tree
	br label %L.9
L.12:
	%40 = load %ast_AstNode*, %ast_AstNode** %tree
	%41 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %40)
	store %ast_AstNode* %41, %ast_AstNode** %tree
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	%43 = call %ast_AstNode* @ast_OpUnary(i8 94, %ast_AstNode* %42)
	store %ast_AstNode* %43, %ast_AstNode** %tree
	br label %L.9
L.8:
	br label %L.9
L.9:
	br label %L.6
L.6:
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %44, %ast_AstNode** %rv.0
	br label %return
return:
	%45 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %45
}
@expr_mulop = internal constant [6 x i8] [ i8 56, i8 57, i8 58, i8 63, i8 64, i8 51 ], align 1
@expr_fmulop = internal constant [6 x i8] [ i8 87, i8 88, i8 89, i8 0, i8 0, i8 0 ], align 1
define internal %ast_AstNode* @expr_Mul(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%op = alloca i8
	%tok = alloca i8
	%stok = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %ast_AstNode* @expr_Unary(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	%3 = icmp ne %ast_AstNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%4 = load i8, i8* @lex_Token
	store i8 %4, i8* %tok
	%5 = load i8, i8* %tok
	%6 = icmp ult i8 %5, 22
	br i1 %6, label %L.7, label %L.6
L.6:
	%7 = load i8, i8* %tok
	%8 = icmp ugt i8 %7, 27
	br label %L.7
L.7:
	%9 = phi i1 [ true, %L.3 ], [ %8, %L.6 ]
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = load i8, i8* %tok
	store i8 %10, i8* %stok
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = load %ast_AstNode*, %ast_AstNode** %tree
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 8
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	%15 = call %ast_AstNode* @expr_Unary(%type_TypeNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %rhs
	%16 = load %ast_AstNode*, %ast_AstNode** %rhs
	%17 = icmp eq %ast_AstNode* %16, null
	br i1 %17, label %L.4, label %L.8
L.8:
	%18 = load %ast_AstNode*, %ast_AstNode** %tree
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 8
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 16
	%22 = load i8, i8* %21
	%23 = icmp eq i8 %22, 4
	br i1 %23, label %L.10, label %L.11
L.10:
	%24 = load i8, i8* %stok
	%25 = zext i8 %24 to i32
	%26 = sub i32 %25, 22
	%27 = getelementptr [6 x i8], [6 x i8]* @expr_fmulop, i32 0, i32 %26
	%28 = load i8, i8* %27
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = call %ast_AstNode* @ast_OpFloat(i8 %28, %ast_AstNode* %29, %ast_AstNode* %30, %type_TypeNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	br label %L.9
L.11:
	%33 = load i8, i8* %stok
	%34 = zext i8 %33 to i32
	%35 = sub i32 %34, 22
	%36 = getelementptr [6 x i8], [6 x i8]* @expr_mulop, i32 0, i32 %35
	%37 = load i8, i8* %36
	store i8 %37, i8* %op
	%38 = load i8, i8* %op
	%39 = zext i8 %38 to i32
	switch i32 %39, label %L.12 [
		i32 51, label %L.14
		i32 56, label %L.15
		i32 57, label %L.15
		i32 58, label %L.15
		i32 63, label %L.16
		i32 64, label %L.17
	]
L.14:
	%40 = load i8, i8* %op
	%41 = load %ast_AstNode*, %ast_AstNode** %tree
	%42 = load %ast_AstNode*, %ast_AstNode** %rhs
	%43 = call %ast_AstNode* @ast_OpBinary(i8 %40, %ast_AstNode* %41, %ast_AstNode* %42, %type_TypeNode* null)
	store %ast_AstNode* %43, %ast_AstNode** %tree
	br label %L.13
L.15:
	%44 = load i8, i8* %op
	%45 = load %ast_AstNode*, %ast_AstNode** %tree
	%46 = load %ast_AstNode*, %ast_AstNode** %rhs
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = call %ast_AstNode* @ast_OpBinary(i8 %44, %ast_AstNode* %45, %ast_AstNode* %46, %type_TypeNode* %47)
	store %ast_AstNode* %48, %ast_AstNode** %tree
	br label %L.13
L.16:
	%49 = load %ast_AstNode*, %ast_AstNode** %tree
	%50 = getelementptr %ast_AstNode, %ast_AstNode* %49, i32 0, i32 8
	%51 = load %type_TypeNode*, %type_TypeNode** %50
	%52 = getelementptr %type_TypeNode, %type_TypeNode* %51, i32 0, i32 16
	%53 = load i8, i8* %52
	%54 = icmp eq i8 %53, 3
	br i1 %54, label %L.19, label %L.18
L.19:
	store i8 65, i8* %op
	br label %L.18
L.18:
	%55 = load i8, i8* %op
	%56 = load %ast_AstNode*, %ast_AstNode** %tree
	%57 = load %ast_AstNode*, %ast_AstNode** %rhs
	%58 = load %type_TypeNode*, %type_TypeNode** %t
	%59 = call %ast_AstNode* @ast_OpBinary(i8 %55, %ast_AstNode* %56, %ast_AstNode* %57, %type_TypeNode* %58)
	store %ast_AstNode* %59, %ast_AstNode** %tree
	br label %L.13
L.17:
	%60 = load %ast_AstNode*, %ast_AstNode** %tree
	%61 = getelementptr %ast_AstNode, %ast_AstNode* %60, i32 0, i32 8
	%62 = load %type_TypeNode*, %type_TypeNode** %61
	%63 = getelementptr %type_TypeNode, %type_TypeNode* %62, i32 0, i32 16
	%64 = load i8, i8* %63
	%65 = icmp eq i8 %64, 3
	br i1 %65, label %L.21, label %L.20
L.21:
	store i8 66, i8* %op
	br label %L.20
L.20:
	%66 = load i8, i8* %op
	%67 = load %ast_AstNode*, %ast_AstNode** %tree
	%68 = load %ast_AstNode*, %ast_AstNode** %rhs
	%69 = load %type_TypeNode*, %type_TypeNode** %t
	%70 = call %ast_AstNode* @ast_OpBinary(i8 %66, %ast_AstNode* %67, %ast_AstNode* %68, %type_TypeNode* %69)
	store %ast_AstNode* %70, %ast_AstNode** %tree
	br label %L.13
L.12:
	br label %L.13
L.13:
	br label %L.9
L.9:
	br label %L.3
L.4:
	br label %L.1
L.1:
	%71 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %71, %ast_AstNode** %rv.0
	br label %return
return:
	%72 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %72
}
@expr_addop = internal constant [4 x i8] [ i8 54, i8 55, i8 52, i8 53 ], align 1
@expr_faddop = internal constant [4 x i8] [ i8 85, i8 86, i8 0, i8 0 ], align 1
define internal %ast_AstNode* @expr_Add(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%op = alloca i8
	%tok = alloca i8
	%stok = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %ast_AstNode* @expr_Mul(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	%3 = icmp ne %ast_AstNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%4 = load i8, i8* @lex_Token
	store i8 %4, i8* %tok
	%5 = load i8, i8* %tok
	%6 = icmp ult i8 %5, 18
	br i1 %6, label %L.7, label %L.6
L.6:
	%7 = load i8, i8* %tok
	%8 = icmp ugt i8 %7, 21
	br label %L.7
L.7:
	%9 = phi i1 [ true, %L.3 ], [ %8, %L.6 ]
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = load i8, i8* %tok
	store i8 %10, i8* %stok
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = load %ast_AstNode*, %ast_AstNode** %tree
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 8
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	%15 = call %ast_AstNode* @expr_Mul(%type_TypeNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %rhs
	%16 = load %ast_AstNode*, %ast_AstNode** %rhs
	%17 = icmp eq %ast_AstNode* %16, null
	br i1 %17, label %L.4, label %L.8
L.8:
	%18 = load %ast_AstNode*, %ast_AstNode** %tree
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 8
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 16
	%22 = load i8, i8* %21
	%23 = icmp eq i8 %22, 4
	br i1 %23, label %L.10, label %L.11
L.10:
	%24 = load i8, i8* %stok
	%25 = zext i8 %24 to i32
	%26 = sub i32 %25, 18
	%27 = getelementptr [4 x i8], [4 x i8]* @expr_faddop, i32 0, i32 %26
	%28 = load i8, i8* %27
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = call %ast_AstNode* @ast_OpFloat(i8 %28, %ast_AstNode* %29, %ast_AstNode* %30, %type_TypeNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	br label %L.9
L.11:
	%33 = load i8, i8* %stok
	%34 = zext i8 %33 to i32
	%35 = sub i32 %34, 18
	%36 = getelementptr [4 x i8], [4 x i8]* @expr_addop, i32 0, i32 %35
	%37 = load i8, i8* %36
	store i8 %37, i8* %op
	%38 = load i8, i8* %stok
	%39 = icmp ult i8 %38, 20
	br i1 %39, label %L.13, label %L.14
L.13:
	%40 = load i8, i8* %op
	%41 = load %ast_AstNode*, %ast_AstNode** %tree
	%42 = load %ast_AstNode*, %ast_AstNode** %rhs
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	%44 = call %ast_AstNode* @ast_OpBinary(i8 %40, %ast_AstNode* %41, %ast_AstNode* %42, %type_TypeNode* %43)
	store %ast_AstNode* %44, %ast_AstNode** %tree
	br label %L.12
L.14:
	%45 = load i8, i8* %op
	%46 = load %ast_AstNode*, %ast_AstNode** %tree
	%47 = load %ast_AstNode*, %ast_AstNode** %rhs
	%48 = call %ast_AstNode* @ast_OpBinary(i8 %45, %ast_AstNode* %46, %ast_AstNode* %47, %type_TypeNode* null)
	store %ast_AstNode* %48, %ast_AstNode** %tree
	br label %L.12
L.12:
	br label %L.9
L.9:
	br label %L.3
L.4:
	br label %L.1
L.1:
	%49 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %49, %ast_AstNode** %rv.0
	br label %return
return:
	%50 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %50
}
@S.654 = private unnamed_addr constant [36 x i8] c"ArrayCompare: packed and not packed\00"
define internal %ast_AstNode* @expr_ArrayCompare(i8 zeroext %op$, %ast_AstNode* %lhs$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%op = alloca i8
	store i8 %op$, i8* %op
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%tree = alloca %ast_AstNode*
	%lsize = alloca %ast_AstNode*
	%rsize = alloca %ast_AstNode*
	%align = alloca %ast_AstNode*
	%lalign = alloca i32
	%ralign = alloca i32
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 24
	%4 = load i8, i8* %3
	%5 = icmp ne i8 %4, 0
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %ast_AstNode*, %ast_AstNode** %rhs
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 8
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 24
	%10 = load i8, i8* %9
	%11 = icmp ne i8 %10, 0
	%12 = xor i1 %11, true
	br i1 %12, label %L.4, label %L.3
L.4:
	%13 = getelementptr [36 x i8], [36 x i8]* @S.654
	%14 = bitcast [36 x i8]* %13 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %14)
	br label %L.3
L.3:
	%15 = load i8, i8* %op
	%16 = icmp eq i8 %15, 24
	br i1 %16, label %L.6, label %L.7
L.6:
	store i8 69, i8* %op
	br label %L.5
L.7:
	store i8 70, i8* %op
	br label %L.5
L.5:
	%17 = load i8, i8* %op
	%18 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%19 = load %ast_AstNode*, %ast_AstNode** %lhs
	%20 = load %ast_AstNode*, %ast_AstNode** %rhs
	%21 = call %ast_AstNode* @ast_New2(i8 %17, %type_TypeNode* %18, %ast_AstNode* %19, %ast_AstNode* %20)
	store %ast_AstNode* %21, %ast_AstNode** %tree
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 7
	store i32 1, i32* %23
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %24, %ast_AstNode** %rv.0
	br label %return
L.1:
	%25 = load %ast_AstNode*, %ast_AstNode** %lhs
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 0
	%27 = load i8, i8* %26
	%28 = icmp eq i8 %27, 27
	br i1 %28, label %L.8, label %L.9
L.8:
	%29 = load %ast_AstNode*, %ast_AstNode** %lhs
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 8
	%31 = load %type_TypeNode*, %type_TypeNode** %30
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 16
	%33 = load i8, i8* %32
	%34 = icmp eq i8 %33, 6
	br label %L.9
L.9:
	%35 = phi i1 [ false, %L.1 ], [ %34, %L.8 ]
	br i1 %35, label %L.11, label %L.10
L.11:
	%36 = load %ast_AstNode*, %ast_AstNode** %lhs
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 11
	%38 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %37, i32 0, i32 0
	%39 = load %ast_AstNode*, %ast_AstNode** %38
	store %ast_AstNode* %39, %ast_AstNode** %lhs
	br label %L.10
L.10:
	%40 = load %ast_AstNode*, %ast_AstNode** %rhs
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 0
	%42 = load i8, i8* %41
	%43 = icmp eq i8 %42, 27
	br i1 %43, label %L.12, label %L.13
L.12:
	%44 = load %ast_AstNode*, %ast_AstNode** %rhs
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 8
	%46 = load %type_TypeNode*, %type_TypeNode** %45
	%47 = getelementptr %type_TypeNode, %type_TypeNode* %46, i32 0, i32 16
	%48 = load i8, i8* %47
	%49 = icmp eq i8 %48, 6
	br label %L.13
L.13:
	%50 = phi i1 [ false, %L.10 ], [ %49, %L.12 ]
	br i1 %50, label %L.15, label %L.14
L.15:
	%51 = load %ast_AstNode*, %ast_AstNode** %rhs
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 11
	%53 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %52, i32 0, i32 0
	%54 = load %ast_AstNode*, %ast_AstNode** %53
	store %ast_AstNode* %54, %ast_AstNode** %rhs
	br label %L.14
L.14:
	%55 = load %ast_AstNode*, %ast_AstNode** %lhs
	%56 = getelementptr %ast_AstNode, %ast_AstNode* %55, i32 0, i32 0
	%57 = load i8, i8* %56
	%58 = icmp eq i8 %57, 9
	br i1 %58, label %L.17, label %L.16
L.16:
	%59 = load %ast_AstNode*, %ast_AstNode** %lhs
	%60 = getelementptr %ast_AstNode, %ast_AstNode* %59, i32 0, i32 0
	%61 = load i8, i8* %60
	%62 = icmp eq i8 %61, 8
	br label %L.17
L.17:
	%63 = phi i1 [ true, %L.14 ], [ %62, %L.16 ]
	br i1 %63, label %L.19, label %L.18
L.19:
	%64 = load %ast_AstNode*, %ast_AstNode** %lhs
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 8
	%66 = load %type_TypeNode*, %type_TypeNode** %65
	%67 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %66)
	%68 = load %ast_AstNode*, %ast_AstNode** %lhs
	%69 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %67, %ast_AstNode* %68)
	store %ast_AstNode* %69, %ast_AstNode** %lhs
	br label %L.18
L.18:
	%70 = load %ast_AstNode*, %ast_AstNode** %rhs
	%71 = getelementptr %ast_AstNode, %ast_AstNode* %70, i32 0, i32 0
	%72 = load i8, i8* %71
	%73 = icmp eq i8 %72, 9
	br i1 %73, label %L.21, label %L.20
L.20:
	%74 = load %ast_AstNode*, %ast_AstNode** %rhs
	%75 = getelementptr %ast_AstNode, %ast_AstNode* %74, i32 0, i32 0
	%76 = load i8, i8* %75
	%77 = icmp eq i8 %76, 8
	br label %L.21
L.21:
	%78 = phi i1 [ true, %L.18 ], [ %77, %L.20 ]
	br i1 %78, label %L.23, label %L.22
L.23:
	%79 = load %ast_AstNode*, %ast_AstNode** %rhs
	%80 = getelementptr %ast_AstNode, %ast_AstNode* %79, i32 0, i32 8
	%81 = load %type_TypeNode*, %type_TypeNode** %80
	%82 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %81)
	%83 = load %ast_AstNode*, %ast_AstNode** %rhs
	%84 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %82, %ast_AstNode* %83)
	store %ast_AstNode* %84, %ast_AstNode** %rhs
	br label %L.22
L.22:
	%85 = load %ast_AstNode*, %ast_AstNode** %lhs
	%86 = call i32 @expr_GetAlignment(%ast_AstNode* %85)
	store i32 %86, i32* %lalign
	%87 = load %ast_AstNode*, %ast_AstNode** %rhs
	%88 = call i32 @expr_GetAlignment(%ast_AstNode* %87)
	store i32 %88, i32* %ralign
	%89 = load i32, i32* %ralign
	%90 = load i32, i32* %lalign
	%91 = icmp ult i32 %89, %90
	br i1 %91, label %L.25, label %L.24
L.25:
	%92 = load i32, i32* %ralign
	store i32 %92, i32* %lalign
	br label %L.24
L.24:
	%93 = load %ast_AstNode*, %ast_AstNode** %lhs
	%94 = getelementptr %ast_AstNode, %ast_AstNode* %93, i32 0, i32 0
	%95 = load i8, i8* %94
	%96 = icmp eq i8 %95, 15
	br i1 %96, label %L.27, label %L.28
L.27:
	%97 = load %ast_AstNode*, %ast_AstNode** %lhs
	%98 = getelementptr %ast_AstNode, %ast_AstNode* %97, i32 0, i32 11
	%99 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %98, i32 0, i32 2
	%100 = load %ast_AstNode*, %ast_AstNode** %99
	store %ast_AstNode* %100, %ast_AstNode** %lsize
	br label %L.26
L.28:
	%101 = load %ast_AstNode*, %ast_AstNode** %lhs
	%102 = getelementptr %ast_AstNode, %ast_AstNode* %101, i32 0, i32 8
	%103 = load %type_TypeNode*, %type_TypeNode** %102
	%104 = getelementptr %type_TypeNode, %type_TypeNode* %103, i32 0, i32 0
	%105 = load %type_TypeNode*, %type_TypeNode** %104
	%106 = getelementptr %type_TypeNode, %type_TypeNode* %105
	%107 = bitcast %type_TypeNode* %106 to %type_TypeNode*
	%108 = call i32 @type_TypeNode_Span(%type_TypeNode* %107)
	%109 = zext i32 %108 to i64
	%110 = call %ast_AstNode* @ast_ConstW(i64 %109)
	store %ast_AstNode* %110, %ast_AstNode** %lsize
	br label %L.26
L.26:
	%111 = load %ast_AstNode*, %ast_AstNode** %rhs
	%112 = getelementptr %ast_AstNode, %ast_AstNode* %111, i32 0, i32 0
	%113 = load i8, i8* %112
	%114 = icmp eq i8 %113, 15
	br i1 %114, label %L.30, label %L.31
L.30:
	%115 = load %ast_AstNode*, %ast_AstNode** %rhs
	%116 = getelementptr %ast_AstNode, %ast_AstNode* %115, i32 0, i32 11
	%117 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %116, i32 0, i32 2
	%118 = load %ast_AstNode*, %ast_AstNode** %117
	store %ast_AstNode* %118, %ast_AstNode** %rsize
	br label %L.29
L.31:
	%119 = load %ast_AstNode*, %ast_AstNode** %rhs
	%120 = getelementptr %ast_AstNode, %ast_AstNode* %119, i32 0, i32 8
	%121 = load %type_TypeNode*, %type_TypeNode** %120
	%122 = getelementptr %type_TypeNode, %type_TypeNode* %121, i32 0, i32 0
	%123 = load %type_TypeNode*, %type_TypeNode** %122
	%124 = getelementptr %type_TypeNode, %type_TypeNode* %123
	%125 = bitcast %type_TypeNode* %124 to %type_TypeNode*
	%126 = call i32 @type_TypeNode_Span(%type_TypeNode* %125)
	%127 = zext i32 %126 to i64
	%128 = call %ast_AstNode* @ast_ConstW(i64 %127)
	store %ast_AstNode* %128, %ast_AstNode** %rsize
	br label %L.29
L.29:
	%129 = load i8, i8* %op
	%130 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%131 = load %ast_AstNode*, %ast_AstNode** %lhs
	%132 = load %ast_AstNode*, %ast_AstNode** %rhs
	%133 = call %ast_AstNode* @ast_New2(i8 %129, %type_TypeNode* %130, %ast_AstNode* %131, %ast_AstNode* %132)
	store %ast_AstNode* %133, %ast_AstNode** %tree
	%134 = load %ast_AstNode*, %ast_AstNode** %tree
	%135 = getelementptr %ast_AstNode, %ast_AstNode* %134, i32 0, i32 7
	store i32 1, i32* %135
	%136 = load %ast_AstNode*, %ast_AstNode** %tree
	%137 = load %ast_AstNode*, %ast_AstNode** %lsize
	%138 = call %ast_AstNode* @ast_Child(%ast_AstNode* %136, %ast_AstNode* %137)
	store %ast_AstNode* %138, %ast_AstNode** %tree
	%139 = load i32, i32* %lalign
	%140 = zext i32 %139 to i64
	%141 = call %ast_AstNode* @ast_ConstW(i64 %140)
	store %ast_AstNode* %141, %ast_AstNode** %align
	%142 = load %ast_AstNode*, %ast_AstNode** %tree
	%143 = load %ast_AstNode*, %ast_AstNode** %align
	%144 = call %ast_AstNode* @ast_Child(%ast_AstNode* %142, %ast_AstNode* %143)
	store %ast_AstNode* %144, %ast_AstNode** %tree
	%145 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %145, %ast_AstNode** %rv.0
	br label %return
return:
	%146 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %146
}
define internal zeroext i8 @expr_NodeKind(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%kind = alloca i8
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 12, label %L.3
		i32 15, label %L.3
		i32 14, label %L.3
		i32 13, label %L.3
	]
L.3:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 0
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 16
	%10 = load i8, i8* %9
	store i8 %10, i8* %kind
	br label %L.2
L.1:
	%11 = load %ast_AstNode*, %ast_AstNode** %node
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 8
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 16
	%15 = load i8, i8* %14
	store i8 %15, i8* %kind
	br label %L.2
L.2:
	%16 = load i8, i8* %kind
	store i8 %16, i8* %rv.0
	br label %return
return:
	%17 = load i8, i8* %rv.0
	ret i8 %17
}
@expr_ucmpop = internal constant [6 x i8] [ i8 69, i8 70, i8 71, i8 72, i8 73, i8 74 ], align 1
@expr_scmpop = internal constant [6 x i8] [ i8 69, i8 70, i8 75, i8 76, i8 77, i8 78 ], align 1
@expr_fcmpop = internal constant [6 x i8] [ i8 79, i8 80, i8 81, i8 82, i8 83, i8 84 ], align 1
define internal %ast_AstNode* @expr_Compare(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%tok = alloca i8
	%savetok = alloca i8
	%op = alloca i8
	%ok = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %ast_AstNode* @expr_Add(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	%2 = load i8, i8* @lex_Token
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	%4 = icmp uge i8 %3, 28
	br i1 %4, label %L.1, label %L.2
L.1:
	%5 = load i8, i8* %tok
	%6 = icmp ule i8 %5, 33
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load i8, i8* %tok
	store i8 %8, i8* %savetok
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = load %ast_AstNode*, %ast_AstNode** %tree
	%11 = icmp ne %ast_AstNode* %10, null
	br i1 %11, label %L.6, label %L.5
L.6:
	%12 = load %ast_AstNode*, %ast_AstNode** %tree
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 8
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	%15 = call %ast_AstNode* @expr_Add(%type_TypeNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %rhs
	%16 = load %ast_AstNode*, %ast_AstNode** %rhs
	%17 = icmp ne %ast_AstNode* %16, null
	br i1 %17, label %L.8, label %L.7
L.8:
	%18 = load %ast_AstNode*, %ast_AstNode** %tree
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 8
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	%21 = load %ast_AstNode*, %ast_AstNode** %rhs
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 8
	%23 = load %type_TypeNode*, %type_TypeNode** %22
	%24 = call i8 @type_Compat(%type_TypeNode* %20, %type_TypeNode* %23)
	store i8 %24, i8* %ok
	%25 = load %ast_AstNode*, %ast_AstNode** %tree
	%26 = call i8 @expr_NodeKind(%ast_AstNode* %25)
	%27 = zext i8 %26 to i32
	switch i32 %27, label %L.9 [
		i32 1, label %L.11
		i32 2, label %L.11
		i32 3, label %L.11
		i32 4, label %L.12
		i32 5, label %L.13
		i32 8, label %L.13
		i32 7, label %L.14
		i32 6, label %L.15
	]
L.11:
	%28 = load %ast_AstNode*, %ast_AstNode** %tree
	%29 = load %ast_AstNode*, %ast_AstNode** %rhs
	%30 = call i8 @expr_IsSignedBinOp(%ast_AstNode* %28, %ast_AstNode* %29)
	%31 = icmp ne i8 %30, 0
	br i1 %31, label %L.17, label %L.18
L.17:
	%32 = load i8, i8* %ok
	%33 = icmp ne i8 %32, 0
	%34 = xor i1 %33, true
	br i1 %34, label %L.19, label %L.20
L.19:
	%35 = load %ast_AstNode*, %ast_AstNode** %rhs
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 0
	%37 = load i8, i8* %36
	%38 = icmp eq i8 %37, 6
	br label %L.20
L.20:
	%39 = phi i1 [ false, %L.17 ], [ %38, %L.19 ]
	br i1 %39, label %L.22, label %L.21
L.22:
	%40 = load %ast_AstNode*, %ast_AstNode** %tree
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 8
	%42 = load %type_TypeNode*, %type_TypeNode** %41
	%43 = load %ast_AstNode*, %ast_AstNode** %rhs
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 8
	store %type_TypeNode* %42, %type_TypeNode** %44
	store i8 1, i8* %ok
	br label %L.21
L.21:
	%45 = load i8, i8* %savetok
	%46 = zext i8 %45 to i32
	%47 = sub i32 %46, 28
	%48 = getelementptr [6 x i8], [6 x i8]* @expr_scmpop, i32 0, i32 %47
	%49 = load i8, i8* %48
	store i8 %49, i8* %op
	br label %L.16
L.18:
	%50 = load i8, i8* %savetok
	%51 = zext i8 %50 to i32
	%52 = sub i32 %51, 28
	%53 = getelementptr [6 x i8], [6 x i8]* @expr_ucmpop, i32 0, i32 %52
	%54 = load i8, i8* %53
	store i8 %54, i8* %op
	br label %L.16
L.16:
	%55 = load i8, i8* %op
	%56 = load %ast_AstNode*, %ast_AstNode** %tree
	%57 = load %ast_AstNode*, %ast_AstNode** %rhs
	%58 = call %ast_AstNode* @ast_OpBinary(i8 %55, %ast_AstNode* %56, %ast_AstNode* %57, %type_TypeNode* null)
	store %ast_AstNode* %58, %ast_AstNode** %tree
	br label %L.10
L.12:
	%59 = load i8, i8* %savetok
	%60 = zext i8 %59 to i32
	%61 = sub i32 %60, 28
	%62 = getelementptr [6 x i8], [6 x i8]* @expr_fcmpop, i32 0, i32 %61
	%63 = load i8, i8* %62
	store i8 %63, i8* %op
	%64 = load i8, i8* %op
	%65 = load %ast_AstNode*, %ast_AstNode** %tree
	%66 = load %ast_AstNode*, %ast_AstNode** %rhs
	%67 = call %ast_AstNode* @ast_OpFloat(i8 %64, %ast_AstNode* %65, %ast_AstNode* %66, %type_TypeNode* null)
	store %ast_AstNode* %67, %ast_AstNode** %tree
	%68 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%69 = load %ast_AstNode*, %ast_AstNode** %tree
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 8
	store %type_TypeNode* %68, %type_TypeNode** %70
	%71 = load %ast_AstNode*, %ast_AstNode** %tree
	%72 = getelementptr %ast_AstNode, %ast_AstNode* %71, i32 0, i32 7
	store i32 1, i32* %72
	br label %L.10
L.13:
	%73 = load i8, i8* %savetok
	%74 = zext i8 %73 to i32
	switch i32 %74, label %L.23 [
		i32 28, label %L.25
		i32 29, label %L.26
	]
L.25:
	store i8 69, i8* %op
	br label %L.24
L.26:
	store i8 70, i8* %op
	br label %L.24
L.23:
	store i8 0, i8* %ok
	br label %L.24
L.24:
	%75 = load i8, i8* %ok
	%76 = icmp ne i8 %75, 0
	br i1 %76, label %L.28, label %L.27
L.28:
	%77 = load %ast_AstNode*, %ast_AstNode** %rhs
	%78 = getelementptr %ast_AstNode, %ast_AstNode* %77, i32 0, i32 0
	%79 = load i8, i8* %78
	%80 = icmp eq i8 %79, 6
	br i1 %80, label %L.30, label %L.29
L.30:
	%81 = load %target_ModelT*, %target_ModelT** @target_Target
	%82 = getelementptr %target_ModelT, %target_ModelT* %81, i32 0, i32 5
	%83 = getelementptr %target_SizeAlign, %target_SizeAlign* %82, i32 0, i32 0
	%84 = load i8, i8* %83
	%85 = zext i8 %84 to i32
	%86 = load %ast_AstNode*, %ast_AstNode** %rhs
	%87 = getelementptr %ast_AstNode, %ast_AstNode* %86, i32 0, i32 7
	store i32 %85, i32* %87
	br label %L.29
L.29:
	%88 = load i8, i8* %op
	%89 = load %ast_AstNode*, %ast_AstNode** %tree
	%90 = load %ast_AstNode*, %ast_AstNode** %rhs
	%91 = call %ast_AstNode* @ast_OpBinary(i8 %88, %ast_AstNode* %89, %ast_AstNode* %90, %type_TypeNode* null)
	store %ast_AstNode* %91, %ast_AstNode** %tree
	br label %L.27
L.27:
	br label %L.10
L.14:
	%92 = load %ast_AstNode*, %ast_AstNode** %rhs
	%93 = call i8 @expr_NodeKind(%ast_AstNode* %92)
	%94 = icmp eq i8 %93, 7
	br i1 %94, label %L.33, label %L.34
L.33:
	%95 = load %ast_AstNode*, %ast_AstNode** %tree
	%96 = getelementptr %ast_AstNode, %ast_AstNode* %95, i32 0, i32 8
	%97 = load %type_TypeNode*, %type_TypeNode** %96
	%98 = getelementptr %type_TypeNode, %type_TypeNode* %97, i32 0, i32 24
	%99 = load i8, i8* %98
	%100 = icmp ne i8 %99, 0
	br label %L.34
L.34:
	%101 = phi i1 [ false, %L.14 ], [ %100, %L.33 ]
	br i1 %101, label %L.31, label %L.32
L.31:
	%102 = load %ast_AstNode*, %ast_AstNode** %rhs
	%103 = getelementptr %ast_AstNode, %ast_AstNode* %102, i32 0, i32 8
	%104 = load %type_TypeNode*, %type_TypeNode** %103
	%105 = getelementptr %type_TypeNode, %type_TypeNode* %104, i32 0, i32 24
	%106 = load i8, i8* %105
	%107 = icmp ne i8 %106, 0
	br label %L.32
L.32:
	%108 = phi i1 [ false, %L.34 ], [ %107, %L.31 ]
	br i1 %108, label %L.36, label %L.37
L.36:
	%109 = load i8, i8* %savetok
	%110 = zext i8 %109 to i32
	switch i32 %110, label %L.38 [
		i32 28, label %L.40
		i32 29, label %L.41
	]
L.40:
	store i8 69, i8* %op
	br label %L.39
L.41:
	store i8 70, i8* %op
	br label %L.39
L.38:
	store i8 0, i8* %ok
	br label %L.39
L.39:
	%111 = load i8, i8* %ok
	%112 = icmp ne i8 %111, 0
	br i1 %112, label %L.43, label %L.42
L.43:
	%113 = load i8, i8* %op
	%114 = load %ast_AstNode*, %ast_AstNode** %tree
	%115 = load %ast_AstNode*, %ast_AstNode** %rhs
	%116 = call %ast_AstNode* @ast_OpBinary(i8 %113, %ast_AstNode* %114, %ast_AstNode* %115, %type_TypeNode* null)
	store %ast_AstNode* %116, %ast_AstNode** %tree
	br label %L.42
L.42:
	br label %L.35
L.37:
	store i8 0, i8* %ok
	br label %L.35
L.35:
	br label %L.10
L.15:
	%117 = load %ast_AstNode*, %ast_AstNode** %rhs
	%118 = call i8 @expr_NodeKind(%ast_AstNode* %117)
	%119 = icmp eq i8 %118, 6
	br i1 %119, label %L.45, label %L.46
L.45:
	%120 = load %ast_AstNode*, %ast_AstNode** %tree
	%121 = getelementptr %ast_AstNode, %ast_AstNode* %120, i32 0, i32 8
	%122 = load %type_TypeNode*, %type_TypeNode** %121
	%123 = getelementptr %type_TypeNode, %type_TypeNode* %122, i32 0, i32 24
	%124 = load i8, i8* %123
	%125 = icmp ne i8 %124, 0
	br i1 %125, label %L.47, label %L.48
L.47:
	%126 = load %ast_AstNode*, %ast_AstNode** %rhs
	%127 = getelementptr %ast_AstNode, %ast_AstNode* %126, i32 0, i32 8
	%128 = load %type_TypeNode*, %type_TypeNode** %127
	%129 = getelementptr %type_TypeNode, %type_TypeNode* %128, i32 0, i32 24
	%130 = load i8, i8* %129
	%131 = icmp ne i8 %130, 0
	br label %L.48
L.48:
	%132 = phi i1 [ false, %L.45 ], [ %131, %L.47 ]
	br i1 %132, label %L.50, label %L.51
L.50:
	%133 = load i8, i8* %savetok
	%134 = zext i8 %133 to i32
	switch i32 %134, label %L.52 [
		i32 28, label %L.54
		i32 29, label %L.55
	]
L.54:
	store i8 69, i8* %op
	br label %L.53
L.55:
	store i8 70, i8* %op
	br label %L.53
L.52:
	store i8 0, i8* %ok
	br label %L.53
L.53:
	%135 = load i8, i8* %ok
	%136 = icmp ne i8 %135, 0
	br i1 %136, label %L.57, label %L.56
L.57:
	%137 = load i8, i8* %op
	%138 = load %ast_AstNode*, %ast_AstNode** %tree
	%139 = load %ast_AstNode*, %ast_AstNode** %rhs
	%140 = call %ast_AstNode* @ast_OpBinary(i8 %137, %ast_AstNode* %138, %ast_AstNode* %139, %type_TypeNode* null)
	store %ast_AstNode* %140, %ast_AstNode** %tree
	br label %L.56
L.56:
	br label %L.49
L.51:
	%141 = load i8, i8* %savetok
	%142 = zext i8 %141 to i32
	switch i32 %142, label %L.58 [
		i32 28, label %L.60
		i32 29, label %L.61
	]
L.60:
	store i8 24, i8* %op
	br label %L.59
L.61:
	store i8 25, i8* %op
	br label %L.59
L.58:
	store i8 0, i8* %ok
	br label %L.59
L.59:
	%143 = load i8, i8* %ok
	%144 = icmp ne i8 %143, 0
	br i1 %144, label %L.63, label %L.62
L.63:
	%145 = load i8, i8* %op
	%146 = load %ast_AstNode*, %ast_AstNode** %tree
	%147 = load %ast_AstNode*, %ast_AstNode** %rhs
	%148 = call %ast_AstNode* @expr_ArrayCompare(i8 %145, %ast_AstNode* %146, %ast_AstNode* %147)
	store %ast_AstNode* %148, %ast_AstNode** %tree
	br label %L.62
L.62:
	br label %L.49
L.49:
	br label %L.44
L.46:
	store i8 0, i8* %ok
	br label %L.44
L.44:
	br label %L.10
L.9:
	store i8 0, i8* %ok
	br label %L.10
L.10:
	%149 = load i8, i8* %ok
	%150 = icmp ne i8 %149, 0
	br i1 %150, label %L.65, label %L.66
L.65:
	%151 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%152 = load %ast_AstNode*, %ast_AstNode** %tree
	%153 = getelementptr %ast_AstNode, %ast_AstNode* %152, i32 0, i32 8
	store %type_TypeNode* %151, %type_TypeNode** %153
	%154 = load %ast_AstNode*, %ast_AstNode** %tree
	%155 = getelementptr %ast_AstNode, %ast_AstNode* %154, i32 0, i32 7
	store i32 1, i32* %155
	br label %L.64
L.66:
	call void @lex_Error(i8 39)
	br label %L.64
L.64:
	br label %L.7
L.7:
	br label %L.5
L.5:
	br label %L.3
L.3:
	%156 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %156, %ast_AstNode** %rv.0
	br label %return
return:
	%157 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %157
}
define internal %ast_AstNode* @expr_BoolAnd(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %ast_AstNode* @expr_Compare(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	br label %L.1
L.1:
	%2 = load i8, i8* @lex_Token
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	%4 = icmp ne i8 %3, 34
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%7 = call %ast_AstNode* @expr_Compare(%type_TypeNode* %6)
	store %ast_AstNode* %7, %ast_AstNode** %rhs
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = icmp ne %ast_AstNode* %8, null
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %ast_AstNode*, %ast_AstNode** %rhs
	%11 = icmp ne %ast_AstNode* %10, null
	br label %L.5
L.5:
	%12 = phi i1 [ false, %L.3 ], [ %11, %L.4 ]
	br i1 %12, label %L.7, label %L.6
L.7:
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 0
	%15 = load i8, i8* %14
	%16 = icmp eq i8 %15, 6
	br i1 %16, label %L.9, label %L.10
L.9:
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 10
	%19 = load i64, i64* %18
	%20 = icmp ne i64 %19, 0
	br i1 %20, label %L.12, label %L.11
L.12:
	%21 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %21, %ast_AstNode** %tree
	br label %L.11
L.11:
	br label %L.8
L.10:
	%22 = load %ast_AstNode*, %ast_AstNode** %rhs
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 0
	%24 = load i8, i8* %23
	%25 = icmp eq i8 %24, 6
	br i1 %25, label %L.14, label %L.15
L.14:
	%26 = load %ast_AstNode*, %ast_AstNode** %rhs
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 10
	%28 = load i64, i64* %27
	%29 = icmp eq i64 %28, 0
	br i1 %29, label %L.17, label %L.16
L.17:
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %30, %ast_AstNode** %tree
	br label %L.16
L.16:
	br label %L.13
L.15:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = load %ast_AstNode*, %ast_AstNode** %rhs
	%33 = call %ast_AstNode* @ast_OpBool(i8 92, %ast_AstNode* %31, %ast_AstNode* %32)
	store %ast_AstNode* %33, %ast_AstNode** %tree
	br label %L.13
L.13:
	br label %L.8
L.8:
	br label %L.6
L.6:
	br label %L.1
L.2:
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %34, %ast_AstNode** %rv.0
	br label %return
return:
	%35 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %35
}
define internal %ast_AstNode* @expr_Bool(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %ast_AstNode* @expr_BoolAnd(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	br label %L.1
L.1:
	%2 = load i8, i8* @lex_Token
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	%4 = icmp ne i8 %3, 35
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%7 = call %ast_AstNode* @expr_Compare(%type_TypeNode* %6)
	store %ast_AstNode* %7, %ast_AstNode** %rhs
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = icmp ne %ast_AstNode* %8, null
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %ast_AstNode*, %ast_AstNode** %rhs
	%11 = icmp ne %ast_AstNode* %10, null
	br label %L.5
L.5:
	%12 = phi i1 [ false, %L.3 ], [ %11, %L.4 ]
	br i1 %12, label %L.7, label %L.6
L.7:
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 0
	%15 = load i8, i8* %14
	%16 = icmp eq i8 %15, 6
	br i1 %16, label %L.9, label %L.10
L.9:
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 10
	%19 = load i64, i64* %18
	%20 = icmp eq i64 %19, 0
	br i1 %20, label %L.12, label %L.11
L.12:
	%21 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %21, %ast_AstNode** %tree
	br label %L.11
L.11:
	br label %L.8
L.10:
	%22 = load %ast_AstNode*, %ast_AstNode** %rhs
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 0
	%24 = load i8, i8* %23
	%25 = icmp eq i8 %24, 6
	br i1 %25, label %L.14, label %L.15
L.14:
	%26 = load %ast_AstNode*, %ast_AstNode** %rhs
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 10
	%28 = load i64, i64* %27
	%29 = icmp ne i64 %28, 0
	br i1 %29, label %L.17, label %L.16
L.17:
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %30, %ast_AstNode** %tree
	br label %L.16
L.16:
	br label %L.13
L.15:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = load %ast_AstNode*, %ast_AstNode** %rhs
	%33 = call %ast_AstNode* @ast_OpBool(i8 93, %ast_AstNode* %31, %ast_AstNode* %32)
	store %ast_AstNode* %33, %ast_AstNode** %tree
	br label %L.13
L.13:
	br label %L.8
L.8:
	br label %L.6
L.6:
	br label %L.1
L.2:
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %34, %ast_AstNode** %rv.0
	br label %return
return:
	%35 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %35
}
define internal { %ast_AstNode*, %ast_AstNode* } @expr_GetRange() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%rv.1 = alloca %ast_AstNode*
	%lo = alloca %ast_AstNode*
	%hi = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_Find([0 x i8]* %3)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = icmp eq %symb_SymbNode* %6, null
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %8)
	%9 = load %ast_AstNode*, %ast_AstNode** @ast_Null
	store %ast_AstNode* %9, %ast_AstNode** %rv.0
	%10 = load %ast_AstNode*, %ast_AstNode** @ast_Null
	store %ast_AstNode* %10, %ast_AstNode** %rv.1
	br label %return
L.3:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 13
	%13 = load i8, i8* %12
	%14 = icmp eq i8 %13, 2
	br i1 %14, label %L.6, label %L.5
L.6:
	%15 = load i8, i8* %tok
	%16 = icmp eq i8 %15, 39
	br i1 %16, label %L.8, label %L.7
L.7:
	%17 = load i8, i8* %tok
	%18 = icmp eq i8 %17, 46
	br label %L.8
L.8:
	%19 = phi i1 [ true, %L.6 ], [ %18, %L.7 ]
	br i1 %19, label %L.10, label %L.9
L.10:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 1
	%22 = load %type_TypeNode*, %type_TypeNode** %21
	store %type_TypeNode* %22, %type_TypeNode** %t
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = getelementptr %type_TypeNode, %type_TypeNode* %24, i32 0, i32 9
	%26 = load i64, i64* %25
	%27 = call %ast_AstNode* @ast_Const(%type_TypeNode* %23, i64 %26)
	store %ast_AstNode* %27, %ast_AstNode** %hi
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 8
	%31 = load i64, i64* %30
	%32 = call %ast_AstNode* @ast_Const(%type_TypeNode* %28, i64 %31)
	store %ast_AstNode* %32, %ast_AstNode** %lo
	%33 = load %ast_AstNode*, %ast_AstNode** %lo
	store %ast_AstNode* %33, %ast_AstNode** %rv.0
	%34 = load %ast_AstNode*, %ast_AstNode** %hi
	store %ast_AstNode* %34, %ast_AstNode** %rv.1
	br label %return
L.9:
	br label %L.5
L.5:
	%35 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %35, %symb_SymbNode** @expr_savedsym
	br label %L.1
L.1:
	%36 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %36, %ast_AstNode** %lo
	%37 = load %ast_AstNode*, %ast_AstNode** %lo
	%38 = icmp eq %ast_AstNode* %37, null
	br i1 %38, label %L.12, label %L.11
L.12:
	%39 = call %ast_AstNode* @ast_ConstW(i64 0)
	store %ast_AstNode* %39, %ast_AstNode** %lo
	br label %L.11
L.11:
	%40 = load %ast_AstNode*, %ast_AstNode** %lo
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 8
	%42 = load %type_TypeNode*, %type_TypeNode** %41
	store %type_TypeNode* %42, %type_TypeNode** %t
	%43 = load i8, i8* @lex_Token
	%44 = icmp eq i8 %43, 6
	br i1 %44, label %L.14, label %L.15
L.14:
	%45 = call i8 @lex_Next()
	store i8 %45, i8* %tok
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %46)
	store %ast_AstNode* %47, %ast_AstNode** %hi
	br label %L.13
L.15:
	%48 = load %ast_AstNode*, %ast_AstNode** %lo
	%49 = load %type_TypeNode*, %type_TypeNode** %t
	%50 = call %ast_AstNode* @ast_Const(%type_TypeNode* %49, i64 1)
	%51 = load %type_TypeNode*, %type_TypeNode** %t
	%52 = call %ast_AstNode* @ast_OpBinary(i8 55, %ast_AstNode* %48, %ast_AstNode* %50, %type_TypeNode* %51)
	store %ast_AstNode* %52, %ast_AstNode** %hi
	%53 = load %type_TypeNode*, %type_TypeNode** %t
	%54 = call %ast_AstNode* @ast_Const(%type_TypeNode* %53, i64 0)
	store %ast_AstNode* %54, %ast_AstNode** %lo
	br label %L.13
L.13:
	%55 = load %ast_AstNode*, %ast_AstNode** %lo
	store %ast_AstNode* %55, %ast_AstNode** %rv.0
	%56 = load %ast_AstNode*, %ast_AstNode** %hi
	store %ast_AstNode* %56, %ast_AstNode** %rv.1
	br label %return
return:
	%57 = load %ast_AstNode*, %ast_AstNode** %rv.0
	%58 = load %ast_AstNode*, %ast_AstNode** %rv.1
	%mrv0 = insertvalue { %ast_AstNode*, %ast_AstNode* } undef,%ast_AstNode* %57,0
	%mrv1 = insertvalue { %ast_AstNode*, %ast_AstNode* } %mrv0,%ast_AstNode* %58,1
	ret  { %ast_AstNode*, %ast_AstNode* } %mrv1
}
define internal %ast_AstNode* @expr_Const(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.4 [
		i32 5, label %L.6
		i32 7, label %L.7
		i32 6, label %L.8
		i32 8, label %L.9
	]
L.6:
	%6 = load i8, i8* @lex_Token
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.10 [
		i32 40, label %L.12
		i32 45, label %L.12
	]
L.12:
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 0
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = call %ast_AstNode* @expr_Const(%type_TypeNode* %10)
	store %ast_AstNode* %11, %ast_AstNode** %tree
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %12, %ast_AstNode* %13)
	store %ast_AstNode* %14, %ast_AstNode** %tree
	br label %L.11
L.10:
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = icmp ne %ast_AstNode* %17, null
	br i1 %18, label %L.14, label %L.13
L.14:
	%19 = load %ast_AstNode*, %ast_AstNode** %tree
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 0
	%21 = load i8, i8* %20
	%22 = zext i8 %21 to i32
	switch i32 %22, label %L.15 [
		i32 6, label %L.17
		i32 27, label %L.18
	]
L.17:
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 8
	store %type_TypeNode* %23, %type_TypeNode** %25
	br label %L.16
L.18:
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 11
	%28 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %27, i32 0, i32 0
	%29 = load %ast_AstNode*, %ast_AstNode** %28
	store %ast_AstNode* %29, %ast_AstNode** %tree
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = getelementptr %type_TypeNode, %type_TypeNode* %30, i32 0, i32 0
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 28
	%34 = load i8, i8* %33
	%35 = icmp ne i8 %34, 0
	br i1 %35, label %L.19, label %L.20
L.19:
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 8
	%38 = load %type_TypeNode*, %type_TypeNode** %37
	%39 = getelementptr %type_TypeNode, %type_TypeNode* %38, i32 0, i32 0
	%40 = load %type_TypeNode*, %type_TypeNode** %39
	%41 = getelementptr %type_TypeNode, %type_TypeNode* %40, i32 0, i32 28
	%42 = load i8, i8* %41
	%43 = icmp ne i8 %42, 0
	%44 = xor i1 %43, true
	br label %L.20
L.20:
	%45 = phi i1 [ false, %L.18 ], [ %44, %L.19 ]
	br i1 %45, label %L.22, label %L.21
L.22:
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = load %ast_AstNode*, %ast_AstNode** %tree
	%48 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %46, %ast_AstNode* %47)
	store %ast_AstNode* %48, %ast_AstNode** %tree
	br label %L.21
L.21:
	br label %L.16
L.15:
	%49 = load %ast_AstNode*, %ast_AstNode** %tree
	%50 = getelementptr %ast_AstNode, %ast_AstNode* %49, i32 0, i32 8
	%51 = load %type_TypeNode*, %type_TypeNode** %50
	%52 = load %type_TypeNode*, %type_TypeNode** %t
	%53 = icmp ne %type_TypeNode* %51, %52
	br i1 %53, label %L.24, label %L.23
L.24:
	%54 = load %ast_AstNode*, %ast_AstNode** %tree
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 8
	%56 = load %type_TypeNode*, %type_TypeNode** %55
	%57 = load %type_TypeNode*, %type_TypeNode** %t
	%58 = getelementptr %type_TypeNode, %type_TypeNode* %57, i32 0, i32 0
	%59 = load %type_TypeNode*, %type_TypeNode** %58
	%60 = call i8 @type_Compat(%type_TypeNode* %56, %type_TypeNode* %59)
	%61 = icmp ne i8 %60, 0
	br i1 %61, label %L.26, label %L.27
L.26:
	%62 = load %ast_AstNode*, %ast_AstNode** %tree
	%63 = call %ast_AstNode* @ast_CoerceToRef(%ast_AstNode* %62)
	store %ast_AstNode* %63, %ast_AstNode** %tree
	br label %L.25
L.27:
	call void @lex_Error(i8 55)
	br label %L.25
L.25:
	br label %L.23
L.23:
	br label %L.16
L.16:
	br label %L.13
L.13:
	br label %L.11
L.11:
	br label %L.5
L.7:
	%64 = load %type_TypeNode*, %type_TypeNode** %t
	%65 = call %ast_AstNode* @expr_RecordConst(%type_TypeNode* %64)
	store %ast_AstNode* %65, %ast_AstNode** %tree
	br label %L.5
L.8:
	%66 = load %type_TypeNode*, %type_TypeNode** %t
	%67 = call %ast_AstNode* @expr_ArrayConst(%type_TypeNode* %66)
	store %ast_AstNode* %67, %ast_AstNode** %tree
	br label %L.5
L.9:
	%68 = load %type_TypeNode*, %type_TypeNode** %t
	%69 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %68)
	store %ast_AstNode* %69, %ast_AstNode** %tree
	br label %L.5
L.4:
	%70 = load %type_TypeNode*, %type_TypeNode** %t
	%71 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %70)
	store %ast_AstNode* %71, %ast_AstNode** %tree
	%72 = load %ast_AstNode*, %ast_AstNode** %tree
	%73 = icmp ne %ast_AstNode* %72, null
	br i1 %73, label %L.29, label %L.28
L.29:
	%74 = load %ast_AstNode*, %ast_AstNode** %tree
	%75 = load %type_TypeNode*, %type_TypeNode** %t
	%76 = getelementptr %type_TypeNode, %type_TypeNode* %75, i32 0, i32 11
	%77 = load i32, i32* %76
	%78 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %74, i32 %77, i8 0)
	store %ast_AstNode* %78, %ast_AstNode** %tree
	%79 = load %type_TypeNode*, %type_TypeNode** %t
	%80 = load %ast_AstNode*, %ast_AstNode** %tree
	%81 = getelementptr %ast_AstNode, %ast_AstNode* %80, i32 0, i32 8
	store %type_TypeNode* %79, %type_TypeNode** %81
	br label %L.28
L.28:
	br label %L.5
L.5:
	br label %L.1
L.3:
	%82 = load %type_TypeNode*, %type_TypeNode** %t
	%83 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %82)
	store %ast_AstNode* %83, %ast_AstNode** %tree
	br label %L.1
L.1:
	%84 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %84, %ast_AstNode** %rv.0
	br label %return
return:
	%85 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %85
}
define internal i64 @expr_ConstValue(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i64
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tree = alloca %ast_AstNode*
	%rv = alloca i64
	store i64 0, i64* %rv
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	%2 = load %ast_AstNode*, %ast_AstNode** %tree
	%3 = icmp ne %ast_AstNode* %2, null
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 0
	%6 = load i8, i8* %5
	%7 = icmp eq i8 %6, 6
	br i1 %7, label %L.5, label %L.6
L.5:
	%8 = load %ast_AstNode*, %ast_AstNode** %tree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 10
	%10 = load i64, i64* %9
	store i64 %10, i64* %rv
	br label %L.4
L.6:
	%11 = load %ast_AstNode*, %ast_AstNode** %tree
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 0
	%13 = load i8, i8* %12
	%14 = icmp eq i8 %13, 27
	br i1 %14, label %L.7, label %L.8
L.7:
	%15 = load %ast_AstNode*, %ast_AstNode** %tree
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 0
	%18 = load %ast_AstNode*, %ast_AstNode** %17
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 0
	%20 = load i8, i8* %19
	%21 = icmp eq i8 %20, 6
	br label %L.8
L.8:
	%22 = phi i1 [ false, %L.6 ], [ %21, %L.7 ]
	br i1 %22, label %L.10, label %L.9
L.10:
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 0
	%26 = load %ast_AstNode*, %ast_AstNode** %25
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 10
	%28 = load i64, i64* %27
	store i64 %28, i64* %rv
	br label %L.9
L.9:
	br label %L.4
L.4:
	br label %L.1
L.3:
	call void @lex_Error(i8 75)
	br label %L.1
L.1:
	%29 = load i64, i64* %rv
	store i64 %29, i64* %rv.0
	br label %return
return:
	%30 = load i64, i64* %rv.0
	ret i64 %30
}
define internal %symb_SymbNode* @expr_ConstString() nounwind {
L.0:
	%rv.0 = alloca %symb_SymbNode*
	%tree = alloca %ast_AstNode*
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %tree
	%1 = load %ast_AstNode*, %ast_AstNode** %tree
	%2 = icmp ne %ast_AstNode* %1, null
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load %ast_AstNode*, %ast_AstNode** %tree
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 0
	%5 = load i8, i8* %4
	%6 = icmp eq i8 %5, 8
	br i1 %6, label %L.4, label %L.5
L.4:
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 9
	%9 = load %symb_SymbNode*, %symb_SymbNode** %8
	store %symb_SymbNode* %9, %symb_SymbNode** %rv.0
	br label %return
L.5:
	%10 = load %ast_AstNode*, %ast_AstNode** %tree
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 0
	%12 = load i8, i8* %11
	%13 = icmp eq i8 %12, 27
	br i1 %13, label %L.10, label %L.11
L.10:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 11
	%16 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %15, i32 0, i32 0
	%17 = load %ast_AstNode*, %ast_AstNode** %16
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 0
	%19 = load i8, i8* %18
	%20 = icmp eq i8 %19, 12
	br label %L.11
L.11:
	%21 = phi i1 [ false, %L.5 ], [ %20, %L.10 ]
	br i1 %21, label %L.8, label %L.9
L.8:
	%22 = load %ast_AstNode*, %ast_AstNode** %tree
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 11
	%24 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %23, i32 0, i32 0
	%25 = load %ast_AstNode*, %ast_AstNode** %24
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 9
	%27 = load %symb_SymbNode*, %symb_SymbNode** %26
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 9
	%29 = load %ast_AstNode*, %ast_AstNode** %28
	%30 = icmp ne %ast_AstNode* %29, null
	br label %L.9
L.9:
	%31 = phi i1 [ false, %L.11 ], [ %30, %L.8 ]
	br i1 %31, label %L.6, label %L.7
L.6:
	%32 = load %ast_AstNode*, %ast_AstNode** %tree
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 11
	%34 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %33, i32 0, i32 0
	%35 = load %ast_AstNode*, %ast_AstNode** %34
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 9
	%37 = load %symb_SymbNode*, %symb_SymbNode** %36
	%38 = getelementptr %symb_SymbNode, %symb_SymbNode* %37, i32 0, i32 9
	%39 = load %ast_AstNode*, %ast_AstNode** %38
	%40 = getelementptr %ast_AstNode, %ast_AstNode* %39, i32 0, i32 0
	%41 = load i8, i8* %40
	%42 = icmp eq i8 %41, 8
	br label %L.7
L.7:
	%43 = phi i1 [ false, %L.9 ], [ %42, %L.6 ]
	br i1 %43, label %L.13, label %L.12
L.13:
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 11
	%46 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %45, i32 0, i32 0
	%47 = load %ast_AstNode*, %ast_AstNode** %46
	%48 = getelementptr %ast_AstNode, %ast_AstNode* %47, i32 0, i32 9
	%49 = load %symb_SymbNode*, %symb_SymbNode** %48
	%50 = getelementptr %symb_SymbNode, %symb_SymbNode* %49, i32 0, i32 9
	%51 = load %ast_AstNode*, %ast_AstNode** %50
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 9
	%53 = load %symb_SymbNode*, %symb_SymbNode** %52
	store %symb_SymbNode* %53, %symb_SymbNode** %rv.0
	br label %return
L.12:
	br label %L.3
L.3:
	br label %L.1
L.1:
	store %symb_SymbNode* null, %symb_SymbNode** %rv.0
	br label %return
return:
	%54 = load %symb_SymbNode*, %symb_SymbNode** %rv.0
	ret %symb_SymbNode* %54
}
@stmt_isthenlist = internal constant [3 x i8] [ i8 67, i8 64, i8 0 ], align 1
@stmt_iselselist = internal constant [3 x i8] [ i8 67, i8 66, i8 0 ], align 1
@stmt_thenlist = internal constant [2 x i8] [ i8 64, i8 0 ], align 1
@stmt_elselist = internal constant [3 x i8] [ i8 66, i8 65, i8 0 ], align 1
@stmt_aslist = internal constant [2 x i8] [ i8 70, i8 0 ], align 1
@stmt_withlist = internal constant [2 x i8] [ i8 69, i8 0 ], align 1
@stmt_fromlist = internal constant [3 x i8] [ i8 72, i8 71, i8 0 ], align 1
@stmt_bylist = internal constant [2 x i8] [ i8 74, i8 0 ], align 1
@stmt_skiplist = internal constant [3 x i8] [ i8 41, i8 4, i8 0 ], align 1
@stmt_LoopMax = internal constant i32 32, align 4
@stmt_LoopLevel = internal global i8 0, align 1
@stmt_skipgroup = internal constant [2 x i8] [ i8 41, i8 0 ], align 1
@stmt_skipstmt = internal constant [2 x i8] [ i8 4, i8 0 ], align 1
@stmt_iflist = internal constant [2 x i8] [ i8 59, i8 0 ], align 1
define internal void @stmt_CCSkip() nounwind {
L.0:
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [2 x i8]* @stmt_skipgroup to [0 x i8]*
	%4 = call i8 @lex_Skip([0 x i8]* %3)
	%5 = call i8 @lex_Expect(i8 41)
	br label %L.1
L.3:
	%6 = load i8, i8* %tok
	%7 = icmp eq i8 %6, 46
	br i1 %7, label %L.5, label %L.4
L.5:
	%8 = bitcast [2 x i8]* @stmt_iflist to [0 x i8]*
	%9 = call i8 @lex_Keyword([0 x i8]* %8)
	store i8 %9, i8* %tok
	br label %L.4
L.4:
	%10 = load i8, i8* %tok
	%11 = icmp eq i8 %10, 59
	br i1 %11, label %L.7, label %L.8
L.7:
	%12 = bitcast [3 x i8]* @stmt_isthenlist to [0 x i8]*
	%13 = call i8 @lex_Skip([0 x i8]* %12)
	store i8 %13, i8* %tok
	%14 = load i8, i8* %tok
	%15 = zext i8 %14 to i32
	switch i32 %15, label %L.9 [
		i32 64, label %L.11
		i32 67, label %L.12
	]
L.11:
	%16 = call i8 @lex_Next()
	store i8 %16, i8* %tok
	call void @stmt_CCSkip()
	%17 = bitcast [3 x i8]* @stmt_elselist to [0 x i8]*
	%18 = call i8 @lex_Keyword([0 x i8]* %17)
	store i8 %18, i8* %tok
	br label %L.10
L.12:
	br label %L.13
L.13:
	%19 = call i8 @lex_Next()
	store i8 %19, i8* %tok
	%20 = bitcast [2 x i8]* @stmt_thenlist to [0 x i8]*
	%21 = call i8 @lex_Skip([0 x i8]* %20)
	store i8 %21, i8* %tok
	%22 = load i8, i8* %tok
	%23 = icmp eq i8 %22, 64
	br i1 %23, label %L.16, label %L.15
L.16:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	call void @stmt_CCSkip()
	br label %L.15
L.15:
	%25 = bitcast [3 x i8]* @stmt_iselselist to [0 x i8]*
	%26 = call i8 @lex_Keyword([0 x i8]* %25)
	store i8 %26, i8* %tok
	%27 = load i8, i8* %tok
	%28 = icmp ne i8 %27, 67
	br i1 %28, label %L.14, label %L.17
L.17:
	br label %L.13
L.14:
	br label %L.10
L.9:
	br label %L.10
L.10:
	%29 = load i8, i8* %tok
	%30 = icmp eq i8 %29, 66
	br i1 %30, label %L.19, label %L.20
L.19:
	%31 = call i8 @lex_Next()
	store i8 %31, i8* %tok
	call void @stmt_CCSkip()
	br label %L.18
L.20:
	%32 = load i8, i8* %tok
	%33 = icmp eq i8 %32, 65
	br i1 %33, label %L.22, label %L.21
L.22:
	store i8 59, i8* @lex_Token
	call void @stmt_CCSkip()
	br label %L.21
L.21:
	br label %L.18
L.18:
	br label %L.6
L.8:
	%34 = bitcast [2 x i8]* @stmt_skipstmt to [0 x i8]*
	%35 = call i8 @lex_Skip([0 x i8]* %34)
	%36 = call i8 @lex_Expect(i8 4)
	br label %L.6
L.6:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal %ast_AstNode* @stmt_CCDo(i8 zeroext %nest$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%nest = alloca i8
	store i8 %nest$, i8* %nest
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	%1 = icmp eq i8 %0, 40
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = call i8 @lex_Next()
	store i8 %2, i8* %tok
	%3 = call %ast_AstNode* @ast_New(i8 96, %type_TypeNode* null)
	store %ast_AstNode* %3, %ast_AstNode** %tree
	br label %L.4
L.4:
	%4 = load i8, i8* %tok
	%5 = icmp ne i8 %4, 41
	br i1 %5, label %L.7, label %L.8
L.7:
	%6 = load i8, i8* %tok
	%7 = icmp ne i8 %6, 1
	br label %L.8
L.8:
	%8 = phi i1 [ false, %L.4 ], [ %7, %L.7 ]
	%9 = xor i1 %8, true
	br i1 %9, label %L.5, label %L.6
L.6:
	%10 = load i8, i8* %nest
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.9 [
		i32 0, label %L.11
		i32 1, label %L.12
		i32 2, label %L.13
	]
L.11:
	%12 = call %ast_AstNode* @stmt_ProgStmt()
	store %ast_AstNode* %12, %ast_AstNode** %stree
	br label %L.10
L.12:
	%13 = call %ast_AstNode* @stmt_PkgStmt()
	store %ast_AstNode* %13, %ast_AstNode** %stree
	br label %L.10
L.13:
	%14 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %14, %ast_AstNode** %stree
	br label %L.10
L.9:
	br label %L.10
L.10:
	%15 = load %ast_AstNode*, %ast_AstNode** %stree
	%16 = icmp ne %ast_AstNode* %15, null
	br i1 %16, label %L.15, label %L.14
L.15:
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = load %ast_AstNode*, %ast_AstNode** %stree
	%19 = call %ast_AstNode* @ast_Child(%ast_AstNode* %17, %ast_AstNode* %18)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.14
L.14:
	%20 = load i8, i8* @lex_Token
	store i8 %20, i8* %tok
	br label %L.4
L.5:
	%21 = call i8 @lex_Expect(i8 41)
	br label %L.1
L.3:
	%22 = load i8, i8* %nest
	%23 = zext i8 %22 to i32
	switch i32 %23, label %L.16 [
		i32 0, label %L.18
		i32 1, label %L.19
		i32 2, label %L.20
	]
L.18:
	%24 = call %ast_AstNode* @stmt_ProgStmt()
	store %ast_AstNode* %24, %ast_AstNode** %tree
	br label %L.17
L.19:
	%25 = call %ast_AstNode* @stmt_PkgStmt()
	store %ast_AstNode* %25, %ast_AstNode** %tree
	br label %L.17
L.20:
	%26 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %26, %ast_AstNode** %tree
	br label %L.17
L.16:
	br label %L.17
L.17:
	br label %L.1
L.1:
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %27, %ast_AstNode** %rv.0
	br label %return
return:
	%28 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %28
}
define internal %ast_AstNode* @stmt_CCIfTail(%ast_AstNode* %ctree$, i8 zeroext %nest$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	store %ast_AstNode* %ctree$, %ast_AstNode** %ctree
	%nest = alloca i8
	store i8 %nest$, i8* %nest
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%val = alloca i64
	%vlo = alloca i64
	%vhi = alloca i64
	%doneit = alloca i8
	%doit = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %ast_AstNode*, %ast_AstNode** %ctree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %ast_AstNode*, %ast_AstNode** %ctree
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 10
	%5 = load i64, i64* %4
	store i64 %5, i64* %val
	%6 = bitcast [3 x i8]* @stmt_isthenlist to [0 x i8]*
	%7 = call i8 @lex_Keyword([0 x i8]* %6)
	store i8 %7, i8* %tok
	%8 = load i8, i8* %tok
	%9 = zext i8 %8 to i32
	switch i32 %9, label %L.1 [
		i32 64, label %L.3
		i32 67, label %L.4
	]
L.3:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%13 = call i8 @type_Compat(%type_TypeNode* %11, %type_TypeNode* %12)
	%14 = icmp ne i8 %13, 0
	%15 = xor i1 %14, true
	br i1 %15, label %L.6, label %L.5
L.6:
	call void @lex_Error(i8 50)
	%16 = load %ast_AstNode*, %ast_AstNode** %ctree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 10
	store i64 0, i64* %17
	br label %L.5
L.5:
	%18 = load i64, i64* %val
	%19 = trunc i64 %18 to i8
	store i8 %19, i8* %doneit
	%20 = load i8, i8* %doneit
	%21 = icmp ne i8 %20, 0
	br i1 %21, label %L.8, label %L.9
L.8:
	%22 = load i8, i8* %nest
	%23 = call %ast_AstNode* @stmt_CCDo(i8 %22)
	store %ast_AstNode* %23, %ast_AstNode** %tree
	br label %L.7
L.9:
	call void @stmt_CCSkip()
	br label %L.7
L.7:
	br label %L.2
L.4:
	store i8 0, i8* %doneit
	br label %L.10
L.10:
	store i8 0, i8* %doit
	br label %L.12
L.12:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = call i64 @expr_ConstValue(%type_TypeNode* %25)
	store i64 %26, i64* %vlo
	%27 = load i64, i64* %vlo
	store i64 %27, i64* %vhi
	%28 = load i8, i8* @lex_Token
	store i8 %28, i8* %tok
	%29 = load i8, i8* %tok
	%30 = icmp eq i8 %29, 6
	br i1 %30, label %L.15, label %L.14
L.15:
	%31 = call i8 @lex_Next()
	store i8 %31, i8* %tok
	%32 = load %type_TypeNode*, %type_TypeNode** %t
	%33 = call i64 @expr_ConstValue(%type_TypeNode* %32)
	store i64 %33, i64* %vhi
	br label %L.14
L.14:
	%34 = load i64, i64* %vlo
	%35 = load i64, i64* %vhi
	%36 = icmp ugt i64 %34, %35
	br i1 %36, label %L.17, label %L.16
L.17:
	br label %L.16
L.16:
	%37 = load i8, i8* %doit
	%38 = icmp ne i8 %37, 0
	br i1 %38, label %L.19, label %L.18
L.18:
	%39 = load i64, i64* %vlo
	%40 = load i64, i64* %val
	%41 = icmp ule i64 %39, %40
	br i1 %41, label %L.20, label %L.21
L.20:
	%42 = load i64, i64* %val
	%43 = load i64, i64* %vhi
	%44 = icmp ule i64 %42, %43
	br label %L.21
L.21:
	%45 = phi i1 [ false, %L.18 ], [ %44, %L.20 ]
	br label %L.19
L.19:
	%46 = phi i1 [ true, %L.16 ], [ %45, %L.21 ]
	%47 = zext i1 %46 to i8
	store i8 %47, i8* %doit
	%48 = load i8, i8* @lex_Token
	store i8 %48, i8* %tok
	%49 = load i8, i8* %tok
	%50 = icmp ne i8 %49, 5
	br i1 %50, label %L.13, label %L.22
L.22:
	br label %L.12
L.13:
	%51 = bitcast [2 x i8]* @stmt_thenlist to [0 x i8]*
	%52 = call i8 @lex_Keyword([0 x i8]* %51)
	store i8 %52, i8* %tok
	%53 = load i8, i8* %tok
	%54 = icmp eq i8 %53, 64
	br i1 %54, label %L.24, label %L.25
L.24:
	%55 = call i8 @lex_Next()
	store i8 %55, i8* %tok
	br label %L.23
L.25:
	call void @lex_ErrorT(i8 20, i8 64)
	br label %L.23
L.23:
	%56 = load i8, i8* %doit
	%57 = icmp ne i8 %56, 0
	br i1 %57, label %L.26, label %L.27
L.26:
	%58 = load i8, i8* %doneit
	%59 = icmp ne i8 %58, 0
	br label %L.27
L.27:
	%60 = phi i1 [ false, %L.23 ], [ %59, %L.26 ]
	br i1 %60, label %L.29, label %L.28
L.29:
	store i8 0, i8* %doit
	br label %L.28
L.28:
	%61 = load i8, i8* %doit
	%62 = icmp ne i8 %61, 0
	br i1 %62, label %L.31, label %L.32
L.31:
	%63 = load i8, i8* %nest
	%64 = call %ast_AstNode* @stmt_CCDo(i8 %63)
	store %ast_AstNode* %64, %ast_AstNode** %tree
	store i8 1, i8* %doneit
	br label %L.30
L.32:
	call void @stmt_CCSkip()
	br label %L.30
L.30:
	%65 = bitcast [3 x i8]* @stmt_isthenlist to [0 x i8]*
	%66 = call i8 @lex_Keyword([0 x i8]* %65)
	store i8 %66, i8* %tok
	%67 = load i8, i8* %tok
	%68 = icmp ne i8 %67, 67
	br i1 %68, label %L.11, label %L.33
L.33:
	br label %L.10
L.11:
	br label %L.2
L.1:
	call void @lex_Error(i8 57)
	br label %L.2
L.2:
	%69 = bitcast [3 x i8]* @stmt_elselist to [0 x i8]*
	%70 = call i8 @lex_Keyword([0 x i8]* %69)
	store i8 %70, i8* %tok
	%71 = load i8, i8* %tok
	%72 = icmp eq i8 %71, 66
	br i1 %72, label %L.35, label %L.36
L.35:
	%73 = call i8 @lex_Next()
	store i8 %73, i8* %tok
	%74 = load i8, i8* %doneit
	%75 = icmp ne i8 %74, 0
	%76 = xor i1 %75, true
	br i1 %76, label %L.38, label %L.39
L.38:
	%77 = load i8, i8* %nest
	%78 = call %ast_AstNode* @stmt_CCDo(i8 %77)
	store %ast_AstNode* %78, %ast_AstNode** %tree
	br label %L.37
L.39:
	call void @stmt_CCSkip()
	br label %L.37
L.37:
	br label %L.34
L.36:
	%79 = load i8, i8* %tok
	%80 = icmp eq i8 %79, 65
	br i1 %80, label %L.41, label %L.40
L.41:
	store i8 59, i8* @lex_Token
	%81 = load i8, i8* %doneit
	%82 = icmp ne i8 %81, 0
	%83 = xor i1 %82, true
	br i1 %83, label %L.43, label %L.44
L.43:
	%84 = load i8, i8* %nest
	%85 = call %ast_AstNode* @stmt_CCDo(i8 %84)
	store %ast_AstNode* %85, %ast_AstNode** %tree
	br label %L.42
L.44:
	call void @stmt_CCSkip()
	br label %L.42
L.42:
	br label %L.40
L.40:
	br label %L.34
L.34:
	%86 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %86, %ast_AstNode** %rv.0
	br label %return
return:
	%87 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %87
}
define internal %ast_AstNode* @stmt_CCIfStmt(i8 zeroext %nest$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%nest = alloca i8
	store i8 %nest$, i8* %nest
	%ctree = alloca %ast_AstNode*
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %ctree
	%1 = load %ast_AstNode*, %ast_AstNode** %ctree
	%2 = icmp eq %ast_AstNode* %1, null
	br i1 %2, label %L.2, label %L.1
L.1:
	%3 = load %ast_AstNode*, %ast_AstNode** %ctree
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 0
	%5 = load i8, i8* %4
	%6 = icmp ne i8 %5, 6
	br label %L.2
L.2:
	%7 = phi i1 [ true, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	call void @lex_Error(i8 75)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.3:
	%8 = load %ast_AstNode*, %ast_AstNode** %ctree
	%9 = load i8, i8* %nest
	%10 = call %ast_AstNode* @stmt_CCIfTail(%ast_AstNode* %8, i8 %9)
	store %ast_AstNode* %10, %ast_AstNode** %rv.0
	br label %return
return:
	%11 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %11
}
define internal %ast_AstNode* @stmt_TypeDecl() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	%s = alloca %symb_SymbNode*
	%bs = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_New(i8 2, [0 x i8]* %3, i8 1)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	store %type_TypeNode* null, %type_TypeNode** %bt
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load i8, i8* %tok
	%7 = icmp eq i8 %6, 36
	br i1 %7, label %L.5, label %L.4
L.5:
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = load i8, i8* %tok
	%10 = icmp eq i8 %9, 46
	br i1 %10, label %L.7, label %L.6
L.7:
	%11 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%12 = call %symb_SymbNode* @symb_Find([0 x i8]* %11)
	store %symb_SymbNode* %12, %symb_SymbNode** %bs
	%13 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%14 = icmp ne %symb_SymbNode* %13, null
	br i1 %14, label %L.9, label %L.10
L.9:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 13
	%17 = load i8, i8* %16
	%18 = icmp eq i8 %17, 2
	br i1 %18, label %L.12, label %L.13
L.12:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	store %type_TypeNode* %21, %type_TypeNode** %bt
	br label %L.11
L.13:
	call void @lex_Error(i8 29)
	br label %L.11
L.11:
	br label %L.8
L.10:
	%22 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %22)
	br label %L.8
L.8:
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	br label %L.6
L.6:
	%24 = call i8 @lex_Expect(i8 37)
	store i8 %24, i8* %tok
	br label %L.4
L.4:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 15
	%27 = load i8, i8* %26
	%28 = icmp ne i8 %27, 0
	%29 = xor i1 %28, true
	br i1 %29, label %L.15, label %L.14
L.15:
	%30 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_MakeVisible(%symb_SymbNode* %30)
	br label %L.14
L.14:
	%31 = load i8, i8* %tok
	%32 = icmp eq i8 %31, 3
	br i1 %32, label %L.17, label %L.16
L.17:
	%33 = call i8 @lex_Next()
	store i8 %33, i8* %tok
	%34 = load i8, i8* %tok
	%35 = load %type_TypeNode*, %type_TypeNode** %bt
	%36 = call %type_TypeNode* @type_Def(i8 %34, %type_TypeNode* %35)
	store %type_TypeNode* %36, %type_TypeNode** %t
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = icmp ne %type_TypeNode* %37, null
	br i1 %38, label %L.19, label %L.18
L.19:
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 3
	%41 = load %symb_SymbNode*, %symb_SymbNode** %40
	%42 = icmp ne %symb_SymbNode* %41, null
	br i1 %42, label %L.21, label %L.20
L.21:
	%at = alloca %type_TypeNode*
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %43, %type_TypeNode** %at
	%44 = load %type_TypeNode*, %type_TypeNode** %at
	%45 = call %type_TypeNode* @type_Clone(%type_TypeNode* %44)
	store %type_TypeNode* %45, %type_TypeNode** %t
	%46 = load %type_TypeNode*, %type_TypeNode** %at
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = getelementptr %type_TypeNode, %type_TypeNode* %47, i32 0, i32 1
	store %type_TypeNode* %46, %type_TypeNode** %48
	br label %L.20
L.20:
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = getelementptr %type_TypeNode, %type_TypeNode* %50, i32 0, i32 3
	store %symb_SymbNode* %49, %symb_SymbNode** %51
	br label %L.18
L.18:
	%52 = load i8, i8* @lex_Token
	store i8 %52, i8* %tok
	%53 = load i8, i8* %tok
	%54 = icmp eq i8 %53, 3
	br i1 %54, label %L.23, label %L.22
L.23:
	%55 = load %type_TypeNode*, %type_TypeNode** %t
	%56 = call %type_TypeNode* @type_TypeAttributes(%type_TypeNode* %55)
	store %type_TypeNode* %56, %type_TypeNode** %t
	br label %L.22
L.22:
	%57 = load %type_TypeNode*, %type_TypeNode** %t
	%58 = load %symb_SymbNode*, %symb_SymbNode** %s
	%59 = getelementptr %symb_SymbNode, %symb_SymbNode* %58, i32 0, i32 1
	store %type_TypeNode* %57, %type_TypeNode** %59
	%60 = load %symb_SymbNode*, %symb_SymbNode** %s
	%61 = getelementptr %symb_SymbNode, %symb_SymbNode* %60, i32 0, i32 15
	%62 = load i8, i8* %61
	%63 = icmp ne i8 %62, 0
	br i1 %63, label %L.25, label %L.24
L.25:
	%64 = load %symb_SymbNode*, %symb_SymbNode** %s
	%65 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_FwdFix(%symb_SymbNode* %64, %type_TypeNode* %65)
	br label %L.24
L.24:
	%66 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %66)
	br label %L.16
L.16:
	%67 = call i8 @lex_Expect(i8 4)
	store i8 %67, i8* %tok
	br label %L.1
L.3:
	call void @lex_Error(i8 21)
	br label %L.1
L.1:
	%68 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %68, %ast_AstNode** %rv.0
	br label %return
return:
	%69 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %69
}
define internal %ast_AstNode* @stmt_VarNew(%symb_SymbNode* %s$, %type_TypeNode* %t$, %ast_AstNode* %iv$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%iv = alloca %ast_AstNode*
	store %ast_AstNode* %iv$, %ast_AstNode** %iv
	%node = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = load %symb_SymbNode*, %symb_SymbNode** %s
	%2 = getelementptr %symb_SymbNode, %symb_SymbNode* %1, i32 0, i32 1
	store %type_TypeNode* %0, %type_TypeNode** %2
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = call %ast_AstNode* @ast_New(i8 4, %type_TypeNode* %3)
	store %ast_AstNode* %4, %ast_AstNode** %node
	%5 = load %ast_AstNode*, %ast_AstNode** %iv
	%6 = icmp ne %ast_AstNode* %5, null
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load %ast_AstNode*, %ast_AstNode** %node
	%8 = load %ast_AstNode*, %ast_AstNode** %iv
	%9 = call %ast_AstNode* @ast_Child(%ast_AstNode* %7, %ast_AstNode* %8)
	store %ast_AstNode* %9, %ast_AstNode** %node
	br label %L.1
L.1:
	%10 = load %type_TypeNode*, %type_TypeNode** %t
	%11 = getelementptr %type_TypeNode, %type_TypeNode* %10, i32 0, i32 11
	%12 = load i32, i32* %11
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 7
	store i32 %12, i32* %14
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 9
	store %symb_SymbNode* %15, %symb_SymbNode** %17
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	store %ast_AstNode* %18, %ast_AstNode** %rv.0
	br label %return
return:
	%19 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %19
}
define internal %ast_AstNode* @stmt_VarDecl() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%iv = alloca %ast_AstNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%ss = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %3, i8 0)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %5, %symb_SymbNode** %ss
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	br label %L.3
L.3:
	%7 = load i8, i8* %tok
	%8 = icmp eq i8 %7, 5
	%9 = xor i1 %8, true
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = load i8, i8* %tok
	%12 = icmp eq i8 %11, 46
	br i1 %12, label %L.7, label %L.8
L.7:
	%13 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%14 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %13, i8 0)
	store %symb_SymbNode* %14, %symb_SymbNode** %s
	%15 = call i8 @lex_Next()
	store i8 %15, i8* %tok
	br label %L.6
L.8:
	call void @lex_Error(i8 21)
	br label %L.6
L.6:
	br label %L.3
L.4:
	%16 = load i8, i8* %tok
	%17 = icmp eq i8 %16, 3
	br i1 %17, label %L.10, label %L.11
L.10:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = load i8, i8* %tok
	%20 = call %type_TypeNode* @type_Def(i8 %19, %type_TypeNode* null)
	store %type_TypeNode* %20, %type_TypeNode** %t
	%21 = load i8, i8* @lex_Token
	store i8 %21, i8* %tok
	%22 = load i8, i8* %tok
	%23 = icmp eq i8 %22, 3
	br i1 %23, label %L.13, label %L.12
L.13:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = call %type_TypeNode* @type_VarAttributes(%symb_SymbNode* %24, %type_TypeNode* %25)
	store %type_TypeNode* %26, %type_TypeNode** %t
	br label %L.12
L.12:
	%27 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %27)
	%28 = load i8, i8* @lex_Token
	store i8 %28, i8* %tok
	%29 = load i8, i8* %tok
	%30 = icmp eq i8 %29, 36
	br i1 %30, label %L.15, label %L.14
L.15:
	%val = alloca i64
	%31 = call i8 @lex_Next()
	store i8 %31, i8* %tok
	%32 = load %type_TypeNode*, %type_TypeNode** %t
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 28
	%34 = load i8, i8* %33
	%35 = icmp ne i8 %34, 0
	%36 = xor i1 %35, true
	br i1 %36, label %L.17, label %L.16
L.17:
	call void @lex_Error(i8 84)
	br label %L.16
L.16:
	%37 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%38 = call i64 @expr_ConstValue(%type_TypeNode* %37)
	store i64 %38, i64* %val
	%39 = load %type_TypeNode*, %type_TypeNode** %t
	%40 = getelementptr %type_TypeNode, %type_TypeNode* %39, i32 0, i32 16
	%41 = load i8, i8* %40
	%42 = zext i8 %41 to i32
	switch i32 %42, label %L.18 [
		i32 6, label %L.20
		i32 7, label %L.21
	]
L.20:
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	%44 = load i64, i64* %val
	%45 = trunc i64 %44 to i32
	%46 = call %type_TypeNode* @expr_ArrayFixFlex(%type_TypeNode* %43, i32 %45)
	store %type_TypeNode* %46, %type_TypeNode** %t
	br label %L.19
L.21:
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = load i64, i64* %val
	%49 = trunc i64 %48 to i32
	%50 = call %type_TypeNode* @expr_RecordFixFlex(%type_TypeNode* %47, i32 %49)
	store %type_TypeNode* %50, %type_TypeNode** %t
	br label %L.19
L.18:
	br label %L.19
L.19:
	%51 = call i8 @lex_Expect(i8 37)
	store i8 %51, i8* %tok
	br label %L.14
L.14:
	store %ast_AstNode* null, %ast_AstNode** %iv
	%52 = load i8, i8* %tok
	%53 = icmp eq i8 %52, 9
	br i1 %53, label %L.23, label %L.22
L.23:
	%54 = call i8 @lex_Next()
	store i8 %54, i8* %tok
	%55 = load %type_TypeNode*, %type_TypeNode** %t
	%56 = call %ast_AstNode* @expr_Const(%type_TypeNode* %55)
	store %ast_AstNode* %56, %ast_AstNode** %iv
	%57 = load %type_TypeNode*, %type_TypeNode** %t
	%58 = getelementptr %type_TypeNode, %type_TypeNode* %57, i32 0, i32 28
	%59 = load i8, i8* %58
	%60 = icmp ne i8 %59, 0
	br i1 %60, label %L.25, label %L.24
L.25:
	%61 = load %ast_AstNode*, %ast_AstNode** %iv
	%62 = getelementptr %ast_AstNode, %ast_AstNode* %61, i32 0, i32 8
	%63 = load %type_TypeNode*, %type_TypeNode** %62
	store %type_TypeNode* %63, %type_TypeNode** %t
	br label %L.24
L.24:
	%64 = load %symb_SymbNode*, %symb_SymbNode** %s
	%65 = getelementptr %symb_SymbNode, %symb_SymbNode* %64, i32 0, i32 18
	store i8 1, i8* %65
	br label %L.22
L.22:
	%66 = load %type_TypeNode*, %type_TypeNode** %t
	%67 = getelementptr %type_TypeNode, %type_TypeNode* %66, i32 0, i32 28
	%68 = load i8, i8* %67
	%69 = icmp ne i8 %68, 0
	br i1 %69, label %L.26, label %L.27
L.26:
	%70 = load %symb_SymbNode*, %symb_SymbNode** %s
	%71 = getelementptr %symb_SymbNode, %symb_SymbNode* %70, i32 0, i32 14
	%72 = load i8, i8* %71
	%73 = icmp ult i8 %72, 4
	br label %L.27
L.27:
	%74 = phi i1 [ false, %L.22 ], [ %73, %L.26 ]
	br i1 %74, label %L.29, label %L.28
L.29:
	call void @lex_Error(i8 9)
	br label %L.28
L.28:
	br label %L.9
L.11:
	%75 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %75, %type_TypeNode** %t
	call void @lex_ErrorT(i8 20, i8 3)
	br label %L.9
L.9:
	%76 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%77 = getelementptr %symb_SymbNode, %symb_SymbNode* %76, i32 0, i32 0
	%78 = load %symb_SymbNode*, %symb_SymbNode** %77
	%79 = icmp eq %symb_SymbNode* %78, null
	br i1 %79, label %L.31, label %L.32
L.31:
	%80 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%81 = load %type_TypeNode*, %type_TypeNode** %t
	%82 = load %ast_AstNode*, %ast_AstNode** %iv
	%83 = call %ast_AstNode* @stmt_VarNew(%symb_SymbNode* %80, %type_TypeNode* %81, %ast_AstNode* %82)
	store %ast_AstNode* %83, %ast_AstNode** %tree
	br label %L.30
L.32:
	%84 = call %ast_AstNode* @ast_New(i8 96, %type_TypeNode* null)
	store %ast_AstNode* %84, %ast_AstNode** %tree
	br label %L.33
L.33:
	%85 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%86 = load %type_TypeNode*, %type_TypeNode** %t
	%87 = load %ast_AstNode*, %ast_AstNode** %iv
	%88 = call %ast_AstNode* @stmt_VarNew(%symb_SymbNode* %85, %type_TypeNode* %86, %ast_AstNode* %87)
	store %ast_AstNode* %88, %ast_AstNode** %stree
	%89 = load %ast_AstNode*, %ast_AstNode** %tree
	%90 = load %ast_AstNode*, %ast_AstNode** %stree
	%91 = call %ast_AstNode* @ast_Child(%ast_AstNode* %89, %ast_AstNode* %90)
	store %ast_AstNode* %91, %ast_AstNode** %tree
	%92 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%93 = load %symb_SymbNode*, %symb_SymbNode** %s
	%94 = icmp eq %symb_SymbNode* %92, %93
	br i1 %94, label %L.37, label %L.36
L.36:
	%95 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%96 = getelementptr %symb_SymbNode, %symb_SymbNode* %95, i32 0, i32 0
	%97 = load %symb_SymbNode*, %symb_SymbNode** %96
	%98 = icmp eq %symb_SymbNode* %97, null
	br label %L.37
L.37:
	%99 = phi i1 [ true, %L.33 ], [ %98, %L.36 ]
	br i1 %99, label %L.34, label %L.35
L.35:
	%100 = load %symb_SymbNode*, %symb_SymbNode** %ss
	%101 = getelementptr %symb_SymbNode, %symb_SymbNode* %100, i32 0, i32 0
	%102 = load %symb_SymbNode*, %symb_SymbNode** %101
	store %symb_SymbNode* %102, %symb_SymbNode** %ss
	br label %L.33
L.34:
	br label %L.30
L.30:
	%103 = call i8 @lex_Expect(i8 4)
	store i8 %103, i8* %tok
	br label %L.1
L.1:
	%104 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %104, %ast_AstNode** %rv.0
	br label %return
return:
	%105 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %105
}
@S.670 = private unnamed_addr constant [16 x i8] c"Const SCON dup\0A\00"
define internal %ast_AstNode* @stmt_ConstDecl() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	%t = alloca %type_TypeNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_New(i8 1, [0 x i8]* %3, i8 0)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %ast_AstNode*, %ast_AstNode** @ast_Null
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 9
	store %ast_AstNode* %5, %ast_AstNode** %7
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	store %type_TypeNode* null, %type_TypeNode** %t
	%9 = load i8, i8* %tok
	%10 = icmp eq i8 %9, 3
	br i1 %10, label %L.5, label %L.4
L.5:
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = load i8, i8* %tok
	%13 = call %type_TypeNode* @type_Def(i8 %12, %type_TypeNode* null)
	store %type_TypeNode* %13, %type_TypeNode** %t
	%14 = load i8, i8* @lex_Token
	store i8 %14, i8* %tok
	%15 = load i8, i8* %tok
	%16 = icmp eq i8 %15, 3
	br i1 %16, label %L.7, label %L.6
L.7:
	%17 = load %type_TypeNode*, %type_TypeNode** %t
	%18 = call %type_TypeNode* @type_TypeAttributes(%type_TypeNode* %17)
	store %type_TypeNode* %18, %type_TypeNode** %t
	%19 = load i8, i8* @lex_Token
	store i8 %19, i8* %tok
	br label %L.6
L.6:
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %20)
	br label %L.4
L.4:
	%21 = load i8, i8* %tok
	%22 = icmp eq i8 %21, 9
	br i1 %22, label %L.9, label %L.10
L.9:
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = call %ast_AstNode* @expr_Const(%type_TypeNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = icmp ne %ast_AstNode* %26, null
	br i1 %27, label %L.12, label %L.11
L.12:
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = icmp eq %type_TypeNode* %28, null
	br i1 %29, label %L.14, label %L.15
L.14:
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 8
	%32 = load %type_TypeNode*, %type_TypeNode** %31
	store %type_TypeNode* %32, %type_TypeNode** %t
	br label %L.13
L.15:
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 28
	%35 = load i8, i8* %34
	%36 = icmp ne i8 %35, 0
	br i1 %36, label %L.17, label %L.18
L.17:
	%37 = load %ast_AstNode*, %ast_AstNode** %tree
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 8
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	store %type_TypeNode* %39, %type_TypeNode** %t
	br label %L.16
L.18:
	%40 = load %ast_AstNode*, %ast_AstNode** %tree
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 0
	%42 = load i8, i8* %41
	%43 = icmp eq i8 %42, 8
	br i1 %43, label %L.19, label %L.20
L.19:
	%44 = load %type_TypeNode*, %type_TypeNode** %t
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 9
	%46 = load i64, i64* %45
	%47 = load %ast_AstNode*, %ast_AstNode** %tree
	%48 = getelementptr %ast_AstNode, %ast_AstNode* %47, i32 0, i32 8
	%49 = load %type_TypeNode*, %type_TypeNode** %48
	%50 = getelementptr %type_TypeNode, %type_TypeNode* %49, i32 0, i32 9
	%51 = load i64, i64* %50
	%52 = sub i64 %51, 1
	%53 = icmp eq i64 %46, %52
	br label %L.20
L.20:
	%54 = phi i1 [ false, %L.18 ], [ %53, %L.19 ]
	br i1 %54, label %L.22, label %L.23
L.22:
	%55 = getelementptr [16 x i8], [16 x i8]* @S.670
	%56 = bitcast [16 x i8]* %55 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %56)
	%57 = load %ast_AstNode*, %ast_AstNode** %tree
	%58 = call %ast_AstNode* @ast_Dup(%ast_AstNode* %57)
	store %ast_AstNode* %58, %ast_AstNode** %tree
	%59 = load %type_TypeNode*, %type_TypeNode** %t
	%60 = load %ast_AstNode*, %ast_AstNode** %tree
	%61 = getelementptr %ast_AstNode, %ast_AstNode* %60, i32 0, i32 8
	store %type_TypeNode* %59, %type_TypeNode** %61
	br label %L.21
L.23:
	%62 = load %type_TypeNode*, %type_TypeNode** %t
	%63 = load %ast_AstNode*, %ast_AstNode** %tree
	%64 = getelementptr %ast_AstNode, %ast_AstNode* %63, i32 0, i32 8
	%65 = load %type_TypeNode*, %type_TypeNode** %64
	%66 = icmp ne %type_TypeNode* %62, %65
	br i1 %66, label %L.25, label %L.24
L.25:
	%67 = load %ast_AstNode*, %ast_AstNode** %tree
	%68 = call %ast_AstNode* @ast_Dup(%ast_AstNode* %67)
	store %ast_AstNode* %68, %ast_AstNode** %tree
	%69 = load %type_TypeNode*, %type_TypeNode** %t
	%70 = load %ast_AstNode*, %ast_AstNode** %tree
	%71 = getelementptr %ast_AstNode, %ast_AstNode* %70, i32 0, i32 8
	store %type_TypeNode* %69, %type_TypeNode** %71
	br label %L.24
L.24:
	br label %L.21
L.21:
	br label %L.16
L.16:
	br label %L.13
L.13:
	%72 = load %ast_AstNode*, %ast_AstNode** %tree
	%73 = load %symb_SymbNode*, %symb_SymbNode** %s
	%74 = getelementptr %symb_SymbNode, %symb_SymbNode* %73, i32 0, i32 9
	store %ast_AstNode* %72, %ast_AstNode** %74
	%75 = load %type_TypeNode*, %type_TypeNode** %t
	%76 = load %ast_AstNode*, %ast_AstNode** %tree
	%77 = call %ast_AstNode* @ast_New1(i8 5, %type_TypeNode* %75, %ast_AstNode* %76)
	store %ast_AstNode* %77, %ast_AstNode** %tree
	%78 = load %symb_SymbNode*, %symb_SymbNode** %s
	%79 = load %ast_AstNode*, %ast_AstNode** %tree
	%80 = getelementptr %ast_AstNode, %ast_AstNode* %79, i32 0, i32 9
	store %symb_SymbNode* %78, %symb_SymbNode** %80
	br label %L.11
L.11:
	%81 = load %symb_SymbNode*, %symb_SymbNode** %s
	%82 = getelementptr %symb_SymbNode, %symb_SymbNode* %81, i32 0, i32 18
	store i8 1, i8* %82
	br label %L.8
L.10:
	call void @lex_Error(i8 74)
	br label %L.8
L.8:
	%83 = load %type_TypeNode*, %type_TypeNode** %t
	%84 = load %symb_SymbNode*, %symb_SymbNode** %s
	%85 = getelementptr %symb_SymbNode, %symb_SymbNode* %84, i32 0, i32 1
	store %type_TypeNode* %83, %type_TypeNode** %85
	br label %L.1
L.3:
	call void @lex_Error(i8 21)
	br label %L.1
L.1:
	%86 = call i8 @lex_Expect(i8 4)
	store i8 %86, i8* %tok
	%87 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %87, %ast_AstNode** %rv.0
	br label %return
return:
	%88 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %88
}
define internal zeroext i16 @stmt_EndConstraint([0 x i8]* %what$, i16 zeroext %i$) nounwind {
L.0:
	%rv.0 = alloca i16
	%what = alloca [0 x i8]*
	store [0 x i8]* %what$, [0 x i8]** %what
	%i = alloca i16
	store i16 %i$, i16* %i
	br label %L.1
L.1:
	%0 = load i16, i16* %i
	%1 = add i16 %0, 1
	store i16 %1, i16* %i
	%2 = load [0 x i8]*, [0 x i8]** %what
	%3 = load i16, i16* %i
	%4 = zext i16 %3 to i32
	%5 = getelementptr [0 x i8], [0 x i8]* %2, i32 0, i32 %4
	%6 = load i8, i8* %5
	%7 = icmp eq i8 %6, 125
	br i1 %7, label %L.2, label %L.3
L.3:
	br label %L.1
L.2:
	%8 = load i16, i16* %i
	store i16 %8, i16* %rv.0
	br label %return
return:
	%9 = load i16, i16* %rv.0
	ret i16 %9
}
@stmt_Asm_MaxArg = internal constant i32 9, align 4
@S.671 = private unnamed_addr constant [18 x i8] c"'~' in constraint\00"
define internal %ast_AstNode* @stmt_Asm() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%node = alloca %ast_AstNode*
	%temp = alloca %ast_AstNode*
	%narg = alloca i16
	%nout = alloca i16
	%tok = alloca i8
	%what = alloca [0 x i8]*
	%i = alloca i16
	%na = alloca i8
	%no = alloca i8
	%constraints = alloca [10 x i8]
	%outputs = alloca [10 x %ast_AstNode*]
	%rs = alloca %symb_SymbNode*
	%prevs = alloca %symb_SymbNode*
	%0 = call %ast_AstNode* @ast_New(i8 20, %type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %tree
	%1 = load i8, i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8, i8* %tok
	%3 = icmp eq i8 %2, 45
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = call %ast_AstNode* @expr_String()
	%6 = call %ast_AstNode* @ast_Child(%ast_AstNode* %4, %ast_AstNode* %5)
	store %ast_AstNode* %6, %ast_AstNode** %tree
	%7 = load i8, i8* @lex_Token
	store i8 %7, i8* %tok
	%8 = load i8, i8* %tok
	%9 = icmp eq i8 %8, 5
	br i1 %9, label %L.5, label %L.4
L.5:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	store i16 0, i16* %narg
	store i16 0, i16* %nout
	%11 = load i8, i8* %tok
	%12 = icmp eq i8 %11, 45
	br i1 %12, label %L.7, label %L.8
L.7:
	%13 = call %ast_AstNode* @expr_String()
	store %ast_AstNode* %13, %ast_AstNode** %node
	%14 = load %ast_AstNode*, %ast_AstNode** %node
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 9
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 23
	%18 = getelementptr [0 x i8], [0 x i8]* %17
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	store [0 x i8]* %19, [0 x i8]** %what
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = load %ast_AstNode*, %ast_AstNode** %node
	%22 = call %ast_AstNode* @ast_Child(%ast_AstNode* %20, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %tree
	%23 = load i8, i8* @lex_Token
	store i8 %23, i8* %tok
	store i16 0, i16* %i
	br label %L.9
L.9:
	%24 = load [0 x i8]*, [0 x i8]** %what
	%25 = load i16, i16* %i
	%26 = zext i16 %25 to i32
	%27 = getelementptr [0 x i8], [0 x i8]* %24, i32 0, i32 %26
	%28 = load i8, i8* %27
	%29 = icmp ne i8 %28, 0
	br i1 %29, label %L.12, label %L.13
L.12:
	%30 = load i16, i16* %narg
	%31 = zext i16 %30 to i32
	%32 = icmp ult i32 %31, 8
	br label %L.13
L.13:
	%33 = phi i1 [ false, %L.9 ], [ %32, %L.12 ]
	%34 = xor i1 %33, true
	br i1 %34, label %L.10, label %L.11
L.11:
	%35 = load [0 x i8]*, [0 x i8]** %what
	%36 = load i16, i16* %i
	%37 = zext i16 %36 to i32
	%38 = getelementptr [0 x i8], [0 x i8]* %35, i32 0, i32 %37
	%39 = load i8, i8* %38
	%40 = zext i8 %39 to i32
	switch i32 %40, label %L.14 [
		i32 61, label %L.16
		i32 48, label %L.17
		i32 49, label %L.17
		i32 50, label %L.17
		i32 51, label %L.17
		i32 52, label %L.17
		i32 53, label %L.17
		i32 54, label %L.17
		i32 55, label %L.17
		i32 56, label %L.17
		i32 57, label %L.17
		i32 126, label %L.18
	]
L.16:
	%41 = load i16, i16* %i
	%42 = add i16 %41, 1
	store i16 %42, i16* %i
	%43 = load [0 x i8]*, [0 x i8]** %what
	%44 = load i16, i16* %i
	%45 = zext i16 %44 to i32
	%46 = getelementptr [0 x i8], [0 x i8]* %43, i32 0, i32 %45
	%47 = load i8, i8* %46
	%48 = icmp eq i8 %47, 123
	br i1 %48, label %L.20, label %L.19
L.20:
	%49 = load [0 x i8]*, [0 x i8]** %what
	%50 = bitcast [0 x i8]* %49 to [0 x i8]*
	%51 = load i16, i16* %i
	%52 = call i16 @stmt_EndConstraint([0 x i8]* %50, i16 %51)
	store i16 %52, i16* %i
	br label %L.19
L.19:
	%53 = load i16, i16* %nout
	%54 = add i16 %53, 1
	store i16 %54, i16* %nout
	%55 = load i16, i16* %narg
	%56 = zext i16 %55 to i32
	%57 = getelementptr [10 x i8], [10 x i8]* %constraints, i32 0, i32 %56
	store i8 11, i8* %57
	%58 = load i16, i16* %narg
	%59 = add i16 %58, 1
	store i16 %59, i16* %narg
	br label %L.15
L.17:
	%60 = load [0 x i8]*, [0 x i8]** %what
	%61 = load i16, i16* %i
	%62 = zext i16 %61 to i32
	%63 = getelementptr [0 x i8], [0 x i8]* %60, i32 0, i32 %62
	%64 = load i8, i8* %63
	%65 = sub i8 %64, 48
	%66 = load i16, i16* %narg
	%67 = zext i16 %66 to i32
	%68 = getelementptr [10 x i8], [10 x i8]* %constraints, i32 0, i32 %67
	store i8 %65, i8* %68
	%69 = load i16, i16* %narg
	%70 = add i16 %69, 1
	store i16 %70, i16* %narg
	br label %L.15
L.18:
	%71 = getelementptr [18 x i8], [18 x i8]* @S.671
	%72 = bitcast [18 x i8]* %71 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %72)
	%73 = load [0 x i8]*, [0 x i8]** %what
	%74 = load i16, i16* %i
	%75 = zext i16 %74 to i32
	%76 = getelementptr [0 x i8], [0 x i8]* %73, i32 0, i32 %75
	%77 = load i8, i8* %76
	%78 = icmp eq i8 %77, 123
	br i1 %78, label %L.22, label %L.21
L.22:
	%79 = load [0 x i8]*, [0 x i8]** %what
	%80 = bitcast [0 x i8]* %79 to [0 x i8]*
	%81 = load i16, i16* %i
	%82 = call i16 @stmt_EndConstraint([0 x i8]* %80, i16 %81)
	store i16 %82, i16* %i
	br label %L.21
L.21:
	br label %L.15
L.14:
	%83 = load [0 x i8]*, [0 x i8]** %what
	%84 = load i16, i16* %i
	%85 = zext i16 %84 to i32
	%86 = getelementptr [0 x i8], [0 x i8]* %83, i32 0, i32 %85
	%87 = load i8, i8* %86
	%88 = icmp eq i8 %87, 123
	br i1 %88, label %L.24, label %L.23
L.24:
	%89 = load [0 x i8]*, [0 x i8]** %what
	%90 = bitcast [0 x i8]* %89 to [0 x i8]*
	%91 = load i16, i16* %i
	%92 = call i16 @stmt_EndConstraint([0 x i8]* %90, i16 %91)
	store i16 %92, i16* %i
	br label %L.23
L.23:
	%93 = load i16, i16* %narg
	%94 = zext i16 %93 to i32
	%95 = getelementptr [10 x i8], [10 x i8]* %constraints, i32 0, i32 %94
	store i8 10, i8* %95
	%96 = load i16, i16* %narg
	%97 = add i16 %96, 1
	store i16 %97, i16* %narg
	br label %L.15
L.15:
	%98 = load i16, i16* %i
	%99 = add i16 %98, 1
	store i16 %99, i16* %i
	%100 = load [0 x i8]*, [0 x i8]** %what
	%101 = load i16, i16* %i
	%102 = zext i16 %101 to i32
	%103 = getelementptr [0 x i8], [0 x i8]* %100, i32 0, i32 %102
	%104 = load i8, i8* %103
	%105 = icmp ne i8 %104, 44
	br i1 %105, label %L.10, label %L.25
L.25:
	%106 = load i16, i16* %i
	%107 = add i16 %106, 1
	store i16 %107, i16* %i
	br label %L.9
L.10:
	br label %L.6
L.8:
	call void @lex_ErrorT(i8 20, i8 45)
	br label %L.6
L.6:
	store i8 0, i8* %na
	store i8 0, i8* %no
	br label %L.26
L.26:
	%108 = load i8, i8* %na
	%109 = zext i8 %108 to i16
	%110 = load i16, i16* %narg
	%111 = icmp ult i16 %109, %110
	%112 = xor i1 %111, true
	br i1 %112, label %L.27, label %L.28
L.28:
	%113 = load i8, i8* %na
	%114 = zext i8 %113 to i32
	%115 = getelementptr [10 x i8], [10 x i8]* %constraints, i32 0, i32 %114
	%116 = load i8, i8* %115
	%117 = icmp ult i8 %116, 10
	br i1 %117, label %L.30, label %L.31
L.30:
	%118 = load i8, i8* %na
	%119 = zext i8 %118 to i32
	%120 = getelementptr [10 x i8], [10 x i8]* %constraints, i32 0, i32 %119
	%121 = load i8, i8* %120
	%122 = zext i8 %121 to i32
	%123 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 %122
	%124 = load %ast_AstNode*, %ast_AstNode** %123
	%125 = call %ast_AstNode* @expr_Load(%ast_AstNode* %124)
	store %ast_AstNode* %125, %ast_AstNode** %node
	%126 = load %ast_AstNode*, %ast_AstNode** %tree
	%127 = load %ast_AstNode*, %ast_AstNode** %node
	%128 = call %ast_AstNode* @ast_Child(%ast_AstNode* %126, %ast_AstNode* %127)
	store %ast_AstNode* %128, %ast_AstNode** %tree
	br label %L.29
L.31:
	%129 = load i8, i8* %tok
	%130 = icmp eq i8 %129, 5
	br i1 %130, label %L.33, label %L.34
L.33:
	%131 = call i8 @lex_Next()
	store i8 %131, i8* %tok
	%132 = load i8, i8* %na
	%133 = zext i8 %132 to i32
	%134 = getelementptr [10 x i8], [10 x i8]* %constraints, i32 0, i32 %133
	%135 = load i8, i8* %134
	%136 = icmp eq i8 %135, 11
	br i1 %136, label %L.36, label %L.37
L.36:
	%137 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* null)
	%138 = load i8, i8* %no
	%139 = zext i8 %138 to i32
	%140 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 %139
	store %ast_AstNode* %137, %ast_AstNode** %140
	%141 = load i8, i8* %no
	%142 = add i8 %141, 1
	store i8 %142, i8* %no
	br label %L.35
L.37:
	%143 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %143, %ast_AstNode** %node
	%144 = load %ast_AstNode*, %ast_AstNode** %tree
	%145 = load %ast_AstNode*, %ast_AstNode** %node
	%146 = call %ast_AstNode* @ast_Child(%ast_AstNode* %144, %ast_AstNode* %145)
	store %ast_AstNode* %146, %ast_AstNode** %tree
	br label %L.35
L.35:
	%147 = load i8, i8* @lex_Token
	store i8 %147, i8* %tok
	br label %L.32
L.34:
	call void @lex_ErrorT(i8 20, i8 5)
	br label %L.32
L.32:
	br label %L.29
L.29:
	%148 = load i8, i8* %na
	%149 = add i8 %148, 1
	store i8 %149, i8* %na
	br label %L.26
L.27:
	store %symb_SymbNode* null, %symb_SymbNode** %prevs
	store i8 0, i8* %no
	br label %L.38
L.38:
	%150 = load i8, i8* %no
	%151 = zext i8 %150 to i16
	%152 = load i16, i16* %nout
	%153 = icmp ult i16 %151, %152
	%154 = xor i1 %153, true
	br i1 %154, label %L.39, label %L.40
L.40:
	%155 = bitcast [2 x i8]* @symb_anonid to [0 x i8]*
	%156 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %155, i8 2)
	store %symb_SymbNode* %156, %symb_SymbNode** %rs
	%157 = load i8, i8* %no
	%158 = zext i8 %157 to i32
	%159 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 %158
	%160 = load %ast_AstNode*, %ast_AstNode** %159
	%161 = getelementptr %ast_AstNode, %ast_AstNode* %160, i32 0, i32 8
	%162 = load %type_TypeNode*, %type_TypeNode** %161
	%163 = getelementptr %type_TypeNode, %type_TypeNode* %162, i32 0, i32 0
	%164 = load %type_TypeNode*, %type_TypeNode** %163
	%165 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%166 = getelementptr %symb_SymbNode, %symb_SymbNode* %165, i32 0, i32 1
	store %type_TypeNode* %164, %type_TypeNode** %166
	%167 = load %ast_AstNode*, %ast_AstNode** %tree
	%168 = getelementptr %ast_AstNode, %ast_AstNode* %167, i32 0, i32 9
	%169 = load %symb_SymbNode*, %symb_SymbNode** %168
	%170 = icmp eq %symb_SymbNode* %169, null
	br i1 %170, label %L.42, label %L.41
L.42:
	%171 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%172 = load %ast_AstNode*, %ast_AstNode** %tree
	%173 = getelementptr %ast_AstNode, %ast_AstNode* %172, i32 0, i32 9
	store %symb_SymbNode* %171, %symb_SymbNode** %173
	br label %L.41
L.41:
	%174 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%175 = icmp ne %symb_SymbNode* %174, null
	br i1 %175, label %L.44, label %L.43
L.44:
	%176 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%177 = load %symb_SymbNode*, %symb_SymbNode** %prevs
	%178 = getelementptr %symb_SymbNode, %symb_SymbNode* %177, i32 0, i32 0
	store %symb_SymbNode* %176, %symb_SymbNode** %178
	br label %L.43
L.43:
	%179 = load %symb_SymbNode*, %symb_SymbNode** %rs
	store %symb_SymbNode* %179, %symb_SymbNode** %prevs
	%180 = load i8, i8* %no
	%181 = add i8 %180, 1
	store i8 %181, i8* %no
	br label %L.38
L.39:
	%182 = load i16, i16* %nout
	%183 = icmp ugt i16 %182, 0
	br i1 %183, label %L.46, label %L.45
L.46:
	%184 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %184, %ast_AstNode** %node
	%185 = call %ast_AstNode* @ast_New(i8 28, %type_TypeNode* null)
	store %ast_AstNode* %185, %ast_AstNode** %tree
	store i8 0, i8* %no
	br label %L.47
L.47:
	%186 = load i8, i8* %no
	%187 = zext i8 %186 to i16
	%188 = load i16, i16* %nout
	%189 = icmp ult i16 %187, %188
	%190 = xor i1 %189, true
	br i1 %190, label %L.48, label %L.49
L.49:
	%191 = load %ast_AstNode*, %ast_AstNode** %tree
	%192 = load i8, i8* %no
	%193 = zext i8 %192 to i32
	%194 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 %193
	%195 = load %ast_AstNode*, %ast_AstNode** %194
	%196 = call %ast_AstNode* @ast_Child(%ast_AstNode* %191, %ast_AstNode* %195)
	store %ast_AstNode* %196, %ast_AstNode** %tree
	%197 = load i8, i8* %no
	%198 = add i8 %197, 1
	store i8 %198, i8* %no
	br label %L.47
L.48:
	%199 = load i16, i16* %nout
	%200 = icmp ugt i16 %199, 1
	br i1 %200, label %L.51, label %L.52
L.51:
	store i8 0, i8* %no
	br label %L.53
L.53:
	%201 = load i8, i8* %no
	%202 = zext i8 %201 to i16
	%203 = load i16, i16* %nout
	%204 = icmp ult i16 %202, %203
	%205 = xor i1 %204, true
	br i1 %205, label %L.54, label %L.55
L.55:
	%206 = load i8, i8* %no
	%207 = zext i8 %206 to i32
	%208 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 %207
	%209 = load %ast_AstNode*, %ast_AstNode** %208
	%210 = getelementptr %ast_AstNode, %ast_AstNode* %209, i32 0, i32 8
	%211 = load %type_TypeNode*, %type_TypeNode** %210
	%212 = getelementptr %type_TypeNode, %type_TypeNode* %211, i32 0, i32 0
	%213 = load %type_TypeNode*, %type_TypeNode** %212
	%214 = load %ast_AstNode*, %ast_AstNode** %node
	%215 = call %ast_AstNode* @ast_New1(i8 26, %type_TypeNode* %213, %ast_AstNode* %214)
	store %ast_AstNode* %215, %ast_AstNode** %temp
	%216 = load %ast_AstNode*, %ast_AstNode** %temp
	%217 = getelementptr %ast_AstNode, %ast_AstNode* %216, i32 0, i32 8
	%218 = load %type_TypeNode*, %type_TypeNode** %217
	%219 = getelementptr %type_TypeNode, %type_TypeNode* %218, i32 0, i32 11
	%220 = load i32, i32* %219
	%221 = load %ast_AstNode*, %ast_AstNode** %temp
	%222 = getelementptr %ast_AstNode, %ast_AstNode* %221, i32 0, i32 7
	store i32 %220, i32* %222
	%223 = load i8, i8* %no
	%224 = zext i8 %223 to i64
	%225 = load %ast_AstNode*, %ast_AstNode** %temp
	%226 = getelementptr %ast_AstNode, %ast_AstNode* %225, i32 0, i32 10
	store i64 %224, i64* %226
	%227 = load %ast_AstNode*, %ast_AstNode** %tree
	%228 = load %ast_AstNode*, %ast_AstNode** %temp
	%229 = call %ast_AstNode* @ast_Child(%ast_AstNode* %227, %ast_AstNode* %228)
	store %ast_AstNode* %229, %ast_AstNode** %tree
	%230 = load i8, i8* %no
	%231 = add i8 %230, 1
	store i8 %231, i8* %no
	br label %L.53
L.54:
	br label %L.50
L.52:
	%232 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 0
	%233 = load %ast_AstNode*, %ast_AstNode** %232
	%234 = getelementptr %ast_AstNode, %ast_AstNode* %233, i32 0, i32 8
	%235 = load %type_TypeNode*, %type_TypeNode** %234
	%236 = getelementptr %type_TypeNode, %type_TypeNode* %235, i32 0, i32 0
	%237 = load %type_TypeNode*, %type_TypeNode** %236
	%238 = load %ast_AstNode*, %ast_AstNode** %node
	%239 = getelementptr %ast_AstNode, %ast_AstNode* %238, i32 0, i32 8
	store %type_TypeNode* %237, %type_TypeNode** %239
	%240 = getelementptr [10 x %ast_AstNode*], [10 x %ast_AstNode*]* %outputs, i32 0, i32 0
	%241 = load %ast_AstNode*, %ast_AstNode** %240
	%242 = getelementptr %ast_AstNode, %ast_AstNode* %241, i32 0, i32 8
	%243 = load %type_TypeNode*, %type_TypeNode** %242
	%244 = getelementptr %type_TypeNode, %type_TypeNode* %243, i32 0, i32 0
	%245 = load %type_TypeNode*, %type_TypeNode** %244
	%246 = getelementptr %type_TypeNode, %type_TypeNode* %245, i32 0, i32 11
	%247 = load i32, i32* %246
	%248 = load %ast_AstNode*, %ast_AstNode** %node
	%249 = getelementptr %ast_AstNode, %ast_AstNode* %248, i32 0, i32 7
	store i32 %247, i32* %249
	%250 = load %ast_AstNode*, %ast_AstNode** %tree
	%251 = load %ast_AstNode*, %ast_AstNode** %node
	%252 = call %ast_AstNode* @ast_Child(%ast_AstNode* %250, %ast_AstNode* %251)
	store %ast_AstNode* %252, %ast_AstNode** %tree
	br label %L.50
L.50:
	br label %L.45
L.45:
	br label %L.4
L.4:
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 20, i8 45)
	br label %L.1
L.1:
	%253 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %253, %ast_AstNode** %rv.0
	br label %return
return:
	%254 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %254
}
define internal %ast_AstNode* @stmt_CheckSwap(%ast_AstNode* %lhs$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 0
	%4 = load %type_TypeNode*, %type_TypeNode** %3
	%5 = load %target_ModelT*, %target_ModelT** @target_Target
	%6 = getelementptr %target_ModelT, %target_ModelT* %5, i32 0, i32 0
	%7 = load i8, i8* %6
	%8 = call i8 @type_NeedSwap(%type_TypeNode* %4, i8 %7)
	%9 = icmp ne i8 %8, 0
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = load %ast_AstNode*, %ast_AstNode** %rhs
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 8
	%12 = load %type_TypeNode*, %type_TypeNode** %11
	%13 = load %ast_AstNode*, %ast_AstNode** %rhs
	%14 = call %ast_AstNode* @ast_New1(i8 32, %type_TypeNode* %12, %ast_AstNode* %13)
	store %ast_AstNode* %14, %ast_AstNode** %rhs
	br label %L.1
L.1:
	%15 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %15, %ast_AstNode** %rv.0
	br label %return
return:
	%16 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %16
}
define internal %ast_AstNode* @stmt_AssignRecord(%ast_AstNode* %lhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%tree = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 0
	%4 = load %type_TypeNode*, %type_TypeNode** %3
	store %type_TypeNode* %4, %type_TypeNode** %t
	%5 = load %type_TypeNode*, %type_TypeNode** %t
	%6 = call %ast_AstNode* @expr_Term(%type_TypeNode* %5)
	store %ast_AstNode* %6, %ast_AstNode** %tree
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	%8 = icmp eq %ast_AstNode* %7, null
	br i1 %8, label %L.2, label %L.1
L.2:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.1:
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 24
	%11 = load i8, i8* %10
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.4, label %L.5
L.4:
	%13 = load %ast_AstNode*, %ast_AstNode** %lhs
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = call %ast_AstNode* @stmt_CheckSwap(%ast_AstNode* %13, %ast_AstNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %tree
	br label %L.3
L.5:
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 0
	%18 = load i8, i8* %17
	%19 = icmp eq i8 %18, 9
	br i1 %19, label %L.7, label %L.6
L.7:
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 8
	%22 = load %type_TypeNode*, %type_TypeNode** %21
	%23 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %22)
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %23, %ast_AstNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 8
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 0
	%30 = load %type_TypeNode*, %type_TypeNode** %29
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = call %ast_AstNode* @ast_New1(i8 27, %type_TypeNode* %30, %ast_AstNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	br label %L.6
L.6:
	br label %L.3
L.3:
	%33 = load %ast_AstNode*, %ast_AstNode** %lhs
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	%35 = call %ast_AstNode* @ast_New2(i8 28, %type_TypeNode* null, %ast_AstNode* %33, %ast_AstNode* %34)
	store %ast_AstNode* %35, %ast_AstNode** %tree
	%36 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %36, %ast_AstNode** %rv.0
	br label %return
return:
	%37 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %37
}
define internal %ast_AstNode* @stmt_ArrayFix(%ast_AstNode* %tree$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%at = alloca %type_TypeNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %tree
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 12, label %L.3
		i32 9, label %L.4
	]
L.3:
	%4 = load %ast_AstNode*, %ast_AstNode** %tree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = load %ast_AstNode*, %ast_AstNode** %tree
	%8 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %6, %ast_AstNode* %7)
	store %ast_AstNode* %8, %ast_AstNode** %tree
	br label %L.2
L.4:
	br label %L.2
L.1:
	br label %L.2
L.2:
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 8
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 0
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	store %type_TypeNode* %13, %type_TypeNode** %at
	%14 = load %type_TypeNode*, %type_TypeNode** %at
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 0
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%18 = icmp ne %type_TypeNode* %16, %17
	br i1 %18, label %L.6, label %L.5
L.5:
	%19 = load %type_TypeNode*, %type_TypeNode** %at
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 28
	%21 = load i8, i8* %20
	%22 = icmp ne i8 %21, 0
	%23 = xor i1 %22, true
	br label %L.6
L.6:
	%24 = phi i1 [ true, %L.2 ], [ %23, %L.5 ]
	br i1 %24, label %L.8, label %L.7
L.8:
	%25 = load %type_TypeNode*, %type_TypeNode** @type_memtype
	%26 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %25)
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %26, %ast_AstNode* %27)
	store %ast_AstNode* %28, %ast_AstNode** %tree
	br label %L.7
L.7:
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %29, %ast_AstNode** %rv.0
	br label %return
return:
	%30 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %30
}
@S.672 = private unnamed_addr constant [24 x i8] c"Assign to packed array\0A\00"
@S.673 = private unnamed_addr constant [20 x i8] c"packed array slices\00"
define internal %ast_AstNode* @stmt_AssignArray(%ast_AstNode* %lhs$, i8 zeroext %optok$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%optok = alloca i8
	store i8 %optok$, i8* %optok
	%rhs = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%lsize = alloca %ast_AstNode*
	%rsize = alloca %ast_AstNode*
	%align = alloca %ast_AstNode*
	%lalign = alloca i32
	%ralign = alloca i32
	%width = alloca i32
	%tl = alloca %type_TypeNode*
	%tr = alloca %type_TypeNode*
	%op = alloca i8
	%0 = load i8, i8* %optok
	%1 = icmp eq i8 %0, 10
	br i1 %1, label %L.2, label %L.3
L.2:
	store i8 23, i8* %op
	br label %L.1
L.3:
	store i8 22, i8* %op
	br label %L.1
L.1:
	%2 = load %ast_AstNode*, %ast_AstNode** %lhs
	%3 = getelementptr %ast_AstNode, %ast_AstNode* %2, i32 0, i32 8
	%4 = load %type_TypeNode*, %type_TypeNode** %3
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 0
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	store %type_TypeNode* %6, %type_TypeNode** %tl
	%7 = load %type_TypeNode*, %type_TypeNode** %tl
	%8 = call %ast_AstNode* @expr_Term(%type_TypeNode* %7)
	store %ast_AstNode* %8, %ast_AstNode** %rhs
	%9 = load %ast_AstNode*, %ast_AstNode** %rhs
	%10 = icmp eq %ast_AstNode* %9, null
	br i1 %10, label %L.5, label %L.4
L.5:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.4:
	%11 = load %ast_AstNode*, %ast_AstNode** %rhs
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 8
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	%14 = icmp eq %type_TypeNode* %13, null
	br i1 %14, label %L.7, label %L.6
L.6:
	%15 = load %ast_AstNode*, %ast_AstNode** %rhs
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 8
	%17 = load %type_TypeNode*, %type_TypeNode** %16
	%18 = getelementptr %type_TypeNode, %type_TypeNode* %17, i32 0, i32 16
	%19 = load i8, i8* %18
	%20 = icmp ne i8 %19, 6
	br label %L.7
L.7:
	%21 = phi i1 [ true, %L.4 ], [ %20, %L.6 ]
	br i1 %21, label %L.9, label %L.8
L.9:
	call void @lex_Error(i8 63)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.8:
	%22 = load %type_TypeNode*, %type_TypeNode** %tl
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 24
	%24 = load i8, i8* %23
	%25 = icmp ne i8 %24, 0
	br i1 %25, label %L.11, label %L.12
L.11:
	%26 = getelementptr [24 x i8], [24 x i8]* @S.672
	%27 = bitcast [24 x i8]* %26 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %27)
	%28 = load %ast_AstNode*, %ast_AstNode** %lhs
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 0
	%30 = load i8, i8* %29
	%31 = icmp eq i8 %30, 15
	br i1 %31, label %L.14, label %L.13
L.14:
	%32 = getelementptr [20 x i8], [20 x i8]* @S.673
	%33 = bitcast [20 x i8]* %32 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %33)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.13:
	%34 = load %ast_AstNode*, %ast_AstNode** %lhs
	%35 = load %ast_AstNode*, %ast_AstNode** %rhs
	%36 = call %ast_AstNode* @stmt_CheckSwap(%ast_AstNode* %34, %ast_AstNode* %35)
	store %ast_AstNode* %36, %ast_AstNode** %rhs
	%37 = load %ast_AstNode*, %ast_AstNode** %lhs
	%38 = load %ast_AstNode*, %ast_AstNode** %rhs
	%39 = call %ast_AstNode* @ast_New2(i8 28, %type_TypeNode* null, %ast_AstNode* %37, %ast_AstNode* %38)
	store %ast_AstNode* %39, %ast_AstNode** %tree
	br label %L.10
L.12:
	%40 = load %ast_AstNode*, %ast_AstNode** %lhs
	%41 = call i32 @expr_GetAlignment(%ast_AstNode* %40)
	store i32 %41, i32* %lalign
	%42 = load %ast_AstNode*, %ast_AstNode** %lhs
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 0
	%44 = load i8, i8* %43
	%45 = icmp eq i8 %44, 15
	br i1 %45, label %L.16, label %L.17
L.16:
	%46 = load %ast_AstNode*, %ast_AstNode** %lhs
	%47 = getelementptr %ast_AstNode, %ast_AstNode* %46, i32 0, i32 11
	%48 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %47, i32 0, i32 2
	%49 = load %ast_AstNode*, %ast_AstNode** %48
	store %ast_AstNode* %49, %ast_AstNode** %lsize
	%50 = load %ast_AstNode*, %ast_AstNode** %lhs
	%51 = getelementptr %ast_AstNode, %ast_AstNode* %50, i32 0, i32 11
	%52 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %51, i32 0, i32 0
	%53 = load %ast_AstNode*, %ast_AstNode** %52
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 8
	%55 = load %type_TypeNode*, %type_TypeNode** %54
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 0
	%57 = load %type_TypeNode*, %type_TypeNode** %56
	%58 = getelementptr %type_TypeNode, %type_TypeNode* %57, i32 0, i32 0
	%59 = load %type_TypeNode*, %type_TypeNode** %58
	%60 = getelementptr %type_TypeNode, %type_TypeNode* %59, i32 0, i32 11
	%61 = load i32, i32* %60
	store i32 %61, i32* %width
	br label %L.15
L.17:
	%62 = load %ast_AstNode*, %ast_AstNode** %lhs
	%63 = getelementptr %ast_AstNode, %ast_AstNode* %62, i32 0, i32 8
	%64 = load %type_TypeNode*, %type_TypeNode** %63
	%65 = getelementptr %type_TypeNode, %type_TypeNode* %64, i32 0, i32 0
	%66 = load %type_TypeNode*, %type_TypeNode** %65
	%67 = getelementptr %type_TypeNode, %type_TypeNode* %66
	%68 = bitcast %type_TypeNode* %67 to %type_TypeNode*
	%69 = call i32 @type_TypeNode_Span(%type_TypeNode* %68)
	%70 = zext i32 %69 to i64
	%71 = call %ast_AstNode* @ast_ConstW(i64 %70)
	store %ast_AstNode* %71, %ast_AstNode** %lsize
	%72 = load %ast_AstNode*, %ast_AstNode** %lhs
	%73 = getelementptr %ast_AstNode, %ast_AstNode* %72, i32 0, i32 8
	%74 = load %type_TypeNode*, %type_TypeNode** %73
	%75 = getelementptr %type_TypeNode, %type_TypeNode* %74, i32 0, i32 0
	%76 = load %type_TypeNode*, %type_TypeNode** %75
	%77 = getelementptr %type_TypeNode, %type_TypeNode* %76, i32 0, i32 0
	%78 = load %type_TypeNode*, %type_TypeNode** %77
	%79 = getelementptr %type_TypeNode, %type_TypeNode* %78, i32 0, i32 11
	%80 = load i32, i32* %79
	store i32 %80, i32* %width
	br label %L.15
L.15:
	%81 = load %ast_AstNode*, %ast_AstNode** %rhs
	%82 = getelementptr %ast_AstNode, %ast_AstNode* %81, i32 0, i32 0
	%83 = load i8, i8* %82
	%84 = zext i8 %83 to i32
	switch i32 %84, label %L.18 [
		i32 27, label %L.20
		i32 8, label %L.21
		i32 9, label %L.21
	]
L.20:
	%85 = load %ast_AstNode*, %ast_AstNode** %rhs
	%86 = call %ast_AstNode* @expr_UnLoad(%ast_AstNode* %85)
	store %ast_AstNode* %86, %ast_AstNode** %rhs
	br label %L.19
L.21:
	%87 = load %ast_AstNode*, %ast_AstNode** %rhs
	%88 = getelementptr %ast_AstNode, %ast_AstNode* %87, i32 0, i32 8
	%89 = load %type_TypeNode*, %type_TypeNode** %88
	%90 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %89)
	%91 = load %ast_AstNode*, %ast_AstNode** %rhs
	%92 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %90, %ast_AstNode* %91)
	store %ast_AstNode* %92, %ast_AstNode** %rhs
	br label %L.19
L.18:
	br label %L.19
L.19:
	%93 = load %ast_AstNode*, %ast_AstNode** %rhs
	%94 = call i32 @expr_GetAlignment(%ast_AstNode* %93)
	store i32 %94, i32* %ralign
	%95 = load i32, i32* %ralign
	%96 = load i32, i32* %lalign
	%97 = icmp ult i32 %95, %96
	br i1 %97, label %L.23, label %L.22
L.23:
	%98 = load i32, i32* %ralign
	store i32 %98, i32* %lalign
	br label %L.22
L.22:
	%99 = load %ast_AstNode*, %ast_AstNode** %rhs
	%100 = getelementptr %ast_AstNode, %ast_AstNode* %99, i32 0, i32 0
	%101 = load i8, i8* %100
	%102 = icmp eq i8 %101, 15
	br i1 %102, label %L.25, label %L.26
L.25:
	%103 = load %ast_AstNode*, %ast_AstNode** %rhs
	%104 = getelementptr %ast_AstNode, %ast_AstNode* %103, i32 0, i32 11
	%105 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %104, i32 0, i32 2
	%106 = load %ast_AstNode*, %ast_AstNode** %105
	store %ast_AstNode* %106, %ast_AstNode** %rsize
	br label %L.24
L.26:
	%107 = load %ast_AstNode*, %ast_AstNode** %rhs
	%108 = getelementptr %ast_AstNode, %ast_AstNode* %107, i32 0, i32 8
	%109 = load %type_TypeNode*, %type_TypeNode** %108
	%110 = getelementptr %type_TypeNode, %type_TypeNode* %109, i32 0, i32 0
	%111 = load %type_TypeNode*, %type_TypeNode** %110
	%112 = getelementptr %type_TypeNode, %type_TypeNode* %111
	%113 = bitcast %type_TypeNode* %112 to %type_TypeNode*
	%114 = call i32 @type_TypeNode_Span(%type_TypeNode* %113)
	%115 = zext i32 %114 to i64
	%116 = call %ast_AstNode* @ast_ConstW(i64 %115)
	store %ast_AstNode* %116, %ast_AstNode** %rsize
	br label %L.24
L.24:
	%117 = load %ast_AstNode*, %ast_AstNode** %lsize
	%118 = getelementptr %ast_AstNode, %ast_AstNode* %117, i32 0, i32 0
	%119 = load i8, i8* %118
	%120 = icmp eq i8 %119, 6
	br i1 %120, label %L.27, label %L.28
L.27:
	%121 = load %ast_AstNode*, %ast_AstNode** %lsize
	%122 = getelementptr %ast_AstNode, %ast_AstNode* %121, i32 0, i32 10
	%123 = load i64, i64* %122
	%124 = icmp eq i64 %123, 0
	br label %L.28
L.28:
	%125 = phi i1 [ false, %L.24 ], [ %124, %L.27 ]
	br i1 %125, label %L.30, label %L.31
L.30:
	%126 = load %ast_AstNode*, %ast_AstNode** %rsize
	%127 = getelementptr %ast_AstNode, %ast_AstNode* %126, i32 0, i32 0
	%128 = load i8, i8* %127
	%129 = icmp eq i8 %128, 6
	br i1 %129, label %L.32, label %L.33
L.32:
	%130 = load %ast_AstNode*, %ast_AstNode** %rsize
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 10
	%132 = load i64, i64* %131
	%133 = icmp eq i64 %132, 0
	br label %L.33
L.33:
	%134 = phi i1 [ false, %L.30 ], [ %133, %L.32 ]
	br i1 %134, label %L.35, label %L.36
L.35:
	call void @lex_Error(i8 64)
	br label %L.34
L.36:
	%135 = load %ast_AstNode*, %ast_AstNode** %rsize
	store %ast_AstNode* %135, %ast_AstNode** %lsize
	br label %L.34
L.34:
	br label %L.29
L.31:
	%136 = load %ast_AstNode*, %ast_AstNode** %rsize
	%137 = getelementptr %ast_AstNode, %ast_AstNode* %136, i32 0, i32 0
	%138 = load i8, i8* %137
	%139 = icmp ne i8 %138, 6
	br i1 %139, label %L.38, label %L.37
L.37:
	%140 = load %ast_AstNode*, %ast_AstNode** %rsize
	%141 = getelementptr %ast_AstNode, %ast_AstNode* %140, i32 0, i32 10
	%142 = load i64, i64* %141
	%143 = icmp ne i64 %142, 0
	br label %L.38
L.38:
	%144 = phi i1 [ true, %L.31 ], [ %143, %L.37 ]
	br i1 %144, label %L.40, label %L.39
L.40:
	%145 = load %ast_AstNode*, %ast_AstNode** %lsize
	%146 = load %ast_AstNode*, %ast_AstNode** %rsize
	%147 = call %ast_AstNode* @ast_OpBinary(i8 59, %ast_AstNode* %145, %ast_AstNode* %146, %type_TypeNode* null)
	store %ast_AstNode* %147, %ast_AstNode** %lsize
	br label %L.39
L.39:
	br label %L.29
L.29:
	%148 = load i8, i8* %op
	%149 = load %ast_AstNode*, %ast_AstNode** %lhs
	%150 = getelementptr %ast_AstNode, %ast_AstNode* %149, i32 0, i32 8
	%151 = load %type_TypeNode*, %type_TypeNode** %150
	%152 = getelementptr %type_TypeNode, %type_TypeNode* %151, i32 0, i32 0
	%153 = load %type_TypeNode*, %type_TypeNode** %152
	%154 = load %ast_AstNode*, %ast_AstNode** %lhs
	%155 = call %ast_AstNode* @stmt_ArrayFix(%ast_AstNode* %154)
	%156 = load %ast_AstNode*, %ast_AstNode** %rhs
	%157 = call %ast_AstNode* @stmt_ArrayFix(%ast_AstNode* %156)
	%158 = load %ast_AstNode*, %ast_AstNode** %lsize
	%159 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%160 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %158, %type_TypeNode* %159)
	%161 = load i32, i32* %width
	%162 = zext i32 %161 to i64
	%163 = udiv i64 %162, 8
	%164 = call %ast_AstNode* @ast_ConstW(i64 %163)
	%165 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%166 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %160, %ast_AstNode* %164, %type_TypeNode* %165)
	%167 = load i32, i32* %lalign
	%168 = zext i32 %167 to i64
	%169 = call %ast_AstNode* @ast_ConstW(i64 %168)
	%170 = call %ast_AstNode* @ast_New4(i8 %148, %type_TypeNode* %153, %ast_AstNode* %155, %ast_AstNode* %157, %ast_AstNode* %166, %ast_AstNode* %169)
	store %ast_AstNode* %170, %ast_AstNode** %tree
	br label %L.10
L.10:
	%171 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %171, %ast_AstNode** %rv.0
	br label %return
return:
	%172 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %172
}
@stmt_ops = internal constant [5 x i8] [ i8 54, i8 55, i8 52, i8 53, i8 51 ], align 1
@stmt_fops = internal constant [5 x i8] [ i8 85, i8 86, i8 0, i8 0, i8 0 ], align 1
@S.676 = private unnamed_addr constant [19 x i8] c"Assign LHS not REF\00"
define internal %ast_AstNode* @stmt_Assign(%ast_AstNode* %lhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%tree = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%lrhs = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%op = alloca i8
	%tok = alloca i8
	%optok = alloca i8
	%nl = alloca i16
	%nr = alloca i16
	%i = alloca i16
	%tl = alloca %symb_SymbNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = call %ast_AstNode* @ast_New1(i8 28, %type_TypeNode* null, %ast_AstNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %tree
	store i16 1, i16* %nl
	br label %L.1
L.1:
	%2 = load i8, i8* @lex_Token
	store i8 %2, i8* %tok
	%3 = load i8, i8* %tok
	%4 = icmp ne i8 %3, 5
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	%6 = load i8, i8* %tok
	%7 = icmp eq i8 %6, 46
	br i1 %7, label %L.4, label %L.5
L.4:
	%8 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%9 = call i8 @symb_IsAnon([0 x i8]* %8)
	%10 = icmp ne i8 %9, 0
	br label %L.5
L.5:
	%11 = phi i1 [ false, %L.3 ], [ %10, %L.4 ]
	br i1 %11, label %L.7, label %L.8
L.7:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	store %ast_AstNode* null, %ast_AstNode** %lhs
	br label %L.6
L.8:
	%13 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* null)
	store %ast_AstNode* %13, %ast_AstNode** %lhs
	br label %L.6
L.6:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = load %ast_AstNode*, %ast_AstNode** %lhs
	%16 = call %ast_AstNode* @ast_Child(%ast_AstNode* %14, %ast_AstNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	%17 = load i16, i16* %nl
	%18 = add i16 %17, 1
	store i16 %18, i16* %nl
	br label %L.1
L.2:
	%19 = load i8, i8* %tok
	%20 = icmp uge i8 %19, 9
	br i1 %20, label %L.9, label %L.10
L.9:
	%21 = load i8, i8* %tok
	%22 = icmp ule i8 %21, 15
	br label %L.10
L.10:
	%23 = phi i1 [ false, %L.2 ], [ %22, %L.9 ]
	br i1 %23, label %L.12, label %L.13
L.12:
	%24 = load i8, i8* %tok
	store i8 %24, i8* %optok
	%25 = call i8 @lex_Next()
	store i8 %25, i8* %tok
	%26 = load i16, i16* %nl
	%27 = icmp ugt i16 %26, 1
	br i1 %27, label %L.14, label %L.15
L.14:
	%28 = load i8, i8* %optok
	%29 = icmp ne i8 %28, 9
	br label %L.15
L.15:
	%30 = phi i1 [ false, %L.12 ], [ %29, %L.14 ]
	br i1 %30, label %L.17, label %L.16
L.17:
	call void @lex_Error(i8 41)
	br label %L.16
L.16:
	store i16 0, i16* %nr
	br label %L.18
L.18:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 11
	%33 = load i16, i16* %nr
	%34 = zext i16 %33 to i32
	%35 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %32, i32 0, i32 %34
	%36 = load %ast_AstNode*, %ast_AstNode** %35
	store %ast_AstNode* %36, %ast_AstNode** %lhs
	store %type_TypeNode* null, %type_TypeNode** %t
	%37 = load %ast_AstNode*, %ast_AstNode** %lhs
	%38 = icmp ne %ast_AstNode* %37, null
	br i1 %38, label %L.21, label %L.20
L.21:
	%39 = load %ast_AstNode*, %ast_AstNode** %lhs
	%40 = getelementptr %ast_AstNode, %ast_AstNode* %39, i32 0, i32 0
	%41 = load i8, i8* %40
	%42 = icmp eq i8 %41, 11
	br i1 %42, label %L.23, label %L.24
L.23:
	%43 = load %ast_AstNode*, %ast_AstNode** %lhs
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 8
	%45 = load %type_TypeNode*, %type_TypeNode** %44
	store %type_TypeNode* %45, %type_TypeNode** %t
	br label %L.22
L.24:
	%46 = load %ast_AstNode*, %ast_AstNode** %lhs
	%47 = getelementptr %ast_AstNode, %ast_AstNode* %46, i32 0, i32 8
	%48 = load %type_TypeNode*, %type_TypeNode** %47
	%49 = getelementptr %type_TypeNode, %type_TypeNode* %48, i32 0, i32 16
	%50 = load i8, i8* %49
	%51 = icmp eq i8 %50, 5
	br i1 %51, label %L.26, label %L.27
L.26:
	%52 = load %ast_AstNode*, %ast_AstNode** %lhs
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 8
	%54 = load %type_TypeNode*, %type_TypeNode** %53
	%55 = getelementptr %type_TypeNode, %type_TypeNode* %54, i32 0, i32 0
	%56 = load %type_TypeNode*, %type_TypeNode** %55
	store %type_TypeNode* %56, %type_TypeNode** %t
	br label %L.25
L.27:
	%57 = getelementptr [19 x i8], [19 x i8]* @S.676
	%58 = bitcast [19 x i8]* %57 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %58)
	%59 = load %ast_AstNode*, %ast_AstNode** %lhs
	call void @ast_Dump(%ast_AstNode* %59)
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
L.25:
	br label %L.22
L.22:
	br label %L.20
L.20:
	%60 = load %type_TypeNode*, %type_TypeNode** %t
	%61 = icmp ne %type_TypeNode* %60, null
	br i1 %61, label %L.30, label %L.31
L.30:
	%62 = load %type_TypeNode*, %type_TypeNode** %t
	%63 = getelementptr %type_TypeNode, %type_TypeNode* %62, i32 0, i32 16
	%64 = load i8, i8* %63
	%65 = icmp eq i8 %64, 7
	br label %L.31
L.31:
	%66 = phi i1 [ false, %L.20 ], [ %65, %L.30 ]
	br i1 %66, label %L.28, label %L.29
L.28:
	%67 = load %type_TypeNode*, %type_TypeNode** %t
	%68 = getelementptr %type_TypeNode, %type_TypeNode* %67, i32 0, i32 24
	%69 = load i8, i8* %68
	%70 = icmp ne i8 %69, 0
	%71 = xor i1 %70, true
	br label %L.29
L.29:
	%72 = phi i1 [ false, %L.31 ], [ %71, %L.28 ]
	br i1 %72, label %L.33, label %L.34
L.33:
	%73 = load i8, i8* %optok
	%74 = icmp ule i8 %73, 10
	br i1 %74, label %L.35, label %L.36
L.35:
	%75 = load i16, i16* %nl
	%76 = icmp eq i16 %75, 1
	br label %L.36
L.36:
	%77 = phi i1 [ false, %L.33 ], [ %76, %L.35 ]
	br i1 %77, label %L.38, label %L.39
L.38:
	%78 = load %ast_AstNode*, %ast_AstNode** %lhs
	%79 = call %ast_AstNode* @stmt_AssignRecord(%ast_AstNode* %78)
	store %ast_AstNode* %79, %ast_AstNode** %tree
	br label %L.37
L.39:
	call void @lex_Error(i8 41)
	br label %L.37
L.37:
	%80 = load i16, i16* %nr
	%81 = add i16 %80, 1
	store i16 %81, i16* %nr
	br label %L.32
L.34:
	%82 = load %type_TypeNode*, %type_TypeNode** %t
	%83 = icmp ne %type_TypeNode* %82, null
	br i1 %83, label %L.42, label %L.43
L.42:
	%84 = load %type_TypeNode*, %type_TypeNode** %t
	%85 = getelementptr %type_TypeNode, %type_TypeNode* %84, i32 0, i32 16
	%86 = load i8, i8* %85
	%87 = icmp eq i8 %86, 6
	br label %L.43
L.43:
	%88 = phi i1 [ false, %L.34 ], [ %87, %L.42 ]
	br i1 %88, label %L.40, label %L.41
L.40:
	%89 = load %type_TypeNode*, %type_TypeNode** %t
	%90 = getelementptr %type_TypeNode, %type_TypeNode* %89, i32 0, i32 24
	%91 = load i8, i8* %90
	%92 = icmp ne i8 %91, 0
	%93 = xor i1 %92, true
	br label %L.41
L.41:
	%94 = phi i1 [ false, %L.43 ], [ %93, %L.40 ]
	br i1 %94, label %L.45, label %L.46
L.45:
	%95 = load i8, i8* %optok
	%96 = icmp ule i8 %95, 10
	br i1 %96, label %L.47, label %L.48
L.47:
	%97 = load i16, i16* %nl
	%98 = icmp eq i16 %97, 1
	br label %L.48
L.48:
	%99 = phi i1 [ false, %L.45 ], [ %98, %L.47 ]
	br i1 %99, label %L.50, label %L.51
L.50:
	%100 = load %ast_AstNode*, %ast_AstNode** %lhs
	%101 = load i8, i8* %optok
	%102 = call %ast_AstNode* @stmt_AssignArray(%ast_AstNode* %100, i8 %101)
	store %ast_AstNode* %102, %ast_AstNode** %tree
	br label %L.49
L.51:
	call void @lex_Error(i8 41)
	br label %L.49
L.49:
	%103 = load i16, i16* %nr
	%104 = add i16 %103, 1
	store i16 %104, i16* %nr
	br label %L.44
L.46:
	%105 = load %type_TypeNode*, %type_TypeNode** %t
	%106 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %105)
	store %ast_AstNode* %106, %ast_AstNode** %rhs
	%107 = load %ast_AstNode*, %ast_AstNode** %rhs
	%108 = icmp ne %ast_AstNode* %107, null
	br i1 %108, label %L.53, label %L.52
L.53:
	%109 = load %ast_AstNode*, %ast_AstNode** %rhs
	%110 = getelementptr %ast_AstNode, %ast_AstNode* %109, i32 0, i32 0
	%111 = load i8, i8* %110
	%112 = icmp eq i8 %111, 18
	br i1 %112, label %L.59, label %L.58
L.58:
	%113 = load %ast_AstNode*, %ast_AstNode** %rhs
	%114 = getelementptr %ast_AstNode, %ast_AstNode* %113, i32 0, i32 0
	%115 = load i8, i8* %114
	%116 = icmp eq i8 %115, 19
	br label %L.59
L.59:
	%117 = phi i1 [ true, %L.53 ], [ %116, %L.58 ]
	br i1 %117, label %L.56, label %L.57
L.56:
	%118 = load %ast_AstNode*, %ast_AstNode** %rhs
	%119 = getelementptr %ast_AstNode, %ast_AstNode* %118, i32 0, i32 9
	%120 = load %symb_SymbNode*, %symb_SymbNode** %119
	%121 = getelementptr %symb_SymbNode, %symb_SymbNode* %120, i32 0, i32 4
	%122 = load %symb_SymbNode*, %symb_SymbNode** %121
	%123 = icmp ne %symb_SymbNode* %122, null
	br label %L.57
L.57:
	%124 = phi i1 [ false, %L.59 ], [ %123, %L.56 ]
	br i1 %124, label %L.54, label %L.55
L.54:
	%125 = load %ast_AstNode*, %ast_AstNode** %rhs
	%126 = getelementptr %ast_AstNode, %ast_AstNode* %125, i32 0, i32 9
	%127 = load %symb_SymbNode*, %symb_SymbNode** %126
	%128 = getelementptr %symb_SymbNode, %symb_SymbNode* %127, i32 0, i32 4
	%129 = load %symb_SymbNode*, %symb_SymbNode** %128
	%130 = getelementptr %symb_SymbNode, %symb_SymbNode* %129, i32 0, i32 0
	%131 = load %symb_SymbNode*, %symb_SymbNode** %130
	%132 = icmp ne %symb_SymbNode* %131, null
	br label %L.55
L.55:
	%133 = phi i1 [ false, %L.57 ], [ %132, %L.54 ]
	br i1 %133, label %L.61, label %L.62
L.61:
	%134 = load %ast_AstNode*, %ast_AstNode** %rhs
	%135 = getelementptr %ast_AstNode, %ast_AstNode* %134, i32 0, i32 9
	%136 = load %symb_SymbNode*, %symb_SymbNode** %135
	%137 = getelementptr %symb_SymbNode, %symb_SymbNode* %136, i32 0, i32 4
	%138 = load %symb_SymbNode*, %symb_SymbNode** %137
	store %symb_SymbNode* %138, %symb_SymbNode** %tl
	store i16 0, i16* %i
	br label %L.63
L.63:
	%139 = load %symb_SymbNode*, %symb_SymbNode** %tl
	%140 = getelementptr %symb_SymbNode, %symb_SymbNode* %139, i32 0, i32 1
	%141 = load %type_TypeNode*, %type_TypeNode** %140
	%142 = load %ast_AstNode*, %ast_AstNode** %rhs
	%143 = call %ast_AstNode* @ast_New1(i8 26, %type_TypeNode* %141, %ast_AstNode* %142)
	store %ast_AstNode* %143, %ast_AstNode** %lrhs
	%144 = load %symb_SymbNode*, %symb_SymbNode** %tl
	%145 = getelementptr %symb_SymbNode, %symb_SymbNode* %144, i32 0, i32 1
	%146 = load %type_TypeNode*, %type_TypeNode** %145
	%147 = getelementptr %type_TypeNode, %type_TypeNode* %146, i32 0, i32 11
	%148 = load i32, i32* %147
	%149 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%150 = getelementptr %ast_AstNode, %ast_AstNode* %149, i32 0, i32 7
	store i32 %148, i32* %150
	%151 = load i16, i16* %i
	%152 = zext i16 %151 to i64
	%153 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%154 = getelementptr %ast_AstNode, %ast_AstNode* %153, i32 0, i32 10
	store i64 %152, i64* %154
	%155 = load %ast_AstNode*, %ast_AstNode** %lhs
	%156 = icmp ne %ast_AstNode* %155, null
	br i1 %156, label %L.65, label %L.66
L.65:
	%157 = load %ast_AstNode*, %ast_AstNode** %lhs
	%158 = getelementptr %ast_AstNode, %ast_AstNode* %157, i32 0, i32 0
	%159 = load i8, i8* %158
	%160 = icmp ne i8 %159, 11
	br label %L.66
L.66:
	%161 = phi i1 [ false, %L.63 ], [ %160, %L.65 ]
	br i1 %161, label %L.68, label %L.67
L.68:
	%162 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%163 = load %ast_AstNode*, %ast_AstNode** %lhs
	%164 = getelementptr %ast_AstNode, %ast_AstNode* %163, i32 0, i32 8
	%165 = load %type_TypeNode*, %type_TypeNode** %164
	%166 = getelementptr %type_TypeNode, %type_TypeNode* %165, i32 0, i32 0
	%167 = load %type_TypeNode*, %type_TypeNode** %166
	%168 = call %ast_AstNode* @ast_Adjust(%ast_AstNode* %162, %type_TypeNode* %167)
	store %ast_AstNode* %168, %ast_AstNode** %lrhs
	%169 = load %ast_AstNode*, %ast_AstNode** %lhs
	%170 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%171 = call %ast_AstNode* @stmt_CheckSwap(%ast_AstNode* %169, %ast_AstNode* %170)
	store %ast_AstNode* %171, %ast_AstNode** %lrhs
	br label %L.67
L.67:
	%172 = load %ast_AstNode*, %ast_AstNode** %tree
	%173 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%174 = call %ast_AstNode* @ast_Child(%ast_AstNode* %172, %ast_AstNode* %173)
	store %ast_AstNode* %174, %ast_AstNode** %tree
	%175 = load i16, i16* %i
	%176 = add i16 %175, 1
	store i16 %176, i16* %i
	%177 = load %symb_SymbNode*, %symb_SymbNode** %tl
	%178 = getelementptr %symb_SymbNode, %symb_SymbNode* %177, i32 0, i32 0
	%179 = load %symb_SymbNode*, %symb_SymbNode** %178
	store %symb_SymbNode* %179, %symb_SymbNode** %tl
	%180 = load i16, i16* %i
	%181 = load i16, i16* %nl
	%182 = icmp uge i16 %180, %181
	br i1 %182, label %L.71, label %L.70
L.70:
	%183 = load %symb_SymbNode*, %symb_SymbNode** %tl
	%184 = icmp eq %symb_SymbNode* %183, null
	br label %L.71
L.71:
	%185 = phi i1 [ true, %L.67 ], [ %184, %L.70 ]
	br i1 %185, label %L.64, label %L.69
L.69:
	%186 = load %ast_AstNode*, %ast_AstNode** %tree
	%187 = getelementptr %ast_AstNode, %ast_AstNode* %186, i32 0, i32 11
	%188 = load i16, i16* %nr
	%189 = load i16, i16* %i
	%190 = add i16 %188, %189
	%191 = zext i16 %190 to i32
	%192 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %187, i32 0, i32 %191
	%193 = load %ast_AstNode*, %ast_AstNode** %192
	store %ast_AstNode* %193, %ast_AstNode** %lhs
	br label %L.63
L.64:
	%194 = load i16, i16* %nr
	%195 = load i16, i16* %i
	%196 = add i16 %194, %195
	store i16 %196, i16* %nr
	br label %L.60
L.62:
	%197 = load %ast_AstNode*, %ast_AstNode** %rhs
	%198 = getelementptr %ast_AstNode, %ast_AstNode* %197, i32 0, i32 8
	%199 = load %type_TypeNode*, %type_TypeNode** %198
	%200 = icmp ne %type_TypeNode* %199, null
	br i1 %200, label %L.73, label %L.74
L.73:
	%201 = load i8, i8* %optok
	%202 = icmp ugt i8 %201, 10
	br i1 %202, label %L.76, label %L.75
L.76:
	%203 = load %ast_AstNode*, %ast_AstNode** %lhs
	%204 = call %ast_AstNode* @expr_Load(%ast_AstNode* %203)
	store %ast_AstNode* %204, %ast_AstNode** %lrhs
	%205 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%206 = getelementptr %ast_AstNode, %ast_AstNode* %205, i32 0, i32 8
	%207 = load %type_TypeNode*, %type_TypeNode** %206
	%208 = getelementptr %type_TypeNode, %type_TypeNode* %207, i32 0, i32 16
	%209 = load i8, i8* %208
	%210 = icmp eq i8 %209, 4
	br i1 %210, label %L.78, label %L.79
L.78:
	%211 = load i8, i8* %optok
	%212 = zext i8 %211 to i32
	%213 = sub i32 %212, 11
	%214 = getelementptr [5 x i8], [5 x i8]* @stmt_fops, i32 0, i32 %213
	%215 = load i8, i8* %214
	%216 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%217 = load %ast_AstNode*, %ast_AstNode** %rhs
	%218 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%219 = getelementptr %ast_AstNode, %ast_AstNode* %218, i32 0, i32 8
	%220 = load %type_TypeNode*, %type_TypeNode** %219
	%221 = call %ast_AstNode* @ast_OpFloat(i8 %215, %ast_AstNode* %216, %ast_AstNode* %217, %type_TypeNode* %220)
	store %ast_AstNode* %221, %ast_AstNode** %rhs
	br label %L.77
L.79:
	%222 = load i8, i8* %optok
	%223 = zext i8 %222 to i32
	%224 = sub i32 %223, 11
	%225 = getelementptr [5 x i8], [5 x i8]* @stmt_ops, i32 0, i32 %224
	%226 = load i8, i8* %225
	store i8 %226, i8* %op
	%227 = load i8, i8* %op
	%228 = load %ast_AstNode*, %ast_AstNode** %lrhs
	%229 = load %ast_AstNode*, %ast_AstNode** %rhs
	%230 = call %ast_AstNode* @ast_OpBinary(i8 %227, %ast_AstNode* %228, %ast_AstNode* %229, %type_TypeNode* null)
	store %ast_AstNode* %230, %ast_AstNode** %rhs
	br label %L.77
L.77:
	br label %L.75
L.75:
	%231 = load %ast_AstNode*, %ast_AstNode** %lhs
	%232 = icmp ne %ast_AstNode* %231, null
	br i1 %232, label %L.81, label %L.80
L.81:
	%233 = load %ast_AstNode*, %ast_AstNode** %lhs
	%234 = getelementptr %ast_AstNode, %ast_AstNode* %233, i32 0, i32 0
	%235 = load i8, i8* %234
	%236 = icmp ne i8 %235, 11
	br i1 %236, label %L.83, label %L.82
L.83:
	%237 = load %ast_AstNode*, %ast_AstNode** %rhs
	%238 = load %ast_AstNode*, %ast_AstNode** %lhs
	%239 = getelementptr %ast_AstNode, %ast_AstNode* %238, i32 0, i32 8
	%240 = load %type_TypeNode*, %type_TypeNode** %239
	%241 = getelementptr %type_TypeNode, %type_TypeNode* %240, i32 0, i32 0
	%242 = load %type_TypeNode*, %type_TypeNode** %241
	%243 = call %ast_AstNode* @ast_Adjust(%ast_AstNode* %237, %type_TypeNode* %242)
	store %ast_AstNode* %243, %ast_AstNode** %rhs
	%244 = load %ast_AstNode*, %ast_AstNode** %lhs
	%245 = load %ast_AstNode*, %ast_AstNode** %rhs
	%246 = call %ast_AstNode* @stmt_CheckSwap(%ast_AstNode* %244, %ast_AstNode* %245)
	store %ast_AstNode* %246, %ast_AstNode** %rhs
	br label %L.82
L.82:
	br label %L.80
L.80:
	br label %L.72
L.74:
	call void @lex_Error(i8 43)
	br label %L.72
L.72:
	%247 = load %ast_AstNode*, %ast_AstNode** %tree
	%248 = load %ast_AstNode*, %ast_AstNode** %rhs
	%249 = call %ast_AstNode* @ast_Child(%ast_AstNode* %247, %ast_AstNode* %248)
	store %ast_AstNode* %249, %ast_AstNode** %tree
	%250 = load i16, i16* %nr
	%251 = add i16 %250, 1
	store i16 %251, i16* %nr
	br label %L.60
L.60:
	br label %L.52
L.52:
	br label %L.44
L.44:
	br label %L.32
L.32:
	%252 = load i8, i8* @lex_Token
	store i8 %252, i8* %tok
	%253 = load i8, i8* %tok
	%254 = icmp ne i8 %253, 5
	br i1 %254, label %L.19, label %L.84
L.84:
	%255 = call i8 @lex_Next()
	store i8 %255, i8* %tok
	br label %L.18
L.19:
	%256 = load i16, i16* %nl
	%257 = load i16, i16* %nr
	%258 = icmp ne i16 %256, %257
	br i1 %258, label %L.86, label %L.85
L.86:
	%259 = load i16, i16* %nl
	%260 = load i16, i16* %nr
	%261 = icmp ult i16 %259, %260
	br i1 %261, label %L.88, label %L.89
L.88:
	call void @lex_Error(i8 45)
	br label %L.87
L.89:
	call void @lex_Error(i8 46)
	br label %L.87
L.87:
	br label %L.85
L.85:
	br label %L.11
L.13:
	call void @lex_Error(i8 40)
	br label %L.11
L.11:
	%262 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %262, %ast_AstNode** %rv.0
	br label %return
return:
	%263 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %263
}
define internal %ast_AstNode* @stmt_AssignOrCall(%symb_SymbNode* %s$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 13
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 6
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = call %symb_SymbNode* @symb_FindPackage(%symb_SymbNode* %4)
	store %symb_SymbNode* %5, %symb_SymbNode** %s
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	br label %L.1
L.1:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = icmp ne %symb_SymbNode* %7, null
	br i1 %8, label %L.4, label %L.5
L.4:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = call %ast_AstNode* @expr_GetLHS(%symb_SymbNode* %9)
	store %ast_AstNode* %10, %ast_AstNode** %tree
	%11 = load %ast_AstNode*, %ast_AstNode** %tree
	%12 = icmp ne %ast_AstNode* %11, null
	br i1 %12, label %L.7, label %L.6
L.7:
	%13 = load %ast_AstNode*, %ast_AstNode** %tree
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 0
	%15 = load i8, i8* %14
	%16 = zext i8 %15 to i32
	switch i32 %16, label %L.8 [
		i32 18, label %L.10
		i32 19, label %L.10
		i32 20, label %L.10
		i32 21, label %L.10
		i32 1, label %L.10
	]
L.10:
	br label %L.9
L.8:
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = call %ast_AstNode* @stmt_Assign(%ast_AstNode* %17)
	store %ast_AstNode* %18, %ast_AstNode** %tree
	br label %L.9
L.9:
	br label %L.6
L.6:
	br label %L.3
L.5:
	%19 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %19)
	%20 = bitcast [3 x i8]* @stmt_skiplist to [0 x i8]*
	%21 = call i8 @lex_Skip([0 x i8]* %20)
	store i8 %21, i8* %tok
	br label %L.3
L.3:
	%22 = call i8 @lex_Expect(i8 4)
	store i8 %22, i8* %tok
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %23, %ast_AstNode** %rv.0
	br label %return
return:
	%24 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %24
}
define internal %ast_AstNode* @stmt_Return() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%rval = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	store %symb_SymbNode* null, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%3 = getelementptr %symb_SymbNode, %symb_SymbNode* %2, i32 0, i32 4
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	br label %L.1
L.3:
	call void @lex_Error(i8 59)
	br label %L.1
L.1:
	%5 = call %ast_AstNode* @ast_New(i8 102, %type_TypeNode* null)
	store %ast_AstNode* %5, %ast_AstNode** %tree
	%6 = load i8, i8* @lex_Token
	store i8 %6, i8* %tok
	%7 = load %symb_SymbNode*, %symb_SymbNode** @symb_curproc
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 16
	%9 = load i8, i8* %8
	%10 = icmp ne i8 %9, 0
	%11 = xor i1 %10, true
	br i1 %11, label %L.5, label %L.4
L.5:
	br label %L.6
L.6:
	%12 = load i8, i8* %tok
	%13 = icmp eq i8 %12, 4
	br i1 %13, label %L.7, label %L.8
L.8:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %s
	%15 = icmp ne %symb_SymbNode* %14, null
	br i1 %15, label %L.10, label %L.11
L.10:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 1
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	store %type_TypeNode* %18, %type_TypeNode** %t
	br label %L.9
L.11:
	store %type_TypeNode* null, %type_TypeNode** %t
	br label %L.9
L.9:
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %19)
	store %ast_AstNode* %20, %ast_AstNode** %rval
	%21 = load %ast_AstNode*, %ast_AstNode** %rval
	%22 = icmp ne %ast_AstNode* %21, null
	br i1 %22, label %L.13, label %L.12
L.13:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = icmp ne %symb_SymbNode* %23, null
	br i1 %24, label %L.15, label %L.16
L.15:
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = icmp ne %type_TypeNode* %25, null
	br i1 %26, label %L.18, label %L.17
L.18:
	%27 = load %ast_AstNode*, %ast_AstNode** %rval
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = call %ast_AstNode* @ast_Adjust(%ast_AstNode* %27, %type_TypeNode* %28)
	store %ast_AstNode* %29, %ast_AstNode** %rval
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	%31 = load %ast_AstNode*, %ast_AstNode** %rval
	%32 = call %ast_AstNode* @ast_Child(%ast_AstNode* %30, %ast_AstNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 16
	%35 = load i8, i8* %34
	%36 = icmp eq i8 %35, 5
	br i1 %36, label %L.20, label %L.21
L.20:
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 0
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	%40 = load %ast_AstNode*, %ast_AstNode** %tree
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 8
	store %type_TypeNode* %39, %type_TypeNode** %41
	%42 = load %target_ModelT*, %target_ModelT** @target_Target
	%43 = getelementptr %target_ModelT, %target_ModelT* %42, i32 0, i32 5
	%44 = getelementptr %target_SizeAlign, %target_SizeAlign* %43, i32 0, i32 0
	%45 = load i8, i8* %44
	%46 = zext i8 %45 to i32
	%47 = load %ast_AstNode*, %ast_AstNode** %tree
	%48 = getelementptr %ast_AstNode, %ast_AstNode* %47, i32 0, i32 7
	store i32 %46, i32* %48
	br label %L.19
L.21:
	%49 = load %type_TypeNode*, %type_TypeNode** %t
	%50 = getelementptr %type_TypeNode, %type_TypeNode* %49, i32 0, i32 11
	%51 = load i32, i32* %50
	%52 = load %ast_AstNode*, %ast_AstNode** %tree
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 7
	store i32 %51, i32* %53
	br label %L.19
L.19:
	br label %L.17
L.17:
	br label %L.14
L.16:
	call void @lex_Error(i8 89)
	br label %L.14
L.14:
	br label %L.12
L.12:
	%54 = load %symb_SymbNode*, %symb_SymbNode** %s
	%55 = icmp ne %symb_SymbNode* %54, null
	br i1 %55, label %L.23, label %L.22
L.23:
	%56 = load %symb_SymbNode*, %symb_SymbNode** %s
	%57 = getelementptr %symb_SymbNode, %symb_SymbNode* %56, i32 0, i32 0
	%58 = load %symb_SymbNode*, %symb_SymbNode** %57
	store %symb_SymbNode* %58, %symb_SymbNode** %s
	br label %L.22
L.22:
	%59 = load i8, i8* @lex_Token
	store i8 %59, i8* %tok
	%60 = load i8, i8* %tok
	%61 = icmp ne i8 %60, 5
	br i1 %61, label %L.7, label %L.24
L.24:
	%62 = call i8 @lex_Next()
	store i8 %62, i8* %tok
	br label %L.6
L.7:
	%63 = load %symb_SymbNode*, %symb_SymbNode** %s
	%64 = icmp ne %symb_SymbNode* %63, null
	br i1 %64, label %L.26, label %L.25
L.26:
	call void @lex_Error(i8 88)
	br label %L.25
L.25:
	%65 = load %ast_AstNode*, %ast_AstNode** %tree
	%66 = getelementptr %ast_AstNode, %ast_AstNode* %65, i32 0, i32 2
	%67 = load i16, i16* %66
	%68 = icmp ne i16 %67, 0
	br i1 %68, label %L.28, label %L.27
L.28:
	%69 = load %ast_AstNode*, %ast_AstNode** %tree
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 11
	%71 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %70, i32 0, i32 0
	%72 = load %ast_AstNode*, %ast_AstNode** %71
	%73 = getelementptr %ast_AstNode, %ast_AstNode* %72, i32 0, i32 8
	%74 = load %type_TypeNode*, %type_TypeNode** %73
	%75 = load %ast_AstNode*, %ast_AstNode** %tree
	%76 = getelementptr %ast_AstNode, %ast_AstNode* %75, i32 0, i32 8
	store %type_TypeNode* %74, %type_TypeNode** %76
	%77 = load %ast_AstNode*, %ast_AstNode** %tree
	%78 = getelementptr %ast_AstNode, %ast_AstNode* %77, i32 0, i32 11
	%79 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %78, i32 0, i32 0
	%80 = load %ast_AstNode*, %ast_AstNode** %79
	%81 = getelementptr %ast_AstNode, %ast_AstNode* %80, i32 0, i32 7
	%82 = load i32, i32* %81
	%83 = load %ast_AstNode*, %ast_AstNode** %tree
	%84 = getelementptr %ast_AstNode, %ast_AstNode* %83, i32 0, i32 7
	store i32 %82, i32* %84
	br label %L.27
L.27:
	br label %L.4
L.4:
	%85 = call i8 @lex_Expect(i8 4)
	%86 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %86, %ast_AstNode** %rv.0
	br label %return
return:
	%87 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %87
}
define internal %ast_AstNode* @stmt_Assert() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%0 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%1 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %ctree
	%2 = getelementptr %A.3, %A.3* @feature, i32 0, i32 7
	%3 = load i8, i8* %2
	%4 = icmp ne i8 %3, 0
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %ast_AstNode*, %ast_AstNode** %ctree
	%6 = call %ast_AstNode* @ast_New1(i8 40, %type_TypeNode* null, %ast_AstNode* %5)
	store %ast_AstNode* %6, %ast_AstNode** %ctree
	%7 = load %symb_SymbNode*, %symb_SymbNode** @symb_curfile
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 23
	%9 = getelementptr [0 x i8], [0 x i8]* %8
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = load %symb_SymbNode*, %symb_SymbNode** @symb_curfile
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 23
	%13 = getelementptr [0 x i8], [0 x i8]* %12
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = call i32 @zstr_len([0 x i8]* %14, i32 1024)
	%16 = call %ast_AstNode* @expr_NewString([0 x i8]* %10, i32 %15, i8 1)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 8
	%19 = load %type_TypeNode*, %type_TypeNode** %18
	%20 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %19)
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = call %ast_AstNode* @ast_New1(i8 16, %type_TypeNode* %20, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %tree
	%23 = load %type_TypeNode*, %type_TypeNode** @type_addrtype
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = call %ast_AstNode* @ast_New1(i8 17, %type_TypeNode* %23, %ast_AstNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %tree
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	%27 = call %ast_AstNode* @ast_New1(i8 104, %type_TypeNode* null, %ast_AstNode* %26)
	store %ast_AstNode* %27, %ast_AstNode** %tree
	%28 = load %ast_AstNode*, %ast_AstNode** %tree
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 10
	store i64 0, i64* %29
	%30 = load %ast_AstNode*, %ast_AstNode** %ctree
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = call %ast_AstNode* @ast_New3(i8 99, %type_TypeNode* null, %ast_AstNode* %30, %ast_AstNode* %31, %ast_AstNode* null)
	store %ast_AstNode* %32, %ast_AstNode** %tree
	%33 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %33, %ast_AstNode** %rv.0
	br label %return
L.1:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
return:
	%34 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %34
}
define internal %ast_AstNode* @stmt_If() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%vlo = alloca %ast_AstNode*
	%vhi = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%tok = alloca i8
	%tok2 = alloca i8
	%op = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	store i8 99, i8* %op
	%0 = call %ast_AstNode* @expr_Bool(%type_TypeNode* null)
	store %ast_AstNode* %0, %ast_AstNode** %ctree
	%1 = load %ast_AstNode*, %ast_AstNode** %ctree
	%2 = icmp ne %ast_AstNode* %1, null
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load %ast_AstNode*, %ast_AstNode** %ctree
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 0
	%5 = load i8, i8* %4
	%6 = icmp eq i8 %5, 6
	br i1 %6, label %L.4, label %L.3
L.4:
	%7 = load %ast_AstNode*, %ast_AstNode** %ctree
	%8 = call %ast_AstNode* @stmt_CCIfTail(%ast_AstNode* %7, i8 2)
	store %ast_AstNode* %8, %ast_AstNode** %rv.0
	br label %return
L.3:
	%9 = load %ast_AstNode*, %ast_AstNode** %ctree
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 8
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	store %type_TypeNode* %11, %type_TypeNode** %t
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%14 = call i8 @type_Compat(%type_TypeNode* %12, %type_TypeNode* %13)
	%15 = icmp ne i8 %14, 0
	br i1 %15, label %L.6, label %L.7
L.6:
	%16 = load %ast_AstNode*, %ast_AstNode** %ctree
	%17 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %16)
	store %ast_AstNode* %17, %ast_AstNode** %ctree
	br label %L.5
L.7:
	store i8 100, i8* %op
	br label %L.5
L.5:
	%18 = load i8, i8* %op
	%19 = call %ast_AstNode* @ast_New(i8 %18, %type_TypeNode* null)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = load %ast_AstNode*, %ast_AstNode** %ctree
	%22 = call %ast_AstNode* @ast_Child(%ast_AstNode* %20, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %tree
	br label %L.1
L.1:
	%23 = bitcast [3 x i8]* @stmt_isthenlist to [0 x i8]*
	%24 = call i8 @lex_Keyword([0 x i8]* %23)
	store i8 %24, i8* %tok
	%25 = load i8, i8* %tok
	%26 = zext i8 %25 to i32
	switch i32 %26, label %L.8 [
		i32 67, label %L.10
		i32 64, label %L.11
	]
L.10:
	br label %L.12
L.12:
	%27 = call %ast_AstNode* @ast_New(i8 101, %type_TypeNode* null)
	store %ast_AstNode* %27, %ast_AstNode** %ctree
	br label %L.14
L.14:
	%28 = call i8 @lex_Next()
	store i8 %28, i8* %tok
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %29)
	store %ast_AstNode* %30, %ast_AstNode** %vlo
	%31 = load %ast_AstNode*, %ast_AstNode** %vlo
	%32 = icmp ne %ast_AstNode* %31, null
	br i1 %32, label %L.16, label %L.17
L.16:
	%33 = load %ast_AstNode*, %ast_AstNode** %vlo
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 0
	%35 = load i8, i8* %34
	%36 = icmp ne i8 %35, 6
	br label %L.17
L.17:
	%37 = phi i1 [ false, %L.14 ], [ %36, %L.16 ]
	br i1 %37, label %L.19, label %L.18
L.19:
	call void @lex_Error(i8 75)
	br label %L.18
L.18:
	%38 = load i8, i8* @lex_Token
	store i8 %38, i8* %tok
	%39 = load i8, i8* %tok
	%40 = icmp eq i8 %39, 6
	br i1 %40, label %L.21, label %L.20
L.21:
	%41 = call i8 @lex_Next()
	store i8 %41, i8* %tok
	%42 = load %type_TypeNode*, %type_TypeNode** %t
	%43 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %42)
	store %ast_AstNode* %43, %ast_AstNode** %vhi
	%44 = load %ast_AstNode*, %ast_AstNode** %vhi
	%45 = icmp ne %ast_AstNode* %44, null
	br i1 %45, label %L.23, label %L.22
L.23:
	%46 = load %ast_AstNode*, %ast_AstNode** %vhi
	%47 = getelementptr %ast_AstNode, %ast_AstNode* %46, i32 0, i32 0
	%48 = load i8, i8* %47
	%49 = icmp ne i8 %48, 6
	br i1 %49, label %L.25, label %L.24
L.25:
	call void @lex_Error(i8 75)
	br label %L.24
L.24:
	%50 = load %ast_AstNode*, %ast_AstNode** %vlo
	%51 = icmp ne %ast_AstNode* %50, null
	br i1 %51, label %L.27, label %L.26
L.27:
	%52 = load %ast_AstNode*, %ast_AstNode** %vlo
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 8
	%54 = load %type_TypeNode*, %type_TypeNode** %53
	%55 = load %ast_AstNode*, %ast_AstNode** %vlo
	%56 = load %ast_AstNode*, %ast_AstNode** %vhi
	%57 = call %ast_AstNode* @ast_New2(i8 10, %type_TypeNode* %54, %ast_AstNode* %55, %ast_AstNode* %56)
	store %ast_AstNode* %57, %ast_AstNode** %vlo
	br label %L.26
L.26:
	br label %L.22
L.22:
	br label %L.20
L.20:
	%58 = load %ast_AstNode*, %ast_AstNode** %ctree
	%59 = load %ast_AstNode*, %ast_AstNode** %vlo
	%60 = call %ast_AstNode* @ast_Child(%ast_AstNode* %58, %ast_AstNode* %59)
	store %ast_AstNode* %60, %ast_AstNode** %ctree
	%61 = load i8, i8* @lex_Token
	store i8 %61, i8* %tok
	%62 = load i8, i8* %tok
	%63 = icmp ne i8 %62, 5
	br i1 %63, label %L.15, label %L.28
L.28:
	br label %L.14
L.15:
	%64 = call i8 @lex_Expect(i8 64)
	%65 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %65, %ast_AstNode** %stree
	%66 = load %ast_AstNode*, %ast_AstNode** %ctree
	%67 = load %ast_AstNode*, %ast_AstNode** %stree
	%68 = call %ast_AstNode* @ast_Child(%ast_AstNode* %66, %ast_AstNode* %67)
	store %ast_AstNode* %68, %ast_AstNode** %ctree
	%69 = load %ast_AstNode*, %ast_AstNode** %tree
	%70 = load %ast_AstNode*, %ast_AstNode** %ctree
	%71 = call %ast_AstNode* @ast_Child(%ast_AstNode* %69, %ast_AstNode* %70)
	store %ast_AstNode* %71, %ast_AstNode** %tree
	%72 = bitcast [3 x i8]* @stmt_isthenlist to [0 x i8]*
	%73 = call i8 @lex_Keyword([0 x i8]* %72)
	store i8 %73, i8* %tok
	%74 = load i8, i8* %tok
	%75 = icmp ne i8 %74, 67
	br i1 %75, label %L.13, label %L.29
L.29:
	br label %L.12
L.13:
	br label %L.9
L.11:
	%76 = load i8, i8* %op
	%77 = icmp eq i8 %76, 100
	br i1 %77, label %L.31, label %L.30
L.31:
	call void @lex_Error(i8 50)
	br label %L.30
L.30:
	%78 = call i8 @lex_Next()
	store i8 %78, i8* %tok
	%79 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %79, %ast_AstNode** %stree
	%80 = load %ast_AstNode*, %ast_AstNode** %tree
	%81 = load %ast_AstNode*, %ast_AstNode** %stree
	%82 = call %ast_AstNode* @ast_Child(%ast_AstNode* %80, %ast_AstNode* %81)
	store %ast_AstNode* %82, %ast_AstNode** %tree
	br label %L.9
L.8:
	call void @lex_Error(i8 57)
	br label %L.9
L.9:
	%83 = bitcast [3 x i8]* @stmt_elselist to [0 x i8]*
	%84 = call i8 @lex_Keyword([0 x i8]* %83)
	store i8 %84, i8* %tok
	%85 = load i8, i8* %tok
	%86 = icmp eq i8 %85, 66
	br i1 %86, label %L.33, label %L.32
L.32:
	%87 = load i8, i8* %tok
	%88 = icmp eq i8 %87, 65
	br label %L.33
L.33:
	%89 = phi i1 [ true, %L.9 ], [ %88, %L.32 ]
	br i1 %89, label %L.35, label %L.36
L.35:
	%90 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%91 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %90)
	store %symb_SymbNode* %91, %symb_SymbNode** %s
	%92 = call i8 @lex_Next()
	store i8 %92, i8* %tok2
	%93 = load %symb_SymbNode*, %symb_SymbNode** %s
	%94 = icmp ne %symb_SymbNode* %93, null
	br i1 %94, label %L.38, label %L.37
L.38:
	%95 = load i8, i8* %tok2
	%96 = zext i8 %95 to i32
	switch i32 %96, label %L.39 [
		i32 9, label %L.41
		i32 11, label %L.41
		i32 12, label %L.41
		i32 38, label %L.41
		i32 2, label %L.41
		i32 7, label %L.41
		i32 36, label %L.41
	]
L.41:
	store i8 46, i8* %tok
	br label %L.40
L.39:
	br label %L.40
L.40:
	br label %L.37
L.37:
	%97 = load i8, i8* %tok
	%98 = icmp eq i8 %97, 46
	br i1 %98, label %L.43, label %L.44
L.43:
	%99 = load %symb_SymbNode*, %symb_SymbNode** %s
	%100 = call %ast_AstNode* @stmt_AssignOrCall(%symb_SymbNode* %99)
	store %ast_AstNode* %100, %ast_AstNode** %stree
	%101 = load %ast_AstNode*, %ast_AstNode** %tree
	%102 = call %ast_AstNode* @ast_Child(%ast_AstNode* %101, %ast_AstNode* null)
	store %ast_AstNode* %102, %ast_AstNode** %tree
	%103 = load %ast_AstNode*, %ast_AstNode** %stree
	%104 = icmp ne %ast_AstNode* %103, null
	br i1 %104, label %L.46, label %L.45
L.46:
	%105 = load %ast_AstNode*, %ast_AstNode** %tree
	%106 = load %ast_AstNode*, %ast_AstNode** %stree
	%107 = call %ast_AstNode* @ast_New2(i8 96, %type_TypeNode* null, %ast_AstNode* %105, %ast_AstNode* %106)
	store %ast_AstNode* %107, %ast_AstNode** %tree
	br label %L.45
L.45:
	br label %L.42
L.44:
	%108 = load i8, i8* %tok
	%109 = icmp eq i8 %108, 65
	br i1 %109, label %L.48, label %L.49
L.48:
	%110 = call %ast_AstNode* @stmt_If()
	store %ast_AstNode* %110, %ast_AstNode** %stree
	br label %L.47
L.49:
	%111 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %111, %ast_AstNode** %stree
	br label %L.47
L.47:
	%112 = load %ast_AstNode*, %ast_AstNode** %tree
	%113 = load %ast_AstNode*, %ast_AstNode** %stree
	%114 = call %ast_AstNode* @ast_Child(%ast_AstNode* %112, %ast_AstNode* %113)
	store %ast_AstNode* %114, %ast_AstNode** %tree
	br label %L.42
L.42:
	br label %L.34
L.36:
	%115 = load %ast_AstNode*, %ast_AstNode** %tree
	%116 = call %ast_AstNode* @ast_Child(%ast_AstNode* %115, %ast_AstNode* null)
	store %ast_AstNode* %116, %ast_AstNode** %tree
	br label %L.34
L.34:
	%117 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %117, %ast_AstNode** %rv.0
	br label %return
return:
	%118 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %118
}
define internal %ast_AstNode* @stmt_For() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%exit = alloca %ast_AstNode*
	%init = alloca %ast_AstNode*
	%body = alloca %ast_AstNode*
	%incr = alloca %ast_AstNode*
	%ix = alloca %ast_AstNode*
	%fm = alloca %ast_AstNode*
	%to = alloca %ast_AstNode*
	%by = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	%tok = alloca i8
	%s = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_Find([0 x i8]* %3)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = icmp ne %symb_SymbNode* %5, null
	br i1 %6, label %L.4, label %L.5
L.4:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 13
	%9 = load i8, i8* %8
	%10 = icmp eq i8 %9, 3
	br label %L.5
L.5:
	%11 = phi i1 [ false, %L.2 ], [ %10, %L.4 ]
	br i1 %11, label %L.7, label %L.8
L.7:
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 1
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	store %type_TypeNode* %14, %type_TypeNode** %t
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 1
	%17 = load %type_TypeNode*, %type_TypeNode** %16
	%18 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %17)
	%19 = call %ast_AstNode* @ast_New(i8 12, %type_TypeNode* %18)
	store %ast_AstNode* %19, %ast_AstNode** %ix
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = load %ast_AstNode*, %ast_AstNode** %ix
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 9
	store %symb_SymbNode* %20, %symb_SymbNode** %22
	br label %L.6
L.8:
	%23 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %23)
	%24 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %24, %type_TypeNode** %t
	store %ast_AstNode* null, %ast_AstNode** %ix
	br label %L.6
L.6:
	%25 = call i8 @lex_Next()
	store i8 %25, i8* %tok
	%26 = bitcast [3 x i8]* @stmt_fromlist to [0 x i8]*
	%27 = call i8 @lex_Keyword([0 x i8]* %26)
	store i8 %27, i8* %tok
	%28 = load i8, i8* %tok
	%29 = zext i8 %28 to i32
	switch i32 %29, label %L.9 [
		i32 71, label %L.11
		i32 72, label %L.12
	]
L.11:
	%30 = call i8 @lex_Next()
	store i8 %30, i8* %tok
	%31 = call { %ast_AstNode*, %ast_AstNode* } @expr_GetRange()
	%32 = extractvalue  { %ast_AstNode*, %ast_AstNode* } %31, 0
	%33 = extractvalue  { %ast_AstNode*, %ast_AstNode* } %31, 1
	store %ast_AstNode* %32, %ast_AstNode** %fm
	store %ast_AstNode* %33, %ast_AstNode** %to
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = call %ast_AstNode* @ast_Const(%type_TypeNode* %34, i64 1)
	store %ast_AstNode* %35, %ast_AstNode** %by
	%36 = call i8 @lex_Expect(i8 68)
	br label %L.10
L.12:
	%37 = call i8 @lex_Next()
	store i8 %37, i8* %tok
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %38)
	store %ast_AstNode* %39, %ast_AstNode** %fm
	%40 = call i8 @lex_Expect(i8 73)
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	%42 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %41)
	store %ast_AstNode* %42, %ast_AstNode** %to
	%43 = bitcast [2 x i8]* @stmt_bylist to [0 x i8]*
	%44 = call i8 @lex_Keyword([0 x i8]* %43)
	store i8 %44, i8* %tok
	%45 = load i8, i8* %tok
	%46 = icmp eq i8 %45, 74
	br i1 %46, label %L.14, label %L.15
L.14:
	%47 = call i8 @lex_Next()
	store i8 %47, i8* %tok
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	%49 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %48)
	store %ast_AstNode* %49, %ast_AstNode** %by
	br label %L.13
L.15:
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = call %ast_AstNode* @ast_Const(%type_TypeNode* %50, i64 1)
	store %ast_AstNode* %51, %ast_AstNode** %by
	br label %L.13
L.13:
	%52 = call i8 @lex_Expect(i8 68)
	br label %L.10
L.9:
	call void @lex_Error(i8 80)
	%53 = call i8 @lex_Next()
	store i8 %53, i8* %tok
	br label %L.10
L.10:
	store %ast_AstNode* null, %ast_AstNode** %init
	store %ast_AstNode* null, %ast_AstNode** %exit
	store %ast_AstNode* null, %ast_AstNode** %incr
	%54 = load %ast_AstNode*, %ast_AstNode** %ix
	%55 = icmp ne %ast_AstNode* %54, null
	br i1 %55, label %L.17, label %L.16
L.17:
	%56 = load %ast_AstNode*, %ast_AstNode** %fm
	%57 = icmp ne %ast_AstNode* %56, null
	br i1 %57, label %L.19, label %L.18
L.19:
	%58 = load %ast_AstNode*, %ast_AstNode** %fm
	%59 = load %ast_AstNode*, %ast_AstNode** %ix
	%60 = getelementptr %ast_AstNode, %ast_AstNode* %59, i32 0, i32 8
	%61 = load %type_TypeNode*, %type_TypeNode** %60
	%62 = getelementptr %type_TypeNode, %type_TypeNode* %61, i32 0, i32 0
	%63 = load %type_TypeNode*, %type_TypeNode** %62
	%64 = call %ast_AstNode* @ast_Adjust(%ast_AstNode* %58, %type_TypeNode* %63)
	store %ast_AstNode* %64, %ast_AstNode** %fm
	%65 = load %type_TypeNode*, %type_TypeNode** %t
	%66 = load %ast_AstNode*, %ast_AstNode** %ix
	%67 = load %ast_AstNode*, %ast_AstNode** %fm
	%68 = call %ast_AstNode* @ast_New2(i8 28, %type_TypeNode* %65, %ast_AstNode* %66, %ast_AstNode* %67)
	store %ast_AstNode* %68, %ast_AstNode** %init
	br label %L.18
L.18:
	%69 = load %ast_AstNode*, %ast_AstNode** %to
	%70 = icmp ne %ast_AstNode* %69, null
	br i1 %70, label %L.21, label %L.20
L.21:
	%71 = load %ast_AstNode*, %ast_AstNode** %ix
	%72 = call %ast_AstNode* @expr_Load(%ast_AstNode* %71)
	%73 = load %ast_AstNode*, %ast_AstNode** %to
	%74 = load %type_TypeNode*, %type_TypeNode** %t
	%75 = call %ast_AstNode* @ast_OpBinary(i8 72, %ast_AstNode* %72, %ast_AstNode* %73, %type_TypeNode* %74)
	%76 = call %ast_AstNode* @ast_New1(i8 98, %type_TypeNode* null, %ast_AstNode* %75)
	store %ast_AstNode* %76, %ast_AstNode** %exit
	br label %L.20
L.20:
	%77 = load %type_TypeNode*, %type_TypeNode** %t
	%78 = load %ast_AstNode*, %ast_AstNode** %ix
	%79 = load %ast_AstNode*, %ast_AstNode** %ix
	%80 = call %ast_AstNode* @expr_Load(%ast_AstNode* %79)
	%81 = load %ast_AstNode*, %ast_AstNode** %by
	%82 = load %type_TypeNode*, %type_TypeNode** %t
	%83 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %80, %ast_AstNode* %81, %type_TypeNode* %82)
	%84 = call %ast_AstNode* @ast_New2(i8 28, %type_TypeNode* %77, %ast_AstNode* %78, %ast_AstNode* %83)
	store %ast_AstNode* %84, %ast_AstNode** %incr
	br label %L.16
L.16:
	%85 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %85, %ast_AstNode** %body
	%86 = load %ast_AstNode*, %ast_AstNode** %exit
	%87 = load %ast_AstNode*, %ast_AstNode** %body
	%88 = load %ast_AstNode*, %ast_AstNode** %incr
	%89 = call %ast_AstNode* @ast_New3(i8 96, %type_TypeNode* null, %ast_AstNode* %86, %ast_AstNode* %87, %ast_AstNode* %88)
	store %ast_AstNode* %89, %ast_AstNode** %body
	%90 = load %ast_AstNode*, %ast_AstNode** %body
	%91 = call %ast_AstNode* @ast_New1(i8 97, %type_TypeNode* null, %ast_AstNode* %90)
	store %ast_AstNode* %91, %ast_AstNode** %body
	%92 = load %ast_AstNode*, %ast_AstNode** %init
	%93 = load %ast_AstNode*, %ast_AstNode** %body
	%94 = call %ast_AstNode* @ast_New2(i8 96, %type_TypeNode* null, %ast_AstNode* %92, %ast_AstNode* %93)
	store %ast_AstNode* %94, %ast_AstNode** %tree
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 20, i8 46)
	br label %L.1
L.1:
	%95 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %95, %ast_AstNode** %rv.0
	br label %return
return:
	%96 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %96
}
define internal %ast_AstNode* @stmt_While() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	%0 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%1 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %0)
	store %ast_AstNode* %1, %ast_AstNode** %ctree
	%2 = load %ast_AstNode*, %ast_AstNode** %ctree
	%3 = icmp ne %ast_AstNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %ctree
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%8 = call i8 @type_Compat(%type_TypeNode* %6, %type_TypeNode* %7)
	%9 = icmp ne i8 %8, 0
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %ast_AstNode*, %ast_AstNode** %ctree
	%11 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %10)
	store %ast_AstNode* %11, %ast_AstNode** %ctree
	br label %L.3
L.5:
	call void @lex_Error(i8 50)
	br label %L.3
L.3:
	%12 = load %ast_AstNode*, %ast_AstNode** %ctree
	%13 = call %ast_AstNode* @ast_New1(i8 94, %type_TypeNode* null, %ast_AstNode* %12)
	store %ast_AstNode* %13, %ast_AstNode** %ctree
	%14 = load %ast_AstNode*, %ast_AstNode** %ctree
	%15 = call %ast_AstNode* @ast_New1(i8 98, %type_TypeNode* null, %ast_AstNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %ctree
	br label %L.1
L.1:
	%16 = load i8, i8* @stmt_LoopLevel
	%17 = add i8 %16, 1
	store i8 %17, i8* @stmt_LoopLevel
	%18 = call i8 @lex_Expect(i8 68)
	%19 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %19, %ast_AstNode** %tree
	%20 = load %ast_AstNode*, %ast_AstNode** %ctree
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = call %ast_AstNode* @ast_New2(i8 96, %type_TypeNode* null, %ast_AstNode* %20, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %tree
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = call %ast_AstNode* @ast_New1(i8 97, %type_TypeNode* null, %ast_AstNode* %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	%25 = load i8, i8* @stmt_LoopLevel
	%26 = icmp ugt i8 %25, 0
	br i1 %26, label %L.7, label %L.6
L.7:
	%27 = load i8, i8* @stmt_LoopLevel
	%28 = sub i8 %27, 1
	store i8 %28, i8* @stmt_LoopLevel
	br label %L.6
L.6:
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %29, %ast_AstNode** %rv.0
	br label %return
return:
	%30 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %30
}
define internal %ast_AstNode* @stmt_Do() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	%0 = load i8, i8* @stmt_LoopLevel
	%1 = add i8 %0, 1
	store i8 %1, i8* @stmt_LoopLevel
	%2 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %2, %ast_AstNode** %tree
	%3 = call i8 @lex_Expect(i8 60)
	%4 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%5 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %4)
	store %ast_AstNode* %5, %ast_AstNode** %ctree
	%6 = load %ast_AstNode*, %ast_AstNode** %ctree
	%7 = icmp ne %ast_AstNode* %6, null
	br i1 %7, label %L.2, label %L.1
L.2:
	%8 = load %ast_AstNode*, %ast_AstNode** %ctree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 8
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%12 = call i8 @type_Compat(%type_TypeNode* %10, %type_TypeNode* %11)
	%13 = icmp ne i8 %12, 0
	br i1 %13, label %L.4, label %L.5
L.4:
	%14 = load %ast_AstNode*, %ast_AstNode** %ctree
	%15 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %ctree
	br label %L.3
L.5:
	call void @lex_Error(i8 50)
	br label %L.3
L.3:
	%16 = load %ast_AstNode*, %ast_AstNode** %ctree
	%17 = call %ast_AstNode* @ast_New1(i8 94, %type_TypeNode* null, %ast_AstNode* %16)
	store %ast_AstNode* %17, %ast_AstNode** %ctree
	%18 = load %ast_AstNode*, %ast_AstNode** %ctree
	%19 = call %ast_AstNode* @ast_New1(i8 98, %type_TypeNode* null, %ast_AstNode* %18)
	store %ast_AstNode* %19, %ast_AstNode** %ctree
	br label %L.1
L.1:
	%20 = load %ast_AstNode*, %ast_AstNode** %tree
	%21 = load %ast_AstNode*, %ast_AstNode** %ctree
	%22 = call %ast_AstNode* @ast_New2(i8 96, %type_TypeNode* null, %ast_AstNode* %20, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %tree
	%23 = load %ast_AstNode*, %ast_AstNode** %tree
	%24 = call %ast_AstNode* @ast_New1(i8 97, %type_TypeNode* null, %ast_AstNode* %23)
	store %ast_AstNode* %24, %ast_AstNode** %tree
	%25 = load i8, i8* @stmt_LoopLevel
	%26 = icmp ugt i8 %25, 0
	br i1 %26, label %L.7, label %L.6
L.7:
	%27 = load i8, i8* @stmt_LoopLevel
	%28 = sub i8 %27, 1
	store i8 %28, i8* @stmt_LoopLevel
	br label %L.6
L.6:
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %29, %ast_AstNode** %rv.0
	br label %return
return:
	%30 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %30
}
define internal %ast_AstNode* @stmt_Loop() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* @stmt_LoopLevel
	%2 = add i8 %1, 1
	store i8 %2, i8* @stmt_LoopLevel
	%3 = call %ast_AstNode* @ast_New(i8 97, %type_TypeNode* null)
	store %ast_AstNode* %3, %ast_AstNode** %tree
	%4 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %4, %ast_AstNode** %stree
	%5 = load %ast_AstNode*, %ast_AstNode** %tree
	%6 = load %ast_AstNode*, %ast_AstNode** %stree
	%7 = call %ast_AstNode* @ast_Child(%ast_AstNode* %5, %ast_AstNode* %6)
	store %ast_AstNode* %7, %ast_AstNode** %tree
	%8 = load i8, i8* @stmt_LoopLevel
	%9 = icmp ugt i8 %8, 0
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = load i8, i8* @stmt_LoopLevel
	%11 = sub i8 %10, 1
	store i8 %11, i8* @stmt_LoopLevel
	br label %L.1
L.1:
	%12 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %12, %ast_AstNode** %rv.0
	br label %return
return:
	%13 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %13
}
define internal %ast_AstNode* @stmt_Exit() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%wtree = alloca %ast_AstNode*
	%ctree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* @stmt_LoopLevel
	%2 = icmp eq i8 %1, 0
	br i1 %2, label %L.2, label %L.1
L.2:
	call void @lex_Error(i8 60)
	br label %L.1
L.1:
	%3 = call %ast_AstNode* @ast_New(i8 98, %type_TypeNode* null)
	store %ast_AstNode* %3, %ast_AstNode** %tree
	%4 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%5 = call %ast_AstNode* @expr_Bool(%type_TypeNode* %4)
	store %ast_AstNode* %5, %ast_AstNode** %ctree
	%6 = load %ast_AstNode*, %ast_AstNode** %ctree
	%7 = icmp ne %ast_AstNode* %6, null
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %ast_AstNode*, %ast_AstNode** %ctree
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 8
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%12 = call i8 @type_Compat(%type_TypeNode* %10, %type_TypeNode* %11)
	%13 = icmp ne i8 %12, 0
	br i1 %13, label %L.6, label %L.7
L.6:
	%14 = load %ast_AstNode*, %ast_AstNode** %ctree
	%15 = call %ast_AstNode* @ast_ForceBoolean(%ast_AstNode* %14)
	store %ast_AstNode* %15, %ast_AstNode** %ctree
	br label %L.5
L.7:
	call void @lex_Error(i8 50)
	br label %L.5
L.5:
	br label %L.3
L.3:
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = load %ast_AstNode*, %ast_AstNode** %ctree
	%18 = call %ast_AstNode* @ast_Child(%ast_AstNode* %16, %ast_AstNode* %17)
	store %ast_AstNode* %18, %ast_AstNode** %tree
	%19 = bitcast [2 x i8]* @stmt_withlist to [0 x i8]*
	%20 = call i8 @lex_Keyword([0 x i8]* %19)
	store i8 %20, i8* %tok
	%21 = load i8, i8* %tok
	%22 = icmp eq i8 %21, 69
	br i1 %22, label %L.9, label %L.10
L.9:
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	%24 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %24, %ast_AstNode** %wtree
	%25 = load %ast_AstNode*, %ast_AstNode** %tree
	%26 = load %ast_AstNode*, %ast_AstNode** %wtree
	%27 = call %ast_AstNode* @ast_Child(%ast_AstNode* %25, %ast_AstNode* %26)
	br label %L.8
L.10:
	%28 = call i8 @lex_Expect(i8 4)
	br label %L.8
L.8:
	%29 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %29, %ast_AstNode** %rv.0
	br label %return
return:
	%30 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %30
}
@S.677 = private unnamed_addr constant [32 x i8] c"Fix cross package forward proc\0A\00"
define internal %ast_AstNode* @stmt_Alias() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	%ns = alloca %symb_SymbNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	br label %L.1
L.1:
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %3)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = icmp ne %symb_SymbNode* %5, null
	br i1 %6, label %L.7, label %L.8
L.7:
	br label %L.9
L.9:
	%7 = call i8 @lex_Next()
	store i8 %7, i8* %tok
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = icmp eq %symb_SymbNode* %8, null
	br i1 %9, label %L.15, label %L.14
L.14:
	%10 = load i8, i8* %tok
	%11 = icmp ne i8 %10, 2
	br label %L.15
L.15:
	%12 = phi i1 [ true, %L.9 ], [ %11, %L.14 ]
	br i1 %12, label %L.13, label %L.12
L.12:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = getelementptr %symb_SymbNode, %symb_SymbNode* %13, i32 0, i32 13
	%15 = load i8, i8* %14
	%16 = icmp ne i8 %15, 6
	br label %L.13
L.13:
	%17 = phi i1 [ true, %L.15 ], [ %16, %L.12 ]
	br i1 %17, label %L.10, label %L.11
L.11:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = load i8, i8* %tok
	%20 = icmp eq i8 %19, 46
	br i1 %20, label %L.17, label %L.18
L.17:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 5
	%23 = load %symb_SymbNode*, %symb_SymbNode** %22
	%24 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%25 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %23, [0 x i8]* %24)
	store %symb_SymbNode* %25, %symb_SymbNode** %s
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = icmp eq %symb_SymbNode* %26, null
	br i1 %27, label %L.20, label %L.19
L.20:
	%28 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %28)
	br label %L.19
L.19:
	br label %L.16
L.18:
	call void @lex_Error(i8 21)
	br label %L.16
L.16:
	br label %L.9
L.10:
	br label %L.6
L.8:
	%29 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %29)
	%30 = call i8 @lex_Next()
	store i8 %30, i8* %tok
	br label %L.6
L.6:
	%31 = bitcast [2 x i8]* @stmt_aslist to [0 x i8]*
	%32 = call i8 @lex_Keyword([0 x i8]* %31)
	store i8 %32, i8* %tok
	%33 = load i8, i8* %tok
	%34 = icmp eq i8 %33, 70
	br i1 %34, label %L.22, label %L.23
L.22:
	%35 = call i8 @lex_Next()
	store i8 %35, i8* %tok
	%36 = load i8, i8* %tok
	%37 = icmp eq i8 %36, 46
	br i1 %37, label %L.25, label %L.26
L.25:
	%38 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%39 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %38)
	store %symb_SymbNode* %39, %symb_SymbNode** %ns
	%40 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%41 = icmp eq %symb_SymbNode* %40, null
	br i1 %41, label %L.28, label %L.29
L.28:
	%42 = load %symb_SymbNode*, %symb_SymbNode** %s
	%43 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%44 = call %symb_SymbNode* @symb_Clone(%symb_SymbNode* %42, [0 x i8]* %43)
	store %symb_SymbNode* %44, %symb_SymbNode** %s
	%45 = call i8 @lex_Next()
	store i8 %45, i8* %tok
	br label %L.27
L.29:
	%46 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 13
	%48 = load i8, i8* %47
	%49 = icmp eq i8 %48, 6
	br i1 %49, label %L.31, label %L.32
L.31:
	%50 = call i8 @lex_Next()
	store i8 %50, i8* %tok
	%51 = load i8, i8* %tok
	%52 = icmp eq i8 %51, 2
	br i1 %52, label %L.34, label %L.35
L.34:
	%53 = call i8 @lex_Next()
	store i8 %53, i8* %tok
	%54 = load i8, i8* %tok
	%55 = icmp eq i8 %54, 46
	br i1 %55, label %L.37, label %L.38
L.37:
	%56 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%57 = getelementptr %symb_SymbNode, %symb_SymbNode* %56, i32 0, i32 5
	%58 = load %symb_SymbNode*, %symb_SymbNode** %57
	%59 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%60 = call %symb_SymbNode* @symb_FindLocal(%symb_SymbNode* %58, [0 x i8]* %59)
	store %symb_SymbNode* %60, %symb_SymbNode** %ns
	%61 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%62 = icmp ne %symb_SymbNode* %61, null
	br i1 %62, label %L.40, label %L.41
L.40:
	%63 = load %symb_SymbNode*, %symb_SymbNode** %s
	%64 = getelementptr %symb_SymbNode, %symb_SymbNode* %63, i32 0, i32 13
	%65 = load i8, i8* %64
	%66 = icmp eq i8 %65, 2
	br i1 %66, label %L.42, label %L.43
L.42:
	%67 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%68 = getelementptr %symb_SymbNode, %symb_SymbNode* %67, i32 0, i32 13
	%69 = load i8, i8* %68
	%70 = icmp eq i8 %69, 2
	br label %L.43
L.43:
	%71 = phi i1 [ false, %L.40 ], [ %70, %L.42 ]
	br i1 %71, label %L.45, label %L.46
L.45:
	%72 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%73 = load %symb_SymbNode*, %symb_SymbNode** %s
	%74 = getelementptr %symb_SymbNode, %symb_SymbNode* %73, i32 0, i32 1
	%75 = load %type_TypeNode*, %type_TypeNode** %74
	call void @type_FwdFix(%symb_SymbNode* %72, %type_TypeNode* %75)
	br label %L.44
L.46:
	%76 = load %symb_SymbNode*, %symb_SymbNode** %s
	%77 = getelementptr %symb_SymbNode, %symb_SymbNode* %76, i32 0, i32 13
	%78 = load i8, i8* %77
	%79 = icmp eq i8 %78, 5
	br i1 %79, label %L.49, label %L.50
L.49:
	%80 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%81 = getelementptr %symb_SymbNode, %symb_SymbNode* %80, i32 0, i32 13
	%82 = load i8, i8* %81
	%83 = icmp eq i8 %82, 5
	br label %L.50
L.50:
	%84 = phi i1 [ false, %L.46 ], [ %83, %L.49 ]
	br i1 %84, label %L.47, label %L.48
L.47:
	%85 = load %symb_SymbNode*, %symb_SymbNode** %ns
	%86 = getelementptr %symb_SymbNode, %symb_SymbNode* %85, i32 0, i32 15
	%87 = load i8, i8* %86
	%88 = icmp ne i8 %87, 0
	br label %L.48
L.48:
	%89 = phi i1 [ false, %L.50 ], [ %88, %L.47 ]
	br i1 %89, label %L.52, label %L.53
L.52:
	%90 = getelementptr [32 x i8], [32 x i8]* @S.677
	%91 = bitcast [32 x i8]* %90 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %91)
	%92 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @symb_DumpS(%symb_SymbNode* %92)
	%93 = load %symb_SymbNode*, %symb_SymbNode** %ns
	call void @symb_DumpS(%symb_SymbNode* %93)
	br label %L.51
L.53:
	call void @lex_Error(i8 29)
	br label %L.51
L.51:
	br label %L.44
L.44:
	br label %L.39
L.41:
	%94 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 22, [0 x i8]* %94)
	br label %L.39
L.39:
	%95 = call i8 @lex_Next()
	store i8 %95, i8* %tok
	br label %L.36
L.38:
	call void @lex_Error(i8 21)
	br label %L.36
L.36:
	br label %L.33
L.35:
	%96 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %96)
	br label %L.33
L.33:
	br label %L.30
L.32:
	%97 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%98 = call %symb_SymbNode* @symb_FindThisLevel([0 x i8]* %97)
	%99 = icmp eq %symb_SymbNode* %98, null
	br i1 %99, label %L.55, label %L.56
L.55:
	%100 = load %symb_SymbNode*, %symb_SymbNode** %s
	%101 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%102 = call %symb_SymbNode* @symb_Clone(%symb_SymbNode* %100, [0 x i8]* %101)
	store %symb_SymbNode* %102, %symb_SymbNode** %s
	br label %L.54
L.56:
	%103 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %103)
	br label %L.54
L.54:
	%104 = call i8 @lex_Next()
	store i8 %104, i8* %tok
	br label %L.30
L.30:
	br label %L.27
L.27:
	br label %L.24
L.26:
	call void @lex_Error(i8 21)
	br label %L.24
L.24:
	br label %L.21
L.23:
	call void @lex_ErrorT(i8 20, i8 70)
	br label %L.21
L.21:
	br label %L.3
L.5:
	call void @lex_Error(i8 21)
	br label %L.3
L.3:
	%105 = load i8, i8* %tok
	%106 = icmp ne i8 %105, 5
	br i1 %106, label %L.2, label %L.57
L.57:
	%107 = call i8 @lex_Next()
	store i8 %107, i8* %tok
	br label %L.1
L.2:
	%108 = call i8 @lex_Expect(i8 4)
	store i8 %108, i8* %tok
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
return:
	%109 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %109
}
define internal %ast_AstNode* @stmt_ErrorStmt() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tok = alloca i8
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 45
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = bitcast [4096 x i8]* @lex_StringBuf to [0 x i8]*
	call void @lex_ErrorS(i8 98, [0 x i8]* %3)
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 20, i8 45)
	br label %L.1
L.1:
	store %ast_AstNode* null, %ast_AstNode** %rv.0
	br label %return
return:
	%5 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %5
}
@stmt_stmtlist = internal constant [16 x i8] [ i8 47, i8 48, i8 49, i8 59, i8 60, i8 62, i8 68, i8 61, i8 63, i8 58, i8 55, i8 51, i8 52, i8 57, i8 56, i8 0 ], align 1
define internal %ast_AstNode* @stmt_Statement() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%tok = alloca i8
	%tok2 = alloca i8
	%s = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = call %ast_AstNode* @ast_New(i8 96, %type_TypeNode* null)
	store %ast_AstNode* %4, %ast_AstNode** %tree
	br label %L.4
L.4:
	%5 = load i8, i8* %tok
	%6 = icmp ne i8 %5, 41
	br i1 %6, label %L.7, label %L.8
L.7:
	%7 = load i8, i8* %tok
	%8 = icmp ne i8 %7, 1
	br label %L.8
L.8:
	%9 = phi i1 [ false, %L.4 ], [ %8, %L.7 ]
	%10 = xor i1 %9, true
	br i1 %10, label %L.5, label %L.6
L.6:
	%11 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %11, %ast_AstNode** %stree
	%12 = load %ast_AstNode*, %ast_AstNode** %stree
	%13 = icmp ne %ast_AstNode* %12, null
	br i1 %13, label %L.10, label %L.9
L.10:
	%14 = load %ast_AstNode*, %ast_AstNode** %tree
	%15 = load %ast_AstNode*, %ast_AstNode** %stree
	%16 = call %ast_AstNode* @ast_Child(%ast_AstNode* %14, %ast_AstNode* %15)
	store %ast_AstNode* %16, %ast_AstNode** %tree
	br label %L.9
L.9:
	%17 = load i8, i8* @lex_Token
	store i8 %17, i8* %tok
	br label %L.4
L.5:
	%18 = call i8 @lex_Expect(i8 41)
	store i8 %18, i8* %tok
	br label %L.1
L.3:
	%19 = bitcast [16 x i8]* @stmt_stmtlist to [0 x i8]*
	%20 = call i8 @lex_Keyword([0 x i8]* %19)
	store i8 %20, i8* %tok
	%21 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%22 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %21)
	store %symb_SymbNode* %22, %symb_SymbNode** %s
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok2
	%24 = load i8, i8* %tok
	%25 = icmp ugt i8 %24, 46
	br i1 %25, label %L.11, label %L.12
L.11:
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = icmp ne %symb_SymbNode* %26, null
	br label %L.12
L.12:
	%28 = phi i1 [ false, %L.3 ], [ %27, %L.11 ]
	br i1 %28, label %L.14, label %L.13
L.14:
	%29 = load i8, i8* %tok2
	%30 = zext i8 %29 to i32
	switch i32 %30, label %L.15 [
		i32 9, label %L.17
		i32 11, label %L.17
		i32 12, label %L.17
		i32 38, label %L.17
		i32 2, label %L.17
		i32 7, label %L.17
		i32 5, label %L.17
		i32 36, label %L.18
	]
L.17:
	store i8 46, i8* %tok
	br label %L.16
L.18:
	%31 = load %symb_SymbNode*, %symb_SymbNode** %s
	%32 = getelementptr %symb_SymbNode, %symb_SymbNode* %31, i32 0, i32 13
	%33 = load i8, i8* %32
	%34 = icmp eq i8 %33, 5
	br i1 %34, label %L.19, label %L.20
L.19:
	%35 = load i8, i8* %tok
	%36 = icmp uge i8 %35, 58
	br i1 %36, label %L.21, label %L.22
L.21:
	%37 = load i8, i8* %tok
	%38 = icmp ule i8 %37, 60
	br label %L.22
L.22:
	%39 = phi i1 [ false, %L.19 ], [ %38, %L.21 ]
	br label %L.20
L.20:
	%40 = phi i1 [ false, %L.18 ], [ %39, %L.22 ]
	br i1 %40, label %L.24, label %L.25
L.24:
	%41 = getelementptr %A.3, %A.3* @feature, i32 0, i32 6
	%42 = load i8, i8* %41
	%43 = icmp ne i8 %42, 0
	br i1 %43, label %L.27, label %L.26
L.27:
	%44 = load i8, i8* %tok
	call void @lex_ErrorT(i8 8, i8 %44)
	br label %L.26
L.26:
	br label %L.23
L.25:
	store i8 46, i8* %tok
	br label %L.23
L.23:
	br label %L.16
L.15:
	br label %L.16
L.16:
	br label %L.13
L.13:
	%45 = load i8, i8* %tok
	%46 = zext i8 %45 to i32
	switch i32 %46, label %L.28 [
		i32 46, label %L.30
		i32 47, label %L.31
		i32 48, label %L.32
		i32 49, label %L.33
		i32 59, label %L.34
		i32 61, label %L.35
		i32 60, label %L.36
		i32 68, label %L.37
		i32 62, label %L.38
		i32 63, label %L.39
		i32 58, label %L.40
		i32 55, label %L.41
		i32 51, label %L.42
		i32 52, label %L.43
		i32 57, label %L.44
		i32 56, label %L.45
		i32 4, label %L.46
	]
L.30:
	%47 = load %symb_SymbNode*, %symb_SymbNode** %s
	%48 = icmp ne %symb_SymbNode* %47, null
	br i1 %48, label %L.48, label %L.49
L.48:
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = call %ast_AstNode* @stmt_AssignOrCall(%symb_SymbNode* %49)
	store %ast_AstNode* %50, %ast_AstNode** %tree
	br label %L.47
L.49:
	%51 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%52 = call i8 @symb_IsAnon([0 x i8]* %51)
	%53 = icmp ne i8 %52, 0
	br i1 %53, label %L.51, label %L.52
L.51:
	%54 = call %ast_AstNode* @stmt_Assign(%ast_AstNode* null)
	store %ast_AstNode* %54, %ast_AstNode** %tree
	br label %L.50
L.52:
	%55 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 37, [0 x i8]* %55)
	%56 = bitcast [16 x i8]* @stmt_stmtlist to [0 x i8]*
	%57 = call i8 @lex_Skip([0 x i8]* %56)
	store i8 %57, i8* %tok
	br label %L.50
L.50:
	br label %L.47
L.47:
	br label %L.29
L.31:
	%58 = call %ast_AstNode* @stmt_TypeDecl()
	store %ast_AstNode* %58, %ast_AstNode** %tree
	br label %L.29
L.32:
	%59 = call %ast_AstNode* @stmt_VarDecl()
	store %ast_AstNode* %59, %ast_AstNode** %tree
	br label %L.29
L.33:
	%60 = call %ast_AstNode* @stmt_ConstDecl()
	store %ast_AstNode* %60, %ast_AstNode** %tree
	br label %L.29
L.34:
	%61 = call %ast_AstNode* @stmt_If()
	store %ast_AstNode* %61, %ast_AstNode** %tree
	br label %L.29
L.35:
	%62 = call %ast_AstNode* @stmt_For()
	store %ast_AstNode* %62, %ast_AstNode** %tree
	br label %L.29
L.36:
	%63 = call %ast_AstNode* @stmt_While()
	store %ast_AstNode* %63, %ast_AstNode** %tree
	br label %L.29
L.37:
	%64 = call %ast_AstNode* @stmt_Do()
	store %ast_AstNode* %64, %ast_AstNode** %tree
	br label %L.29
L.38:
	%65 = call %ast_AstNode* @stmt_Loop()
	store %ast_AstNode* %65, %ast_AstNode** %tree
	br label %L.29
L.39:
	%66 = call %ast_AstNode* @stmt_Exit()
	store %ast_AstNode* %66, %ast_AstNode** %tree
	br label %L.29
L.40:
	%67 = call %ast_AstNode* @stmt_Return()
	store %ast_AstNode* %67, %ast_AstNode** %tree
	br label %L.29
L.41:
	%68 = call %ast_AstNode* @stmt_Asm()
	store %ast_AstNode* %68, %ast_AstNode** %tree
	br label %L.29
L.42:
	%69 = call %ast_AstNode* @stmt_Alias()
	store %ast_AstNode* %69, %ast_AstNode** %tree
	br label %L.29
L.43:
	%70 = call %ast_AstNode* @stmt_ErrorStmt()
	store %ast_AstNode* %70, %ast_AstNode** %tree
	br label %L.29
L.44:
	%71 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%72 = call %symb_SymbNode* @symb_FindTop([0 x i8]* %71)
	store %symb_SymbNode* %72, %symb_SymbNode** %s
	%73 = call i8 @lex_Next()
	store i8 %73, i8* %tok2
	%74 = load %symb_SymbNode*, %symb_SymbNode** %s
	%75 = call %ast_AstNode* @stmt_AssignOrCall(%symb_SymbNode* %74)
	store %ast_AstNode* %75, %ast_AstNode** %tree
	br label %L.29
L.45:
	%76 = call %ast_AstNode* @stmt_Assert()
	store %ast_AstNode* %76, %ast_AstNode** %tree
	br label %L.29
L.46:
	br label %L.29
L.28:
	%77 = load i8, i8* %tok
	call void @lex_ErrorT(i8 38, i8 %77)
	br label %L.29
L.29:
	br label %L.1
L.1:
	%78 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %78, %ast_AstNode** %rv.0
	br label %return
return:
	%79 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %79
}
define internal %ast_AstNode* @stmt_Procedure() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	%t = alloca %type_TypeNode*
	%mt = alloca %type_TypeNode*
	%s = alloca %symb_SymbNode*
	%ms = alloca %symb_SymbNode*
	%fs = alloca %symb_SymbNode*
	%es = alloca %symb_SymbNode*
	%rs = alloca %symb_SymbNode*
	%ft = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	store %type_TypeNode* null, %type_TypeNode** %mt
	store %symb_SymbNode* null, %symb_SymbNode** %ms
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 36
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load i8, i8* %tok
	%5 = icmp eq i8 %4, 46
	br i1 %5, label %L.4, label %L.5
L.4:
	%6 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%7 = call %symb_SymbNode* @symb_New(i8 3, [0 x i8]* %6, i8 2)
	store %symb_SymbNode* %7, %symb_SymbNode** %ms
	%8 = load %symb_SymbNode*, %symb_SymbNode** %ms
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 14
	store i8 0, i8* %9
	%10 = load %type_TypeNode*, %type_TypeNode** @type_unkntype
	store %type_TypeNode* %10, %type_TypeNode** %t
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = load i8, i8* %tok
	%13 = icmp eq i8 %12, 3
	br i1 %13, label %L.7, label %L.8
L.7:
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = load i8, i8* %tok
	%16 = zext i8 %15 to i32
	switch i32 %16, label %L.9 [
		i32 7, label %L.11
		i32 46, label %L.12
	]
L.11:
	%17 = call %type_TypeNode* @type_Ref()
	store %type_TypeNode* %17, %type_TypeNode** %t
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	call void @type_Final(%type_TypeNode* %18)
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = getelementptr %type_TypeNode, %type_TypeNode* %19, i32 0, i32 0
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	store %type_TypeNode* %21, %type_TypeNode** %mt
	br label %L.10
L.12:
	%22 = call %symb_SymbNode* @type_Name()
	store %symb_SymbNode* %22, %symb_SymbNode** %s
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = icmp ne %symb_SymbNode* %24, null
	br i1 %25, label %L.14, label %L.15
L.14:
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 1
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	store %type_TypeNode* %28, %type_TypeNode** %t
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	store %type_TypeNode* %29, %type_TypeNode** %mt
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	%31 = icmp ne %type_TypeNode* %30, null
	br i1 %31, label %L.16, label %L.17
L.16:
	%32 = load %type_TypeNode*, %type_TypeNode** %t
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 16
	%34 = load i8, i8* %33
	%35 = icmp eq i8 %34, 5
	br label %L.17
L.17:
	%36 = phi i1 [ false, %L.14 ], [ %35, %L.16 ]
	br i1 %36, label %L.19, label %L.18
L.19:
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 0
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	store %type_TypeNode* %39, %type_TypeNode** %mt
	br label %L.18
L.18:
	br label %L.13
L.15:
	call void @lex_Error(i8 29)
	br label %L.13
L.13:
	br label %L.10
L.9:
	call void @lex_ErrorT(i8 20, i8 46)
	br label %L.10
L.10:
	%40 = load %type_TypeNode*, %type_TypeNode** %mt
	%41 = icmp ne %type_TypeNode* %40, null
	br i1 %41, label %L.20, label %L.21
L.20:
	%42 = load %type_TypeNode*, %type_TypeNode** %mt
	%43 = getelementptr %type_TypeNode, %type_TypeNode* %42, i32 0, i32 3
	%44 = load %symb_SymbNode*, %symb_SymbNode** %43
	%45 = icmp eq %symb_SymbNode* %44, null
	br label %L.21
L.21:
	%46 = phi i1 [ false, %L.10 ], [ %45, %L.20 ]
	br i1 %46, label %L.23, label %L.22
L.23:
	call void @lex_Error(i8 51)
	br label %L.22
L.22:
	br label %L.6
L.8:
	call void @lex_ErrorT(i8 20, i8 3)
	br label %L.6
L.6:
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = load %symb_SymbNode*, %symb_SymbNode** %ms
	%49 = getelementptr %symb_SymbNode, %symb_SymbNode* %48, i32 0, i32 1
	store %type_TypeNode* %47, %type_TypeNode** %49
	br label %L.3
L.5:
	call void @lex_ErrorT(i8 20, i8 46)
	br label %L.3
L.3:
	%50 = call i8 @lex_Expect(i8 37)
	store i8 %50, i8* %tok
	br label %L.1
L.1:
	%51 = load i8, i8* %tok
	%52 = icmp eq i8 %51, 46
	br i1 %52, label %L.25, label %L.26
L.25:
	%53 = load %type_TypeNode*, %type_TypeNode** %mt
	%54 = icmp ne %type_TypeNode* %53, null
	br i1 %54, label %L.28, label %L.29
L.28:
	%55 = load %type_TypeNode*, %type_TypeNode** %mt
	%56 = getelementptr %type_TypeNode, %type_TypeNode* %55, i32 0, i32 5
	%57 = load %symb_SymbNode*, %symb_SymbNode** %56
	%58 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%59 = call %symb_SymbNode* @symb_FindMethod(%symb_SymbNode* %57, [0 x i8]* %58)
	store %symb_SymbNode* %59, %symb_SymbNode** %s
	%60 = load %symb_SymbNode*, %symb_SymbNode** %s
	%61 = icmp ne %symb_SymbNode* %60, null
	br i1 %61, label %L.31, label %L.32
L.31:
	%62 = load %symb_SymbNode*, %symb_SymbNode** %s
	%63 = getelementptr %symb_SymbNode, %symb_SymbNode* %62, i32 0, i32 15
	%64 = load i8, i8* %63
	%65 = icmp ne i8 %64, 0
	%66 = xor i1 %65, true
	br i1 %66, label %L.34, label %L.33
L.34:
	%67 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %67)
	br label %L.33
L.33:
	br label %L.30
L.32:
	%68 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%69 = call %symb_SymbNode* @symb_New(i8 5, [0 x i8]* %68, i8 2)
	store %symb_SymbNode* %69, %symb_SymbNode** %s
	%70 = load %symb_SymbNode*, %symb_SymbNode** %s
	%71 = getelementptr %symb_SymbNode, %symb_SymbNode* %70, i32 0, i32 17
	store i8 1, i8* %71
	%72 = load %type_TypeNode*, %type_TypeNode** %mt
	%73 = getelementptr %type_TypeNode, %type_TypeNode* %72, i32 0, i32 5
	%74 = load %symb_SymbNode*, %symb_SymbNode** %73
	%75 = load %symb_SymbNode*, %symb_SymbNode** %s
	%76 = getelementptr %symb_SymbNode, %symb_SymbNode* %75, i32 0, i32 0
	store %symb_SymbNode* %74, %symb_SymbNode** %76
	%77 = load %symb_SymbNode*, %symb_SymbNode** %s
	%78 = load %type_TypeNode*, %type_TypeNode** %mt
	%79 = getelementptr %type_TypeNode, %type_TypeNode* %78, i32 0, i32 5
	store %symb_SymbNode* %77, %symb_SymbNode** %79
	br label %L.30
L.30:
	br label %L.27
L.29:
	%80 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%81 = call %symb_SymbNode* @symb_New(i8 5, [0 x i8]* %80, i8 0)
	store %symb_SymbNode* %81, %symb_SymbNode** %s
	br label %L.27
L.27:
	%82 = call i8 @lex_Next()
	store i8 %82, i8* %tok
	%83 = load %symb_SymbNode*, %symb_SymbNode** %s
	%84 = getelementptr %symb_SymbNode, %symb_SymbNode* %83, i32 0, i32 3
	%85 = load %symb_SymbNode*, %symb_SymbNode** %84
	store %symb_SymbNode* %85, %symb_SymbNode** %fs
	%86 = load %symb_SymbNode*, %symb_SymbNode** %s
	%87 = getelementptr %symb_SymbNode, %symb_SymbNode* %86, i32 0, i32 4
	%88 = load %symb_SymbNode*, %symb_SymbNode** %87
	store %symb_SymbNode* %88, %symb_SymbNode** %ft
	%89 = load %symb_SymbNode*, %symb_SymbNode** %s
	%90 = getelementptr %symb_SymbNode, %symb_SymbNode* %89, i32 0, i32 3
	store %symb_SymbNode* null, %symb_SymbNode** %90
	%91 = load %symb_SymbNode*, %symb_SymbNode** %s
	%92 = load %symb_SymbNode*, %symb_SymbNode** %ms
	call void @type_DefProc(%symb_SymbNode* %91, %symb_SymbNode* %92)
	%93 = load %symb_SymbNode*, %symb_SymbNode** %s
	%94 = getelementptr %symb_SymbNode, %symb_SymbNode* %93, i32 0, i32 15
	%95 = load i8, i8* %94
	%96 = icmp ne i8 %95, 0
	br i1 %96, label %L.36, label %L.35
L.36:
	%97 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%98 = load %symb_SymbNode*, %symb_SymbNode** %s
	%99 = getelementptr %symb_SymbNode, %symb_SymbNode* %98, i32 0, i32 3
	%100 = load %symb_SymbNode*, %symb_SymbNode** %99
	%101 = call i8 @type_SameTypes(%symb_SymbNode* %97, %symb_SymbNode* %100)
	%102 = icmp ne i8 %101, 0
	%103 = xor i1 %102, true
	br i1 %103, label %L.38, label %L.37
L.38:
	%104 = load %symb_SymbNode*, %symb_SymbNode** %s
	%105 = getelementptr %symb_SymbNode, %symb_SymbNode* %104, i32 0, i32 23
	%106 = getelementptr [0 x i8], [0 x i8]* %105
	%107 = bitcast [0 x i8]* %106 to [0 x i8]*
	call void @lex_ErrorI(i8 48, [0 x i8]* %107)
	br label %L.37
L.37:
	%108 = load %symb_SymbNode*, %symb_SymbNode** %ft
	%109 = load %symb_SymbNode*, %symb_SymbNode** %s
	%110 = getelementptr %symb_SymbNode, %symb_SymbNode* %109, i32 0, i32 4
	%111 = load %symb_SymbNode*, %symb_SymbNode** %110
	%112 = call i8 @type_SameTypes(%symb_SymbNode* %108, %symb_SymbNode* %111)
	%113 = icmp ne i8 %112, 0
	%114 = xor i1 %113, true
	br i1 %114, label %L.40, label %L.39
L.40:
	%115 = load %symb_SymbNode*, %symb_SymbNode** %s
	%116 = getelementptr %symb_SymbNode, %symb_SymbNode* %115, i32 0, i32 23
	%117 = getelementptr [0 x i8], [0 x i8]* %116
	%118 = bitcast [0 x i8]* %117 to [0 x i8]*
	call void @lex_ErrorI(i8 49, [0 x i8]* %118)
	br label %L.39
L.39:
	br label %L.35
L.35:
	%119 = load i8, i8* @lex_Token
	store i8 %119, i8* %tok
	%120 = load i8, i8* %tok
	%121 = icmp eq i8 %120, 3
	br i1 %121, label %L.42, label %L.41
L.42:
	%122 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @type_ProcAttributes(%symb_SymbNode* %122)
	%123 = load i8, i8* @lex_Token
	store i8 %123, i8* %tok
	br label %L.41
L.41:
	%124 = load i8, i8* %tok
	%125 = icmp ne i8 %124, 4
	br i1 %125, label %L.44, label %L.45
L.44:
	%126 = load %symb_SymbNode*, %symb_SymbNode** %s
	%127 = getelementptr %symb_SymbNode, %symb_SymbNode* %126, i32 0, i32 15
	store i8 0, i8* %127
	%128 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %128, %symb_SymbNode** @symb_curproc
	%129 = load %symb_SymbNode*, %symb_SymbNode** %s
	%130 = getelementptr %symb_SymbNode, %symb_SymbNode* %129, i32 0, i32 3
	%131 = load %symb_SymbNode*, %symb_SymbNode** %130
	%132 = call %symb_SymbNode* @symb_Push(%symb_SymbNode* %131, %symb_SymbNode* null)
	store %symb_SymbNode* %132, %symb_SymbNode** %es
	%133 = load %symb_SymbNode*, %symb_SymbNode** %s
	%134 = getelementptr %symb_SymbNode, %symb_SymbNode* %133, i32 0, i32 16
	%135 = load i8, i8* %134
	%136 = icmp ne i8 %135, 0
	br i1 %136, label %L.47, label %L.48
L.47:
	%137 = load %symb_SymbNode*, %symb_SymbNode** %s
	%138 = getelementptr %symb_SymbNode, %symb_SymbNode* %137, i32 0, i32 4
	%139 = load %symb_SymbNode*, %symb_SymbNode** %138
	%140 = call %symb_SymbNode* @symb_Append(%symb_SymbNode* %139)
	store %symb_SymbNode* %140, %symb_SymbNode** %rs
	br label %L.46
L.48:
	store %symb_SymbNode* null, %symb_SymbNode** %rs
	br label %L.46
L.46:
	store i8 0, i8* @stmt_LoopLevel
	%141 = call %ast_AstNode* @stmt_Statement()
	store %ast_AstNode* %141, %ast_AstNode** %tree
	%142 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%143 = getelementptr %A.1, %A.1* %142, i32 0, i32 3
	%144 = load i8, i8* %143
	%145 = icmp ne i8 %144, 0
	br i1 %145, label %L.50, label %L.49
L.50:
	call void @symb_Dump(i8 1)
	br label %L.49
L.49:
	call void @symb_Pop()
	%146 = load %symb_SymbNode*, %symb_SymbNode** %es
	%147 = icmp ne %symb_SymbNode* %146, null
	br i1 %147, label %L.52, label %L.51
L.52:
	%148 = load %symb_SymbNode*, %symb_SymbNode** %es
	%149 = getelementptr %symb_SymbNode, %symb_SymbNode* %148, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %149
	br label %L.51
L.51:
	%150 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%151 = icmp ne %symb_SymbNode* %150, null
	br i1 %151, label %L.54, label %L.53
L.54:
	%152 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%153 = getelementptr %symb_SymbNode, %symb_SymbNode* %152, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %153
	br label %L.53
L.53:
	store %symb_SymbNode* null, %symb_SymbNode** @symb_curproc
	%154 = load %symb_SymbNode*, %symb_SymbNode** %s
	%155 = getelementptr %symb_SymbNode, %symb_SymbNode* %154, i32 0, i32 1
	%156 = load %type_TypeNode*, %type_TypeNode** %155
	store %type_TypeNode* %156, %type_TypeNode** %t
	%157 = load %type_TypeNode*, %type_TypeNode** %t
	%158 = load %ast_AstNode*, %ast_AstNode** %tree
	%159 = call %ast_AstNode* @ast_New1(i8 103, %type_TypeNode* %157, %ast_AstNode* %158)
	store %ast_AstNode* %159, %ast_AstNode** %tree
	%160 = load %symb_SymbNode*, %symb_SymbNode** %s
	%161 = load %ast_AstNode*, %ast_AstNode** %tree
	%162 = getelementptr %ast_AstNode, %ast_AstNode* %161, i32 0, i32 9
	store %symb_SymbNode* %160, %symb_SymbNode** %162
	%163 = load %type_TypeNode*, %type_TypeNode** %t
	%164 = icmp ne %type_TypeNode* %163, null
	br i1 %164, label %L.55, label %L.56
L.55:
	%165 = load %type_TypeNode*, %type_TypeNode** %t
	%166 = getelementptr %type_TypeNode, %type_TypeNode* %165, i32 0, i32 16
	%167 = load i8, i8* %166
	%168 = icmp eq i8 %167, 5
	br label %L.56
L.56:
	%169 = phi i1 [ false, %L.53 ], [ %168, %L.55 ]
	br i1 %169, label %L.58, label %L.57
L.58:
	%170 = load %type_TypeNode*, %type_TypeNode** %t
	%171 = getelementptr %type_TypeNode, %type_TypeNode* %170, i32 0, i32 0
	%172 = load %type_TypeNode*, %type_TypeNode** %171
	%173 = load %ast_AstNode*, %ast_AstNode** %tree
	%174 = getelementptr %ast_AstNode, %ast_AstNode* %173, i32 0, i32 8
	store %type_TypeNode* %172, %type_TypeNode** %174
	%175 = load %target_ModelT*, %target_ModelT** @target_Target
	%176 = getelementptr %target_ModelT, %target_ModelT* %175, i32 0, i32 5
	%177 = getelementptr %target_SizeAlign, %target_SizeAlign* %176, i32 0, i32 0
	%178 = load i8, i8* %177
	%179 = zext i8 %178 to i32
	%180 = load %ast_AstNode*, %ast_AstNode** %tree
	%181 = getelementptr %ast_AstNode, %ast_AstNode* %180, i32 0, i32 7
	store i32 %179, i32* %181
	br label %L.57
L.57:
	br label %L.43
L.45:
	%182 = call i8 @lex_Next()
	store i8 %182, i8* %tok
	%183 = load %symb_SymbNode*, %symb_SymbNode** %s
	%184 = getelementptr %symb_SymbNode, %symb_SymbNode* %183, i32 0, i32 14
	%185 = load i8, i8* %184
	%186 = zext i8 %185 to i32
	switch i32 %186, label %L.59 [
		i32 5, label %L.61
		i32 6, label %L.61
	]
L.61:
	%187 = load %symb_SymbNode*, %symb_SymbNode** %s
	%188 = getelementptr %symb_SymbNode, %symb_SymbNode* %187, i32 0, i32 15
	store i8 0, i8* %188
	br label %L.60
L.59:
	%189 = load %symb_SymbNode*, %symb_SymbNode** %s
	%190 = getelementptr %symb_SymbNode, %symb_SymbNode* %189, i32 0, i32 15
	store i8 1, i8* %190
	br label %L.60
L.60:
	br label %L.43
L.43:
	br label %L.24
L.26:
	call void @lex_ErrorT(i8 20, i8 46)
	br label %L.24
L.24:
	%191 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %191, %ast_AstNode** %rv.0
	br label %return
return:
	%192 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %192
}
%stmt_SearchPathEntry = type {%stmt_SearchPathEntry*, [0 x i8]}
@stmt_pathhead = internal global %stmt_SearchPathEntry* zeroinitializer, align 4
@stmt_pathtail = internal global %stmt_SearchPathEntry* zeroinitializer, align 4
define internal %stmt_SearchPathEntry* @stmt_SearchPathAdd([0 x i8]* %newpath$, i8 zeroext %prepend$) nounwind {
L.0:
	%rv.0 = alloca %stmt_SearchPathEntry*
	%newpath = alloca [0 x i8]*
	store [0 x i8]* %newpath$, [0 x i8]** %newpath
	%prepend = alloca i8
	store i8 %prepend$, i8* %prepend
	%np = alloca %stmt_SearchPathEntry*
	%len = alloca i32
	%0 = load [0 x i8]*, [0 x i8]** %newpath
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i32 @zstr_len([0 x i8]* %1, i32 1024)
	store i32 %2, i32* %len
	%3 = load i32, i32* %len
	%4 = add i32 4, %3
	%5 = add i32 %4, 1
	%6 = call [0 x i8]* @malloc(i32 %5)
	%7 = bitcast [0 x i8]* %6 to %stmt_SearchPathEntry*
	store %stmt_SearchPathEntry* %7, %stmt_SearchPathEntry** %np
	%8 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	%9 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %8, i32 0, i32 1
	%10 = getelementptr [0 x i8], [0 x i8]* %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	%12 = load [0 x i8]*, [0 x i8]** %newpath
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	%14 = load i32, i32* %len
	%15 = add i32 %14, 1
	call void @zstr_copy([0 x i8]* %11, [0 x i8]* %13, i32 %15)
	%16 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** @stmt_pathhead
	%17 = icmp eq %stmt_SearchPathEntry* %16, null
	br i1 %17, label %L.2, label %L.3
L.2:
	%18 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	%19 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %18, i32 0, i32 0
	store %stmt_SearchPathEntry* null, %stmt_SearchPathEntry** %19
	%20 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	store %stmt_SearchPathEntry* %20, %stmt_SearchPathEntry** @stmt_pathhead
	%21 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	store %stmt_SearchPathEntry* %21, %stmt_SearchPathEntry** @stmt_pathtail
	br label %L.1
L.3:
	%22 = load i8, i8* %prepend
	%23 = icmp ne i8 %22, 0
	br i1 %23, label %L.5, label %L.6
L.5:
	%24 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** @stmt_pathhead
	%25 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	%26 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %25, i32 0, i32 0
	store %stmt_SearchPathEntry* %24, %stmt_SearchPathEntry** %26
	%27 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	store %stmt_SearchPathEntry* %27, %stmt_SearchPathEntry** @stmt_pathhead
	br label %L.4
L.6:
	%28 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	%29 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %28, i32 0, i32 0
	store %stmt_SearchPathEntry* null, %stmt_SearchPathEntry** %29
	%30 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	%31 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** @stmt_pathtail
	%32 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %31, i32 0, i32 0
	store %stmt_SearchPathEntry* %30, %stmt_SearchPathEntry** %32
	%33 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	store %stmt_SearchPathEntry* %33, %stmt_SearchPathEntry** @stmt_pathtail
	br label %L.4
L.4:
	br label %L.1
L.1:
	%34 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %np
	store %stmt_SearchPathEntry* %34, %stmt_SearchPathEntry** %rv.0
	br label %return
return:
	%35 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %rv.0
	ret %stmt_SearchPathEntry* %35
}
@S.679 = private unnamed_addr constant [14 x i8] c"Search path \22\00"
@S.680 = private unnamed_addr constant [3 x i8] c"\22\0A\00"
define internal void @stmt_SearchPathPrint() nounwind {
L.0:
	%pp = alloca %stmt_SearchPathEntry*
	%0 = getelementptr [14 x i8], [14 x i8]* @S.679
	%1 = bitcast [14 x i8]* %0 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %1)
	%2 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** @stmt_pathhead
	store %stmt_SearchPathEntry* %2, %stmt_SearchPathEntry** %pp
	br label %L.1
L.1:
	%3 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%4 = icmp ne %stmt_SearchPathEntry* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%7 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %6, i32 0, i32 1
	%8 = getelementptr [0 x i8], [0 x i8]* %7
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %9)
	call void @sys_fildes_chr(i32 2, i8 58)
	%10 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%11 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %10, i32 0, i32 0
	%12 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %11
	store %stmt_SearchPathEntry* %12, %stmt_SearchPathEntry** %pp
	br label %L.1
L.2:
	%13 = getelementptr [3 x i8], [3 x i8]* @S.680
	%14 = bitcast [3 x i8]* %13 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %14)
	br label %return
return:
	ret void
}
@S.681 = private unnamed_addr constant [2 x i8] c"/\00"
declare external i32 @open([0 x i8]*, i32, i32)
@S.682 = private unnamed_addr constant [2 x i8] c".\00"
@S.683 = private unnamed_addr constant [13 x i8] c"Open  file \22\00"
@S.684 = private unnamed_addr constant [3 x i8] c"\22\0A\00"
@S.685 = private unnamed_addr constant [5 x i8] c" \5C\0A \00"
define internal zeroext i8 @stmt_FileFind([0 x i8]* %filename$, i8 zeroext %istop$) nounwind {
L.0:
	%rv.0 = alloca i8
	%filename = alloca [0 x i8]*
	store [0 x i8]* %filename$, [0 x i8]** %filename
	%istop = alloca i8
	store i8 %istop$, i8* %istop
	%fd = alloca i32
	%pp = alloca %stmt_SearchPathEntry*
	%fp = alloca [0 x i8]*
	%i = alloca i32
	%pathbuf = alloca [1024 x i8]
	%0 = load i8, i8* %istop
	%1 = icmp ne i8 %0, 0
	%2 = xor i1 %1, true
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** @stmt_pathhead
	store %stmt_SearchPathEntry* %3, %stmt_SearchPathEntry** %pp
	br label %L.4
L.4:
	%4 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%5 = icmp ne %stmt_SearchPathEntry* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.5, label %L.6
L.6:
	%7 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%8 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%9 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %8, i32 0, i32 1
	%10 = getelementptr [0 x i8], [0 x i8]* %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %7, [0 x i8]* %11, i32 1024)
	%12 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%13 = getelementptr [2 x i8], [2 x i8]* @S.681
	%14 = bitcast [2 x i8]* %13 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %12, [0 x i8]* %14, i32 1024)
	%15 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%16 = call i32 @zstr_len([0 x i8]* %15, i32 1024)
	store i32 %16, i32* %i
	%17 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%18 = load [0 x i8]*, [0 x i8]** %filename
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %17, [0 x i8]* %19, i32 1024)
	%20 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%21 = call i32 @open([0 x i8]* %20, i32 0, i32 0)
	store i32 %21, i32* %fd
	%22 = load i32, i32* %fd
	%23 = icmp sge i32 %22, 0
	br i1 %23, label %L.5, label %L.7
L.7:
	%24 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%25 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %24, i32 0, i32 0
	%26 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %25
	store %stmt_SearchPathEntry* %26, %stmt_SearchPathEntry** %pp
	br label %L.4
L.5:
	br label %L.1
L.3:
	%27 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%28 = load [0 x i8]*, [0 x i8]** %filename
	%29 = bitcast [0 x i8]* %28 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %27, [0 x i8]* %29, i32 1024)
	%30 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%31 = call i32 @open([0 x i8]* %30, i32 0, i32 0)
	store i32 %31, i32* %fd
	%32 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%33 = call i32 @zstr_rfind([0 x i8]* %32, i8 47, i32 1024)
	store i32 %33, i32* %i
	%34 = load i32, i32* %i
	%35 = icmp eq i32 %34, 1024
	br i1 %35, label %L.9, label %L.10
L.9:
	%36 = getelementptr [2 x i8], [2 x i8]* @S.682
	%37 = bitcast [2 x i8]* %36 to [0 x i8]*
	%38 = call %stmt_SearchPathEntry* @stmt_SearchPathAdd([0 x i8]* %37, i8 1)
	store %stmt_SearchPathEntry* %38, %stmt_SearchPathEntry** %pp
	store i32 0, i32* %i
	br label %L.8
L.10:
	%39 = load i32, i32* %i
	%40 = getelementptr [1024 x i8], [1024 x i8]* %pathbuf, i32 0, i32 %39
	store i8 0, i8* %40
	%41 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	%42 = call %stmt_SearchPathEntry* @stmt_SearchPathAdd([0 x i8]* %41, i8 1)
	store %stmt_SearchPathEntry* %42, %stmt_SearchPathEntry** %pp
	%43 = load i32, i32* %i
	%44 = add i32 %43, 1
	store i32 %44, i32* %i
	br label %L.8
L.8:
	br label %L.1
L.1:
	%45 = load i32, i32* %fd
	%46 = icmp slt i32 %45, 0
	br i1 %46, label %L.12, label %L.11
L.12:
	store i8 0, i8* %rv.0
	br label %return
L.11:
	%47 = load i32, i32* %i
	%48 = getelementptr [1024 x i8], [1024 x i8]* %pathbuf, i32 0, i32 %47
	%49 = bitcast i8* %48 to [1024 x i8]*
	%50 = getelementptr [1024 x i8], [1024 x i8]* %49
	%51 = bitcast [1024 x i8]* %50 to [0 x i8]*
	%52 = call [0 x i8]* @symb_NewImport([0 x i8]* %51)
	%53 = bitcast [0 x i8]* %52 to [0 x i8]*
	store [0 x i8]* %53, [0 x i8]** %fp
	%54 = getelementptr %A.2, %A.2* @debug, i32 0, i32 2
	%55 = load i8, i8* %54
	%56 = icmp ne i8 %55, 0
	br i1 %56, label %L.14, label %L.13
L.14:
	%57 = getelementptr [13 x i8], [13 x i8]* @S.683
	%58 = bitcast [13 x i8]* %57 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %58)
	%59 = bitcast [1024 x i8]* %pathbuf to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %59)
	%60 = getelementptr [3 x i8], [3 x i8]* @S.684
	%61 = bitcast [3 x i8]* %60 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %61)
	br label %L.13
L.13:
	%62 = getelementptr %A.3, %A.3* @feature, i32 0, i32 2
	%63 = load i8, i8* %62
	%64 = icmp ne i8 %63, 0
	br i1 %64, label %L.16, label %L.15
L.16:
	%65 = getelementptr [5 x i8], [5 x i8]* @S.685
	%66 = bitcast [5 x i8]* %65 to [0 x i8]*
	call void @sys_fildes_str(i32 1, [0 x i8]* %66)
	%67 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%68 = icmp ne %stmt_SearchPathEntry* %67, null
	br i1 %68, label %L.17, label %L.18
L.17:
	%69 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%70 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %69, i32 0, i32 1
	%71 = getelementptr [0 x i8], [0 x i8]* %70, i32 0, i32 0
	%72 = load i8, i8* %71
	%73 = icmp ne i8 %72, 46
	br i1 %73, label %L.20, label %L.19
L.19:
	%74 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%75 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %74, i32 0, i32 1
	%76 = getelementptr [0 x i8], [0 x i8]* %75, i32 0, i32 1
	%77 = load i8, i8* %76
	%78 = icmp ne i8 %77, 0
	br label %L.20
L.20:
	%79 = phi i1 [ true, %L.17 ], [ %78, %L.19 ]
	br label %L.18
L.18:
	%80 = phi i1 [ false, %L.16 ], [ %79, %L.20 ]
	br i1 %80, label %L.22, label %L.21
L.22:
	%81 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%82 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %81, i32 0, i32 1
	%83 = getelementptr [0 x i8], [0 x i8]* %82
	%84 = bitcast [0 x i8]* %83 to [0 x i8]*
	call void @sys_fildes_str(i32 1, [0 x i8]* %84)
	call void @sys_fildes_chr(i32 1, i8 47)
	br label %L.21
L.21:
	%85 = load i32, i32* %i
	%86 = getelementptr [1024 x i8], [1024 x i8]* %pathbuf, i32 0, i32 %85
	%87 = bitcast i8* %86 to [1024 x i8]*
	%88 = getelementptr [1024 x i8], [1024 x i8]* %87
	%89 = bitcast [1024 x i8]* %88 to [0 x i8]*
	call void @sys_fildes_str(i32 1, [0 x i8]* %89)
	br label %L.15
L.15:
	%90 = load [0 x i8]*, [0 x i8]** %fp
	%91 = bitcast [0 x i8]* %90 to [0 x i8]*
	%92 = load %stmt_SearchPathEntry*, %stmt_SearchPathEntry** %pp
	%93 = getelementptr %stmt_SearchPathEntry, %stmt_SearchPathEntry* %92, i32 0, i32 1
	%94 = getelementptr [0 x i8], [0 x i8]* %93
	%95 = bitcast [0 x i8]* %94 to [0 x i8]*
	%96 = load i32, i32* %fd
	call void @lex_FileOpen([0 x i8]* %91, [0 x i8]* %95, i32 %96)
	store i8 1, i8* %rv.0
	br label %return
return:
	%97 = load i8, i8* %rv.0
	ret i8 %97
}
@S.686 = private unnamed_addr constant [5 x i8] c".esl\00"
define internal zeroext i8 @stmt_ImportCheck([0 x i8]* %filename$) nounwind {
L.0:
	%rv.0 = alloca i8
	%filename = alloca [0 x i8]*
	store [0 x i8]* %filename$, [0 x i8]** %filename
	%fullname = alloca [256 x i8]
	%0 = bitcast [256 x i8]* %fullname to [0 x i8]*
	%1 = load [0 x i8]*, [0 x i8]** %filename
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %0, [0 x i8]* %2, i32 256)
	%3 = bitcast [256 x i8]* %fullname to [0 x i8]*
	%4 = getelementptr [5 x i8], [5 x i8]* @S.686
	%5 = bitcast [5 x i8]* %4 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %3, [0 x i8]* %5, i32 256)
	%6 = bitcast [256 x i8]* %fullname to [0 x i8]*
	%7 = call i8 @symb_FindImport([0 x i8]* %6)
	%8 = icmp ne i8 %7, 0
	br i1 %8, label %L.2, label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
L.1:
	%9 = bitcast [256 x i8]* %fullname to [0 x i8]*
	%10 = call i8 @stmt_FileFind([0 x i8]* %9, i8 0)
	%11 = icmp ne i8 %10, 0
	br i1 %11, label %L.4, label %L.5
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.5:
	%12 = load [0 x i8]*, [0 x i8]** %filename
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	call void @lex_ErrorI(i8 76, [0 x i8]* %13)
	store i8 0, i8* %rv.0
	br label %return
L.3:
	br label %return
return:
	%14 = load i8, i8* %rv.0
	ret i8 %14
}
define internal %ast_AstNode* @stmt_ImportSub([0 x i8]* %filename$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%filename = alloca [0 x i8]*
	store [0 x i8]* %filename$, [0 x i8]** %filename
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%tok = alloca i8
	%savetok = alloca i8
	%fs = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load [0 x i8]*, [0 x i8]** %filename
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i8 @stmt_ImportCheck([0 x i8]* %1)
	%3 = icmp ne i8 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load i8, i8* @lex_Token
	store i8 %4, i8* %savetok
	%5 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%6 = getelementptr %lex_FileContext, %lex_FileContext* %5, i32 0, i32 1
	%7 = load [0 x i8]*, [0 x i8]** %6
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	%9 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%10 = getelementptr %lex_FileContext, %lex_FileContext* %9, i32 0, i32 2
	%11 = load [0 x i8]*, [0 x i8]** %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = call %symb_SymbNode* @symb_NewFile([0 x i8]* %8, [0 x i8]* %12)
	store %symb_SymbNode* %13, %symb_SymbNode** %fs
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = call %ast_AstNode* @ast_New(i8 96, %type_TypeNode* null)
	store %ast_AstNode* %15, %ast_AstNode** %tree
	%16 = load %symb_SymbNode*, %symb_SymbNode** @symb_curpack
	%17 = icmp ne %symb_SymbNode* %16, null
	br i1 %17, label %L.4, label %L.5
L.4:
	br label %L.6
L.6:
	%18 = load i8, i8* %tok
	%19 = icmp ne i8 %18, 1
	%20 = xor i1 %19, true
	br i1 %20, label %L.7, label %L.8
L.8:
	%21 = call %ast_AstNode* @stmt_PkgStmt()
	store %ast_AstNode* %21, %ast_AstNode** %stree
	%22 = load %ast_AstNode*, %ast_AstNode** %stree
	%23 = icmp ne %ast_AstNode* %22, null
	br i1 %23, label %L.10, label %L.9
L.10:
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = load %ast_AstNode*, %ast_AstNode** %stree
	%26 = call %ast_AstNode* @ast_Child(%ast_AstNode* %24, %ast_AstNode* %25)
	store %ast_AstNode* %26, %ast_AstNode** %tree
	br label %L.9
L.9:
	%27 = load i8, i8* @lex_Token
	store i8 %27, i8* %tok
	br label %L.6
L.7:
	br label %L.3
L.5:
	br label %L.11
L.11:
	%28 = load i8, i8* %tok
	%29 = icmp ne i8 %28, 1
	%30 = xor i1 %29, true
	br i1 %30, label %L.12, label %L.13
L.13:
	%31 = call %ast_AstNode* @stmt_ProgStmt()
	store %ast_AstNode* %31, %ast_AstNode** %stree
	%32 = load %ast_AstNode*, %ast_AstNode** %stree
	%33 = icmp ne %ast_AstNode* %32, null
	br i1 %33, label %L.15, label %L.14
L.15:
	%34 = load %ast_AstNode*, %ast_AstNode** %tree
	%35 = load %ast_AstNode*, %ast_AstNode** %stree
	%36 = call %ast_AstNode* @ast_Child(%ast_AstNode* %34, %ast_AstNode* %35)
	store %ast_AstNode* %36, %ast_AstNode** %tree
	br label %L.14
L.14:
	%37 = load i8, i8* @lex_Token
	store i8 %37, i8* %tok
	br label %L.11
L.12:
	br label %L.3
L.3:
	%38 = load %ast_AstNode*, %ast_AstNode** %tree
	%39 = call %ast_AstNode* @ast_New1(i8 2, %type_TypeNode* null, %ast_AstNode* %38)
	store %ast_AstNode* %39, %ast_AstNode** %tree
	%40 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%41 = load %ast_AstNode*, %ast_AstNode** %tree
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 9
	store %symb_SymbNode* %40, %symb_SymbNode** %42
	call void @lex_FileClose()
	%43 = load %symb_SymbNode*, %symb_SymbNode** @symb_curfile
	%44 = getelementptr %symb_SymbNode, %symb_SymbNode* %43, i32 0, i32 2
	%45 = load %symb_SymbNode*, %symb_SymbNode** %44
	store %symb_SymbNode* %45, %symb_SymbNode** @symb_curfile
	%46 = load i8, i8* %savetok
	store i8 %46, i8* @lex_Token
	br label %L.1
L.1:
	%47 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %47, %ast_AstNode** %rv.0
	br label %return
return:
	%48 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %48
}
define internal %ast_AstNode* @stmt_Import() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	%s = alloca %symb_SymbNode*
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	store %ast_AstNode* null, %ast_AstNode** %tree
	%1 = load i8, i8* %tok
	%2 = zext i8 %1 to i32
	switch i32 %2, label %L.1 [
		i32 46, label %L.3
		i32 36, label %L.4
	]
L.3:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_New(i8 9, [0 x i8]* %3, i8 2)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = call i8 @lex_Next()
	store i8 %5, i8* %tok
	br label %L.2
L.4:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = call %symb_SymbNode* @expr_ConstString()
	store %symb_SymbNode* %7, %symb_SymbNode** %s
	%8 = call i8 @lex_Expect(i8 37)
	store i8 %8, i8* %tok
	br label %L.2
L.1:
	br label %L.2
L.2:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = icmp ne %symb_SymbNode* %9, null
	br i1 %10, label %L.6, label %L.5
L.6:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 23
	%13 = getelementptr [0 x i8], [0 x i8]* %12
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = call %ast_AstNode* @stmt_ImportSub([0 x i8]* %14)
	store %ast_AstNode* %15, %ast_AstNode** %tree
	br label %L.5
L.5:
	%16 = call i8 @lex_Expect(i8 4)
	store i8 %16, i8* %tok
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %17, %ast_AstNode** %rv.0
	br label %return
return:
	%18 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %18
}
@stmt_packlist = internal constant [10 x i8] [ i8 47, i8 48, i8 49, i8 53, i8 51, i8 54, i8 50, i8 59, i8 52, i8 0 ], align 1
define internal %ast_AstNode* @stmt_PkgStmt() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = bitcast [10 x i8]* @stmt_packlist to [0 x i8]*
	%1 = call i8 @lex_Keyword([0 x i8]* %0)
	store i8 %1, i8* %tok
	%2 = load i8, i8* %tok
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 51, label %L.3
		i32 47, label %L.4
		i32 48, label %L.5
		i32 49, label %L.6
		i32 53, label %L.7
		i32 54, label %L.8
		i32 50, label %L.9
		i32 59, label %L.10
		i32 52, label %L.11
	]
L.3:
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	%5 = call %ast_AstNode* @stmt_Alias()
	store %ast_AstNode* %5, %ast_AstNode** %tree
	br label %L.2
L.4:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = call %ast_AstNode* @stmt_TypeDecl()
	store %ast_AstNode* %7, %ast_AstNode** %tree
	br label %L.2
L.5:
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = call %ast_AstNode* @stmt_VarDecl()
	store %ast_AstNode* %9, %ast_AstNode** %tree
	br label %L.2
L.6:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = call %ast_AstNode* @stmt_ConstDecl()
	store %ast_AstNode* %11, %ast_AstNode** %tree
	br label %L.2
L.7:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = call %ast_AstNode* @stmt_Procedure()
	store %ast_AstNode* %13, %ast_AstNode** %tree
	br label %L.2
L.8:
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = call %ast_AstNode* @stmt_Package()
	store %ast_AstNode* %15, %ast_AstNode** %tree
	br label %L.2
L.9:
	%16 = call i8 @lex_Next()
	store i8 %16, i8* %tok
	%17 = call %ast_AstNode* @stmt_Import()
	store %ast_AstNode* %17, %ast_AstNode** %tree
	br label %L.2
L.10:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = call %ast_AstNode* @stmt_CCIfStmt(i8 1)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.2
L.11:
	%20 = call i8 @lex_Next()
	store i8 %20, i8* %tok
	%21 = call %ast_AstNode* @stmt_ErrorStmt()
	store %ast_AstNode* %21, %ast_AstNode** %tree
	br label %L.2
L.1:
	%22 = load i8, i8* %tok
	%23 = icmp eq i8 %22, 46
	br i1 %23, label %L.13, label %L.14
L.13:
	call void @lex_Error(i8 61)
	%24 = bitcast [3 x i8]* @stmt_skiplist to [0 x i8]*
	%25 = call i8 @lex_Skip([0 x i8]* %24)
	store i8 %25, i8* %tok
	br label %L.12
L.14:
	%26 = load i8, i8* %tok
	%27 = icmp ne i8 %26, 4
	br i1 %27, label %L.16, label %L.15
L.16:
	%28 = load i8, i8* %tok
	call void @lex_ErrorT(i8 38, i8 %28)
	br label %L.15
L.15:
	%29 = call i8 @lex_Next()
	store i8 %29, i8* %tok
	br label %L.12
L.12:
	br label %L.2
L.2:
	%30 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %30, %ast_AstNode** %rv.0
	br label %return
return:
	%31 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %31
}
define internal %ast_AstNode* @stmt_Package() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%tok = alloca i8
	%s = alloca %symb_SymbNode*
	%pkgsave = alloca %symb_SymbNode*
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = load i8, i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8, i8* %tok
	%2 = icmp eq i8 %1, 46
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%4 = call %symb_SymbNode* @symb_FindThisLevel([0 x i8]* %3)
	store %symb_SymbNode* %4, %symb_SymbNode** %s
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = icmp eq %symb_SymbNode* %5, null
	br i1 %6, label %L.4, label %L.5
L.4:
	%7 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	%8 = call %symb_SymbNode* @symb_New(i8 6, [0 x i8]* %7, i8 0)
	store %symb_SymbNode* %8, %symb_SymbNode** %s
	br label %L.3
L.5:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 13
	%11 = load i8, i8* %10
	%12 = icmp ne i8 %11, 6
	br i1 %12, label %L.7, label %L.6
L.7:
	%13 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 23, [0 x i8]* %13)
	br label %L.6
L.6:
	br label %L.3
L.3:
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = load i8, i8* %tok
	%16 = icmp eq i8 %15, 40
	br i1 %16, label %L.9, label %L.8
L.9:
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	%18 = load %symb_SymbNode*, %symb_SymbNode** @symb_curpack
	store %symb_SymbNode* %18, %symb_SymbNode** %pkgsave
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %19, %symb_SymbNode** @symb_curpack
	%20 = call %ast_AstNode* @ast_New(i8 96, %type_TypeNode* null)
	store %ast_AstNode* %20, %ast_AstNode** %tree
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 5
	%23 = load %symb_SymbNode*, %symb_SymbNode** %22
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = call %symb_SymbNode* @symb_Push(%symb_SymbNode* %23, %symb_SymbNode* %24)
	br label %L.10
L.10:
	%26 = load i8, i8* %tok
	%27 = icmp ne i8 %26, 41
	br i1 %27, label %L.13, label %L.14
L.13:
	%28 = load i8, i8* %tok
	%29 = icmp ne i8 %28, 1
	br label %L.14
L.14:
	%30 = phi i1 [ false, %L.10 ], [ %29, %L.13 ]
	%31 = xor i1 %30, true
	br i1 %31, label %L.11, label %L.12
L.12:
	%32 = call %ast_AstNode* @stmt_PkgStmt()
	store %ast_AstNode* %32, %ast_AstNode** %stree
	%33 = load %ast_AstNode*, %ast_AstNode** %stree
	%34 = icmp ne %ast_AstNode* %33, null
	br i1 %34, label %L.16, label %L.15
L.16:
	%35 = load %ast_AstNode*, %ast_AstNode** %tree
	%36 = load %ast_AstNode*, %ast_AstNode** %stree
	%37 = call %ast_AstNode* @ast_Child(%ast_AstNode* %35, %ast_AstNode* %36)
	store %ast_AstNode* %37, %ast_AstNode** %tree
	br label %L.15
L.15:
	%38 = load i8, i8* @lex_Token
	store i8 %38, i8* %tok
	br label %L.10
L.11:
	%39 = load %ast_AstNode*, %ast_AstNode** %tree
	%40 = call %ast_AstNode* @ast_New1(i8 3, %type_TypeNode* null, %ast_AstNode* %39)
	store %ast_AstNode* %40, %ast_AstNode** %tree
	%41 = load %symb_SymbNode*, %symb_SymbNode** %s
	%42 = load %ast_AstNode*, %ast_AstNode** %tree
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 9
	store %symb_SymbNode* %41, %symb_SymbNode** %43
	br label %L.8
L.8:
	%44 = call i8 @lex_Expect(i8 41)
	store i8 %44, i8* %tok
	%45 = call %symb_SymbNode* @symb_Save()
	%46 = load %symb_SymbNode*, %symb_SymbNode** %s
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 5
	store %symb_SymbNode* %45, %symb_SymbNode** %47
	%48 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%49 = getelementptr %A.1, %A.1* %48, i32 0, i32 2
	%50 = load i8, i8* %49
	%51 = icmp ne i8 %50, 0
	br i1 %51, label %L.18, label %L.17
L.18:
	call void @symb_Dump(i8 1)
	br label %L.17
L.17:
	call void @symb_Pop()
	%52 = load %symb_SymbNode*, %symb_SymbNode** %pkgsave
	store %symb_SymbNode* %52, %symb_SymbNode** @symb_curpack
	br label %L.1
L.1:
	%53 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %53, %ast_AstNode** %rv.0
	br label %return
return:
	%54 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %54
}
@stmt_proglist = internal constant [10 x i8] [ i8 50, i8 51, i8 54, i8 47, i8 48, i8 49, i8 53, i8 59, i8 52, i8 0 ], align 1
define internal %ast_AstNode* @stmt_ProgStmt() nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%tok = alloca i8
	store %ast_AstNode* null, %ast_AstNode** %tree
	%0 = bitcast [10 x i8]* @stmt_proglist to [0 x i8]*
	%1 = call i8 @lex_Keyword([0 x i8]* %0)
	store i8 %1, i8* %tok
	%2 = load i8, i8* %tok
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 50, label %L.3
		i32 51, label %L.4
		i32 54, label %L.5
		i32 47, label %L.6
		i32 48, label %L.7
		i32 49, label %L.8
		i32 53, label %L.9
		i32 59, label %L.10
		i32 52, label %L.11
	]
L.3:
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	%5 = call %ast_AstNode* @stmt_Import()
	store %ast_AstNode* %5, %ast_AstNode** %tree
	br label %L.2
L.4:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = call %ast_AstNode* @stmt_Alias()
	store %ast_AstNode* %7, %ast_AstNode** %tree
	br label %L.2
L.5:
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = call %ast_AstNode* @stmt_Package()
	store %ast_AstNode* %9, %ast_AstNode** %tree
	br label %L.2
L.6:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = call %ast_AstNode* @stmt_TypeDecl()
	store %ast_AstNode* %11, %ast_AstNode** %tree
	br label %L.2
L.7:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = call %ast_AstNode* @stmt_VarDecl()
	store %ast_AstNode* %13, %ast_AstNode** %tree
	br label %L.2
L.8:
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = call %ast_AstNode* @stmt_ConstDecl()
	store %ast_AstNode* %15, %ast_AstNode** %tree
	br label %L.2
L.9:
	%16 = call i8 @lex_Next()
	store i8 %16, i8* %tok
	%17 = call %ast_AstNode* @stmt_Procedure()
	store %ast_AstNode* %17, %ast_AstNode** %tree
	br label %L.2
L.10:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = call %ast_AstNode* @stmt_CCIfStmt(i8 0)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.2
L.11:
	%20 = call i8 @lex_Next()
	store i8 %20, i8* %tok
	%21 = call %ast_AstNode* @stmt_ErrorStmt()
	store %ast_AstNode* %21, %ast_AstNode** %tree
	br label %L.2
L.1:
	%22 = load i8, i8* %tok
	%23 = icmp eq i8 %22, 4
	br i1 %23, label %L.13, label %L.14
L.13:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	br label %L.12
L.14:
	%25 = load i8, i8* %tok
	%26 = icmp eq i8 %25, 46
	br i1 %26, label %L.16, label %L.17
L.16:
	%27 = bitcast [256 x i8]* @lex_Ident to [0 x i8]*
	call void @lex_ErrorI(i8 37, [0 x i8]* %27)
	br label %L.15
L.17:
	%28 = load i8, i8* %tok
	call void @lex_ErrorT(i8 38, i8 %28)
	br label %L.15
L.15:
	%29 = bitcast [3 x i8]* @stmt_skiplist to [0 x i8]*
	%30 = call i8 @lex_Skip([0 x i8]* %29)
	store i8 %30, i8* %tok
	br label %L.12
L.12:
	br label %L.2
L.2:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %31, %ast_AstNode** %rv.0
	br label %return
return:
	%32 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %32
}
define internal %ast_AstNode* @stmt_Program([0 x i8]* %file$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%file = alloca [0 x i8]*
	store [0 x i8]* %file$, [0 x i8]** %file
	%tree = alloca %ast_AstNode*
	%stree = alloca %ast_AstNode*
	%tok = alloca i8
	%s = alloca %symb_SymbNode*
	%0 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%1 = getelementptr %lex_FileContext, %lex_FileContext* %0, i32 0, i32 1
	%2 = load [0 x i8]*, [0 x i8]** %1
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	%4 = load %lex_FileContext*, %lex_FileContext** @lex_f
	%5 = getelementptr %lex_FileContext, %lex_FileContext* %4, i32 0, i32 2
	%6 = load [0 x i8]*, [0 x i8]** %5
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	%8 = call %symb_SymbNode* @symb_NewFile([0 x i8]* %3, [0 x i8]* %7)
	store %symb_SymbNode* %8, %symb_SymbNode** %s
	store %symb_SymbNode* null, %symb_SymbNode** @symb_curpack
	%9 = call %ast_AstNode* @ast_New(i8 96, %type_TypeNode* null)
	store %ast_AstNode* %9, %ast_AstNode** %tree
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	br label %L.1
L.1:
	%11 = load i8, i8* %tok
	%12 = icmp ne i8 %11, 1
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = call %ast_AstNode* @stmt_ProgStmt()
	store %ast_AstNode* %14, %ast_AstNode** %stree
	%15 = load %ast_AstNode*, %ast_AstNode** %stree
	%16 = icmp ne %ast_AstNode* %15, null
	br i1 %16, label %L.5, label %L.4
L.5:
	%17 = load %ast_AstNode*, %ast_AstNode** %tree
	%18 = load %ast_AstNode*, %ast_AstNode** %stree
	%19 = call %ast_AstNode* @ast_Child(%ast_AstNode* %17, %ast_AstNode* %18)
	store %ast_AstNode* %19, %ast_AstNode** %tree
	br label %L.4
L.4:
	%20 = load i8, i8* @lex_Token
	store i8 %20, i8* %tok
	br label %L.1
L.2:
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = call %ast_AstNode* @ast_New1(i8 2, %type_TypeNode* null, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %tree
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = load %ast_AstNode*, %ast_AstNode** %tree
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 9
	store %symb_SymbNode* %23, %symb_SymbNode** %25
	%26 = load %ast_AstNode*, %ast_AstNode** %tree
	store %ast_AstNode* %26, %ast_AstNode** %rv.0
	br label %return
return:
	%27 = load %ast_AstNode*, %ast_AstNode** %rv.0
	ret %ast_AstNode* %27
}
@bout_MinBufSize = internal constant i32 32, align 4
%bout_BufIO = type {[0 x i8]*, i16, i16, i32}
define internal %bout_BufIO* @bout_buffer(i32 %fd$, i32 %sz$) nounwind {
L.0:
	%rv.0 = alloca %bout_BufIO*
	%fd = alloca i32
	store i32 %fd$, i32* %fd
	%sz = alloca i32
	store i32 %sz$, i32* %sz
	%bo = alloca %bout_BufIO*
	%0 = load i32, i32* %sz
	%1 = icmp ugt i32 %0, 32
	%2 = select i1 %1, i32 %0, i32 32
	store i32 %2, i32* %sz
	%3 = call [0 x i8]* @malloc(i32 12)
	%4 = bitcast [0 x i8]* %3 to %bout_BufIO*
	store %bout_BufIO* %4, %bout_BufIO** %bo
	%5 = load %bout_BufIO*, %bout_BufIO** %bo
	%6 = icmp ne %bout_BufIO* %5, null
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load i32, i32* %sz
	%8 = call [0 x i8]* @malloc(i32 %7)
	%9 = load %bout_BufIO*, %bout_BufIO** %bo
	%10 = getelementptr %bout_BufIO, %bout_BufIO* %9, i32 0, i32 0
	store [0 x i8]* %8, [0 x i8]** %10
	%11 = load %bout_BufIO*, %bout_BufIO** %bo
	%12 = getelementptr %bout_BufIO, %bout_BufIO* %11, i32 0, i32 0
	%13 = load [0 x i8]*, [0 x i8]** %12
	%14 = icmp ne [0 x i8]* %13, null
	br i1 %14, label %L.4, label %L.3
L.4:
	%15 = load i32, i32* %sz
	%16 = trunc i32 %15 to i16
	%17 = load %bout_BufIO*, %bout_BufIO** %bo
	%18 = getelementptr %bout_BufIO, %bout_BufIO* %17, i32 0, i32 1
	store i16 %16, i16* %18
	%19 = load i32, i32* %sz
	%20 = trunc i32 %19 to i16
	%21 = load %bout_BufIO*, %bout_BufIO** %bo
	%22 = getelementptr %bout_BufIO, %bout_BufIO* %21, i32 0, i32 2
	store i16 %20, i16* %22
	%23 = load i32, i32* %fd
	%24 = load %bout_BufIO*, %bout_BufIO** %bo
	%25 = getelementptr %bout_BufIO, %bout_BufIO* %24, i32 0, i32 3
	store i32 %23, i32* %25
	%26 = load %bout_BufIO*, %bout_BufIO** %bo
	store %bout_BufIO* %26, %bout_BufIO** %rv.0
	br label %return
L.3:
	br label %L.1
L.1:
	store %bout_BufIO* null, %bout_BufIO** %rv.0
	br label %return
return:
	%27 = load %bout_BufIO*, %bout_BufIO** %rv.0
	ret %bout_BufIO* %27
}
define internal void @bout_BufIO_flush(%bout_BufIO* %bo$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = getelementptr %bout_BufIO, %bout_BufIO* %0, i32 0, i32 3
	%2 = load i32, i32* %1
	%3 = load %bout_BufIO*, %bout_BufIO** %bo
	%4 = getelementptr %bout_BufIO, %bout_BufIO* %3, i32 0, i32 0
	%5 = load [0 x i8]*, [0 x i8]** %4
	%6 = load %bout_BufIO*, %bout_BufIO** %bo
	%7 = getelementptr %bout_BufIO, %bout_BufIO* %6, i32 0, i32 1
	%8 = load i16, i16* %7
	%9 = zext i16 %8 to i32
	%10 = load %bout_BufIO*, %bout_BufIO** %bo
	%11 = getelementptr %bout_BufIO, %bout_BufIO* %10, i32 0, i32 2
	%12 = load i16, i16* %11
	%13 = zext i16 %12 to i32
	%14 = sub i32 %9, %13
	%15 = call i32 @write(i32 %2, [0 x i8]* %5, i32 %14)
	%16 = load %bout_BufIO*, %bout_BufIO** %bo
	%17 = getelementptr %bout_BufIO, %bout_BufIO* %16, i32 0, i32 1
	%18 = load i16, i16* %17
	%19 = load %bout_BufIO*, %bout_BufIO** %bo
	%20 = getelementptr %bout_BufIO, %bout_BufIO* %19, i32 0, i32 2
	store i16 %18, i16* %20
	br label %return
return:
	ret void
}
define internal [0 x i8]* @bout_BufIO_need(%bout_BufIO* %bo$, i32 %n$) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%n = alloca i32
	store i32 %n$, i32* %n
	%k = alloca i32
	%0 = load i32, i32* %n
	%1 = load %bout_BufIO*, %bout_BufIO** %bo
	%2 = getelementptr %bout_BufIO, %bout_BufIO* %1, i32 0, i32 2
	%3 = load i16, i16* %2
	%4 = zext i16 %3 to i32
	%5 = icmp ugt i32 %0, %4
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %bout_BufIO*, %bout_BufIO** %bo
	call void @bout_BufIO_flush(%bout_BufIO* %6)
	br label %L.1
L.1:
	%7 = load i32, i32* %n
	%8 = load %bout_BufIO*, %bout_BufIO** %bo
	%9 = getelementptr %bout_BufIO, %bout_BufIO* %8, i32 0, i32 1
	%10 = load i16, i16* %9
	%11 = zext i16 %10 to i32
	%12 = icmp ugt i32 %7, %11
	br i1 %12, label %L.4, label %L.3
L.4:
	store [0 x i8]* null, [0 x i8]** %rv.0
	br label %return
L.3:
	%13 = load %bout_BufIO*, %bout_BufIO** %bo
	%14 = getelementptr %bout_BufIO, %bout_BufIO* %13, i32 0, i32 2
	%15 = load i16, i16* %14
	%16 = zext i16 %15 to i32
	store i32 %16, i32* %k
	%17 = load i32, i32* %k
	%18 = load i32, i32* %n
	%19 = sub i32 %17, %18
	%20 = trunc i32 %19 to i16
	%21 = load %bout_BufIO*, %bout_BufIO** %bo
	%22 = getelementptr %bout_BufIO, %bout_BufIO* %21, i32 0, i32 2
	store i16 %20, i16* %22
	%23 = load %bout_BufIO*, %bout_BufIO** %bo
	%24 = getelementptr %bout_BufIO, %bout_BufIO* %23, i32 0, i32 0
	%25 = load [0 x i8]*, [0 x i8]** %24
	%26 = load %bout_BufIO*, %bout_BufIO** %bo
	%27 = getelementptr %bout_BufIO, %bout_BufIO* %26, i32 0, i32 1
	%28 = load i16, i16* %27
	%29 = zext i16 %28 to i32
	%30 = load i32, i32* %k
	%31 = sub i32 %29, %30
	%32 = getelementptr [0 x i8], [0 x i8]* %25, i32 0, i32 %31
	%33 = bitcast i8* %32 to [0 x i8]*
	%34 = getelementptr [0 x i8], [0 x i8]* %33
	%35 = bitcast [0 x i8]* %34 to [0 x i8]*
	store [0 x i8]* %35, [0 x i8]** %rv.0
	br label %return
return:
	%36 = load [0 x i8]*, [0 x i8]** %rv.0
	ret [0 x i8]* %36
}
define internal void @bout_BufIO_nl(%bout_BufIO* %bo$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%bp = alloca [0 x i8]*
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %0, i32 1)
	store [0 x i8]* %1, [0 x i8]** %bp
	%2 = load [0 x i8]*, [0 x i8]** %bp
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load [0 x i8]*, [0 x i8]** %bp
	%5 = getelementptr [0 x i8], [0 x i8]* %4, i32 0, i32 0
	store i8 10, i8* %5
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_chr(%bout_BufIO* %bo$, i8 zeroext %c$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%c = alloca i8
	store i8 %c$, i8* %c
	%bp = alloca [0 x i8]*
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %0, i32 1)
	store [0 x i8]* %1, [0 x i8]** %bp
	%2 = load [0 x i8]*, [0 x i8]** %bp
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load i8, i8* %c
	%5 = load [0 x i8]*, [0 x i8]** %bp
	%6 = getelementptr [0 x i8], [0 x i8]* %5, i32 0, i32 0
	store i8 %4, i8* %6
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_str(%bout_BufIO* %bo$, [0 x i8]* %s$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%n = alloca i32
	%bp = alloca [0 x i8]*
	%0 = load [0 x i8]*, [0 x i8]** %s
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i32 @zstr_len([0 x i8]* %1, i32 65535)
	store i32 %2, i32* %n
	%3 = load %bout_BufIO*, %bout_BufIO** %bo
	%4 = load i32, i32* %n
	%5 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %3, i32 %4)
	store [0 x i8]* %5, [0 x i8]** %bp
	%6 = load [0 x i8]*, [0 x i8]** %bp
	%7 = icmp eq [0 x i8]* %6, null
	br i1 %7, label %L.2, label %L.3
L.2:
	%8 = load %bout_BufIO*, %bout_BufIO** %bo
	%9 = getelementptr %bout_BufIO, %bout_BufIO* %8, i32 0, i32 3
	%10 = load i32, i32* %9
	%11 = load [0 x i8]*, [0 x i8]** %s
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = load i32, i32* %n
	%14 = call i32 @write(i32 %10, [0 x i8]* %12, i32 %13)
	br label %L.1
L.3:
	%15 = load [0 x i8]*, [0 x i8]** %bp
	%16 = getelementptr [0 x i8], [0 x i8]* %15, i32 0, i32 0
	%17 = bitcast i8* %16 to [0 x i8]*
	%18 = bitcast [0 x i8]* %17 to i8*
	%19 = load [0 x i8]*, [0 x i8]** %s
	%20 = getelementptr [0 x i8], [0 x i8]* %19, i32 0, i32 0
	%21 = bitcast i8* %20 to [0 x i8]*
	%22 = bitcast [0 x i8]* %21 to i8*
	%23 = load i32, i32* %n
	%24 = load i32, i32* %n
	%25 = icmp ult i32 %23, %24
	%26 = select i1 %25, i32 %23, i32 %24
	%27 = mul i32 %26, 1
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %18, i8* %22, i32 %27, i32 1, i1 0)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@bout_hex = internal constant [16 x i8] [ i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70 ], align 1
define internal void @bout_BufIO_hex8(%bout_BufIO* %bo$, i8 zeroext %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i8
	store i8 %in$, i8* %in
	%bp = alloca [0 x i8]*
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %0, i32 2)
	store [0 x i8]* %1, [0 x i8]** %bp
	%2 = load [0 x i8]*, [0 x i8]** %bp
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load i8, i8* %in
	%5 = zext i8 %4 to i32
	%6 = lshr i32 %5, 4
	%7 = and i32 %6, 15
	%8 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %7
	%9 = load i8, i8* %8
	%10 = load [0 x i8]*, [0 x i8]** %bp
	%11 = getelementptr [0 x i8], [0 x i8]* %10, i32 0, i32 0
	store i8 %9, i8* %11
	%12 = load i8, i8* %in
	%13 = and i8 %12, 15
	%14 = zext i8 %13 to i32
	%15 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %14
	%16 = load i8, i8* %15
	%17 = load [0 x i8]*, [0 x i8]** %bp
	%18 = getelementptr [0 x i8], [0 x i8]* %17, i32 0, i32 1
	store i8 %16, i8* %18
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_hex16(%bout_BufIO* %bo$, i16 zeroext %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i16
	store i16 %in$, i16* %in
	%bp = alloca [0 x i8]*
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %0, i32 4)
	store [0 x i8]* %1, [0 x i8]** %bp
	%2 = load [0 x i8]*, [0 x i8]** %bp
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load i16, i16* %in
	%5 = zext i16 %4 to i32
	%6 = lshr i32 %5, 12
	%7 = and i32 %6, 15
	%8 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %7
	%9 = load i8, i8* %8
	%10 = load [0 x i8]*, [0 x i8]** %bp
	%11 = getelementptr [0 x i8], [0 x i8]* %10, i32 0, i32 0
	store i8 %9, i8* %11
	%12 = load i16, i16* %in
	%13 = zext i16 %12 to i32
	%14 = lshr i32 %13, 8
	%15 = and i32 %14, 15
	%16 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %15
	%17 = load i8, i8* %16
	%18 = load [0 x i8]*, [0 x i8]** %bp
	%19 = getelementptr [0 x i8], [0 x i8]* %18, i32 0, i32 1
	store i8 %17, i8* %19
	%20 = load i16, i16* %in
	%21 = zext i16 %20 to i32
	%22 = lshr i32 %21, 4
	%23 = and i32 %22, 15
	%24 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %23
	%25 = load i8, i8* %24
	%26 = load [0 x i8]*, [0 x i8]** %bp
	%27 = getelementptr [0 x i8], [0 x i8]* %26, i32 0, i32 2
	store i8 %25, i8* %27
	%28 = load i16, i16* %in
	%29 = and i16 %28, 15
	%30 = zext i16 %29 to i32
	%31 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %30
	%32 = load i8, i8* %31
	%33 = load [0 x i8]*, [0 x i8]** %bp
	%34 = getelementptr [0 x i8], [0 x i8]* %33, i32 0, i32 3
	store i8 %32, i8* %34
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_hex32(%bout_BufIO* %bo$, i32 %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i32
	store i32 %in$, i32* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %0, i32 8)
	store [0 x i8]* %1, [0 x i8]** %bp
	%2 = load [0 x i8]*, [0 x i8]** %bp
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	store i32 7, i32* %i
	br label %L.3
L.3:
	%4 = load i32, i32* %in
	%5 = and i32 %4, 15
	%6 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %5
	%7 = load i8, i8* %6
	%8 = load [0 x i8]*, [0 x i8]** %bp
	%9 = load i32, i32* %i
	%10 = getelementptr [0 x i8], [0 x i8]* %8, i32 0, i32 %9
	store i8 %7, i8* %10
	%11 = load i32, i32* %i
	%12 = icmp eq i32 %11, 0
	br i1 %12, label %L.4, label %L.5
L.5:
	%13 = load i32, i32* %i
	%14 = sub i32 %13, 1
	store i32 %14, i32* %i
	%15 = load i32, i32* %in
	%16 = lshr i32 %15, 4
	store i32 %16, i32* %in
	br label %L.3
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_hex64(%bout_BufIO* %bo$, i64 %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i64
	store i64 %in$, i64* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %0, i32 16)
	store [0 x i8]* %1, [0 x i8]** %bp
	%2 = load [0 x i8]*, [0 x i8]** %bp
	%3 = icmp ne [0 x i8]* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	store i32 15, i32* %i
	br label %L.3
L.3:
	%4 = load i64, i64* %in
	%5 = trunc i64 %4 to i32
	%6 = and i32 %5, 15
	%7 = getelementptr [16 x i8], [16 x i8]* @bout_hex, i32 0, i32 %6
	%8 = load i8, i8* %7
	%9 = load [0 x i8]*, [0 x i8]** %bp
	%10 = load i32, i32* %i
	%11 = getelementptr [0 x i8], [0 x i8]* %9, i32 0, i32 %10
	store i8 %8, i8* %11
	%12 = load i32, i32* %i
	%13 = icmp eq i32 %12, 0
	br i1 %13, label %L.4, label %L.5
L.5:
	%14 = load i32, i32* %i
	%15 = sub i32 %14, 1
	store i32 %15, i32* %i
	%16 = load i64, i64* %in
	%17 = lshr i64 %16, 4
	store i64 %17, i64* %in
	br label %L.3
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_uint64(%bout_BufIO* %bo$, i64 %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i64
	store i64 %in$, i64* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%n = alloca i32
	%buf = alloca [20 x i8]
	store i32 20, i32* %i
	%0 = load i64, i64* %in
	%1 = icmp eq i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %i
	%3 = sub i32 %2, 1
	store i32 %3, i32* %i
	%4 = load i32, i32* %i
	%5 = getelementptr [20 x i8], [20 x i8]* %buf, i32 0, i32 %4
	store i8 48, i8* %5
	br label %L.1
L.3:
	br label %L.4
L.4:
	%6 = load i64, i64* %in
	%7 = icmp ne i64 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.5, label %L.6
L.6:
	%9 = load i32, i32* %i
	%10 = sub i32 %9, 1
	store i32 %10, i32* %i
	%11 = load i64, i64* %in
	%12 = urem i64 %11, 10
	%13 = add i64 %12, 48
	%14 = trunc i64 %13 to i8
	%15 = load i32, i32* %i
	%16 = getelementptr [20 x i8], [20 x i8]* %buf, i32 0, i32 %15
	store i8 %14, i8* %16
	%17 = load i64, i64* %in
	%18 = udiv i64 %17, 10
	store i64 %18, i64* %in
	br label %L.4
L.5:
	br label %L.1
L.1:
	%19 = load i32, i32* %i
	%20 = sub i32 20, %19
	store i32 %20, i32* %n
	%21 = load %bout_BufIO*, %bout_BufIO** %bo
	%22 = load i32, i32* %n
	%23 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %21, i32 %22)
	store [0 x i8]* %23, [0 x i8]** %bp
	%24 = load [0 x i8]*, [0 x i8]** %bp
	%25 = icmp ne [0 x i8]* %24, null
	br i1 %25, label %L.8, label %L.7
L.8:
	%26 = load [0 x i8]*, [0 x i8]** %bp
	%27 = getelementptr [0 x i8], [0 x i8]* %26, i32 0, i32 0
	%28 = bitcast i8* %27 to [0 x i8]*
	%29 = bitcast [0 x i8]* %28 to i8*
	%30 = load i32, i32* %i
	%31 = getelementptr [20 x i8], [20 x i8]* %buf, i32 0, i32 %30
	%32 = bitcast i8* %31 to [20 x i8]*
	%33 = bitcast [20 x i8]* %32 to [0 x i8]*
	%34 = bitcast [0 x i8]* %33 to i8*
	%35 = load i32, i32* %n
	%36 = load i32, i32* %n
	%37 = icmp ult i32 %35, %36
	%38 = select i1 %37, i32 %35, i32 %36
	%39 = mul i32 %38, 1
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %29, i8* %34, i32 %39, i32 1, i1 0)
	br label %L.7
L.7:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_uint32(%bout_BufIO* %bo$, i32 %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i32
	store i32 %in$, i32* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%n = alloca i32
	%buf = alloca [10 x i8]
	store i32 10, i32* %i
	%0 = load i32, i32* %in
	%1 = icmp eq i32 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32, i32* %i
	%3 = sub i32 %2, 1
	store i32 %3, i32* %i
	%4 = load i32, i32* %i
	%5 = getelementptr [10 x i8], [10 x i8]* %buf, i32 0, i32 %4
	store i8 48, i8* %5
	br label %L.1
L.3:
	br label %L.4
L.4:
	%6 = load i32, i32* %in
	%7 = icmp ne i32 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.5, label %L.6
L.6:
	%9 = load i32, i32* %i
	%10 = sub i32 %9, 1
	store i32 %10, i32* %i
	%11 = load i32, i32* %in
	%12 = urem i32 %11, 10
	%13 = add i32 %12, 48
	%14 = trunc i32 %13 to i8
	%15 = load i32, i32* %i
	%16 = getelementptr [10 x i8], [10 x i8]* %buf, i32 0, i32 %15
	store i8 %14, i8* %16
	%17 = load i32, i32* %in
	%18 = udiv i32 %17, 10
	store i32 %18, i32* %in
	br label %L.4
L.5:
	br label %L.1
L.1:
	%19 = load i32, i32* %i
	%20 = sub i32 10, %19
	store i32 %20, i32* %n
	%21 = load %bout_BufIO*, %bout_BufIO** %bo
	%22 = load i32, i32* %n
	%23 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %21, i32 %22)
	store [0 x i8]* %23, [0 x i8]** %bp
	%24 = load [0 x i8]*, [0 x i8]** %bp
	%25 = icmp ne [0 x i8]* %24, null
	br i1 %25, label %L.8, label %L.7
L.8:
	%26 = load [0 x i8]*, [0 x i8]** %bp
	%27 = getelementptr [0 x i8], [0 x i8]* %26, i32 0, i32 0
	%28 = bitcast i8* %27 to [0 x i8]*
	%29 = bitcast [0 x i8]* %28 to i8*
	%30 = load i32, i32* %i
	%31 = getelementptr [10 x i8], [10 x i8]* %buf, i32 0, i32 %30
	%32 = bitcast i8* %31 to [10 x i8]*
	%33 = bitcast [10 x i8]* %32 to [0 x i8]*
	%34 = bitcast [0 x i8]* %33 to i8*
	%35 = load i32, i32* %n
	%36 = load i32, i32* %n
	%37 = icmp ult i32 %35, %36
	%38 = select i1 %37, i32 %35, i32 %36
	%39 = mul i32 %38, 1
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %29, i8* %34, i32 %39, i32 1, i1 0)
	br label %L.7
L.7:
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_uint16(%bout_BufIO* %bo$, i16 zeroext %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i16
	store i16 %in$, i16* %in
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = load i16, i16* %in
	%2 = zext i16 %1 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_uint8(%bout_BufIO* %bo$, i8 zeroext %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i8
	store i8 %in$, i8* %in
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = load i8, i8* %in
	%2 = zext i8 %1 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_uint(%bout_BufIO* %bo$, i32 %in$) alwaysinline nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i32
	store i32 %in$, i32* %in
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = load i32, i32* %in
	call void @bout_BufIO_uint32(%bout_BufIO* %0, i32 %1)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_int64(%bout_BufIO* %bo$, i64 %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i64
	store i64 %in$, i64* %in
	%bp = alloca [0 x i8]*
	%ui = alloca i64
	%0 = load i64, i64* %in
	%1 = icmp slt i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** %bo
	%3 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %2, i32 1)
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]*, [0 x i8]** %bp
	%5 = getelementptr [0 x i8], [0 x i8]* %4, i32 0, i32 0
	store i8 45, i8* %5
	%6 = load i64, i64* %in
	%7 = sub i64 0, %6
	store i64 %7, i64* %ui
	br label %L.1
L.3:
	%8 = load i64, i64* %in
	store i64 %8, i64* %ui
	br label %L.1
L.1:
	%9 = load %bout_BufIO*, %bout_BufIO** %bo
	%10 = load i64, i64* %ui
	call void @bout_BufIO_uint64(%bout_BufIO* %9, i64 %10)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_int32(%bout_BufIO* %bo$, i32 %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i32
	store i32 %in$, i32* %in
	%bp = alloca [0 x i8]*
	%ui = alloca i32
	%0 = load i32, i32* %in
	%1 = icmp slt i32 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** %bo
	%3 = call [0 x i8]* @bout_BufIO_need(%bout_BufIO* %2, i32 1)
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]*, [0 x i8]** %bp
	%5 = getelementptr [0 x i8], [0 x i8]* %4, i32 0, i32 0
	store i8 45, i8* %5
	%6 = load i32, i32* %in
	%7 = sub i32 0, %6
	%8 = sext i32 %7 to i64
	%9 = trunc i64 %8 to i32
	store i32 %9, i32* %ui
	br label %L.1
L.3:
	%10 = load i32, i32* %in
	%11 = sext i32 %10 to i64
	%12 = trunc i64 %11 to i32
	store i32 %12, i32* %ui
	br label %L.1
L.1:
	%13 = load %bout_BufIO*, %bout_BufIO** %bo
	%14 = load i32, i32* %ui
	call void @bout_BufIO_uint32(%bout_BufIO* %13, i32 %14)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_int16(%bout_BufIO* %bo$, i16 signext %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i16
	store i16 %in$, i16* %in
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = load i16, i16* %in
	%2 = sext i16 %1 to i32
	call void @bout_BufIO_int32(%bout_BufIO* %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_int8(%bout_BufIO* %bo$, i8 signext %in$) nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i8
	store i8 %in$, i8* %in
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = load i8, i8* %in
	%2 = sext i8 %1 to i32
	call void @bout_BufIO_int32(%bout_BufIO* %0, i32 %2)
	br label %return
return:
	ret void
}
define internal void @bout_BufIO_int(%bout_BufIO* %bo$, i32 %in$) alwaysinline nounwind {
L.0:
	%bo = alloca %bout_BufIO*
	store %bout_BufIO* %bo$, %bout_BufIO** %bo
	%in = alloca i32
	store i32 %in$, i32* %in
	%0 = load %bout_BufIO*, %bout_BufIO** %bo
	%1 = load i32, i32* %in
	call void @bout_BufIO_int32(%bout_BufIO* %0, i32 %1)
	br label %return
return:
	ret void
}
@llvm_package_delimiter = internal constant i8 95, align 1
@llvm_anon_prefix = internal constant [3 x i8] c"A.\00", align 1
@llvm_scon_prefix = internal constant [3 x i8] c"S.\00", align 1
@llvm_f = internal global %bout_BufIO* zeroinitializer, align 4
@llvmdb_DWLanguage = internal constant i32 12, align 4
@llvmdb_LLVMDebugVersion = internal constant i32 786432, align 4
@llvmdb_meta = internal constant i8 33, align 1
@llvmdb_seqno = internal global i16 0, align 2
@llvmdb_unit = internal global i16 0, align 2
@llvmdb_file = internal global i16 0, align 2
@llvmdb_subr = internal global i16 0, align 2
@llvmdb_blok = internal global i16 0, align 2
@llvmdb_expr = internal global i16 0, align 2
@llvmdb_nullmeta = internal global i16 0, align 2
@llvmdb_filenamedir = internal global i16 0, align 2
@llvmdb_globals = internal global i16 0, align 2
@llvmdb_subprogs = internal global i16 0, align 2
@llvmdb_retained = internal global i16 0, align 2
@llvmdb_enums = internal global i16 0, align 2
@llvmdb_imported = internal global i16 0, align 2
@llvmdb_gvhead = internal global %symb_SymbNode* zeroinitializer, align 4
@llvmdb_gvtail = internal global %symb_SymbNode* zeroinitializer, align 4
@llvmdb_lvhead = internal global %symb_SymbNode* zeroinitializer, align 4
@llvmdb_lvtail = internal global %symb_SymbNode* zeroinitializer, align 4
@llvmdb_sphead = internal global %symb_SymbNode* zeroinitializer, align 4
@llvmdb_sptail = internal global %symb_SymbNode* zeroinitializer, align 4
%llvmdb_LineT = type {%llvmdb_LineT*, i16, i16, i16}
@llvmdb_lnhead = internal global %llvmdb_LineT* zeroinitializer, align 4
@llvmdb_lntail = internal global %llvmdb_LineT* zeroinitializer, align 4
@llvmdb_lexblkno = internal global i32 0, align 4
define internal zeroext i16 @llvmdb_GetLineContext() nounwind {
L.0:
	%rv.0 = alloca i16
	%0 = load i16, i16* @llvmdb_subr
	store i16 %0, i16* %rv.0
	br label %return
return:
	%1 = load i16, i16* %rv.0
	ret i16 %1
}
@S.692 = private unnamed_addr constant [3 x i8] c"}\0A\00"
@S.693 = private unnamed_addr constant [3 x i8] c", \00"
@S.694 = private unnamed_addr constant [3 x i8] c" )\00"
define internal void @llvmdb_PTerminator(i8 zeroext %term$) nounwind {
L.0:
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load i8, i8* %term
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 1, label %L.3
		i32 0, label %L.4
		i32 2, label %L.5
	]
L.3:
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%3 = getelementptr [3 x i8], [3 x i8]* @S.692
	%4 = bitcast [3 x i8]* %3 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %2, [0 x i8]* %4)
	br label %L.2
L.4:
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = getelementptr [3 x i8], [3 x i8]* @S.693
	%7 = bitcast [3 x i8]* %6 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %7)
	br label %L.2
L.5:
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = getelementptr [3 x i8], [3 x i8]* @S.694
	%10 = bitcast [3 x i8]* %9 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %8, [0 x i8]* %10)
	br label %L.2
L.1:
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PSeq(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 33)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load i16, i16* %n
	%3 = zext i16 %2 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %1, i32 %3)
	br label %return
return:
	ret void
}
@S.695 = private unnamed_addr constant [5 x i8] c" = !\00"
define internal void @llvmdb_PMetaSeq(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load i16, i16* %n
	call void @llvmdb_PSeq(i16 %0)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = getelementptr [5 x i8], [5 x i8]* @S.695
	%3 = bitcast [5 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	br label %return
return:
	ret void
}
@S.696 = private unnamed_addr constant [14 x i8] c" = distinct !\00"
define internal void @llvmdb_PMetaSeqD(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load i16, i16* %n
	call void @llvmdb_PSeq(i16 %0)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = getelementptr [14 x i8], [14 x i8]* @S.696
	%3 = bitcast [14 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PStart(i16 zeroext %n$, [0 x i8]* %name$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%0 = load i16, i16* %n
	call void @llvmdb_PMetaSeq(i16 %0)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load [0 x i8]*, [0 x i8]** %name
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %4, i8 40)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PStartDistinct(i16 zeroext %n$, [0 x i8]* %name$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	%0 = load i16, i16* %n
	call void @llvmdb_PMetaSeqD(i16 %0)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load [0 x i8]*, [0 x i8]** %name
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %4, i8 40)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PString([0 x i8]* %s$, i8 zeroext %term$) nounwind {
L.0:
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = load [0 x i8]*, [0 x i8]** %s
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %3)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PQString([0 x i8]* %s$, i8 zeroext %term$) nounwind {
L.0:
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 34)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load [0 x i8]*, [0 x i8]** %s
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %4, i8 34)
	%5 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %5)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PStringD([0 x i8]* %s1$, [0 x i8]* %s2$, i8 zeroext %delim$, i8 zeroext %term$) nounwind {
L.0:
	%s1 = alloca [0 x i8]*
	store [0 x i8]* %s1$, [0 x i8]** %s1
	%s2 = alloca [0 x i8]*
	store [0 x i8]* %s2$, [0 x i8]** %s2
	%delim = alloca i8
	store i8 %delim$, i8* %delim
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 34)
	%1 = load [0 x i8]*, [0 x i8]** %s1
	%2 = icmp ne [0 x i8]* %1, null
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = load [0 x i8]*, [0 x i8]** %s1
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %3, [0 x i8]* %5)
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = load i8, i8* %delim
	call void @bout_BufIO_chr(%bout_BufIO* %6, i8 %7)
	br label %L.1
L.1:
	%8 = load [0 x i8]*, [0 x i8]** %s2
	%9 = icmp ne [0 x i8]* %8, null
	br i1 %9, label %L.4, label %L.3
L.4:
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%11 = load [0 x i8]*, [0 x i8]** %s2
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %10, [0 x i8]* %12)
	br label %L.3
L.3:
	%13 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %13, i8 34)
	%14 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %14)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PName(%symb_SymbNode* %s$, i8 zeroext %term$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = getelementptr %symb_SymbNode, %symb_SymbNode* %2, i32 0, i32 23
	%4 = getelementptr [0 x i8], [0 x i8]* %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = call i8 @symb_IsAnon([0 x i8]* %5)
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.2
L.2:
	%9 = phi i1 [ false, %L.0 ], [ %8, %L.1 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 23
	%12 = getelementptr [0 x i8], [0 x i8]* %11
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	%14 = load i8, i8* %term
	call void @llvmdb_PQString([0 x i8]* %13, i8 %14)
	br label %L.3
L.5:
	%15 = load i8, i8* %term
	call void @llvmdb_PQString([0 x i8]* null, i8 %15)
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PFullName(%symb_SymbNode* %s$, i8 zeroext %term$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = getelementptr %symb_SymbNode, %symb_SymbNode* %2, i32 0, i32 23
	%4 = getelementptr [0 x i8], [0 x i8]* %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = call i8 @symb_IsAnon([0 x i8]* %5)
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.2
L.2:
	%9 = phi i1 [ false, %L.0 ], [ %8, %L.1 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 2
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	%13 = icmp ne %symb_SymbNode* %12, null
	br i1 %13, label %L.7, label %L.8
L.7:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %s
	%15 = getelementptr %symb_SymbNode, %symb_SymbNode* %14, i32 0, i32 2
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 23
	%18 = getelementptr [0 x i8], [0 x i8]* %17
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 23
	%22 = getelementptr [0 x i8], [0 x i8]* %21
	%23 = bitcast [0 x i8]* %22 to [0 x i8]*
	%24 = load i8, i8* %term
	call void @llvmdb_PStringD([0 x i8]* %19, [0 x i8]* %23, i8 95, i8 %24)
	br label %L.6
L.8:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 23
	%27 = getelementptr [0 x i8], [0 x i8]* %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	%29 = load i8, i8* %term
	call void @llvmdb_PQString([0 x i8]* %28, i8 %29)
	br label %L.6
L.6:
	br label %L.3
L.5:
	%30 = load i8, i8* %term
	call void @llvmdb_PQString([0 x i8]* null, i8 %30)
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PUint(i32 %n$, i8 zeroext %term$) nounwind {
L.0:
	%n = alloca i32
	store i32 %n$, i32* %n
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = load i32, i32* %n
	call void @bout_BufIO_uint(%bout_BufIO* %0, i32 %1)
	%2 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %2)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PMetaString([0 x i8]* %s$, i8 zeroext %term$) nounwind {
L.0:
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 33)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %1, i8 34)
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%3 = load [0 x i8]*, [0 x i8]** %s
	%4 = bitcast [0 x i8]* %3 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %2, [0 x i8]* %4)
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %5, i8 34)
	%6 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %6)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PMetaRef(i16 zeroext %n$, i8 zeroext %term$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 33)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load i16, i16* %n
	%3 = zext i16 %2 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %1, i32 %3)
	%4 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %4)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PListStart(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load i16, i16* %n
	call void @llvmdb_PMetaSeq(i16 %0)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %1, i8 123)
	br label %return
return:
	ret void
}
@S.697 = private unnamed_addr constant [5 x i8] c"null\00"
define internal void @llvmdb_PNull(i8 zeroext %term$) nounwind {
L.0:
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [5 x i8], [5 x i8]* @S.697
	%2 = bitcast [5 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %3)
	br label %return
return:
	ret void
}
@S.698 = private unnamed_addr constant [5 x i8] c"true\00"
@S.699 = private unnamed_addr constant [6 x i8] c"false\00"
define internal void @llvmdb_PBoolean(i8 zeroext %b$, i8 zeroext %term$) nounwind {
L.0:
	%b = alloca i8
	store i8 %b$, i8* %b
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load i8, i8* %b
	%1 = icmp ne i8 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%3 = getelementptr [5 x i8], [5 x i8]* @S.698
	%4 = bitcast [5 x i8]* %3 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %2, [0 x i8]* %4)
	br label %L.1
L.3:
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = getelementptr [6 x i8], [6 x i8]* @S.699
	%7 = bitcast [6 x i8]* %6 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %7)
	br label %L.1
L.1:
	%8 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %8)
	br label %return
return:
	ret void
}
@S.700 = private unnamed_addr constant [5 x i8] c"i32 \00"
define internal void @llvmdb_P32(i32 %v$, i8 zeroext %term$) nounwind {
L.0:
	%v = alloca i32
	store i32 %v$, i32* %v
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [5 x i8], [5 x i8]* @S.700
	%2 = bitcast [5 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = load i32, i32* %v
	call void @bout_BufIO_uint32(%bout_BufIO* %3, i32 %4)
	%5 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %5)
	br label %return
return:
	ret void
}
@S.701 = private unnamed_addr constant [5 x i8] c"i64 \00"
define internal void @llvmdb_P64(i64 %v$, i8 zeroext %term$) nounwind {
L.0:
	%v = alloca i64
	store i64 %v$, i64* %v
	%term = alloca i8
	store i8 %term$, i8* %term
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [5 x i8], [5 x i8]* @S.701
	%2 = bitcast [5 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = load i64, i64* %v
	call void @bout_BufIO_uint64(%bout_BufIO* %3, i64 %4)
	%5 = load i8, i8* %term
	call void @llvmdb_PTerminator(i8 %5)
	br label %return
return:
	ret void
}
define internal zeroext i16 @llvmdb_PNewListStart() nounwind {
L.0:
	%rv.0 = alloca i16
	%tag = alloca i16
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* %tag
	%3 = load i16, i16* %tag
	call void @llvmdb_PListStart(i16 %3)
	%4 = load i16, i16* %tag
	store i16 %4, i16* %rv.0
	br label %return
return:
	%5 = load i16, i16* %rv.0
	ret i16 %5
}
define internal zeroext i16 @llvmdb_PEmptyList() nounwind {
L.0:
	%rv.0 = alloca i16
	%tag = alloca i16
	%0 = call i16 @llvmdb_PNewListStart()
	store i16 %0, i16* %tag
	call void @llvmdb_P32(i32 0, i8 1)
	%1 = load i16, i16* %tag
	store i16 %1, i16* %rv.0
	br label %return
return:
	%2 = load i16, i16* %rv.0
	ret i16 %2
}
define internal i32 @llvmdb_DefFormals(%symb_SymbNode* %ps$) nounwind {
L.0:
	%rv.0 = alloca i32
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%fs = alloca %symb_SymbNode*
	%n = alloca i32
	store i32 0, i32* %n
	%0 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 3
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %fs
	br label %L.1
L.1:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load i32, i32* %n
	%7 = add i32 %6, 1
	store i32 %7, i32* %n
	%8 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 1
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = call i16 @llvmdb_DefType(%type_TypeNode* %10)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 0
	%14 = load %symb_SymbNode*, %symb_SymbNode** %13
	store %symb_SymbNode* %14, %symb_SymbNode** %fs
	br label %L.1
L.2:
	%15 = load i32, i32* %n
	store i32 %15, i32* %rv.0
	br label %return
return:
	%16 = load i32, i32* %rv.0
	ret i32 %16
}
define internal i32 @llvmdb_DefRetvs(%symb_SymbNode* %ps$) nounwind {
L.0:
	%rv.0 = alloca i32
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%rs = alloca %symb_SymbNode*
	%n = alloca i32
	store i32 0, i32* %n
	%0 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 4
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %rs
	br label %L.1
L.1:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load i32, i32* %n
	%7 = add i32 %6, 1
	store i32 %7, i32* %n
	%8 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 1
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	%11 = call i16 @llvmdb_DefType(%type_TypeNode* %10)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 0
	%14 = load %symb_SymbNode*, %symb_SymbNode** %13
	store %symb_SymbNode* %14, %symb_SymbNode** %rs
	br label %L.1
L.2:
	%15 = load i32, i32* %n
	store i32 %15, i32* %rv.0
	br label %return
return:
	%16 = load i32, i32* %rv.0
	ret i32 %16
}
@S.702 = private unnamed_addr constant [12 x i8] c"DIBasicType\00"
@S.703 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.704 = private unnamed_addr constant [7 x i8] c"size: \00"
@S.705 = private unnamed_addr constant [8 x i8] c"align: \00"
@S.706 = private unnamed_addr constant [18 x i8] c"encoding: DW_ATE_\00"
@S.707 = private unnamed_addr constant [8 x i8] c"boolean\00"
@S.708 = private unnamed_addr constant [14 x i8] c"unsigned_char\00"
@S.709 = private unnamed_addr constant [9 x i8] c"unsigned\00"
@S.710 = private unnamed_addr constant [12 x i8] c"signed_char\00"
@S.711 = private unnamed_addr constant [7 x i8] c"signed\00"
@S.712 = private unnamed_addr constant [8 x i8] c"address\00"
@S.713 = private unnamed_addr constant [6 x i8] c"float\00"
@S.714 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal zeroext i16 @llvmdb_DefBasicType(i8 zeroext %dwtype$, %type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i16
	%dwtype = alloca i8
	store i8 %dwtype$, i8* %dwtype
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tagt = alloca i16
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* %tagt
	%3 = load i16, i16* %tagt
	%4 = getelementptr [12 x i8], [12 x i8]* @S.702
	%5 = bitcast [12 x i8]* %4 to [0 x i8]*
	call void @llvmdb_PStart(i16 %3, [0 x i8]* %5)
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 3
	%8 = load %symb_SymbNode*, %symb_SymbNode** %7
	%9 = icmp ne %symb_SymbNode* %8, null
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%11 = getelementptr [7 x i8], [7 x i8]* @S.703
	%12 = bitcast [7 x i8]* %11 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %10, [0 x i8]* %12)
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 3
	%15 = load %symb_SymbNode*, %symb_SymbNode** %14
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 23
	%17 = getelementptr [0 x i8], [0 x i8]* %16
	%18 = bitcast [0 x i8]* %17 to [0 x i8]*
	call void @llvmdb_PQString([0 x i8]* %18, i8 0)
	br label %L.1
L.1:
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%20 = getelementptr [7 x i8], [7 x i8]* @S.704
	%21 = bitcast [7 x i8]* %20 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %19, [0 x i8]* %21)
	%22 = load %type_TypeNode*, %type_TypeNode** %t
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 11
	%24 = load i32, i32* %23
	call void @llvmdb_PUint(i32 %24, i8 0)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = getelementptr [8 x i8], [8 x i8]* @S.705
	%27 = bitcast [8 x i8]* %26 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %27)
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	%29 = getelementptr %type_TypeNode, %type_TypeNode* %28, i32 0, i32 12
	%30 = load i32, i32* %29
	call void @llvmdb_PUint(i32 %30, i8 0)
	%31 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%32 = getelementptr [18 x i8], [18 x i8]* @S.706
	%33 = bitcast [18 x i8]* %32 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %31, [0 x i8]* %33)
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 16
	%36 = load i8, i8* %35
	%37 = zext i8 %36 to i32
	switch i32 %37, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.5
		i32 3, label %L.6
		i32 5, label %L.7
		i32 4, label %L.8
	]
L.5:
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%40 = icmp eq %type_TypeNode* %38, %39
	br i1 %40, label %L.10, label %L.11
L.10:
	%41 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%42 = getelementptr [8 x i8], [8 x i8]* @S.707
	%43 = bitcast [8 x i8]* %42 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %41, [0 x i8]* %43)
	br label %L.9
L.11:
	%44 = load %type_TypeNode*, %type_TypeNode** %t
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 11
	%46 = load i32, i32* %45
	%47 = icmp ule i32 %46, 8
	br i1 %47, label %L.13, label %L.14
L.13:
	%48 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%49 = getelementptr [14 x i8], [14 x i8]* @S.708
	%50 = bitcast [14 x i8]* %49 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %48, [0 x i8]* %50)
	br label %L.12
L.14:
	%51 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%52 = getelementptr [9 x i8], [9 x i8]* @S.709
	%53 = bitcast [9 x i8]* %52 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %51, [0 x i8]* %53)
	br label %L.12
L.12:
	br label %L.9
L.9:
	br label %L.4
L.6:
	%54 = load %type_TypeNode*, %type_TypeNode** %t
	%55 = getelementptr %type_TypeNode, %type_TypeNode* %54, i32 0, i32 11
	%56 = load i32, i32* %55
	%57 = icmp ule i32 %56, 8
	br i1 %57, label %L.16, label %L.17
L.16:
	%58 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%59 = getelementptr [12 x i8], [12 x i8]* @S.710
	%60 = bitcast [12 x i8]* %59 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %58, [0 x i8]* %60)
	br label %L.15
L.17:
	%61 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%62 = getelementptr [7 x i8], [7 x i8]* @S.711
	%63 = bitcast [7 x i8]* %62 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %61, [0 x i8]* %63)
	br label %L.15
L.15:
	br label %L.4
L.7:
	%64 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%65 = getelementptr [8 x i8], [8 x i8]* @S.712
	%66 = bitcast [8 x i8]* %65 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %64, [0 x i8]* %66)
	br label %L.4
L.8:
	%67 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%68 = getelementptr [6 x i8], [6 x i8]* @S.713
	%69 = bitcast [6 x i8]* %68 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %67, [0 x i8]* %69)
	br label %L.4
L.3:
	br label %L.4
L.4:
	%70 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%71 = getelementptr [3 x i8], [3 x i8]* @S.714
	%72 = bitcast [3 x i8]* %71 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %70, [0 x i8]* %72)
	%73 = load i16, i16* %tagt
	store i16 %73, i16* %rv.0
	br label %return
return:
	%74 = load i16, i16* %rv.0
	ret i16 %74
}
@S.715 = private unnamed_addr constant [16 x i8] c"DICompositeType\00"
@S.716 = private unnamed_addr constant [13 x i8] c"tag: DW_TAG_\00"
@S.717 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.718 = private unnamed_addr constant [7 x i8] c"file: \00"
@S.719 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.720 = private unnamed_addr constant [7 x i8] c"size: \00"
@S.721 = private unnamed_addr constant [8 x i8] c"align: \00"
@S.722 = private unnamed_addr constant [13 x i8] c", baseType: \00"
@S.723 = private unnamed_addr constant [13 x i8] c", elements: \00"
@S.724 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_PCompositeType(i16 zeroext %tag$, i16 zeroext %from$, i16 zeroext %members$, [0 x i8]* %dwat$, %type_TypeNode* %t$) nounwind {
L.0:
	%tag = alloca i16
	store i16 %tag$, i16* %tag
	%from = alloca i16
	store i16 %from$, i16* %from
	%members = alloca i16
	store i16 %members$, i16* %members
	%dwat = alloca [0 x i8]*
	store [0 x i8]* %dwat$, [0 x i8]** %dwat
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load i16, i16* %tag
	%1 = getelementptr [16 x i8], [16 x i8]* @S.715
	%2 = bitcast [16 x i8]* %1 to [0 x i8]*
	call void @llvmdb_PStart(i16 %0, [0 x i8]* %2)
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = getelementptr [13 x i8], [13 x i8]* @S.716
	%5 = bitcast [13 x i8]* %4 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %3, [0 x i8]* %5)
	%6 = load [0 x i8]*, [0 x i8]** %dwat
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %7, i8 0)
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 3
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	%11 = icmp ne %symb_SymbNode* %10, null
	br i1 %11, label %L.2, label %L.1
L.2:
	%12 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%13 = getelementptr [7 x i8], [7 x i8]* @S.717
	%14 = bitcast [7 x i8]* %13 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %12, [0 x i8]* %14)
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 3
	%17 = load %symb_SymbNode*, %symb_SymbNode** %16
	call void @llvmdb_PName(%symb_SymbNode* %17, i8 0)
	br label %L.1
L.1:
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = getelementptr [7 x i8], [7 x i8]* @S.718
	%20 = bitcast [7 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	%21 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %21, i8 0)
	%22 = load %type_TypeNode*, %type_TypeNode** %t
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 3
	%24 = load %symb_SymbNode*, %symb_SymbNode** %23
	%25 = icmp ne %symb_SymbNode* %24, null
	br i1 %25, label %L.4, label %L.3
L.4:
	%26 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%27 = getelementptr [7 x i8], [7 x i8]* @S.719
	%28 = bitcast [7 x i8]* %27 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %26, [0 x i8]* %28)
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 3
	%31 = load %symb_SymbNode*, %symb_SymbNode** %30
	%32 = getelementptr %symb_SymbNode, %symb_SymbNode* %31, i32 0, i32 11
	%33 = load i16, i16* %32
	%34 = zext i16 %33 to i32
	call void @llvmdb_PUint(i32 %34, i8 0)
	br label %L.3
L.3:
	%35 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%36 = getelementptr [7 x i8], [7 x i8]* @S.720
	%37 = bitcast [7 x i8]* %36 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %35, [0 x i8]* %37)
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = getelementptr %type_TypeNode, %type_TypeNode* %38, i32 0, i32 11
	%40 = load i32, i32* %39
	call void @llvmdb_PUint(i32 %40, i8 0)
	%41 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%42 = getelementptr [8 x i8], [8 x i8]* @S.721
	%43 = bitcast [8 x i8]* %42 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %41, [0 x i8]* %43)
	%44 = load %type_TypeNode*, %type_TypeNode** %t
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 12
	%46 = load i32, i32* %45
	call void @llvmdb_PUint(i32 %46, i8 3)
	%47 = load i16, i16* %from
	%48 = icmp ne i16 %47, 0
	br i1 %48, label %L.6, label %L.5
L.6:
	%49 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%50 = getelementptr [13 x i8], [13 x i8]* @S.722
	%51 = bitcast [13 x i8]* %50 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %49, [0 x i8]* %51)
	%52 = load i16, i16* %from
	call void @llvmdb_PMetaRef(i16 %52, i8 3)
	br label %L.5
L.5:
	%53 = load i16, i16* %members
	%54 = icmp ne i16 %53, 0
	br i1 %54, label %L.8, label %L.7
L.8:
	%55 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%56 = getelementptr [13 x i8], [13 x i8]* @S.723
	%57 = bitcast [13 x i8]* %56 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %55, [0 x i8]* %57)
	%58 = load i16, i16* %members
	call void @llvmdb_PMetaRef(i16 %58, i8 3)
	br label %L.7
L.7:
	%59 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%60 = getelementptr [3 x i8], [3 x i8]* @S.724
	%61 = bitcast [3 x i8]* %60 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %59, [0 x i8]* %61)
	br label %return
return:
	ret void
}
@S.725 = private unnamed_addr constant [14 x i8] c"DIDerivedType\00"
@S.726 = private unnamed_addr constant [13 x i8] c"tag: DW_TAG_\00"
@S.727 = private unnamed_addr constant [11 x i8] c"baseType: \00"
@S.728 = private unnamed_addr constant [7 x i8] c"size: \00"
@S.729 = private unnamed_addr constant [8 x i8] c"align: \00"
@S.730 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_PDerivedType(i16 zeroext %tag$, i16 zeroext %from$, [0 x i8]* %dwat$, %type_TypeNode* %t$) nounwind {
L.0:
	%tag = alloca i16
	store i16 %tag$, i16* %tag
	%from = alloca i16
	store i16 %from$, i16* %from
	%dwat = alloca [0 x i8]*
	store [0 x i8]* %dwat$, [0 x i8]** %dwat
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load i16, i16* %tag
	%1 = getelementptr [14 x i8], [14 x i8]* @S.725
	%2 = bitcast [14 x i8]* %1 to [0 x i8]*
	call void @llvmdb_PStart(i16 %0, [0 x i8]* %2)
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = getelementptr [13 x i8], [13 x i8]* @S.726
	%5 = bitcast [13 x i8]* %4 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %3, [0 x i8]* %5)
	%6 = load [0 x i8]*, [0 x i8]** %dwat
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %7, i8 0)
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = getelementptr [11 x i8], [11 x i8]* @S.727
	%10 = bitcast [11 x i8]* %9 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %8, [0 x i8]* %10)
	%11 = load i16, i16* %from
	call void @llvmdb_PMetaRef(i16 %11, i8 0)
	%12 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%13 = getelementptr [7 x i8], [7 x i8]* @S.728
	%14 = bitcast [7 x i8]* %13 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %12, [0 x i8]* %14)
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 11
	%17 = load i32, i32* %16
	call void @llvmdb_PUint(i32 %17, i8 0)
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = getelementptr [8 x i8], [8 x i8]* @S.729
	%20 = bitcast [8 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	%21 = load %type_TypeNode*, %type_TypeNode** %t
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 12
	%23 = load i32, i32* %22
	call void @llvmdb_PUint(i32 %23, i8 3)
	%24 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%25 = getelementptr [3 x i8], [3 x i8]* @S.730
	%26 = bitcast [3 x i8]* %25 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %24, [0 x i8]* %26)
	br label %return
return:
	ret void
}
define internal zeroext i16 @llvmdb_DefSubRange(%type_TypeNode* %t$, i8 zeroext %signed$) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%signed = alloca i8
	store i8 %signed$, i8* %signed
	%0 = load i8, i8* %signed
	%1 = icmp ne i8 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = call i16 @llvmdb_DefBasicType(i8 5, %type_TypeNode* %2)
	store i16 %3, i16* %rv.0
	br label %return
L.3:
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = call i16 @llvmdb_DefBasicType(i8 7, %type_TypeNode* %4)
	store i16 %5, i16* %rv.0
	br label %return
L.1:
	br label %return
return:
	%6 = load i16, i16* %rv.0
	ret i16 %6
}
@S.731 = private unnamed_addr constant [13 x i8] c"pointer_type\00"
define internal zeroext i16 @llvmdb_DefRefType(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tagb = alloca i16
	%tagr = alloca i16
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 16
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 8
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load i16, i16* @llvmdb_seqno
	%5 = add i16 %4, 1
	store i16 %5, i16* @llvmdb_seqno
	%6 = load i16, i16* @llvmdb_seqno
	store i16 %6, i16* %tagb
	%7 = load i16, i16* %tagb
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 4
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	call void @llvmdb_DefSubroutine(i16 %7, %symb_SymbNode* %10)
	br label %L.1
L.3:
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 0
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	%14 = call i16 @llvmdb_DefType(%type_TypeNode* %13)
	store i16 %14, i16* %tagb
	br label %L.1
L.1:
	%15 = load i16, i16* @llvmdb_seqno
	%16 = add i16 %15, 1
	store i16 %16, i16* @llvmdb_seqno
	%17 = load i16, i16* @llvmdb_seqno
	store i16 %17, i16* %tagr
	%18 = load i16, i16* %tagr
	%19 = load i16, i16* %tagb
	%20 = getelementptr [13 x i8], [13 x i8]* @S.731
	%21 = bitcast [13 x i8]* %20 to [0 x i8]*
	%22 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvmdb_PDerivedType(i16 %18, i16 %19, [0 x i8]* %21, %type_TypeNode* %22)
	%23 = load i16, i16* %tagr
	store i16 %23, i16* %rv.0
	br label %return
return:
	%24 = load i16, i16* %rv.0
	ret i16 %24
}
@S.732 = private unnamed_addr constant [11 x i8] c"DISubrange\00"
@S.733 = private unnamed_addr constant [8 x i8] c"count: \00"
@S.734 = private unnamed_addr constant [15 x i8] c", lowerBound: \00"
@S.735 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal zeroext i16 @llvmdb_DefRange(i64 %lo$, i64 %hi$) nounwind {
L.0:
	%rv.0 = alloca i16
	%lo = alloca i64
	store i64 %lo$, i64* %lo
	%hi = alloca i64
	store i64 %hi$, i64* %hi
	%tagr = alloca i16
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* %tagr
	%3 = load i16, i16* %tagr
	%4 = getelementptr [11 x i8], [11 x i8]* @S.732
	%5 = bitcast [11 x i8]* %4 to [0 x i8]*
	call void @llvmdb_PStart(i16 %3, [0 x i8]* %5)
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = getelementptr [8 x i8], [8 x i8]* @S.733
	%8 = bitcast [8 x i8]* %7 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %6, [0 x i8]* %8)
	%9 = load i64, i64* %hi
	%10 = load i64, i64* %lo
	%11 = sub i64 %9, %10
	%12 = add i64 %11, 1
	%13 = trunc i64 %12 to i32
	call void @llvmdb_PUint(i32 %13, i8 3)
	%14 = load i64, i64* %lo
	%15 = icmp ne i64 %14, 0
	br i1 %15, label %L.2, label %L.1
L.2:
	%16 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%17 = getelementptr [15 x i8], [15 x i8]* @S.734
	%18 = bitcast [15 x i8]* %17 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %16, [0 x i8]* %18)
	%19 = load i64, i64* %lo
	%20 = trunc i64 %19 to i32
	call void @llvmdb_PUint(i32 %20, i8 3)
	br label %L.1
L.1:
	%21 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%22 = getelementptr [3 x i8], [3 x i8]* @S.735
	%23 = bitcast [3 x i8]* %22 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %21, [0 x i8]* %23)
	%24 = load i16, i16* %tagr
	store i16 %24, i16* %rv.0
	br label %return
return:
	%25 = load i16, i16* %rv.0
	ret i16 %25
}
@S.736 = private unnamed_addr constant [13 x i8] c"DIEnumerator\00"
@S.737 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.738 = private unnamed_addr constant [8 x i8] c"value: \00"
@S.739 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal zeroext i16 @llvmdb_DefEnumConst(%symb_SymbNode* %s$) nounwind {
L.0:
	%rv.0 = alloca i16
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%tagc = alloca i16
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* %tagc
	%3 = load i16, i16* %tagc
	%4 = getelementptr [13 x i8], [13 x i8]* @S.736
	%5 = bitcast [13 x i8]* %4 to [0 x i8]*
	call void @llvmdb_PStart(i16 %3, [0 x i8]* %5)
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = getelementptr [7 x i8], [7 x i8]* @S.737
	%8 = bitcast [7 x i8]* %7 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %6, [0 x i8]* %8)
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 23
	%11 = getelementptr [0 x i8], [0 x i8]* %10
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	call void @llvmdb_PQString([0 x i8]* %12, i8 0)
	%13 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%14 = getelementptr [8 x i8], [8 x i8]* @S.738
	%15 = bitcast [8 x i8]* %14 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %13, [0 x i8]* %15)
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 9
	%18 = load %ast_AstNode*, %ast_AstNode** %17
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 10
	%20 = load i64, i64* %19
	%21 = trunc i64 %20 to i32
	call void @llvmdb_PUint(i32 %21, i8 3)
	%22 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%23 = getelementptr [3 x i8], [3 x i8]* @S.739
	%24 = bitcast [3 x i8]* %23 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %22, [0 x i8]* %24)
	%25 = load i16, i16* %tagc
	store i16 %25, i16* %rv.0
	br label %return
return:
	%26 = load i16, i16* %rv.0
	ret i16 %26
}
@S.740 = private unnamed_addr constant [17 x i8] c"enumeration_type\00"
define internal zeroext i16 @llvmdb_DefEnumerationType(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tag = alloca i16
	%list = alloca i16
	%tage = alloca i16
	%s = alloca %symb_SymbNode*
	%term = alloca i8
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 4
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %s
	br label %L.1
L.1:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 12
	%8 = load i16, i16* %7
	%9 = icmp eq i16 %8, 0
	br i1 %9, label %L.5, label %L.4
L.5:
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = call i16 @llvmdb_DefEnumConst(%symb_SymbNode* %10)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 12
	store i16 %11, i16* %13
	br label %L.4
L.4:
	%14 = load %symb_SymbNode*, %symb_SymbNode** %s
	%15 = getelementptr %symb_SymbNode, %symb_SymbNode* %14, i32 0, i32 0
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	store %symb_SymbNode* %16, %symb_SymbNode** %s
	br label %L.1
L.2:
	%17 = call i16 @llvmdb_PNewListStart()
	store i16 %17, i16* %list
	store i8 0, i8* %term
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 4
	%20 = load %symb_SymbNode*, %symb_SymbNode** %19
	store %symb_SymbNode* %20, %symb_SymbNode** %s
	br label %L.6
L.6:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = icmp ne %symb_SymbNode* %21, null
	%23 = xor i1 %22, true
	br i1 %23, label %L.7, label %L.8
L.8:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 12
	%26 = load i16, i16* %25
	store i16 %26, i16* %tag
	%27 = load %symb_SymbNode*, %symb_SymbNode** %s
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 0
	%29 = load %symb_SymbNode*, %symb_SymbNode** %28
	store %symb_SymbNode* %29, %symb_SymbNode** %s
	%30 = load %symb_SymbNode*, %symb_SymbNode** %s
	%31 = icmp eq %symb_SymbNode* %30, null
	br i1 %31, label %L.10, label %L.9
L.10:
	store i8 1, i8* %term
	br label %L.9
L.9:
	%32 = load i16, i16* %tag
	%33 = load i8, i8* %term
	call void @llvmdb_PMetaRef(i16 %32, i8 %33)
	br label %L.6
L.7:
	%34 = load i16, i16* @llvmdb_seqno
	%35 = add i16 %34, 1
	store i16 %35, i16* @llvmdb_seqno
	%36 = load i16, i16* @llvmdb_seqno
	store i16 %36, i16* %tage
	%37 = load i16, i16* %tage
	%38 = load i16, i16* %list
	%39 = getelementptr [17 x i8], [17 x i8]* @S.740
	%40 = bitcast [17 x i8]* %39 to [0 x i8]*
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvmdb_PCompositeType(i16 %37, i16 0, i16 %38, [0 x i8]* %40, %type_TypeNode* %41)
	%42 = load i16, i16* %tage
	store i16 %42, i16* %rv.0
	br label %return
return:
	%43 = load i16, i16* %rv.0
	ret i16 %43
}
@S.741 = private unnamed_addr constant [11 x i8] c"array_type\00"
define internal zeroext i16 @llvmdb_DefArrayType(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tagb = alloca i16
	%tagi = alloca i16
	%taga = alloca i16
	%tagl = alloca i16
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 0
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = call i16 @llvmdb_DefType(%type_TypeNode* %2)
	store i16 %3, i16* %tagb
	store i16 0, i16* %tagi
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 28
	%6 = load i8, i8* %5
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 8
	%11 = load i64, i64* %10
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 9
	%14 = load i64, i64* %13
	%15 = call i16 @llvmdb_DefRange(i64 %11, i64 %14)
	store i16 %15, i16* %tagi
	br label %L.1
L.1:
	store i16 0, i16* %tagl
	%16 = load i16, i16* %tagi
	%17 = icmp ne i16 %16, 0
	br i1 %17, label %L.4, label %L.3
L.4:
	%18 = call i16 @llvmdb_PNewListStart()
	store i16 %18, i16* %tagl
	%19 = load i16, i16* %tagi
	call void @llvmdb_PMetaRef(i16 %19, i8 1)
	br label %L.3
L.3:
	%20 = load i16, i16* @llvmdb_seqno
	%21 = add i16 %20, 1
	store i16 %21, i16* @llvmdb_seqno
	%22 = load i16, i16* @llvmdb_seqno
	store i16 %22, i16* %taga
	%23 = load i16, i16* %taga
	%24 = load i16, i16* %tagb
	%25 = load i16, i16* %tagl
	%26 = getelementptr [11 x i8], [11 x i8]* @S.741
	%27 = bitcast [11 x i8]* %26 to [0 x i8]*
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvmdb_PCompositeType(i16 %23, i16 %24, i16 %25, [0 x i8]* %27, %type_TypeNode* %28)
	%29 = load i16, i16* %taga
	store i16 %29, i16* %rv.0
	br label %return
return:
	%30 = load i16, i16* %rv.0
	ret i16 %30
}
@S.742 = private unnamed_addr constant [7 x i8] c"member\00"
define internal zeroext i16 @llvmdb_DefField(%symb_SymbNode* %s$, i16 zeroext %rec$) nounwind {
L.0:
	%rv.0 = alloca i16
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%rec = alloca i16
	store i16 %rec$, i16* %rec
	%tagt = alloca i16
	%tagf = alloca i16
	%t = alloca %type_TypeNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 1
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = call i16 @llvmdb_DefType(%type_TypeNode* %3)
	store i16 %4, i16* %tagt
	%5 = load i16, i16* @llvmdb_seqno
	%6 = add i16 %5, 1
	store i16 %6, i16* @llvmdb_seqno
	%7 = load i16, i16* @llvmdb_seqno
	store i16 %7, i16* %tagf
	%8 = load i16, i16* %tagf
	%9 = load i16, i16* %tagt
	%10 = getelementptr [7 x i8], [7 x i8]* @S.742
	%11 = bitcast [7 x i8]* %10 to [0 x i8]*
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvmdb_PDerivedType(i16 %8, i16 %9, [0 x i8]* %11, %type_TypeNode* %12)
	%13 = load i16, i16* %tagf
	store i16 %13, i16* %rv.0
	br label %return
return:
	%14 = load i16, i16* %rv.0
	ret i16 %14
}
@S.743 = private unnamed_addr constant [15 x i8] c"structure_type\00"
define internal zeroext i16 @llvmdb_DefRecordType(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tag = alloca i16
	%list = alloca i16
	%rec = alloca i16
	%s = alloca %symb_SymbNode*
	%term = alloca i8
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* %rec
	%3 = load i16, i16* %rec
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 14
	store i16 %3, i16* %5
	%6 = load i16, i16* @llvmdb_seqno
	%7 = add i16 %6, 1
	store i16 %7, i16* @llvmdb_seqno
	%8 = load i16, i16* @llvmdb_seqno
	store i16 %8, i16* %list
	%9 = load i16, i16* %rec
	%10 = load i16, i16* %list
	%11 = getelementptr [15 x i8], [15 x i8]* @S.743
	%12 = bitcast [15 x i8]* %11 to [0 x i8]*
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvmdb_PCompositeType(i16 %9, i16 0, i16 %10, [0 x i8]* %12, %type_TypeNode* %13)
	%14 = load %type_TypeNode*, %type_TypeNode** %t
	%15 = getelementptr %type_TypeNode, %type_TypeNode* %14, i32 0, i32 4
	%16 = load %symb_SymbNode*, %symb_SymbNode** %15
	store %symb_SymbNode* %16, %symb_SymbNode** %s
	br label %L.1
L.1:
	%17 = load %symb_SymbNode*, %symb_SymbNode** %s
	%18 = icmp ne %symb_SymbNode* %17, null
	%19 = xor i1 %18, true
	br i1 %19, label %L.2, label %L.3
L.3:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 12
	%22 = load i16, i16* %21
	%23 = icmp eq i16 %22, 0
	br i1 %23, label %L.5, label %L.4
L.5:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = load i16, i16* %rec
	%26 = call i16 @llvmdb_DefField(%symb_SymbNode* %24, i16 %25)
	%27 = load %symb_SymbNode*, %symb_SymbNode** %s
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 12
	store i16 %26, i16* %28
	br label %L.4
L.4:
	%29 = load %symb_SymbNode*, %symb_SymbNode** %s
	%30 = getelementptr %symb_SymbNode, %symb_SymbNode* %29, i32 0, i32 0
	%31 = load %symb_SymbNode*, %symb_SymbNode** %30
	store %symb_SymbNode* %31, %symb_SymbNode** %s
	br label %L.1
L.2:
	%32 = load i16, i16* %list
	call void @llvmdb_PListStart(i16 %32)
	store i8 0, i8* %term
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 4
	%35 = load %symb_SymbNode*, %symb_SymbNode** %34
	store %symb_SymbNode* %35, %symb_SymbNode** %s
	br label %L.6
L.6:
	%36 = load %symb_SymbNode*, %symb_SymbNode** %s
	%37 = icmp ne %symb_SymbNode* %36, null
	%38 = xor i1 %37, true
	br i1 %38, label %L.7, label %L.8
L.8:
	%39 = load %symb_SymbNode*, %symb_SymbNode** %s
	%40 = getelementptr %symb_SymbNode, %symb_SymbNode* %39, i32 0, i32 12
	%41 = load i16, i16* %40
	store i16 %41, i16* %tag
	%42 = load %symb_SymbNode*, %symb_SymbNode** %s
	%43 = getelementptr %symb_SymbNode, %symb_SymbNode* %42, i32 0, i32 0
	%44 = load %symb_SymbNode*, %symb_SymbNode** %43
	store %symb_SymbNode* %44, %symb_SymbNode** %s
	%45 = load %symb_SymbNode*, %symb_SymbNode** %s
	%46 = icmp eq %symb_SymbNode* %45, null
	br i1 %46, label %L.10, label %L.9
L.10:
	store i8 1, i8* %term
	br label %L.9
L.9:
	%47 = load i16, i16* %tag
	%48 = load i8, i8* %term
	call void @llvmdb_PMetaRef(i16 %47, i8 %48)
	br label %L.6
L.7:
	%49 = load i16, i16* %rec
	store i16 %49, i16* %rv.0
	br label %return
return:
	%50 = load i16, i16* %rv.0
	ret i16 %50
}
define internal zeroext i16 @llvmdb_DefType(%type_TypeNode* %t$) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%tag = alloca i16
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp eq %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	store i16 0, i16* %rv.0
	br label %return
L.1:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 14
	%4 = load i16, i16* %3
	store i16 %4, i16* %tag
	%5 = load i16, i16* %tag
	%6 = icmp eq i16 %5, 0
	br i1 %6, label %L.4, label %L.3
L.4:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 16
	%9 = load i8, i8* %8
	%10 = zext i8 %9 to i32
	switch i32 %10, label %L.5 [
		i32 1, label %L.7
		i32 2, label %L.8
		i32 3, label %L.9
		i32 4, label %L.10
		i32 5, label %L.11
		i32 8, label %L.11
		i32 6, label %L.12
		i32 7, label %L.13
	]
L.7:
	%11 = load %type_TypeNode*, %type_TypeNode** %t
	%12 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%13 = icmp eq %type_TypeNode* %11, %12
	br i1 %13, label %L.15, label %L.16
L.15:
	%14 = load %type_TypeNode*, %type_TypeNode** %t
	%15 = call i16 @llvmdb_DefBasicType(i8 2, %type_TypeNode* %14)
	store i16 %15, i16* %tag
	br label %L.14
L.16:
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = call i16 @llvmdb_DefEnumerationType(%type_TypeNode* %16)
	store i16 %17, i16* %tag
	br label %L.14
L.14:
	br label %L.6
L.8:
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%20 = icmp eq %type_TypeNode* %18, %19
	br i1 %20, label %L.18, label %L.19
L.18:
	%21 = load %type_TypeNode*, %type_TypeNode** %t
	%22 = call i16 @llvmdb_DefBasicType(i8 8, %type_TypeNode* %21)
	store i16 %22, i16* %tag
	br label %L.17
L.19:
	%23 = load %type_TypeNode*, %type_TypeNode** %t
	%24 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%25 = icmp eq %type_TypeNode* %23, %24
	br i1 %25, label %L.27, label %L.26
L.26:
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 0
	%28 = load %type_TypeNode*, %type_TypeNode** %27
	%29 = icmp eq %type_TypeNode* %26, %28
	br label %L.27
L.27:
	%30 = phi i1 [ true, %L.19 ], [ %29, %L.26 ]
	br i1 %30, label %L.25, label %L.24
L.24:
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 1
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	%34 = icmp eq %type_TypeNode* %31, %33
	br label %L.25
L.25:
	%35 = phi i1 [ true, %L.27 ], [ %34, %L.24 ]
	br i1 %35, label %L.23, label %L.22
L.22:
	%36 = load %type_TypeNode*, %type_TypeNode** %t
	%37 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 2
	%38 = load %type_TypeNode*, %type_TypeNode** %37
	%39 = icmp eq %type_TypeNode* %36, %38
	br label %L.23
L.23:
	%40 = phi i1 [ true, %L.25 ], [ %39, %L.22 ]
	br i1 %40, label %L.21, label %L.20
L.20:
	%41 = load %type_TypeNode*, %type_TypeNode** %t
	%42 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 3
	%43 = load %type_TypeNode*, %type_TypeNode** %42
	%44 = icmp eq %type_TypeNode* %41, %43
	br label %L.21
L.21:
	%45 = phi i1 [ true, %L.23 ], [ %44, %L.20 ]
	br i1 %45, label %L.29, label %L.30
L.29:
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = call i16 @llvmdb_DefBasicType(i8 7, %type_TypeNode* %46)
	store i16 %47, i16* %tag
	br label %L.28
L.30:
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	%49 = call i16 @llvmdb_DefSubRange(%type_TypeNode* %48, i8 0)
	store i16 %49, i16* %tag
	br label %L.28
L.28:
	br label %L.17
L.17:
	br label %L.6
L.9:
	%50 = load %type_TypeNode*, %type_TypeNode** %t
	%51 = load %type_TypeNode*, %type_TypeNode** @type_swordtype
	%52 = icmp eq %type_TypeNode* %50, %51
	br i1 %52, label %L.38, label %L.37
L.37:
	%53 = load %type_TypeNode*, %type_TypeNode** %t
	%54 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 0
	%55 = load %type_TypeNode*, %type_TypeNode** %54
	%56 = icmp eq %type_TypeNode* %53, %55
	br label %L.38
L.38:
	%57 = phi i1 [ true, %L.9 ], [ %56, %L.37 ]
	br i1 %57, label %L.36, label %L.35
L.35:
	%58 = load %type_TypeNode*, %type_TypeNode** %t
	%59 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 1
	%60 = load %type_TypeNode*, %type_TypeNode** %59
	%61 = icmp eq %type_TypeNode* %58, %60
	br label %L.36
L.36:
	%62 = phi i1 [ true, %L.38 ], [ %61, %L.35 ]
	br i1 %62, label %L.34, label %L.33
L.33:
	%63 = load %type_TypeNode*, %type_TypeNode** %t
	%64 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 2
	%65 = load %type_TypeNode*, %type_TypeNode** %64
	%66 = icmp eq %type_TypeNode* %63, %65
	br label %L.34
L.34:
	%67 = phi i1 [ true, %L.36 ], [ %66, %L.33 ]
	br i1 %67, label %L.32, label %L.31
L.31:
	%68 = load %type_TypeNode*, %type_TypeNode** %t
	%69 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_inttypes, i32 0, i32 3
	%70 = load %type_TypeNode*, %type_TypeNode** %69
	%71 = icmp eq %type_TypeNode* %68, %70
	br label %L.32
L.32:
	%72 = phi i1 [ true, %L.34 ], [ %71, %L.31 ]
	br i1 %72, label %L.40, label %L.41
L.40:
	%73 = load %type_TypeNode*, %type_TypeNode** %t
	%74 = call i16 @llvmdb_DefBasicType(i8 5, %type_TypeNode* %73)
	store i16 %74, i16* %tag
	br label %L.39
L.41:
	%75 = load %type_TypeNode*, %type_TypeNode** %t
	%76 = call i16 @llvmdb_DefSubRange(%type_TypeNode* %75, i8 1)
	store i16 %76, i16* %tag
	br label %L.39
L.39:
	br label %L.6
L.10:
	%77 = load %type_TypeNode*, %type_TypeNode** %t
	%78 = call i16 @llvmdb_DefBasicType(i8 4, %type_TypeNode* %77)
	store i16 %78, i16* %tag
	br label %L.6
L.11:
	%79 = load %type_TypeNode*, %type_TypeNode** %t
	%80 = call i16 @llvmdb_DefRefType(%type_TypeNode* %79)
	store i16 %80, i16* %tag
	br label %L.6
L.12:
	%81 = load %type_TypeNode*, %type_TypeNode** %t
	%82 = call i16 @llvmdb_DefArrayType(%type_TypeNode* %81)
	store i16 %82, i16* %tag
	br label %L.6
L.13:
	%83 = load %type_TypeNode*, %type_TypeNode** %t
	%84 = call i16 @llvmdb_DefRecordType(%type_TypeNode* %83)
	store i16 %84, i16* %tag
	br label %L.6
L.5:
	br label %L.6
L.6:
	%85 = load i16, i16* %tag
	%86 = load %type_TypeNode*, %type_TypeNode** %t
	%87 = getelementptr %type_TypeNode, %type_TypeNode* %86, i32 0, i32 14
	store i16 %85, i16* %87
	br label %L.3
L.3:
	%88 = load i16, i16* %tag
	store i16 %88, i16* %rv.0
	br label %return
return:
	%89 = load i16, i16* %rv.0
	ret i16 %89
}
@S.744 = private unnamed_addr constant [11 x i8] c"DILocation\00"
@S.745 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.746 = private unnamed_addr constant [9 x i8] c"column: \00"
@S.747 = private unnamed_addr constant [8 x i8] c"scope: \00"
@S.748 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_DefLines() nounwind {
L.0:
	%ln = alloca %llvmdb_LineT*
	%0 = load %llvmdb_LineT*, %llvmdb_LineT** @llvmdb_lnhead
	store %llvmdb_LineT* %0, %llvmdb_LineT** %ln
	br label %L.1
L.1:
	%1 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%2 = icmp ne %llvmdb_LineT* %1, null
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%5 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %4, i32 0, i32 1
	%6 = load i16, i16* %5
	%7 = getelementptr [11 x i8], [11 x i8]* @S.744
	%8 = bitcast [11 x i8]* %7 to [0 x i8]*
	call void @llvmdb_PStart(i16 %6, [0 x i8]* %8)
	%9 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%10 = getelementptr [7 x i8], [7 x i8]* @S.745
	%11 = bitcast [7 x i8]* %10 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %9, [0 x i8]* %11)
	%12 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%13 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %12, i32 0, i32 2
	%14 = load i16, i16* %13
	%15 = zext i16 %14 to i32
	call void @llvmdb_PUint(i32 %15, i8 0)
	%16 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%17 = getelementptr [9 x i8], [9 x i8]* @S.746
	%18 = bitcast [9 x i8]* %17 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %16, [0 x i8]* %18)
	call void @llvmdb_PUint(i32 0, i8 0)
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%20 = getelementptr [8 x i8], [8 x i8]* @S.747
	%21 = bitcast [8 x i8]* %20 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %19, [0 x i8]* %21)
	%22 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%23 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %22, i32 0, i32 3
	%24 = load i16, i16* %23
	call void @llvmdb_PMetaRef(i16 %24, i8 3)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = getelementptr [3 x i8], [3 x i8]* @S.748
	%27 = bitcast [3 x i8]* %26 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %27)
	%28 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%29 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %28, i32 0, i32 0
	%30 = load %llvmdb_LineT*, %llvmdb_LineT** %29
	store %llvmdb_LineT* %30, %llvmdb_LineT** %ln
	br label %L.1
L.2:
	store %llvmdb_LineT* null, %llvmdb_LineT** @llvmdb_lnhead
	store %llvmdb_LineT* null, %llvmdb_LineT** @llvmdb_lntail
	br label %return
return:
	ret void
}
@S.749 = private unnamed_addr constant [8 x i8] c", !dbg \00"
define internal void @llvmdb_PLine(i16 zeroext %lineno$) nounwind {
L.0:
	%lineno = alloca i16
	store i16 %lineno$, i16* %lineno
	%tag = alloca i16
	%ln = alloca %llvmdb_LineT*
	%0 = load %llvmdb_LineT*, %llvmdb_LineT** @llvmdb_lntail
	%1 = icmp ne %llvmdb_LineT* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %llvmdb_LineT*, %llvmdb_LineT** @llvmdb_lntail
	%3 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %2, i32 0, i32 2
	%4 = load i16, i16* %3
	%5 = load i16, i16* %lineno
	%6 = icmp eq i16 %4, %5
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.5
L.4:
	%8 = load %llvmdb_LineT*, %llvmdb_LineT** @llvmdb_lntail
	%9 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %8, i32 0, i32 1
	%10 = load i16, i16* %9
	store i16 %10, i16* %tag
	br label %L.3
L.5:
	%11 = load i16, i16* @llvmdb_seqno
	%12 = add i16 %11, 1
	store i16 %12, i16* @llvmdb_seqno
	%13 = load i16, i16* @llvmdb_seqno
	store i16 %13, i16* %tag
	%14 = call [0 x i8]* @sys_zalloc(i32 12)
	%15 = bitcast [0 x i8]* %14 to %llvmdb_LineT*
	store %llvmdb_LineT* %15, %llvmdb_LineT** %ln
	%16 = load i16, i16* %tag
	%17 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%18 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %17, i32 0, i32 1
	store i16 %16, i16* %18
	%19 = load i16, i16* %lineno
	%20 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%21 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %20, i32 0, i32 2
	store i16 %19, i16* %21
	%22 = call i16 @llvmdb_GetLineContext()
	%23 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%24 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %23, i32 0, i32 3
	store i16 %22, i16* %24
	%25 = load %llvmdb_LineT*, %llvmdb_LineT** @llvmdb_lntail
	%26 = icmp eq %llvmdb_LineT* %25, null
	br i1 %26, label %L.7, label %L.8
L.7:
	%27 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	store %llvmdb_LineT* %27, %llvmdb_LineT** @llvmdb_lnhead
	br label %L.6
L.8:
	%28 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	%29 = load %llvmdb_LineT*, %llvmdb_LineT** @llvmdb_lntail
	%30 = getelementptr %llvmdb_LineT, %llvmdb_LineT* %29, i32 0, i32 0
	store %llvmdb_LineT* %28, %llvmdb_LineT** %30
	br label %L.6
L.6:
	%31 = load %llvmdb_LineT*, %llvmdb_LineT** %ln
	store %llvmdb_LineT* %31, %llvmdb_LineT** @llvmdb_lntail
	br label %L.3
L.3:
	%32 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%33 = getelementptr [8 x i8], [8 x i8]* @S.749
	%34 = bitcast [8 x i8]* %33 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %32, [0 x i8]* %34)
	%35 = load i16, i16* %tag
	call void @llvmdb_PSeq(i16 %35)
	br label %return
return:
	ret void
}
@S.750 = private unnamed_addr constant [39 x i8] c"\09call void @llvm.dbg.declare(metadata \00"
@S.751 = private unnamed_addr constant [3 x i8] c"* \00"
@S.752 = private unnamed_addr constant [13 x i8] c", metadata !\00"
@S.753 = private unnamed_addr constant [13 x i8] c", metadata !\00"
@S.754 = private unnamed_addr constant [8 x i8] c", !dbg \00"
@S.755 = private unnamed_addr constant [27 x i8] c"DIGlobalVariableExpression\00"
@S.756 = private unnamed_addr constant [6 x i8] c"var: \00"
@S.757 = private unnamed_addr constant [24 x i8] c"expr: !DIExpression())\0A\00"
@S.758 = private unnamed_addr constant [17 x i8] c"DIGlobalVariable\00"
@S.759 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.760 = private unnamed_addr constant [8 x i8] c"scope: \00"
@S.761 = private unnamed_addr constant [7 x i8] c"file: \00"
@S.762 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.763 = private unnamed_addr constant [7 x i8] c"type: \00"
@S.764 = private unnamed_addr constant [10 x i8] c"isLocal: \00"
@S.765 = private unnamed_addr constant [15 x i8] c"isDefinition: \00"
@S.766 = private unnamed_addr constant [13 x i8] c", variable: \00"
@S.767 = private unnamed_addr constant [3 x i8] c"* \00"
@S.768 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal zeroext i16 @llvmdb_DefVar(%symb_SymbNode* %s$) nounwind {
L.0:
	%rv.0 = alloca i16
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%ttag = alloca i16
	%vtag = alloca i16
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 12
	store i16 %2, i16* %4
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = getelementptr %symb_SymbNode, %symb_SymbNode* %5, i32 0, i32 14
	%7 = load i8, i8* %6
	%8 = zext i8 %7 to i32
	switch i32 %8, label %L.1 [
		i32 1, label %L.3
		i32 0, label %L.3
	]
L.3:
	%9 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%10 = getelementptr [39 x i8], [39 x i8]* @S.750
	%11 = bitcast [39 x i8]* %10 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %9, [0 x i8]* %11)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 1
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	call void @llvm_PType(%type_TypeNode* %14)
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = getelementptr [3 x i8], [3 x i8]* @S.751
	%17 = bitcast [3 x i8]* %16 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %17)
	%18 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvm_PName(%symb_SymbNode* %18)
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%20 = getelementptr [13 x i8], [13 x i8]* @S.752
	%21 = bitcast [13 x i8]* %20 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %19, [0 x i8]* %21)
	%22 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%23 = load i16, i16* @llvmdb_seqno
	%24 = zext i16 %23 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %22, i32 %24)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = getelementptr [13 x i8], [13 x i8]* @S.753
	%27 = bitcast [13 x i8]* %26 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %27)
	%28 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%29 = load i16, i16* @llvmdb_expr
	%30 = zext i16 %29 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %28, i32 %30)
	%31 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %31, i8 41)
	%32 = load %symb_SymbNode*, %symb_SymbNode** %s
	%33 = getelementptr %symb_SymbNode, %symb_SymbNode* %32, i32 0, i32 11
	%34 = load i16, i16* %33
	call void @llvmdb_PLine(i16 %34)
	%35 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %35)
	%36 = load %symb_SymbNode*, %symb_SymbNode** %s
	%37 = getelementptr %symb_SymbNode, %symb_SymbNode* %36, i32 0, i32 14
	%38 = load i8, i8* %37
	%39 = icmp ne i8 %38, 0
	br i1 %39, label %L.5, label %L.4
L.5:
	%40 = load %symb_SymbNode*, %symb_SymbNode** %s
	%41 = getelementptr %symb_SymbNode, %symb_SymbNode* %40, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %41
	%42 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_lvtail
	%43 = icmp eq %symb_SymbNode* %42, null
	br i1 %43, label %L.7, label %L.8
L.7:
	%44 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %44, %symb_SymbNode** @llvmdb_lvhead
	br label %L.6
L.8:
	%45 = load %symb_SymbNode*, %symb_SymbNode** %s
	%46 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_lvtail
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 0
	store %symb_SymbNode* %45, %symb_SymbNode** %47
	br label %L.6
L.6:
	%48 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %48, %symb_SymbNode** @llvmdb_lvtail
	br label %L.4
L.4:
	br label %L.2
L.1:
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = getelementptr %symb_SymbNode, %symb_SymbNode* %49, i32 0, i32 12
	%51 = load i16, i16* %50
	store i16 %51, i16* %vtag
	%52 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	%53 = load i8, i8* %52
	%54 = icmp uge i8 %53, 6
	br i1 %54, label %L.10, label %L.11
L.10:
	%etag = alloca i16
	%55 = load i16, i16* @llvmdb_seqno
	%56 = add i16 %55, 1
	store i16 %56, i16* @llvmdb_seqno
	%57 = load i16, i16* @llvmdb_seqno
	store i16 %57, i16* %etag
	%58 = load %symb_SymbNode*, %symb_SymbNode** %s
	%59 = getelementptr %symb_SymbNode, %symb_SymbNode* %58, i32 0, i32 14
	%60 = load i8, i8* %59
	%61 = icmp ne i8 %60, 6
	br i1 %61, label %L.13, label %L.12
L.13:
	%62 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%63 = getelementptr [8 x i8], [8 x i8]* @S.754
	%64 = bitcast [8 x i8]* %63 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %62, [0 x i8]* %64)
	%65 = load i16, i16* %etag
	call void @llvmdb_PMetaRef(i16 %65, i8 3)
	br label %L.12
L.12:
	%66 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %66)
	%67 = load %symb_SymbNode*, %symb_SymbNode** %s
	%68 = getelementptr %symb_SymbNode, %symb_SymbNode* %67, i32 0, i32 1
	%69 = load %type_TypeNode*, %type_TypeNode** %68
	%70 = call i16 @llvmdb_DefType(%type_TypeNode* %69)
	store i16 %70, i16* %ttag
	%71 = load i16, i16* %etag
	%72 = getelementptr [27 x i8], [27 x i8]* @S.755
	%73 = bitcast [27 x i8]* %72 to [0 x i8]*
	call void @llvmdb_PStart(i16 %71, [0 x i8]* %73)
	%74 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%75 = getelementptr [6 x i8], [6 x i8]* @S.756
	%76 = bitcast [6 x i8]* %75 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %74, [0 x i8]* %76)
	%77 = load i16, i16* %vtag
	call void @llvmdb_PMetaRef(i16 %77, i8 0)
	%78 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%79 = getelementptr [24 x i8], [24 x i8]* @S.757
	%80 = bitcast [24 x i8]* %79 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %78, [0 x i8]* %80)
	%81 = load i16, i16* %etag
	%82 = load %symb_SymbNode*, %symb_SymbNode** %s
	%83 = getelementptr %symb_SymbNode, %symb_SymbNode* %82, i32 0, i32 12
	store i16 %81, i16* %83
	br label %L.9
L.11:
	%84 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %84)
	%85 = load %symb_SymbNode*, %symb_SymbNode** %s
	%86 = getelementptr %symb_SymbNode, %symb_SymbNode* %85, i32 0, i32 1
	%87 = load %type_TypeNode*, %type_TypeNode** %86
	%88 = call i16 @llvmdb_DefType(%type_TypeNode* %87)
	store i16 %88, i16* %ttag
	br label %L.9
L.9:
	%89 = load i16, i16* %vtag
	%90 = getelementptr [17 x i8], [17 x i8]* @S.758
	%91 = bitcast [17 x i8]* %90 to [0 x i8]*
	call void @llvmdb_PStartDistinct(i16 %89, [0 x i8]* %91)
	%92 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%93 = getelementptr [7 x i8], [7 x i8]* @S.759
	%94 = bitcast [7 x i8]* %93 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %92, [0 x i8]* %94)
	%95 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvmdb_PFullName(%symb_SymbNode* %95, i8 0)
	%96 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%97 = getelementptr [8 x i8], [8 x i8]* @S.760
	%98 = bitcast [8 x i8]* %97 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %96, [0 x i8]* %98)
	call void @llvmdb_PMetaRef(i16 0, i8 0)
	%99 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%100 = getelementptr [7 x i8], [7 x i8]* @S.761
	%101 = bitcast [7 x i8]* %100 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %99, [0 x i8]* %101)
	%102 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %102, i8 0)
	%103 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%104 = getelementptr [7 x i8], [7 x i8]* @S.762
	%105 = bitcast [7 x i8]* %104 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %103, [0 x i8]* %105)
	%106 = load %symb_SymbNode*, %symb_SymbNode** %s
	%107 = getelementptr %symb_SymbNode, %symb_SymbNode* %106, i32 0, i32 11
	%108 = load i16, i16* %107
	%109 = zext i16 %108 to i32
	call void @llvmdb_PUint(i32 %109, i8 0)
	%110 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%111 = getelementptr [7 x i8], [7 x i8]* @S.763
	%112 = bitcast [7 x i8]* %111 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %110, [0 x i8]* %112)
	%113 = load i16, i16* %ttag
	call void @llvmdb_PMetaRef(i16 %113, i8 0)
	%114 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%115 = getelementptr [10 x i8], [10 x i8]* @S.764
	%116 = bitcast [10 x i8]* %115 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %114, [0 x i8]* %116)
	%117 = load %symb_SymbNode*, %symb_SymbNode** %s
	%118 = getelementptr %symb_SymbNode, %symb_SymbNode* %117, i32 0, i32 14
	%119 = load i8, i8* %118
	%120 = icmp eq i8 %119, 2
	%121 = zext i1 %120 to i8
	call void @llvmdb_PBoolean(i8 %121, i8 0)
	%122 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%123 = getelementptr [15 x i8], [15 x i8]* @S.765
	%124 = bitcast [15 x i8]* %123 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %122, [0 x i8]* %124)
	%125 = load %symb_SymbNode*, %symb_SymbNode** %s
	%126 = getelementptr %symb_SymbNode, %symb_SymbNode* %125, i32 0, i32 14
	%127 = load i8, i8* %126
	%128 = icmp ne i8 %127, 5
	%129 = zext i1 %128 to i8
	call void @llvmdb_PBoolean(i8 %129, i8 3)
	%130 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	%131 = load i8, i8* %130
	%132 = icmp ult i8 %131, 6
	br i1 %132, label %L.15, label %L.14
L.15:
	%133 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%134 = getelementptr [13 x i8], [13 x i8]* @S.766
	%135 = bitcast [13 x i8]* %134 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %133, [0 x i8]* %135)
	%136 = load %symb_SymbNode*, %symb_SymbNode** %s
	%137 = getelementptr %symb_SymbNode, %symb_SymbNode* %136, i32 0, i32 1
	%138 = load %type_TypeNode*, %type_TypeNode** %137
	call void @llvm_PType(%type_TypeNode* %138)
	%139 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%140 = getelementptr [3 x i8], [3 x i8]* @S.767
	%141 = bitcast [3 x i8]* %140 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %139, [0 x i8]* %141)
	%142 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvm_PName(%symb_SymbNode* %142)
	br label %L.14
L.14:
	%143 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%144 = getelementptr [3 x i8], [3 x i8]* @S.768
	%145 = bitcast [3 x i8]* %144 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %143, [0 x i8]* %145)
	%146 = load %symb_SymbNode*, %symb_SymbNode** %s
	%147 = getelementptr %symb_SymbNode, %symb_SymbNode* %146, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %147
	%148 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_gvtail
	%149 = icmp eq %symb_SymbNode* %148, null
	br i1 %149, label %L.17, label %L.18
L.17:
	%150 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %150, %symb_SymbNode** @llvmdb_gvhead
	%151 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %151, %symb_SymbNode** @llvmdb_gvtail
	br label %L.16
L.18:
	%152 = load %symb_SymbNode*, %symb_SymbNode** %s
	%153 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_gvtail
	%154 = getelementptr %symb_SymbNode, %symb_SymbNode* %153, i32 0, i32 0
	store %symb_SymbNode* %152, %symb_SymbNode** %154
	%155 = load %symb_SymbNode*, %symb_SymbNode** %s
	store %symb_SymbNode* %155, %symb_SymbNode** @llvmdb_gvtail
	br label %L.16
L.16:
	br label %L.2
L.2:
	%156 = load i16, i16* @llvmdb_seqno
	store i16 %156, i16* %rv.0
	br label %return
return:
	%157 = load i16, i16* %rv.0
	ret i16 %157
}
@S.769 = private unnamed_addr constant [17 x i8] c"DISubroutineType\00"
@S.770 = private unnamed_addr constant [8 x i8] c"types: \00"
@S.771 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_DefSubroutine(i16 zeroext %stag$, %symb_SymbNode* %ps$) nounwind {
L.0:
	%stag = alloca i16
	store i16 %stag$, i16* %stag
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%tag = alloca i16
	%list = alloca i16
	%s = alloca %symb_SymbNode*
	%rs = alloca %symb_SymbNode*
	%term = alloca i8
	%0 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 4
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %rs
	br label %L.1
L.1:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 1
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	%9 = call i16 @llvmdb_DefType(%type_TypeNode* %8)
	%10 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 0
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	store %symb_SymbNode* %12, %symb_SymbNode** %rs
	br label %L.1
L.2:
	%13 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%14 = getelementptr %symb_SymbNode, %symb_SymbNode* %13, i32 0, i32 3
	%15 = load %symb_SymbNode*, %symb_SymbNode** %14
	store %symb_SymbNode* %15, %symb_SymbNode** %s
	br label %L.4
L.4:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = icmp ne %symb_SymbNode* %16, null
	%18 = xor i1 %17, true
	br i1 %18, label %L.5, label %L.6
L.6:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = call i16 @llvmdb_DefType(%type_TypeNode* %21)
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 0
	%25 = load %symb_SymbNode*, %symb_SymbNode** %24
	store %symb_SymbNode* %25, %symb_SymbNode** %s
	br label %L.4
L.5:
	%26 = call i16 @llvmdb_PNewListStart()
	store i16 %26, i16* %list
	%27 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 4
	%29 = load %symb_SymbNode*, %symb_SymbNode** %28
	store %symb_SymbNode* %29, %symb_SymbNode** %rs
	%30 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%31 = getelementptr %symb_SymbNode, %symb_SymbNode* %30, i32 0, i32 3
	%32 = load %symb_SymbNode*, %symb_SymbNode** %31
	store %symb_SymbNode* %32, %symb_SymbNode** %s
	store i8 0, i8* %term
	%33 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%34 = icmp eq %symb_SymbNode* %33, null
	br i1 %34, label %L.8, label %L.9
L.8:
	%35 = load %symb_SymbNode*, %symb_SymbNode** %s
	%36 = icmp eq %symb_SymbNode* %35, null
	br i1 %36, label %L.11, label %L.10
L.11:
	store i8 1, i8* %term
	br label %L.10
L.10:
	%37 = load i8, i8* %term
	call void @llvmdb_PNull(i8 %37)
	br label %L.7
L.9:
	br label %L.12
L.12:
	%38 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%39 = icmp ne %symb_SymbNode* %38, null
	%40 = xor i1 %39, true
	br i1 %40, label %L.13, label %L.14
L.14:
	%41 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%42 = getelementptr %symb_SymbNode, %symb_SymbNode* %41, i32 0, i32 1
	%43 = load %type_TypeNode*, %type_TypeNode** %42
	%44 = getelementptr %type_TypeNode, %type_TypeNode* %43, i32 0, i32 14
	%45 = load i16, i16* %44
	store i16 %45, i16* %tag
	%46 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%47 = getelementptr %symb_SymbNode, %symb_SymbNode* %46, i32 0, i32 0
	%48 = load %symb_SymbNode*, %symb_SymbNode** %47
	store %symb_SymbNode* %48, %symb_SymbNode** %rs
	%49 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%50 = icmp eq %symb_SymbNode* %49, null
	br i1 %50, label %L.15, label %L.16
L.15:
	%51 = load %symb_SymbNode*, %symb_SymbNode** %s
	%52 = icmp eq %symb_SymbNode* %51, null
	br label %L.16
L.16:
	%53 = phi i1 [ false, %L.14 ], [ %52, %L.15 ]
	br i1 %53, label %L.18, label %L.17
L.18:
	store i8 1, i8* %term
	br label %L.17
L.17:
	%54 = load i16, i16* %tag
	%55 = load i8, i8* %term
	call void @llvmdb_PMetaRef(i16 %54, i8 %55)
	br label %L.12
L.13:
	br label %L.7
L.7:
	store i8 0, i8* %term
	br label %L.19
L.19:
	%56 = load %symb_SymbNode*, %symb_SymbNode** %s
	%57 = icmp ne %symb_SymbNode* %56, null
	%58 = xor i1 %57, true
	br i1 %58, label %L.20, label %L.21
L.21:
	%59 = load %symb_SymbNode*, %symb_SymbNode** %s
	%60 = getelementptr %symb_SymbNode, %symb_SymbNode* %59, i32 0, i32 1
	%61 = load %type_TypeNode*, %type_TypeNode** %60
	%62 = getelementptr %type_TypeNode, %type_TypeNode* %61, i32 0, i32 14
	%63 = load i16, i16* %62
	store i16 %63, i16* %tag
	%64 = load %symb_SymbNode*, %symb_SymbNode** %s
	%65 = getelementptr %symb_SymbNode, %symb_SymbNode* %64, i32 0, i32 0
	%66 = load %symb_SymbNode*, %symb_SymbNode** %65
	store %symb_SymbNode* %66, %symb_SymbNode** %s
	%67 = load %symb_SymbNode*, %symb_SymbNode** %s
	%68 = icmp eq %symb_SymbNode* %67, null
	br i1 %68, label %L.23, label %L.22
L.23:
	store i8 1, i8* %term
	br label %L.22
L.22:
	%69 = load i16, i16* %tag
	%70 = load i8, i8* %term
	call void @llvmdb_PMetaRef(i16 %69, i8 %70)
	br label %L.19
L.20:
	%71 = load i16, i16* %stag
	%72 = getelementptr [17 x i8], [17 x i8]* @S.769
	%73 = bitcast [17 x i8]* %72 to [0 x i8]*
	call void @llvmdb_PStart(i16 %71, [0 x i8]* %73)
	%74 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%75 = getelementptr [8 x i8], [8 x i8]* @S.770
	%76 = bitcast [8 x i8]* %75 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %74, [0 x i8]* %76)
	%77 = load i16, i16* %list
	call void @llvmdb_PMetaRef(i16 %77, i8 3)
	%78 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%79 = getelementptr [3 x i8], [3 x i8]* @S.771
	%80 = bitcast [3 x i8]* %79 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %78, [0 x i8]* %80)
	br label %return
return:
	ret void
}
define internal void @llvmdb_ProcStart(%symb_SymbNode* %ps$) nounwind {
L.0:
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* @llvmdb_subr
	br label %return
return:
	ret void
}
@S.772 = private unnamed_addr constant [13 x i8] c"DISubprogram\00"
@S.773 = private unnamed_addr constant [13 x i8] c"DISubprogram\00"
@S.774 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.775 = private unnamed_addr constant [8 x i8] c"scope: \00"
@S.776 = private unnamed_addr constant [7 x i8] c"file: \00"
@S.777 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.778 = private unnamed_addr constant [7 x i8] c"type: \00"
@S.779 = private unnamed_addr constant [10 x i8] c"isLocal: \00"
@S.780 = private unnamed_addr constant [15 x i8] c"isDefinition: \00"
@S.781 = private unnamed_addr constant [12 x i8] c"scopeLine: \00"
@S.782 = private unnamed_addr constant [8 x i8] c"flags: \00"
@S.783 = private unnamed_addr constant [17 x i8] c"DIFlagPrototyped\00"
@S.784 = private unnamed_addr constant [14 x i8] c"isOptimized: \00"
@S.785 = private unnamed_addr constant [7 x i8] c"unit: \00"
@S.786 = private unnamed_addr constant [16 x i8] c"retainedNodes: \00"
@S.787 = private unnamed_addr constant [3 x i8] c")\0A\00"
@S.788 = private unnamed_addr constant [16 x i8] c"DILocalVariable\00"
@S.789 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.790 = private unnamed_addr constant [6 x i8] c"arg: \00"
@S.791 = private unnamed_addr constant [8 x i8] c"scope: \00"
@S.792 = private unnamed_addr constant [7 x i8] c"file: \00"
@S.793 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.794 = private unnamed_addr constant [7 x i8] c"type: \00"
@S.795 = private unnamed_addr constant [3 x i8] c")\0A\00"
@S.796 = private unnamed_addr constant [16 x i8] c"DILocalVariable\00"
@S.797 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.798 = private unnamed_addr constant [8 x i8] c"scope: \00"
@S.799 = private unnamed_addr constant [7 x i8] c"file: \00"
@S.800 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.801 = private unnamed_addr constant [7 x i8] c"type: \00"
@S.802 = private unnamed_addr constant [3 x i8] c")\0A\00"
@S.803 = private unnamed_addr constant [16 x i8] c"DILocalVariable\00"
@S.804 = private unnamed_addr constant [7 x i8] c"name: \00"
@S.805 = private unnamed_addr constant [8 x i8] c"scope: \00"
@S.806 = private unnamed_addr constant [7 x i8] c"file: \00"
@S.807 = private unnamed_addr constant [7 x i8] c"line: \00"
@S.808 = private unnamed_addr constant [7 x i8] c"type: \00"
@S.809 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_ProcFinish(%symb_SymbNode* %ps$) nounwind {
L.0:
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%s = alloca %symb_SymbNode*
	%stype = alloca i16
	%stag = alloca i16
	%ttag = alloca i16
	%fvars = alloca i16
	%empty = alloca i16
	%argno = alloca i32
	%isdef = alloca i8
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* %stype
	%3 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 14
	%5 = load i8, i8* %4
	%6 = icmp ne i8 %5, 5
	%7 = zext i1 %6 to i8
	store i8 %7, i8* %isdef
	%8 = load i8, i8* %isdef
	%9 = icmp ne i8 %8, 0
	br i1 %9, label %L.2, label %L.3
L.2:
	%10 = load i16, i16* @llvmdb_subr
	%11 = getelementptr [13 x i8], [13 x i8]* @S.772
	%12 = bitcast [13 x i8]* %11 to [0 x i8]*
	call void @llvmdb_PStartDistinct(i16 %10, [0 x i8]* %12)
	br label %L.1
L.3:
	%13 = load i16, i16* @llvmdb_subr
	%14 = getelementptr [13 x i8], [13 x i8]* @S.773
	%15 = bitcast [13 x i8]* %14 to [0 x i8]*
	call void @llvmdb_PStart(i16 %13, [0 x i8]* %15)
	br label %L.1
L.1:
	%16 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%17 = getelementptr [7 x i8], [7 x i8]* @S.774
	%18 = bitcast [7 x i8]* %17 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %16, [0 x i8]* %18)
	%19 = load %symb_SymbNode*, %symb_SymbNode** %ps
	call void @llvmdb_PFullName(%symb_SymbNode* %19, i8 0)
	%20 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%21 = getelementptr [8 x i8], [8 x i8]* @S.775
	%22 = bitcast [8 x i8]* %21 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %20, [0 x i8]* %22)
	%23 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %23, i8 0)
	%24 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%25 = getelementptr [7 x i8], [7 x i8]* @S.776
	%26 = bitcast [7 x i8]* %25 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %24, [0 x i8]* %26)
	%27 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %27, i8 0)
	%28 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%29 = getelementptr [7 x i8], [7 x i8]* @S.777
	%30 = bitcast [7 x i8]* %29 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %28, [0 x i8]* %30)
	%31 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%32 = getelementptr %symb_SymbNode, %symb_SymbNode* %31, i32 0, i32 11
	%33 = load i16, i16* %32
	%34 = zext i16 %33 to i32
	call void @llvmdb_PUint(i32 %34, i8 0)
	%35 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%36 = getelementptr [7 x i8], [7 x i8]* @S.778
	%37 = bitcast [7 x i8]* %36 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %35, [0 x i8]* %37)
	%38 = load i16, i16* %stype
	call void @llvmdb_PMetaRef(i16 %38, i8 0)
	%39 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%40 = getelementptr [10 x i8], [10 x i8]* @S.779
	%41 = bitcast [10 x i8]* %40 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %39, [0 x i8]* %41)
	%42 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%43 = getelementptr %symb_SymbNode, %symb_SymbNode* %42, i32 0, i32 14
	%44 = load i8, i8* %43
	%45 = icmp ne i8 %44, 3
	%46 = zext i1 %45 to i8
	call void @llvmdb_PBoolean(i8 %46, i8 0)
	%47 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%48 = getelementptr [15 x i8], [15 x i8]* @S.780
	%49 = bitcast [15 x i8]* %48 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %47, [0 x i8]* %49)
	%50 = load i8, i8* %isdef
	call void @llvmdb_PBoolean(i8 %50, i8 0)
	%51 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%52 = getelementptr [12 x i8], [12 x i8]* @S.781
	%53 = bitcast [12 x i8]* %52 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %51, [0 x i8]* %53)
	%54 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%55 = getelementptr %symb_SymbNode, %symb_SymbNode* %54, i32 0, i32 11
	%56 = load i16, i16* %55
	%57 = zext i16 %56 to i32
	%58 = add i32 %57, 1
	call void @llvmdb_PUint(i32 %58, i8 0)
	%59 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%60 = getelementptr %symb_SymbNode, %symb_SymbNode* %59, i32 0, i32 3
	%61 = load %symb_SymbNode*, %symb_SymbNode** %60
	%62 = icmp ne %symb_SymbNode* %61, null
	br i1 %62, label %L.5, label %L.4
L.5:
	%63 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%64 = getelementptr [8 x i8], [8 x i8]* @S.782
	%65 = bitcast [8 x i8]* %64 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %63, [0 x i8]* %65)
	%66 = getelementptr [17 x i8], [17 x i8]* @S.783
	%67 = bitcast [17 x i8]* %66 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %67, i8 0)
	br label %L.4
L.4:
	%68 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%69 = getelementptr [14 x i8], [14 x i8]* @S.784
	%70 = bitcast [14 x i8]* %69 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %68, [0 x i8]* %70)
	call void @llvmdb_PBoolean(i8 0, i8 0)
	%71 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%72 = getelementptr [7 x i8], [7 x i8]* @S.785
	%73 = bitcast [7 x i8]* %72 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %71, [0 x i8]* %73)
	%74 = load i16, i16* @llvmdb_unit
	call void @llvmdb_PMetaRef(i16 %74, i8 0)
	%75 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%76 = getelementptr [16 x i8], [16 x i8]* @S.786
	%77 = bitcast [16 x i8]* %76 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %75, [0 x i8]* %77)
	%78 = load i16, i16* @llvmdb_nullmeta
	call void @llvmdb_PMetaRef(i16 %78, i8 3)
	%79 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%80 = getelementptr [3 x i8], [3 x i8]* @S.787
	%81 = bitcast [3 x i8]* %80 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %79, [0 x i8]* %81)
	%82 = load i16, i16* @llvmdb_subr
	%83 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%84 = getelementptr %symb_SymbNode, %symb_SymbNode* %83, i32 0, i32 12
	store i16 %82, i16* %84
	%85 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%86 = getelementptr %symb_SymbNode, %symb_SymbNode* %85, i32 0, i32 0
	store %symb_SymbNode* null, %symb_SymbNode** %86
	%87 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_sptail
	%88 = icmp eq %symb_SymbNode* %87, null
	br i1 %88, label %L.7, label %L.8
L.7:
	%89 = load %symb_SymbNode*, %symb_SymbNode** %ps
	store %symb_SymbNode* %89, %symb_SymbNode** @llvmdb_sphead
	br label %L.6
L.8:
	%90 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%91 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_sptail
	%92 = getelementptr %symb_SymbNode, %symb_SymbNode* %91, i32 0, i32 0
	store %symb_SymbNode* %90, %symb_SymbNode** %92
	br label %L.6
L.6:
	%93 = load %symb_SymbNode*, %symb_SymbNode** %ps
	store %symb_SymbNode* %93, %symb_SymbNode** @llvmdb_sptail
	%94 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%95 = call i32 @llvmdb_DefFormals(%symb_SymbNode* %94)
	%96 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%97 = call i32 @llvmdb_DefRetvs(%symb_SymbNode* %96)
	%98 = load i16, i16* %stype
	%99 = load %symb_SymbNode*, %symb_SymbNode** %ps
	call void @llvmdb_DefSubroutine(i16 %98, %symb_SymbNode* %99)
	store i32 0, i32* %argno
	%100 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%101 = getelementptr %symb_SymbNode, %symb_SymbNode* %100, i32 0, i32 3
	%102 = load %symb_SymbNode*, %symb_SymbNode** %101
	store %symb_SymbNode* %102, %symb_SymbNode** %s
	br label %L.9
L.9:
	%103 = load %symb_SymbNode*, %symb_SymbNode** %s
	%104 = icmp ne %symb_SymbNode* %103, null
	%105 = xor i1 %104, true
	br i1 %105, label %L.10, label %L.11
L.11:
	%106 = load i32, i32* %argno
	%107 = add i32 %106, 1
	store i32 %107, i32* %argno
	%108 = load %symb_SymbNode*, %symb_SymbNode** %s
	%109 = getelementptr %symb_SymbNode, %symb_SymbNode* %108, i32 0, i32 1
	%110 = load %type_TypeNode*, %type_TypeNode** %109
	%111 = call i16 @llvmdb_DefType(%type_TypeNode* %110)
	store i16 %111, i16* %ttag
	%112 = load %symb_SymbNode*, %symb_SymbNode** %s
	%113 = getelementptr %symb_SymbNode, %symb_SymbNode* %112, i32 0, i32 12
	%114 = load i16, i16* %113
	store i16 %114, i16* %stag
	%115 = load i16, i16* %stag
	%116 = icmp eq i16 %115, 0
	br i1 %116, label %L.13, label %L.12
L.13:
	%117 = load i16, i16* @llvmdb_seqno
	%118 = add i16 %117, 1
	store i16 %118, i16* @llvmdb_seqno
	%119 = load i16, i16* @llvmdb_seqno
	store i16 %119, i16* %stag
	br label %L.12
L.12:
	%120 = load i16, i16* %stag
	%121 = getelementptr [16 x i8], [16 x i8]* @S.788
	%122 = bitcast [16 x i8]* %121 to [0 x i8]*
	call void @llvmdb_PStart(i16 %120, [0 x i8]* %122)
	%123 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%124 = getelementptr [7 x i8], [7 x i8]* @S.789
	%125 = bitcast [7 x i8]* %124 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %123, [0 x i8]* %125)
	%126 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvmdb_PName(%symb_SymbNode* %126, i8 0)
	%127 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%128 = getelementptr [6 x i8], [6 x i8]* @S.790
	%129 = bitcast [6 x i8]* %128 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %127, [0 x i8]* %129)
	%130 = load i32, i32* %argno
	call void @llvmdb_PUint(i32 %130, i8 0)
	%131 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%132 = getelementptr [8 x i8], [8 x i8]* @S.791
	%133 = bitcast [8 x i8]* %132 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %131, [0 x i8]* %133)
	%134 = load i16, i16* @llvmdb_subr
	call void @llvmdb_PMetaRef(i16 %134, i8 0)
	%135 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%136 = getelementptr [7 x i8], [7 x i8]* @S.792
	%137 = bitcast [7 x i8]* %136 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %135, [0 x i8]* %137)
	%138 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %138, i8 0)
	%139 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%140 = getelementptr [7 x i8], [7 x i8]* @S.793
	%141 = bitcast [7 x i8]* %140 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %139, [0 x i8]* %141)
	%142 = load %symb_SymbNode*, %symb_SymbNode** %s
	%143 = getelementptr %symb_SymbNode, %symb_SymbNode* %142, i32 0, i32 11
	%144 = load i16, i16* %143
	%145 = zext i16 %144 to i32
	call void @llvmdb_PUint(i32 %145, i8 0)
	%146 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%147 = getelementptr [7 x i8], [7 x i8]* @S.794
	%148 = bitcast [7 x i8]* %147 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %146, [0 x i8]* %148)
	%149 = load i16, i16* %ttag
	call void @llvmdb_PMetaRef(i16 %149, i8 3)
	%150 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%151 = getelementptr [3 x i8], [3 x i8]* @S.795
	%152 = bitcast [3 x i8]* %151 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %150, [0 x i8]* %152)
	%153 = load %symb_SymbNode*, %symb_SymbNode** %s
	%154 = getelementptr %symb_SymbNode, %symb_SymbNode* %153, i32 0, i32 0
	%155 = load %symb_SymbNode*, %symb_SymbNode** %154
	store %symb_SymbNode* %155, %symb_SymbNode** %s
	br label %L.9
L.10:
	%156 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%157 = getelementptr %symb_SymbNode, %symb_SymbNode* %156, i32 0, i32 16
	%158 = load i8, i8* %157
	%159 = icmp ne i8 %158, 0
	br i1 %159, label %L.15, label %L.14
L.15:
	%160 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%161 = getelementptr %symb_SymbNode, %symb_SymbNode* %160, i32 0, i32 4
	%162 = load %symb_SymbNode*, %symb_SymbNode** %161
	store %symb_SymbNode* %162, %symb_SymbNode** %s
	br label %L.16
L.16:
	%163 = load %symb_SymbNode*, %symb_SymbNode** %s
	%164 = icmp ne %symb_SymbNode* %163, null
	%165 = xor i1 %164, true
	br i1 %165, label %L.17, label %L.18
L.18:
	%166 = load %symb_SymbNode*, %symb_SymbNode** %s
	%167 = getelementptr %symb_SymbNode, %symb_SymbNode* %166, i32 0, i32 1
	%168 = load %type_TypeNode*, %type_TypeNode** %167
	%169 = call i16 @llvmdb_DefType(%type_TypeNode* %168)
	store i16 %169, i16* %ttag
	%170 = load %symb_SymbNode*, %symb_SymbNode** %s
	%171 = getelementptr %symb_SymbNode, %symb_SymbNode* %170, i32 0, i32 12
	%172 = load i16, i16* %171
	store i16 %172, i16* %stag
	%173 = load i16, i16* %stag
	%174 = icmp eq i16 %173, 0
	br i1 %174, label %L.20, label %L.19
L.20:
	%175 = load i16, i16* @llvmdb_seqno
	%176 = add i16 %175, 1
	store i16 %176, i16* @llvmdb_seqno
	%177 = load i16, i16* @llvmdb_seqno
	store i16 %177, i16* %stag
	br label %L.19
L.19:
	%178 = load i16, i16* %stag
	%179 = getelementptr [16 x i8], [16 x i8]* @S.796
	%180 = bitcast [16 x i8]* %179 to [0 x i8]*
	call void @llvmdb_PStart(i16 %178, [0 x i8]* %180)
	%181 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%182 = getelementptr [7 x i8], [7 x i8]* @S.797
	%183 = bitcast [7 x i8]* %182 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %181, [0 x i8]* %183)
	%184 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvmdb_PName(%symb_SymbNode* %184, i8 0)
	%185 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%186 = getelementptr [8 x i8], [8 x i8]* @S.798
	%187 = bitcast [8 x i8]* %186 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %185, [0 x i8]* %187)
	%188 = load i16, i16* @llvmdb_subr
	call void @llvmdb_PMetaRef(i16 %188, i8 0)
	%189 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%190 = getelementptr [7 x i8], [7 x i8]* @S.799
	%191 = bitcast [7 x i8]* %190 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %189, [0 x i8]* %191)
	%192 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %192, i8 0)
	%193 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%194 = getelementptr [7 x i8], [7 x i8]* @S.800
	%195 = bitcast [7 x i8]* %194 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %193, [0 x i8]* %195)
	%196 = load %symb_SymbNode*, %symb_SymbNode** %s
	%197 = getelementptr %symb_SymbNode, %symb_SymbNode* %196, i32 0, i32 11
	%198 = load i16, i16* %197
	%199 = zext i16 %198 to i32
	call void @llvmdb_PUint(i32 %199, i8 0)
	%200 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%201 = getelementptr [7 x i8], [7 x i8]* @S.801
	%202 = bitcast [7 x i8]* %201 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %200, [0 x i8]* %202)
	%203 = load i16, i16* %ttag
	call void @llvmdb_PMetaRef(i16 %203, i8 3)
	%204 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%205 = getelementptr [3 x i8], [3 x i8]* @S.802
	%206 = bitcast [3 x i8]* %205 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %204, [0 x i8]* %206)
	%207 = load %symb_SymbNode*, %symb_SymbNode** %s
	%208 = getelementptr %symb_SymbNode, %symb_SymbNode* %207, i32 0, i32 0
	%209 = load %symb_SymbNode*, %symb_SymbNode** %208
	store %symb_SymbNode* %209, %symb_SymbNode** %s
	br label %L.16
L.17:
	br label %L.14
L.14:
	%210 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_lvhead
	store %symb_SymbNode* %210, %symb_SymbNode** %s
	br label %L.21
L.21:
	%211 = load %symb_SymbNode*, %symb_SymbNode** %s
	%212 = icmp ne %symb_SymbNode* %211, null
	%213 = xor i1 %212, true
	br i1 %213, label %L.22, label %L.23
L.23:
	%214 = load %symb_SymbNode*, %symb_SymbNode** %s
	%215 = getelementptr %symb_SymbNode, %symb_SymbNode* %214, i32 0, i32 1
	%216 = load %type_TypeNode*, %type_TypeNode** %215
	%217 = call i16 @llvmdb_DefType(%type_TypeNode* %216)
	store i16 %217, i16* %ttag
	%218 = load %symb_SymbNode*, %symb_SymbNode** %s
	%219 = getelementptr %symb_SymbNode, %symb_SymbNode* %218, i32 0, i32 12
	%220 = load i16, i16* %219
	store i16 %220, i16* %stag
	%221 = load i16, i16* %stag
	%222 = getelementptr [16 x i8], [16 x i8]* @S.803
	%223 = bitcast [16 x i8]* %222 to [0 x i8]*
	call void @llvmdb_PStart(i16 %221, [0 x i8]* %223)
	%224 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%225 = getelementptr [7 x i8], [7 x i8]* @S.804
	%226 = bitcast [7 x i8]* %225 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %224, [0 x i8]* %226)
	%227 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvmdb_PName(%symb_SymbNode* %227, i8 0)
	%228 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%229 = getelementptr [8 x i8], [8 x i8]* @S.805
	%230 = bitcast [8 x i8]* %229 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %228, [0 x i8]* %230)
	%231 = load i16, i16* @llvmdb_subr
	call void @llvmdb_PMetaRef(i16 %231, i8 0)
	%232 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%233 = getelementptr [7 x i8], [7 x i8]* @S.806
	%234 = bitcast [7 x i8]* %233 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %232, [0 x i8]* %234)
	%235 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %235, i8 0)
	%236 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%237 = getelementptr [7 x i8], [7 x i8]* @S.807
	%238 = bitcast [7 x i8]* %237 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %236, [0 x i8]* %238)
	%239 = load %symb_SymbNode*, %symb_SymbNode** %s
	%240 = getelementptr %symb_SymbNode, %symb_SymbNode* %239, i32 0, i32 11
	%241 = load i16, i16* %240
	%242 = zext i16 %241 to i32
	call void @llvmdb_PUint(i32 %242, i8 0)
	%243 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%244 = getelementptr [7 x i8], [7 x i8]* @S.808
	%245 = bitcast [7 x i8]* %244 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %243, [0 x i8]* %245)
	%246 = load i16, i16* %ttag
	call void @llvmdb_PMetaRef(i16 %246, i8 3)
	%247 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%248 = getelementptr [3 x i8], [3 x i8]* @S.809
	%249 = bitcast [3 x i8]* %248 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %247, [0 x i8]* %249)
	%250 = load %symb_SymbNode*, %symb_SymbNode** %s
	%251 = getelementptr %symb_SymbNode, %symb_SymbNode* %250, i32 0, i32 0
	%252 = load %symb_SymbNode*, %symb_SymbNode** %251
	store %symb_SymbNode* %252, %symb_SymbNode** %s
	br label %L.21
L.22:
	call void @llvmdb_DefLines()
	store %symb_SymbNode* null, %symb_SymbNode** @llvmdb_lvhead
	store %symb_SymbNode* null, %symb_SymbNode** @llvmdb_lvtail
	store i16 0, i16* @llvmdb_subr
	store i16 0, i16* @llvmdb_blok
	br label %return
return:
	ret void
}
define internal void @llvmdb_PackageStart([0 x i8]* %name$) nounwind {
L.0:
	%name = alloca [0 x i8]*
	store [0 x i8]* %name$, [0 x i8]** %name
	br label %return
return:
	ret void
}
define internal void @llvmdb_PackageEnd() nounwind {
L.0:
	br label %return
return:
	ret void
}
@S.810 = private unnamed_addr constant [1 x i8] c"\00"
@S.811 = private unnamed_addr constant [7 x i8] c"DIFile\00"
@S.812 = private unnamed_addr constant [11 x i8] c"filename: \00"
@S.813 = private unnamed_addr constant [12 x i8] c"directory: \00"
@S.814 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_PFileDir(i16 zeroext %seqno$, %symb_SymbNode* %fs$) nounwind {
L.0:
	%seqno = alloca i16
	store i16 %seqno$, i16* %seqno
	%fs = alloca %symb_SymbNode*
	store %symb_SymbNode* %fs$, %symb_SymbNode** %fs
	%i = alloca i32
	%file = alloca [0 x i8]*
	%dir = alloca [0 x i8]*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 23
	%2 = getelementptr [0 x i8], [0 x i8]* %1
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %dir
	%4 = load [0 x i8]*, [0 x i8]** %dir
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = call i32 @zstr_rfind([0 x i8]* %5, i8 47, i32 1024)
	store i32 %6, i32* %i
	%7 = load i32, i32* %i
	%8 = icmp eq i32 %7, 1024
	br i1 %8, label %L.2, label %L.3
L.2:
	%9 = load [0 x i8]*, [0 x i8]** %dir
	store [0 x i8]* %9, [0 x i8]** %file
	%10 = getelementptr [1 x i8], [1 x i8]* @S.810
	%11 = bitcast [1 x i8]* %10 to [0 x i8]*
	store [0 x i8]* %11, [0 x i8]** %dir
	br label %L.1
L.3:
	%12 = load [0 x i8]*, [0 x i8]** %dir
	%13 = load i32, i32* %i
	%14 = add i32 %13, 1
	%15 = getelementptr [0 x i8], [0 x i8]* %12, i32 0, i32 %14
	%16 = bitcast i8* %15 to [0 x i8]*
	%17 = getelementptr [0 x i8], [0 x i8]* %16
	%18 = bitcast [0 x i8]* %17 to [0 x i8]*
	store [0 x i8]* %18, [0 x i8]** %file
	%19 = load [0 x i8]*, [0 x i8]** %dir
	%20 = load i32, i32* %i
	%21 = getelementptr [0 x i8], [0 x i8]* %19, i32 0, i32 %20
	store i8 0, i8* %21
	br label %L.1
L.1:
	%22 = load i16, i16* %seqno
	%23 = getelementptr [7 x i8], [7 x i8]* @S.811
	%24 = bitcast [7 x i8]* %23 to [0 x i8]*
	call void @llvmdb_PStart(i16 %22, [0 x i8]* %24)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = getelementptr [11 x i8], [11 x i8]* @S.812
	%27 = bitcast [11 x i8]* %26 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %27)
	%28 = load [0 x i8]*, [0 x i8]** %file
	%29 = bitcast [0 x i8]* %28 to [0 x i8]*
	call void @llvmdb_PQString([0 x i8]* %29, i8 0)
	%30 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%31 = getelementptr [12 x i8], [12 x i8]* @S.813
	%32 = bitcast [12 x i8]* %31 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %30, [0 x i8]* %32)
	%33 = load [0 x i8]*, [0 x i8]** %dir
	%34 = bitcast [0 x i8]* %33 to [0 x i8]*
	call void @llvmdb_PQString([0 x i8]* %34, i8 3)
	%35 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%36 = getelementptr [3 x i8], [3 x i8]* @S.814
	%37 = bitcast [3 x i8]* %36 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %35, [0 x i8]* %37)
	%38 = load i32, i32* %i
	%39 = icmp ult i32 %38, 1024
	br i1 %39, label %L.5, label %L.4
L.5:
	%40 = load [0 x i8]*, [0 x i8]** %dir
	%41 = load i32, i32* %i
	%42 = getelementptr [0 x i8], [0 x i8]* %40, i32 0, i32 %41
	store i8 47, i8* %42
	br label %L.4
L.4:
	br label %return
return:
	ret void
}
define internal void @llvmdb_FileStart(%symb_SymbNode* %fs$) nounwind {
L.0:
	%fs = alloca %symb_SymbNode*
	store %symb_SymbNode* %fs$, %symb_SymbNode** %fs
	%tag = alloca i16
	%0 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 12
	%2 = load i16, i16* %1
	store i16 %2, i16* %tag
	%3 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%4 = getelementptr %symb_SymbNode, %symb_SymbNode* %3, i32 0, i32 12
	%5 = load i16, i16* %4
	%6 = icmp eq i16 %5, 0
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load i16, i16* @llvmdb_seqno
	%8 = add i16 %7, 1
	store i16 %8, i16* @llvmdb_seqno
	%9 = load i16, i16* @llvmdb_seqno
	store i16 %9, i16* %tag
	%10 = load i16, i16* %tag
	%11 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 12
	store i16 %10, i16* %12
	br label %L.1
L.1:
	%13 = load i16, i16* %tag
	store i16 %13, i16* @llvmdb_filenamedir
	%14 = load i16, i16* %tag
	%15 = load %symb_SymbNode*, %symb_SymbNode** %fs
	call void @llvmdb_PFileDir(i16 %14, %symb_SymbNode* %15)
	br label %return
return:
	ret void
}
define internal void @llvmdb_FileFinish(%symb_SymbNode* %fs$) nounwind {
L.0:
	%fs = alloca %symb_SymbNode*
	store %symb_SymbNode* %fs$, %symb_SymbNode** %fs
	%0 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 2
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %fs
	%3 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%4 = icmp ne %symb_SymbNode* %3, null
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%6 = getelementptr %symb_SymbNode, %symb_SymbNode* %5, i32 0, i32 12
	%7 = load i16, i16* %6
	store i16 %7, i16* @llvmdb_filenamedir
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.815 = private unnamed_addr constant [19 x i8] c"!llvm.dbg.cu = !{!\00"
@S.816 = private unnamed_addr constant [3 x i8] c"}\0A\00"
@S.817 = private unnamed_addr constant [32 x i8] c"!llvm.module.flags = !{!1, !2}\0A\00"
@S.818 = private unnamed_addr constant [40 x i8] c"!1 = !{i32 2, !\22Dwarf Version\22, i32 4}\0A\00"
@S.819 = private unnamed_addr constant [38 x i8] c"!2 = !{i32 2, !\22Debug Info Version\22, \00"
@S.820 = private unnamed_addr constant [14 x i8] c"DICompileUnit\00"
@S.821 = private unnamed_addr constant [11 x i8] c"language: \00"
@S.822 = private unnamed_addr constant [12 x i8] c"DW_LANG_C99\00"
@S.823 = private unnamed_addr constant [9 x i8] c", file: \00"
@S.824 = private unnamed_addr constant [11 x i8] c"producer: \00"
@S.825 = private unnamed_addr constant [13 x i8] c"ESL Compiler\00"
@S.826 = private unnamed_addr constant [14 x i8] c"isOptimized: \00"
@S.827 = private unnamed_addr constant [17 x i8] c"runtimeVersion: \00"
@S.828 = private unnamed_addr constant [15 x i8] c"emissionKind: \00"
@S.829 = private unnamed_addr constant [12 x i8] c"FullDebug, \00"
@S.830 = private unnamed_addr constant [10 x i8] c"globals: \00"
@S.831 = private unnamed_addr constant [3 x i8] c")\0A\00"
@S.832 = private unnamed_addr constant [4 x i8] c"{}\0A\00"
@S.833 = private unnamed_addr constant [13 x i8] c"DIExpression\00"
@S.834 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvmdb_ProgStart(%symb_SymbNode* %fs$, i8 zeroext %opt$) nounwind {
L.0:
	%fs = alloca %symb_SymbNode*
	store %symb_SymbNode* %fs$, %symb_SymbNode** %fs
	%opt = alloca i8
	store i8 %opt$, i8* %opt
	%debugversion = alloca i32
	store i16 0, i16* @llvmdb_unit
	store i16 2, i16* @llvmdb_seqno
	%0 = load i16, i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16, i16* @llvmdb_seqno
	store i16 %2, i16* @llvmdb_filenamedir
	%3 = load i16, i16* @llvmdb_seqno
	%4 = add i16 %3, 1
	store i16 %4, i16* @llvmdb_seqno
	%5 = load i16, i16* @llvmdb_seqno
	store i16 %5, i16* @llvmdb_nullmeta
	%6 = load i16, i16* @llvmdb_seqno
	%7 = add i16 %6, 1
	store i16 %7, i16* @llvmdb_seqno
	%8 = load i16, i16* @llvmdb_seqno
	store i16 %8, i16* @llvmdb_subprogs
	%9 = load i16, i16* @llvmdb_seqno
	%10 = add i16 %9, 1
	store i16 %10, i16* @llvmdb_seqno
	%11 = load i16, i16* @llvmdb_seqno
	store i16 %11, i16* @llvmdb_globals
	%12 = load i16, i16* @llvmdb_seqno
	%13 = add i16 %12, 1
	store i16 %13, i16* @llvmdb_seqno
	%14 = load i16, i16* @llvmdb_seqno
	store i16 %14, i16* @llvmdb_expr
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = getelementptr [19 x i8], [19 x i8]* @S.815
	%17 = bitcast [19 x i8]* %16 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %17)
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = load i16, i16* @llvmdb_unit
	%20 = zext i16 %19 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %18, i32 %20)
	%21 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%22 = getelementptr [3 x i8], [3 x i8]* @S.816
	%23 = bitcast [3 x i8]* %22 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %21, [0 x i8]* %23)
	%24 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%25 = getelementptr [32 x i8], [32 x i8]* @S.817
	%26 = bitcast [32 x i8]* %25 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %24, [0 x i8]* %26)
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = getelementptr [40 x i8], [40 x i8]* @S.818
	%29 = bitcast [40 x i8]* %28 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %27, [0 x i8]* %29)
	%30 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%31 = getelementptr [38 x i8], [38 x i8]* @S.819
	%32 = bitcast [38 x i8]* %31 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %30, [0 x i8]* %32)
	store i32 3, i32* %debugversion
	%33 = load i32, i32* %debugversion
	call void @llvmdb_P32(i32 %33, i8 1)
	%34 = load i16, i16* @llvmdb_unit
	%35 = getelementptr [14 x i8], [14 x i8]* @S.820
	%36 = bitcast [14 x i8]* %35 to [0 x i8]*
	call void @llvmdb_PStartDistinct(i16 %34, [0 x i8]* %36)
	%37 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%38 = getelementptr [11 x i8], [11 x i8]* @S.821
	%39 = bitcast [11 x i8]* %38 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %37, [0 x i8]* %39)
	%40 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%41 = getelementptr [12 x i8], [12 x i8]* @S.822
	%42 = bitcast [12 x i8]* %41 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %40, [0 x i8]* %42)
	%43 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%44 = getelementptr [9 x i8], [9 x i8]* @S.823
	%45 = bitcast [9 x i8]* %44 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %43, [0 x i8]* %45)
	%46 = load i16, i16* @llvmdb_filenamedir
	call void @llvmdb_PMetaRef(i16 %46, i8 0)
	%47 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%48 = getelementptr [11 x i8], [11 x i8]* @S.824
	%49 = bitcast [11 x i8]* %48 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %47, [0 x i8]* %49)
	%50 = getelementptr [13 x i8], [13 x i8]* @S.825
	%51 = bitcast [13 x i8]* %50 to [0 x i8]*
	call void @llvmdb_PQString([0 x i8]* %51, i8 0)
	%52 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%53 = getelementptr [14 x i8], [14 x i8]* @S.826
	%54 = bitcast [14 x i8]* %53 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %52, [0 x i8]* %54)
	call void @llvmdb_PBoolean(i8 0, i8 0)
	%55 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%56 = getelementptr [17 x i8], [17 x i8]* @S.827
	%57 = bitcast [17 x i8]* %56 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %55, [0 x i8]* %57)
	call void @llvmdb_PUint(i32 0, i8 0)
	%58 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%59 = getelementptr [15 x i8], [15 x i8]* @S.828
	%60 = bitcast [15 x i8]* %59 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %58, [0 x i8]* %60)
	%61 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%62 = getelementptr [12 x i8], [12 x i8]* @S.829
	%63 = bitcast [12 x i8]* %62 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %61, [0 x i8]* %63)
	%64 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%65 = getelementptr [10 x i8], [10 x i8]* @S.830
	%66 = bitcast [10 x i8]* %65 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %64, [0 x i8]* %66)
	%67 = load i16, i16* @llvmdb_globals
	call void @llvmdb_PMetaRef(i16 %67, i8 3)
	%68 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%69 = getelementptr [3 x i8], [3 x i8]* @S.831
	%70 = bitcast [3 x i8]* %69 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %68, [0 x i8]* %70)
	%71 = load i16, i16* @llvmdb_filenamedir
	%72 = load %symb_SymbNode*, %symb_SymbNode** %fs
	%73 = getelementptr %symb_SymbNode, %symb_SymbNode* %72, i32 0, i32 12
	store i16 %71, i16* %73
	%74 = load i16, i16* @llvmdb_nullmeta
	call void @llvmdb_PMetaSeq(i16 %74)
	%75 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%76 = getelementptr [4 x i8], [4 x i8]* @S.832
	%77 = bitcast [4 x i8]* %76 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %75, [0 x i8]* %77)
	%78 = load i16, i16* @llvmdb_expr
	%79 = getelementptr [13 x i8], [13 x i8]* @S.833
	%80 = bitcast [13 x i8]* %79 to [0 x i8]*
	call void @llvmdb_PStart(i16 %78, [0 x i8]* %80)
	%81 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%82 = getelementptr [3 x i8], [3 x i8]* @S.834
	%83 = bitcast [3 x i8]* %82 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %81, [0 x i8]* %83)
	br label %return
return:
	ret void
}
@S.835 = private unnamed_addr constant [80 x i8] c"declare void @llvm.dbg.declare(metadata, metadata, metadata) nounwind readnone\0A\00"
define internal void @llvmdb_ProgFinish() nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	%tag = alloca i16
	%list = alloca i16
	%term = alloca i8
	%0 = load i16, i16* @llvmdb_subprogs
	call void @llvmdb_PListStart(i16 %0)
	%1 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_sphead
	store %symb_SymbNode* %1, %symb_SymbNode** %s
	%2 = load %symb_SymbNode*, %symb_SymbNode** %s
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.2, label %L.3
L.2:
	store i8 0, i8* %term
	br label %L.4
L.4:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = icmp ne %symb_SymbNode* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.5, label %L.6
L.6:
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 12
	%9 = load i16, i16* %8
	store i16 %9, i16* %tag
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = getelementptr %symb_SymbNode, %symb_SymbNode* %10, i32 0, i32 0
	%12 = load %symb_SymbNode*, %symb_SymbNode** %11
	store %symb_SymbNode* %12, %symb_SymbNode** %s
	%13 = load %symb_SymbNode*, %symb_SymbNode** %s
	%14 = icmp eq %symb_SymbNode* %13, null
	br i1 %14, label %L.8, label %L.7
L.8:
	store i8 1, i8* %term
	br label %L.7
L.7:
	%15 = load i16, i16* %tag
	%16 = load i8, i8* %term
	call void @llvmdb_PMetaRef(i16 %15, i8 %16)
	br label %L.4
L.5:
	br label %L.1
L.3:
	call void @llvmdb_PTerminator(i8 1)
	br label %L.1
L.1:
	%17 = load i16, i16* @llvmdb_globals
	call void @llvmdb_PListStart(i16 %17)
	%18 = load %symb_SymbNode*, %symb_SymbNode** @llvmdb_gvhead
	store %symb_SymbNode* %18, %symb_SymbNode** %s
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	%20 = icmp ne %symb_SymbNode* %19, null
	br i1 %20, label %L.10, label %L.11
L.10:
	store i8 0, i8* %term
	br label %L.12
L.12:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = icmp ne %symb_SymbNode* %21, null
	%23 = xor i1 %22, true
	br i1 %23, label %L.13, label %L.14
L.14:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 12
	%26 = load i16, i16* %25
	store i16 %26, i16* %tag
	%27 = load %symb_SymbNode*, %symb_SymbNode** %s
	%28 = getelementptr %symb_SymbNode, %symb_SymbNode* %27, i32 0, i32 0
	%29 = load %symb_SymbNode*, %symb_SymbNode** %28
	store %symb_SymbNode* %29, %symb_SymbNode** %s
	%30 = load %symb_SymbNode*, %symb_SymbNode** %s
	%31 = icmp eq %symb_SymbNode* %30, null
	br i1 %31, label %L.16, label %L.15
L.16:
	store i8 1, i8* %term
	br label %L.15
L.15:
	%32 = load i16, i16* %tag
	%33 = load i8, i8* %term
	call void @llvmdb_PMetaRef(i16 %32, i8 %33)
	br label %L.12
L.13:
	br label %L.9
L.11:
	call void @llvmdb_PTerminator(i8 1)
	br label %L.9
L.9:
	%34 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%35 = getelementptr [80 x i8], [80 x i8]* @S.835
	%36 = bitcast [80 x i8]* %35 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %34, [0 x i8]* %36)
	br label %return
return:
	ret void
}
@llvm_pbytetype = internal global %type_TypeNode* zeroinitializer, align 4
@llvm_puinttype = internal global [6 x %type_TypeNode*] zeroinitializer, align 4
@llvm_Tseqno = internal global i16 0, align 2
@llvm_Pseqno = internal global i16 0, align 2
@llvm_Lseqno = internal global i16 0, align 2
@llvm_Aseqno = internal global i16 0, align 2
@llvm_labthis = internal global i16 0, align 2
@llvm_loopexit = internal global i16 0, align 2
%llvm_IntrinsicUse = type {%llvm_IntrinsicUse*, %type_TypeNode*, i32}
@llvm_UsedIntrinsic = internal global [15 x %llvm_IntrinsicUse*] zeroinitializer, align 4
define internal void @llvm_UseIntrinsic(i8 zeroext %which$, i32 %size$, %type_TypeNode* %t$) nounwind {
L.0:
	%which = alloca i8
	store i8 %which$, i8* %which
	%size = alloca i32
	store i32 %size$, i32* %size
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%piu = alloca %llvm_IntrinsicUse*
	%0 = load i32, i32* %size
	%1 = icmp eq i32 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	store i32 1, i32* %size
	br label %L.1
L.1:
	%2 = load i8, i8* %which
	%3 = zext i8 %2 to i32
	%4 = getelementptr [15 x %llvm_IntrinsicUse*], [15 x %llvm_IntrinsicUse*]* @llvm_UsedIntrinsic, i32 0, i32 %3
	%5 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %4
	store %llvm_IntrinsicUse* %5, %llvm_IntrinsicUse** %piu
	br label %L.3
L.3:
	%6 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%7 = icmp ne %llvm_IntrinsicUse* %6, null
	br i1 %7, label %L.6, label %L.7
L.6:
	%8 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%9 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %8, i32 0, i32 2
	%10 = load i32, i32* %9
	%11 = load i32, i32* %size
	%12 = icmp ne i32 %10, %11
	br label %L.7
L.7:
	%13 = phi i1 [ false, %L.3 ], [ %12, %L.6 ]
	%14 = xor i1 %13, true
	br i1 %14, label %L.4, label %L.5
L.5:
	%15 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%16 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %15, i32 0, i32 0
	%17 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %16
	store %llvm_IntrinsicUse* %17, %llvm_IntrinsicUse** %piu
	br label %L.3
L.4:
	%18 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%19 = icmp eq %llvm_IntrinsicUse* %18, null
	br i1 %19, label %L.9, label %L.8
L.9:
	%20 = call [0 x i8]* @malloc(i32 12)
	%21 = bitcast [0 x i8]* %20 to %llvm_IntrinsicUse*
	store %llvm_IntrinsicUse* %21, %llvm_IntrinsicUse** %piu
	%22 = load i32, i32* %size
	%23 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%24 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %23, i32 0, i32 2
	store i32 %22, i32* %24
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%27 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %26, i32 0, i32 1
	store %type_TypeNode* %25, %type_TypeNode** %27
	%28 = load i8, i8* %which
	%29 = zext i8 %28 to i32
	%30 = getelementptr [15 x %llvm_IntrinsicUse*], [15 x %llvm_IntrinsicUse*]* @llvm_UsedIntrinsic, i32 0, i32 %29
	%31 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %30
	%32 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%33 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %32, i32 0, i32 0
	store %llvm_IntrinsicUse* %31, %llvm_IntrinsicUse** %33
	%34 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%35 = load i8, i8* %which
	%36 = zext i8 %35 to i32
	%37 = getelementptr [15 x %llvm_IntrinsicUse*], [15 x %llvm_IntrinsicUse*]* @llvm_UsedIntrinsic, i32 0, i32 %36
	store %llvm_IntrinsicUse* %34, %llvm_IntrinsicUse** %37
	br label %L.8
L.8:
	br label %return
return:
	ret void
}
%A.4 = type {i8, i8, i16, i16, i16, i16, i16, i32, %type_TypeNode*, %symb_SymbNode*, i64, [0 x %ast_AstNode*]}
@S.836 = private unnamed_addr constant [72 x i8] c"declare void @llvm.memcpy.p0i8.p0i8.%W(i8*, i8*, %W, i32, i1) nounwind\0A\00"
@S.837 = private unnamed_addr constant [73 x i8] c"declare void @llvm.memmove.p0i8.p0i8.%W(i8*, i8*, %W, i32, i1) nounwind\0A\00"
@S.838 = private unnamed_addr constant [66 x i8] c"declare void @llvm.memset.p0i8.%W(i8*, i8, %W, i32, i1) nounwind\0A\00"
@S.839 = private unnamed_addr constant [31 x i8] c"declare %K @llvm.bswap.%K(%K)\0A\00"
@S.840 = private unnamed_addr constant [36 x i8] c"declare %K @llvm.bitreverse.%K(%K)\0A\00"
@S.841 = private unnamed_addr constant [34 x i8] c"declare %K @llvm.ctlz.%K(%K, i1)\0A\00"
@S.842 = private unnamed_addr constant [34 x i8] c"declare %K @llvm.cttz.%K(%K, i1)\0A\00"
@S.843 = private unnamed_addr constant [31 x i8] c"declare %K @llvm.ctpop.%K(%K)\0A\00"
@S.844 = private unnamed_addr constant [30 x i8] c"declare %K @llvm.fabs.%G(%K)\0A\00"
@S.845 = private unnamed_addr constant [35 x i8] c"declare i1 @memcmp%*B(%K, %K, %W)\0A\00"
@S.846 = private unnamed_addr constant [26 x i8] c"declare %W @memlen%X(%K)\0A\00"
@S.847 = private unnamed_addr constant [30 x i8] c"declare %K @llvm.sqrt.%K(%K)\0A\00"
@S.848 = private unnamed_addr constant [25 x i8] c"declare %K @sqrti%B(%K)\0A\00"
@S.849 = private unnamed_addr constant [51 x i8] c"declare void @_assert(%W, [0 x i8]*, %W) noreturn\0A\00"
define internal void @llvm_DeclareIntrinsics() nounwind {
L.0:
	%i = alloca i8
	%piu = alloca %llvm_IntrinsicUse*
	%dummy = alloca %A.4
	%0 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* null, %type_TypeNode** %0
	store i8 0, i8* %i
	br label %L.1
L.1:
	%1 = load i8, i8* %i
	%2 = icmp ult i8 %1, 14
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load i8, i8* %i
	%5 = zext i8 %4 to i32
	%6 = getelementptr [15 x %llvm_IntrinsicUse*], [15 x %llvm_IntrinsicUse*]* @llvm_UsedIntrinsic, i32 0, i32 %5
	%7 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %6
	%8 = icmp ne %llvm_IntrinsicUse* %7, null
	br i1 %8, label %L.5, label %L.4
L.5:
	%9 = load i8, i8* %i
	%10 = zext i8 %9 to i32
	%11 = getelementptr [15 x %llvm_IntrinsicUse*], [15 x %llvm_IntrinsicUse*]* @llvm_UsedIntrinsic, i32 0, i32 %10
	%12 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %11
	store %llvm_IntrinsicUse* %12, %llvm_IntrinsicUse** %piu
	%13 = load i8, i8* %i
	%14 = zext i8 %13 to i32
	switch i32 %14, label %L.6 [
		i32 0, label %L.8
		i32 1, label %L.9
		i32 2, label %L.10
		i32 5, label %L.11
		i32 6, label %L.12
		i32 7, label %L.13
		i32 8, label %L.14
		i32 9, label %L.15
		i32 11, label %L.16
		i32 3, label %L.17
		i32 4, label %L.18
		i32 10, label %L.19
		i32 12, label %L.20
		i32 13, label %L.21
	]
L.8:
	%15 = getelementptr [72 x i8], [72 x i8]* @S.836
	%16 = bitcast [72 x i8]* %15 to [0 x i8]*
	%17 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %16, %ast_AstNode* %17)
	br label %L.7
L.9:
	%18 = getelementptr [73 x i8], [73 x i8]* @S.837
	%19 = bitcast [73 x i8]* %18 to [0 x i8]*
	%20 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %19, %ast_AstNode* %20)
	br label %L.7
L.10:
	%21 = getelementptr [66 x i8], [66 x i8]* @S.838
	%22 = bitcast [66 x i8]* %21 to [0 x i8]*
	%23 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %22, %ast_AstNode* %23)
	br label %L.7
L.11:
	br label %L.22
L.22:
	%24 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%25 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %24, i32 0, i32 1
	%26 = load %type_TypeNode*, %type_TypeNode** %25
	%27 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %26, %type_TypeNode** %27
	%28 = getelementptr [31 x i8], [31 x i8]* @S.839
	%29 = bitcast [31 x i8]* %28 to [0 x i8]*
	%30 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %29, %ast_AstNode* %30)
	%31 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%32 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %31, i32 0, i32 0
	%33 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %32
	store %llvm_IntrinsicUse* %33, %llvm_IntrinsicUse** %piu
	%34 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%35 = icmp ne %llvm_IntrinsicUse* %34, null
	%36 = xor i1 %35, true
	br i1 %36, label %L.23, label %L.24
L.24:
	br label %L.22
L.23:
	br label %L.7
L.12:
	br label %L.25
L.25:
	%37 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%38 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %37, i32 0, i32 1
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	%40 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %39, %type_TypeNode** %40
	%41 = getelementptr [36 x i8], [36 x i8]* @S.840
	%42 = bitcast [36 x i8]* %41 to [0 x i8]*
	%43 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %42, %ast_AstNode* %43)
	%44 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%45 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %44, i32 0, i32 0
	%46 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %45
	store %llvm_IntrinsicUse* %46, %llvm_IntrinsicUse** %piu
	%47 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%48 = icmp ne %llvm_IntrinsicUse* %47, null
	%49 = xor i1 %48, true
	br i1 %49, label %L.26, label %L.27
L.27:
	br label %L.25
L.26:
	br label %L.7
L.13:
	br label %L.28
L.28:
	%50 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%51 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %50, i32 0, i32 1
	%52 = load %type_TypeNode*, %type_TypeNode** %51
	%53 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %52, %type_TypeNode** %53
	%54 = getelementptr [34 x i8], [34 x i8]* @S.841
	%55 = bitcast [34 x i8]* %54 to [0 x i8]*
	%56 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %55, %ast_AstNode* %56)
	%57 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%58 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %57, i32 0, i32 0
	%59 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %58
	store %llvm_IntrinsicUse* %59, %llvm_IntrinsicUse** %piu
	%60 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%61 = icmp ne %llvm_IntrinsicUse* %60, null
	%62 = xor i1 %61, true
	br i1 %62, label %L.29, label %L.30
L.30:
	br label %L.28
L.29:
	br label %L.7
L.14:
	br label %L.31
L.31:
	%63 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%64 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %63, i32 0, i32 1
	%65 = load %type_TypeNode*, %type_TypeNode** %64
	%66 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %65, %type_TypeNode** %66
	%67 = getelementptr [34 x i8], [34 x i8]* @S.842
	%68 = bitcast [34 x i8]* %67 to [0 x i8]*
	%69 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %68, %ast_AstNode* %69)
	%70 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%71 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %70, i32 0, i32 0
	%72 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %71
	store %llvm_IntrinsicUse* %72, %llvm_IntrinsicUse** %piu
	%73 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%74 = icmp ne %llvm_IntrinsicUse* %73, null
	%75 = xor i1 %74, true
	br i1 %75, label %L.32, label %L.33
L.33:
	br label %L.31
L.32:
	br label %L.7
L.15:
	br label %L.34
L.34:
	%76 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%77 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %76, i32 0, i32 1
	%78 = load %type_TypeNode*, %type_TypeNode** %77
	%79 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %78, %type_TypeNode** %79
	%80 = getelementptr [31 x i8], [31 x i8]* @S.843
	%81 = bitcast [31 x i8]* %80 to [0 x i8]*
	%82 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %81, %ast_AstNode* %82)
	%83 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%84 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %83, i32 0, i32 0
	%85 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %84
	store %llvm_IntrinsicUse* %85, %llvm_IntrinsicUse** %piu
	%86 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%87 = icmp ne %llvm_IntrinsicUse* %86, null
	%88 = xor i1 %87, true
	br i1 %88, label %L.35, label %L.36
L.36:
	br label %L.34
L.35:
	br label %L.7
L.16:
	br label %L.37
L.37:
	%89 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%90 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %89, i32 0, i32 1
	%91 = load %type_TypeNode*, %type_TypeNode** %90
	%92 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %91, %type_TypeNode** %92
	%93 = getelementptr [30 x i8], [30 x i8]* @S.844
	%94 = bitcast [30 x i8]* %93 to [0 x i8]*
	%95 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %94, %ast_AstNode* %95)
	%96 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%97 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %96, i32 0, i32 0
	%98 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %97
	store %llvm_IntrinsicUse* %98, %llvm_IntrinsicUse** %piu
	%99 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%100 = icmp ne %llvm_IntrinsicUse* %99, null
	%101 = xor i1 %100, true
	br i1 %101, label %L.38, label %L.39
L.39:
	br label %L.37
L.38:
	br label %L.7
L.17:
	br label %L.40
L.40:
	%102 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%103 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %102, i32 0, i32 1
	%104 = load %type_TypeNode*, %type_TypeNode** %103
	%105 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %104, %type_TypeNode** %105
	%106 = getelementptr [35 x i8], [35 x i8]* @S.845
	%107 = bitcast [35 x i8]* %106 to [0 x i8]*
	%108 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %107, %ast_AstNode* %108)
	%109 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%110 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %109, i32 0, i32 0
	%111 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %110
	store %llvm_IntrinsicUse* %111, %llvm_IntrinsicUse** %piu
	%112 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%113 = icmp ne %llvm_IntrinsicUse* %112, null
	%114 = xor i1 %113, true
	br i1 %114, label %L.41, label %L.42
L.42:
	br label %L.40
L.41:
	br label %L.7
L.18:
	br label %L.43
L.43:
	%115 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%116 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %115, i32 0, i32 1
	%117 = load %type_TypeNode*, %type_TypeNode** %116
	%118 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %117, %type_TypeNode** %118
	%119 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%120 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %119, i32 0, i32 2
	%121 = load i32, i32* %120
	%122 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 7
	store i32 %121, i32* %122
	%123 = getelementptr [26 x i8], [26 x i8]* @S.846
	%124 = bitcast [26 x i8]* %123 to [0 x i8]*
	%125 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %124, %ast_AstNode* %125)
	%126 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%127 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %126, i32 0, i32 0
	%128 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %127
	store %llvm_IntrinsicUse* %128, %llvm_IntrinsicUse** %piu
	%129 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%130 = icmp ne %llvm_IntrinsicUse* %129, null
	%131 = xor i1 %130, true
	br i1 %131, label %L.44, label %L.45
L.45:
	br label %L.43
L.44:
	br label %L.7
L.19:
	br label %L.46
L.46:
	%132 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%133 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %132, i32 0, i32 1
	%134 = load %type_TypeNode*, %type_TypeNode** %133
	%135 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %134, %type_TypeNode** %135
	%136 = getelementptr [30 x i8], [30 x i8]* @S.847
	%137 = bitcast [30 x i8]* %136 to [0 x i8]*
	%138 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %137, %ast_AstNode* %138)
	%139 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%140 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %139, i32 0, i32 0
	%141 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %140
	store %llvm_IntrinsicUse* %141, %llvm_IntrinsicUse** %piu
	%142 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%143 = icmp ne %llvm_IntrinsicUse* %142, null
	%144 = xor i1 %143, true
	br i1 %144, label %L.47, label %L.48
L.48:
	br label %L.46
L.47:
	br label %L.7
L.20:
	br label %L.49
L.49:
	%145 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%146 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %145, i32 0, i32 1
	%147 = load %type_TypeNode*, %type_TypeNode** %146
	%148 = getelementptr %A.4, %A.4* %dummy, i32 0, i32 8
	store %type_TypeNode* %147, %type_TypeNode** %148
	%149 = getelementptr [25 x i8], [25 x i8]* @S.848
	%150 = bitcast [25 x i8]* %149 to [0 x i8]*
	%151 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %150, %ast_AstNode* %151)
	%152 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%153 = getelementptr %llvm_IntrinsicUse, %llvm_IntrinsicUse* %152, i32 0, i32 0
	%154 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %153
	store %llvm_IntrinsicUse* %154, %llvm_IntrinsicUse** %piu
	%155 = load %llvm_IntrinsicUse*, %llvm_IntrinsicUse** %piu
	%156 = icmp ne %llvm_IntrinsicUse* %155, null
	%157 = xor i1 %156, true
	br i1 %157, label %L.50, label %L.51
L.51:
	br label %L.49
L.50:
	br label %L.7
L.21:
	%158 = getelementptr [51 x i8], [51 x i8]* @S.849
	%159 = bitcast [51 x i8]* %158 to [0 x i8]*
	%160 = bitcast %A.4* %dummy to %ast_AstNode*
	call void @llvm_Print([0 x i8]* %159, %ast_AstNode* %160)
	br label %L.7
L.6:
	br label %L.7
L.7:
	br label %L.4
L.4:
	%161 = load i8, i8* %i
	%162 = add i8 %161, 1
	store i8 %162, i8* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_PEndLine(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%1 = load i8, i8* %0
	%2 = icmp ne i8 %1, 0
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 5
	%5 = load i16, i16* %4
	call void @llvmdb_PLine(i16 %5)
	br label %L.1
L.1:
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %6)
	br label %return
return:
	ret void
}
define internal void @llvm_PPkgPfx(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 2
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	%3 = icmp ne %symb_SymbNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 2
	%6 = load %symb_SymbNode*, %symb_SymbNode** %5
	call void @llvm_PPkgPfx(%symb_SymbNode* %6)
	br label %L.1
L.1:
	%7 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 23
	%10 = getelementptr [0 x i8], [0 x i8]* %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %7, [0 x i8]* %11)
	%12 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %12, i8 95)
	br label %return
return:
	ret void
}
@S.850 = private unnamed_addr constant [2 x i8] c"%\00"
define internal void @llvm_PTypeName(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%s = alloca %symb_SymbNode*
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [2 x i8], [2 x i8]* @S.850
	%2 = bitcast [2 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 3
	%5 = load %symb_SymbNode*, %symb_SymbNode** %4
	store %symb_SymbNode* %5, %symb_SymbNode** %s
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = icmp ne %symb_SymbNode* %6, null
	br i1 %7, label %L.2, label %L.3
L.2:
	%8 = load %symb_SymbNode*, %symb_SymbNode** %s
	%9 = getelementptr %symb_SymbNode, %symb_SymbNode* %8, i32 0, i32 2
	%10 = load %symb_SymbNode*, %symb_SymbNode** %9
	%11 = icmp ne %symb_SymbNode* %10, null
	br i1 %11, label %L.5, label %L.4
L.5:
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 2
	%14 = load %symb_SymbNode*, %symb_SymbNode** %13
	call void @llvm_PPkgPfx(%symb_SymbNode* %14)
	br label %L.4
L.4:
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = getelementptr %symb_SymbNode, %symb_SymbNode* %16, i32 0, i32 23
	%18 = getelementptr [0 x i8], [0 x i8]* %17
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %19)
	br label %L.1
L.3:
	%20 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%21 = bitcast [3 x i8]* @llvm_anon_prefix to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %20, [0 x i8]* %21)
	%22 = load %type_TypeNode*, %type_TypeNode** %t
	%23 = getelementptr %type_TypeNode, %type_TypeNode* %22, i32 0, i32 15
	%24 = load i16, i16* %23
	%25 = icmp eq i16 %24, 0
	br i1 %25, label %L.7, label %L.6
L.7:
	%26 = load i16, i16* @llvm_Aseqno
	%27 = add i16 %26, 1
	store i16 %27, i16* @llvm_Aseqno
	%28 = load i16, i16* @llvm_Aseqno
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 15
	store i16 %28, i16* %30
	br label %L.6
L.6:
	%31 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%32 = load %type_TypeNode*, %type_TypeNode** %t
	%33 = getelementptr %type_TypeNode, %type_TypeNode* %32, i32 0, i32 15
	%34 = load i16, i16* %33
	call void @bout_BufIO_uint16(%bout_BufIO* %31, i16 %34)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.851 = private unnamed_addr constant [2 x i8] c"{\00"
@S.852 = private unnamed_addr constant [3 x i8] c", \00"
@S.853 = private unnamed_addr constant [2 x i8] c"}\00"
define internal void @llvm_PRecordType(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%s = alloca %symb_SymbNode*
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 26
	%2 = load i8, i8* %1
	%3 = icmp ne i8 %2, 0
	br i1 %3, label %L.2, label %L.1
L.1:
	%4 = load %type_TypeNode*, %type_TypeNode** %t
	%5 = getelementptr %type_TypeNode, %type_TypeNode* %4, i32 0, i32 27
	%6 = load i8, i8* %5
	%7 = icmp ne i8 %6, 0
	br label %L.2
L.2:
	%8 = phi i1 [ true, %L.0 ], [ %7, %L.1 ]
	br i1 %8, label %L.4, label %L.3
L.4:
	%9 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %9, i8 60)
	br label %L.3
L.3:
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%11 = getelementptr [2 x i8], [2 x i8]* @S.851
	%12 = bitcast [2 x i8]* %11 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %10, [0 x i8]* %12)
	%13 = load %type_TypeNode*, %type_TypeNode** %t
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 4
	%15 = load %symb_SymbNode*, %symb_SymbNode** %14
	store %symb_SymbNode* %15, %symb_SymbNode** %s
	br label %L.5
L.5:
	%16 = load %symb_SymbNode*, %symb_SymbNode** %s
	%17 = icmp ne %symb_SymbNode* %16, null
	%18 = xor i1 %17, true
	br i1 %18, label %L.6, label %L.7
L.7:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %s
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 1
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	call void @llvm_PType(%type_TypeNode* %21)
	%22 = load %symb_SymbNode*, %symb_SymbNode** %s
	%23 = getelementptr %symb_SymbNode, %symb_SymbNode* %22, i32 0, i32 0
	%24 = load %symb_SymbNode*, %symb_SymbNode** %23
	store %symb_SymbNode* %24, %symb_SymbNode** %s
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = icmp eq %symb_SymbNode* %25, null
	br i1 %26, label %L.6, label %L.8
L.8:
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = getelementptr [3 x i8], [3 x i8]* @S.852
	%29 = bitcast [3 x i8]* %28 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %27, [0 x i8]* %29)
	br label %L.5
L.6:
	%30 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%31 = getelementptr [2 x i8], [2 x i8]* @S.853
	%32 = bitcast [2 x i8]* %31 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %30, [0 x i8]* %32)
	%33 = load %type_TypeNode*, %type_TypeNode** %t
	%34 = getelementptr %type_TypeNode, %type_TypeNode* %33, i32 0, i32 26
	%35 = load i8, i8* %34
	%36 = icmp ne i8 %35, 0
	br i1 %36, label %L.10, label %L.9
L.9:
	%37 = load %type_TypeNode*, %type_TypeNode** %t
	%38 = getelementptr %type_TypeNode, %type_TypeNode* %37, i32 0, i32 27
	%39 = load i8, i8* %38
	%40 = icmp ne i8 %39, 0
	br label %L.10
L.10:
	%41 = phi i1 [ true, %L.6 ], [ %40, %L.9 ]
	br i1 %41, label %L.12, label %L.11
L.12:
	%42 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %42, i8 62)
	br label %L.11
L.11:
	br label %return
return:
	ret void
}
define internal void @llvm_PWidth(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 11
	%5 = load i32, i32* %4
	%6 = udiv i32 %5, 8
	call void @bout_BufIO_uint(%bout_BufIO* %2, i32 %6)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @llvm_PAlign(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = getelementptr %type_TypeNode, %type_TypeNode* %3, i32 0, i32 12
	%5 = load i32, i32* %4
	%6 = udiv i32 %5, 8
	call void @bout_BufIO_uint(%bout_BufIO* %2, i32 %6)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@llvm_usewidth = internal constant i8 0, align 1
@llvm_usebitsize = internal constant i8 0, align 1
@llvm_usebytesize = internal constant i8 1, align 1
define internal void @llvm_PScalarSize(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%size = alloca i32
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 10
	%2 = load i32, i32* %1
	store i32 %2, i32* %size
	%3 = load i32, i32* %size
	%4 = add i32 %3, 7
	%5 = udiv i32 %4, 8
	%6 = mul i32 %5, 8
	store i32 %6, i32* %size
	%7 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %7, i8 105)
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = load i32, i32* %size
	call void @bout_BufIO_uint(%bout_BufIO* %8, i32 %9)
	br label %return
return:
	ret void
}
@S.854 = private unnamed_addr constant [6 x i8] c"float\00"
@S.855 = private unnamed_addr constant [7 x i8] c"double\00"
@S.856 = private unnamed_addr constant [4 x i8] c" x \00"
define internal void @llvm_PType(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%size = alloca i32
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.5
		i32 3, label %L.5
		i32 4, label %L.6
		i32 5, label %L.7
		i32 7, label %L.8
		i32 6, label %L.9
		i32 8, label %L.10
	]
L.5:
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PScalarSize(%type_TypeNode* %6)
	br label %L.4
L.6:
	%7 = load %type_TypeNode*, %type_TypeNode** %t
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 10
	%9 = load i32, i32* %8
	switch i32 %9, label %L.11 [
		i32 32, label %L.13
		i32 64, label %L.14
	]
L.13:
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%11 = getelementptr [6 x i8], [6 x i8]* @S.854
	%12 = bitcast [6 x i8]* %11 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %10, [0 x i8]* %12)
	br label %L.12
L.14:
	%13 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%14 = getelementptr [7 x i8], [7 x i8]* @S.855
	%15 = bitcast [7 x i8]* %14 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %13, [0 x i8]* %15)
	br label %L.12
L.11:
	br label %L.12
L.12:
	br label %L.4
L.7:
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 0
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	call void @llvm_PType(%type_TypeNode* %18)
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %19, i8 42)
	br label %L.4
L.8:
	%20 = load %type_TypeNode*, %type_TypeNode** %t
	%21 = getelementptr %type_TypeNode, %type_TypeNode* %20, i32 0, i32 24
	%22 = load i8, i8* %21
	%23 = icmp ne i8 %22, 0
	br i1 %23, label %L.16, label %L.17
L.16:
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PScalarSize(%type_TypeNode* %24)
	br label %L.15
L.17:
	%25 = load %type_TypeNode*, %type_TypeNode** %t
	%26 = getelementptr %type_TypeNode, %type_TypeNode* %25, i32 0, i32 29
	%27 = load i8, i8* %26
	%28 = icmp ne i8 %27, 0
	br i1 %28, label %L.19, label %L.20
L.19:
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PTypeName(%type_TypeNode* %29)
	br label %L.18
L.20:
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PRecordType(%type_TypeNode* %30)
	br label %L.18
L.18:
	br label %L.15
L.15:
	br label %L.4
L.9:
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 24
	%33 = load i8, i8* %32
	%34 = icmp ne i8 %33, 0
	br i1 %34, label %L.22, label %L.23
L.22:
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PScalarSize(%type_TypeNode* %35)
	br label %L.21
L.23:
	%36 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %36, i8 91)
	%37 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%38 = load %type_TypeNode*, %type_TypeNode** %t
	%39 = call i32 @type_TypeNode_Span(%type_TypeNode* %38)
	call void @bout_BufIO_uint32(%bout_BufIO* %37, i32 %39)
	%40 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%41 = getelementptr [4 x i8], [4 x i8]* @S.856
	%42 = bitcast [4 x i8]* %41 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %40, [0 x i8]* %42)
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	%44 = getelementptr %type_TypeNode, %type_TypeNode* %43, i32 0, i32 0
	%45 = load %type_TypeNode*, %type_TypeNode** %44
	call void @llvm_PType(%type_TypeNode* %45)
	%46 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %46, i8 93)
	br label %L.21
L.21:
	br label %L.4
L.10:
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = getelementptr %type_TypeNode, %type_TypeNode* %47, i32 0, i32 4
	%49 = load %symb_SymbNode*, %symb_SymbNode** %48
	%50 = getelementptr %symb_SymbNode, %symb_SymbNode* %49, i32 0, i32 4
	%51 = load %symb_SymbNode*, %symb_SymbNode** %50
	call void @llvm_PRetvType(%symb_SymbNode* %51, i8 0)
	%52 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %52, i8 32)
	%53 = load %type_TypeNode*, %type_TypeNode** %t
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 4
	%55 = load %symb_SymbNode*, %symb_SymbNode** %54
	%56 = getelementptr %symb_SymbNode, %symb_SymbNode* %55, i32 0, i32 3
	%57 = load %symb_SymbNode*, %symb_SymbNode** %56
	call void @llvm_PParmTypes(%symb_SymbNode* %57)
	%58 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %58, i8 42)
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.857 = private unnamed_addr constant [4 x i8] c"f32\00"
@S.858 = private unnamed_addr constant [4 x i8] c"f64\00"
define internal void @llvm_PFType(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 10
	%2 = load i32, i32* %1
	switch i32 %2, label %L.1 [
		i32 32, label %L.3
		i32 64, label %L.4
	]
L.3:
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = getelementptr [4 x i8], [4 x i8]* @S.857
	%5 = bitcast [4 x i8]* %4 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %3, [0 x i8]* %5)
	br label %L.2
L.4:
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = getelementptr [4 x i8], [4 x i8]* @S.858
	%8 = bitcast [4 x i8]* %7 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %6, [0 x i8]* %8)
	br label %L.2
L.1:
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
@S.859 = private unnamed_addr constant [19 x i8] c"Illegal PDerefType\00"
define internal void @llvm_PDerefType(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 5, label %L.5
	]
L.5:
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 0
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	call void @llvm_PType(%type_TypeNode* %8)
	br label %L.4
L.3:
	%9 = getelementptr [19 x i8], [19 x i8]* @S.859
	%10 = bitcast [19 x i8]* %9 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %10)
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.860 = private unnamed_addr constant [9 x i8] c" signext\00"
@S.861 = private unnamed_addr constant [9 x i8] c" zeroext\00"
define internal void @llvm_PExtend(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.5
		i32 3, label %L.5
	]
L.5:
	%size = alloca i32
	%6 = load %type_TypeNode*, %type_TypeNode** %t
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 10
	%8 = load i32, i32* %7
	%9 = call i32 @target_isize(i32 %8)
	store i32 %9, i32* %size
	%10 = load i32, i32* %size
	%11 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%12 = getelementptr %type_TypeNode, %type_TypeNode* %11, i32 0, i32 10
	%13 = load i32, i32* %12
	%14 = icmp ult i32 %10, %13
	br i1 %14, label %L.7, label %L.6
L.7:
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 16
	%17 = load i8, i8* %16
	%18 = icmp eq i8 %17, 3
	br i1 %18, label %L.9, label %L.10
L.9:
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%20 = getelementptr [9 x i8], [9 x i8]* @S.860
	%21 = bitcast [9 x i8]* %20 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %19, [0 x i8]* %21)
	br label %L.8
L.10:
	%22 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%23 = getelementptr [9 x i8], [9 x i8]* @S.861
	%24 = bitcast [9 x i8]* %23 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %22, [0 x i8]* %24)
	br label %L.8
L.8:
	br label %L.6
L.6:
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.862 = private unnamed_addr constant [4 x i8] c" { \00"
@S.863 = private unnamed_addr constant [3 x i8] c", \00"
@S.864 = private unnamed_addr constant [3 x i8] c" }\00"
@S.865 = private unnamed_addr constant [6 x i8] c" void\00"
define internal void @llvm_PRetvType(%symb_SymbNode* %rs$, i8 zeroext %extend$) nounwind {
L.0:
	%rs = alloca %symb_SymbNode*
	store %symb_SymbNode* %rs$, %symb_SymbNode** %rs
	%extend = alloca i8
	store i8 %extend$, i8* %extend
	%t = alloca %type_TypeNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%3 = getelementptr %symb_SymbNode, %symb_SymbNode* %2, i32 0, i32 0
	%4 = load %symb_SymbNode*, %symb_SymbNode** %3
	%5 = icmp ne %symb_SymbNode* %4, null
	br i1 %5, label %L.5, label %L.6
L.5:
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = getelementptr [4 x i8], [4 x i8]* @S.862
	%8 = bitcast [4 x i8]* %7 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %6, [0 x i8]* %8)
	br label %L.7
L.7:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 1
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	call void @llvm_PType(%type_TypeNode* %11)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 0
	%14 = load %symb_SymbNode*, %symb_SymbNode** %13
	store %symb_SymbNode* %14, %symb_SymbNode** %rs
	%15 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%16 = icmp eq %symb_SymbNode* %15, null
	br i1 %16, label %L.8, label %L.9
L.9:
	%17 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%18 = getelementptr [3 x i8], [3 x i8]* @S.863
	%19 = bitcast [3 x i8]* %18 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %17, [0 x i8]* %19)
	br label %L.7
L.8:
	%20 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%21 = getelementptr [3 x i8], [3 x i8]* @S.864
	%22 = bitcast [3 x i8]* %21 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %20, [0 x i8]* %22)
	br label %L.4
L.6:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 1
	%25 = load %type_TypeNode*, %type_TypeNode** %24
	store %type_TypeNode* %25, %type_TypeNode** %t
	%26 = load i8, i8* %extend
	%27 = icmp ne i8 %26, 0
	br i1 %27, label %L.11, label %L.10
L.11:
	%28 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PExtend(%type_TypeNode* %28)
	br label %L.10
L.10:
	%29 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %29, i8 32)
	%30 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PType(%type_TypeNode* %30)
	br label %L.4
L.4:
	br label %L.1
L.3:
	%31 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%32 = getelementptr [6 x i8], [6 x i8]* @S.865
	%33 = bitcast [6 x i8]* %32 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %31, [0 x i8]* %33)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.866 = private unnamed_addr constant [3 x i8] c", \00"
define internal void @llvm_PParmTypes(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 40)
	br label %L.1
L.1:
	%1 = load %symb_SymbNode*, %symb_SymbNode** %s
	%2 = icmp ne %symb_SymbNode* %1, null
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load %symb_SymbNode*, %symb_SymbNode** %s
	%5 = getelementptr %symb_SymbNode, %symb_SymbNode* %4, i32 0, i32 1
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	call void @llvm_PType(%type_TypeNode* %6)
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 0
	%9 = load %symb_SymbNode*, %symb_SymbNode** %8
	store %symb_SymbNode* %9, %symb_SymbNode** %s
	%10 = load %symb_SymbNode*, %symb_SymbNode** %s
	%11 = icmp eq %symb_SymbNode* %10, null
	br i1 %11, label %L.2, label %L.4
L.4:
	%12 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%13 = getelementptr [3 x i8], [3 x i8]* @S.866
	%14 = bitcast [3 x i8]* %13 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %12, [0 x i8]* %14)
	br label %L.1
L.2:
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %15, i8 41)
	br label %return
return:
	ret void
}
@S.867 = private unnamed_addr constant [5 x i8] c"null\00"
@S.868 = private unnamed_addr constant [10 x i8] c"inttoptr(\00"
@S.869 = private unnamed_addr constant [5 x i8] c" to \00"
define internal void @llvm_ConstantRef(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%v = alloca i64
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 10
	%2 = load i64, i64* %1
	store i64 %2, i64* %v
	%3 = load i64, i64* %v
	%4 = icmp eq i64 %3, 0
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = getelementptr [5 x i8], [5 x i8]* @S.867
	%7 = bitcast [5 x i8]* %6 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %7)
	br label %L.1
L.3:
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = getelementptr [10 x i8], [10 x i8]* @S.868
	%10 = bitcast [10 x i8]* %9 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %8, [0 x i8]* %10)
	%11 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @llvm_PType(%type_TypeNode* %11)
	%12 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %12, i8 32)
	%13 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%14 = load i64, i64* %v
	call void @bout_BufIO_uint64(%bout_BufIO* %13, i64 %14)
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = getelementptr [5 x i8], [5 x i8]* @S.869
	%17 = bitcast [5 x i8]* %16 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %17)
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 8
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	call void @llvm_PType(%type_TypeNode* %20)
	%21 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %21, i8 41)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.870 = private unnamed_addr constant [5 x i8] c"void\00"
@S.871 = private unnamed_addr constant [2 x i8] c"i\00"
define internal void @llvm_NodeType(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.1 [
		i32 0, label %L.3
		i32 4, label %L.4
		i32 5, label %L.4
		i32 6, label %L.4
		i32 7, label %L.4
		i32 8, label %L.4
	]
L.3:
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = getelementptr [5 x i8], [5 x i8]* @S.870
	%8 = bitcast [5 x i8]* %7 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %6, [0 x i8]* %8)
	br label %L.2
L.4:
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 8
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	call void @llvm_PType(%type_TypeNode* %11)
	br label %L.2
L.1:
	%12 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%13 = getelementptr [2 x i8], [2 x i8]* @S.871
	%14 = bitcast [2 x i8]* %13 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %12, [0 x i8]* %14)
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 7
	%18 = load i32, i32* %17
	call void @bout_BufIO_uint(%bout_BufIO* %15, i32 %18)
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_PMethod(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%bs = alloca %symb_SymbNode*
	%bt = alloca %type_TypeNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 3
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	%3 = getelementptr %symb_SymbNode, %symb_SymbNode* %2, i32 0, i32 1
	%4 = load %type_TypeNode*, %type_TypeNode** %3
	store %type_TypeNode* %4, %type_TypeNode** %bt
	%5 = load %type_TypeNode*, %type_TypeNode** %bt
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 16
	%7 = load i8, i8* %6
	%8 = icmp eq i8 %7, 5
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %type_TypeNode*, %type_TypeNode** %bt
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 0
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	store %type_TypeNode* %11, %type_TypeNode** %bt
	br label %L.1
L.1:
	%12 = load %type_TypeNode*, %type_TypeNode** %bt
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 3
	%14 = load %symb_SymbNode*, %symb_SymbNode** %13
	store %symb_SymbNode* %14, %symb_SymbNode** %bs
	%15 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 2
	%17 = load %symb_SymbNode*, %symb_SymbNode** %16
	%18 = icmp ne %symb_SymbNode* %17, null
	br i1 %18, label %L.4, label %L.3
L.4:
	%19 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%20 = getelementptr %symb_SymbNode, %symb_SymbNode* %19, i32 0, i32 2
	%21 = load %symb_SymbNode*, %symb_SymbNode** %20
	call void @llvm_PPkgPfx(%symb_SymbNode* %21)
	br label %L.3
L.3:
	%22 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%23 = load %symb_SymbNode*, %symb_SymbNode** %bs
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 23
	%25 = getelementptr [0 x i8], [0 x i8]* %24
	%26 = bitcast [0 x i8]* %25 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %22, [0 x i8]* %26)
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %27, i8 95)
	br label %return
return:
	ret void
}
@S.872 = private unnamed_addr constant [10 x i8] c"inttoptr(\00"
@S.873 = private unnamed_addr constant [5 x i8] c" to \00"
@S.874 = private unnamed_addr constant [3 x i8] c"*)\00"
define internal void @llvm_PName(%symb_SymbNode* %s$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 14
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 0, label %L.3
		i32 1, label %L.3
		i32 2, label %L.4
		i32 7, label %L.4
		i32 3, label %L.5
		i32 4, label %L.5
		i32 5, label %L.5
		i32 6, label %L.6
	]
L.3:
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %4, i8 37)
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 23
	%8 = getelementptr [0 x i8], [0 x i8]* %7
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %9)
	br label %L.2
L.4:
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %10, i8 64)
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 13
	%13 = load i8, i8* %12
	%14 = icmp eq i8 %13, 5
	br i1 %14, label %L.7, label %L.8
L.7:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %s
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 17
	%17 = load i8, i8* %16
	%18 = icmp ne i8 %17, 0
	br label %L.8
L.8:
	%19 = phi i1 [ false, %L.4 ], [ %18, %L.7 ]
	br i1 %19, label %L.10, label %L.11
L.10:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvm_PMethod(%symb_SymbNode* %20)
	br label %L.9
L.11:
	%21 = load %symb_SymbNode*, %symb_SymbNode** %s
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 2
	%23 = load %symb_SymbNode*, %symb_SymbNode** %22
	%24 = icmp ne %symb_SymbNode* %23, null
	br i1 %24, label %L.13, label %L.12
L.13:
	%25 = load %symb_SymbNode*, %symb_SymbNode** %s
	%26 = getelementptr %symb_SymbNode, %symb_SymbNode* %25, i32 0, i32 2
	%27 = load %symb_SymbNode*, %symb_SymbNode** %26
	call void @llvm_PPkgPfx(%symb_SymbNode* %27)
	br label %L.12
L.12:
	br label %L.9
L.9:
	%28 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%29 = load %symb_SymbNode*, %symb_SymbNode** %s
	%30 = getelementptr %symb_SymbNode, %symb_SymbNode* %29, i32 0, i32 23
	%31 = getelementptr [0 x i8], [0 x i8]* %30
	%32 = bitcast [0 x i8]* %31 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %28, [0 x i8]* %32)
	br label %L.2
L.5:
	%33 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %33, i8 64)
	%34 = load %symb_SymbNode*, %symb_SymbNode** %s
	%35 = getelementptr %symb_SymbNode, %symb_SymbNode* %34, i32 0, i32 6
	%36 = load %symb_SymbNode*, %symb_SymbNode** %35
	%37 = icmp ne %symb_SymbNode* %36, null
	br i1 %37, label %L.15, label %L.16
L.15:
	%38 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%39 = load %symb_SymbNode*, %symb_SymbNode** %s
	%40 = getelementptr %symb_SymbNode, %symb_SymbNode* %39, i32 0, i32 6
	%41 = load %symb_SymbNode*, %symb_SymbNode** %40
	%42 = getelementptr %symb_SymbNode, %symb_SymbNode* %41, i32 0, i32 23
	%43 = getelementptr [0 x i8], [0 x i8]* %42
	%44 = bitcast [0 x i8]* %43 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %38, [0 x i8]* %44)
	br label %L.14
L.16:
	%45 = load %symb_SymbNode*, %symb_SymbNode** %s
	%46 = getelementptr %symb_SymbNode, %symb_SymbNode* %45, i32 0, i32 13
	%47 = load i8, i8* %46
	%48 = icmp eq i8 %47, 5
	br i1 %48, label %L.17, label %L.18
L.17:
	%49 = load %symb_SymbNode*, %symb_SymbNode** %s
	%50 = getelementptr %symb_SymbNode, %symb_SymbNode* %49, i32 0, i32 17
	%51 = load i8, i8* %50
	%52 = icmp ne i8 %51, 0
	br label %L.18
L.18:
	%53 = phi i1 [ false, %L.16 ], [ %52, %L.17 ]
	br i1 %53, label %L.20, label %L.19
L.20:
	%54 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvm_PMethod(%symb_SymbNode* %54)
	br label %L.19
L.19:
	%55 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%56 = load %symb_SymbNode*, %symb_SymbNode** %s
	%57 = getelementptr %symb_SymbNode, %symb_SymbNode* %56, i32 0, i32 23
	%58 = getelementptr [0 x i8], [0 x i8]* %57
	%59 = bitcast [0 x i8]* %58 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %55, [0 x i8]* %59)
	br label %L.14
L.14:
	br label %L.2
L.6:
	%60 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%61 = getelementptr [10 x i8], [10 x i8]* @S.872
	%62 = bitcast [10 x i8]* %61 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %60, [0 x i8]* %62)
	%63 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @llvm_PType(%type_TypeNode* %63)
	%64 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %64, i8 32)
	%65 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%66 = load %symb_SymbNode*, %symb_SymbNode** %s
	%67 = getelementptr %symb_SymbNode, %symb_SymbNode* %66, i32 0, i32 8
	%68 = load i64, i64* %67
	call void @bout_BufIO_uint64(%bout_BufIO* %65, i64 %68)
	%69 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%70 = getelementptr [5 x i8], [5 x i8]* @S.873
	%71 = bitcast [5 x i8]* %70 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %69, [0 x i8]* %71)
	%72 = load %symb_SymbNode*, %symb_SymbNode** %s
	%73 = getelementptr %symb_SymbNode, %symb_SymbNode* %72, i32 0, i32 13
	%74 = load i8, i8* %73
	%75 = icmp eq i8 %74, 5
	br i1 %75, label %L.22, label %L.23
L.22:
	%76 = load %symb_SymbNode*, %symb_SymbNode** %s
	%77 = getelementptr %symb_SymbNode, %symb_SymbNode* %76, i32 0, i32 4
	%78 = load %symb_SymbNode*, %symb_SymbNode** %77
	call void @llvm_PRetvType(%symb_SymbNode* %78, i8 1)
	%79 = load %symb_SymbNode*, %symb_SymbNode** %s
	%80 = getelementptr %symb_SymbNode, %symb_SymbNode* %79, i32 0, i32 3
	%81 = load %symb_SymbNode*, %symb_SymbNode** %80
	call void @llvm_PParmTypes(%symb_SymbNode* %81)
	br label %L.21
L.23:
	%82 = load %symb_SymbNode*, %symb_SymbNode** %s
	%83 = getelementptr %symb_SymbNode, %symb_SymbNode* %82, i32 0, i32 1
	%84 = load %type_TypeNode*, %type_TypeNode** %83
	call void @llvm_PType(%type_TypeNode* %84)
	br label %L.21
L.21:
	%85 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%86 = getelementptr [3 x i8], [3 x i8]* @S.874
	%87 = bitcast [3 x i8]* %86 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %85, [0 x i8]* %87)
	br label %L.2
L.1:
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_PTempName(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 37)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load i16, i16* %n
	%3 = zext i16 %2 to i32
	%4 = sub i32 %3, 1
	call void @bout_BufIO_uint(%bout_BufIO* %1, i32 %4)
	br label %return
return:
	ret void
}
define internal void @llvm_PLocalName([0 x i8]* %s$) nounwind {
L.0:
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %0, i8 37)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = load [0 x i8]*, [0 x i8]** %s
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	br label %return
return:
	ret void
}
@S.875 = private unnamed_addr constant [11 x i8] c"__NoName__\00"
define internal void @llvm_NodeName(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%s = alloca %symb_SymbNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 9
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %s
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = icmp ne %symb_SymbNode* %3, null
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	call void @llvm_PName(%symb_SymbNode* %5)
	br label %L.1
L.3:
	%6 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%7 = getelementptr [11 x i8], [11 x i8]* @S.875
	%8 = bitcast [11 x i8]* %7 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %6, [0 x i8]* %8)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.876 = private unnamed_addr constant [3 x i8] c"0x\00"
define internal void @llvm_PFloat(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%hex = alloca i64
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 10
	%2 = load i64, i64* %1
	store i64 %2, i64* %hex
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 8
	%5 = load %type_TypeNode*, %type_TypeNode** %4
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 10
	%7 = load i32, i32* %6
	%8 = icmp eq i32 %7, 32
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load i64, i64* %hex
	%10 = and i64 %9, 268435456
	%11 = icmp ne i64 %10, 0
	br i1 %11, label %L.4, label %L.3
L.4:
	%12 = load i64, i64* %hex
	%13 = add i64 %12, 536870912
	store i64 %13, i64* %hex
	br label %L.3
L.3:
	%14 = load i64, i64* %hex
	%15 = and i64 %14, 18446744073172680704
	store i64 %15, i64* %hex
	br label %L.1
L.1:
	%16 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%17 = getelementptr [3 x i8], [3 x i8]* @S.876
	%18 = bitcast [3 x i8]* %17 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %16, [0 x i8]* %18)
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%20 = load i64, i64* %hex
	call void @bout_BufIO_hex64(%bout_BufIO* %19, i64 %20)
	br label %return
return:
	ret void
}
@S.877 = private unnamed_addr constant [23 x i8] c"Assignment to constant\00"
define internal void @llvm_NodeDst(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 6, label %L.3
		i32 12, label %L.4
		i32 4, label %L.4
	]
L.3:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	%9 = icmp ne i8 %8, 5
	br i1 %9, label %L.6, label %L.5
L.6:
	%10 = getelementptr [23 x i8], [23 x i8]* @S.877
	%11 = bitcast [23 x i8]* %10 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %11)
	br label %L.5
L.5:
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_ConstantRef(%ast_AstNode* %12)
	br label %L.2
L.4:
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeName(%ast_AstNode* %13)
	br label %L.2
L.1:
	%14 = load %ast_AstNode*, %ast_AstNode** %node
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 6
	%16 = load i16, i16* %15
	call void @llvm_PTempName(i16 %16)
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_NodeSrc(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 6, label %L.3
		i32 7, label %L.4
		i32 8, label %L.5
		i32 9, label %L.5
		i32 12, label %L.6
	]
L.3:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 8
	%6 = load %type_TypeNode*, %type_TypeNode** %5
	%7 = getelementptr %type_TypeNode, %type_TypeNode* %6, i32 0, i32 16
	%8 = load i8, i8* %7
	%9 = zext i8 %8 to i32
	switch i32 %9, label %L.7 [
		i32 1, label %L.9
		i32 2, label %L.9
		i32 3, label %L.10
		i32 5, label %L.11
		i32 8, label %L.11
		i32 6, label %L.12
		i32 7, label %L.12
	]
L.9:
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%11 = load %ast_AstNode*, %ast_AstNode** %node
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 10
	%13 = load i64, i64* %12
	call void @bout_BufIO_uint64(%bout_BufIO* %10, i64 %13)
	br label %L.8
L.10:
	%14 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%15 = load %ast_AstNode*, %ast_AstNode** %node
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 10
	%17 = load i64, i64* %16
	call void @bout_BufIO_int64(%bout_BufIO* %14, i64 %17)
	br label %L.8
L.11:
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_ConstantRef(%ast_AstNode* %18)
	br label %L.8
L.12:
	%19 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%20 = load %ast_AstNode*, %ast_AstNode** %node
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 10
	%22 = load i64, i64* %21
	call void @bout_BufIO_uint64(%bout_BufIO* %19, i64 %22)
	br label %L.8
L.7:
	br label %L.8
L.8:
	br label %L.2
L.4:
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PFloat(%ast_AstNode* %23)
	br label %L.2
L.5:
	%24 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %24, i8 64)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = bitcast [3 x i8]* @llvm_scon_prefix to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %26)
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = load %ast_AstNode*, %ast_AstNode** %node
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 10
	%30 = load i64, i64* %29
	%31 = trunc i64 %30 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %27, i32 %31)
	br label %L.2
L.6:
	%32 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeName(%ast_AstNode* %32)
	br label %L.2
L.1:
	%33 = load %ast_AstNode*, %ast_AstNode** %node
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 6
	%35 = load i16, i16* %34
	call void @llvm_PTempName(i16 %35)
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_Print([0 x i8]* %fmt$, %ast_AstNode* %anode$) nounwind {
L.0:
	%fmt = alloca [0 x i8]*
	store [0 x i8]* %fmt$, [0 x i8]** %fmt
	%anode = alloca %ast_AstNode*
	store %ast_AstNode* %anode$, %ast_AstNode** %anode
	%i = alloca i32
	%c = alloca i8
	%n = alloca i16
	%node = alloca %ast_AstNode*
	%t = alloca %type_TypeNode*
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load [0 x i8]*, [0 x i8]** %fmt
	%1 = load i32, i32* %i
	%2 = getelementptr [0 x i8], [0 x i8]* %0, i32 0, i32 %1
	%3 = load i8, i8* %2
	store i8 %3, i8* %c
	%4 = load i8, i8* %c
	%5 = icmp eq i8 %4, 0
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load i8, i8* %c
	%7 = icmp eq i8 %6, 37
	br i1 %7, label %L.5, label %L.6
L.5:
	%8 = load i32, i32* %i
	%9 = add i32 %8, 1
	store i32 %9, i32* %i
	%10 = load [0 x i8]*, [0 x i8]** %fmt
	%11 = load i32, i32* %i
	%12 = getelementptr [0 x i8], [0 x i8]* %10, i32 0, i32 %11
	%13 = load i8, i8* %12
	store i8 %13, i8* %c
	%14 = load %ast_AstNode*, %ast_AstNode** %anode
	store %ast_AstNode* %14, %ast_AstNode** %node
	%15 = load i8, i8* %c
	%16 = zext i8 %15 to i32
	switch i32 %16, label %L.7 [
		i32 48, label %L.9
		i32 49, label %L.9
		i32 50, label %L.9
		i32 51, label %L.9
		i32 52, label %L.9
		i32 53, label %L.9
		i32 54, label %L.9
		i32 55, label %L.9
		i32 56, label %L.9
		i32 57, label %L.9
	]
L.9:
	store i16 0, i16* %n
	br label %L.10
L.10:
	%17 = load i16, i16* %n
	%18 = mul i16 %17, 10
	%19 = load i8, i8* %c
	%20 = zext i8 %19 to i16
	%21 = sub i16 %20, 48
	%22 = add i16 %18, %21
	store i16 %22, i16* %n
	%23 = load i32, i32* %i
	%24 = add i32 %23, 1
	store i32 %24, i32* %i
	%25 = load [0 x i8]*, [0 x i8]** %fmt
	%26 = load i32, i32* %i
	%27 = getelementptr [0 x i8], [0 x i8]* %25, i32 0, i32 %26
	%28 = load i8, i8* %27
	store i8 %28, i8* %c
	%29 = load i8, i8* %c
	%30 = icmp ult i8 %29, 48
	br i1 %30, label %L.14, label %L.13
L.13:
	%31 = load i8, i8* %c
	%32 = icmp ugt i8 %31, 57
	br label %L.14
L.14:
	%33 = phi i1 [ true, %L.10 ], [ %32, %L.13 ]
	br i1 %33, label %L.11, label %L.12
L.12:
	br label %L.10
L.11:
	%34 = load %ast_AstNode*, %ast_AstNode** %anode
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 11
	%36 = load i16, i16* %n
	%37 = zext i16 %36 to i32
	%38 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %35, i32 0, i32 %37
	%39 = load %ast_AstNode*, %ast_AstNode** %38
	store %ast_AstNode* %39, %ast_AstNode** %node
	br label %L.8
L.7:
	br label %L.8
L.8:
	%40 = load %ast_AstNode*, %ast_AstNode** %node
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 8
	%42 = load %type_TypeNode*, %type_TypeNode** %41
	store %type_TypeNode* %42, %type_TypeNode** %t
	br label %L.15
L.15:
	%43 = load i8, i8* %c
	%44 = icmp eq i8 %43, 42
	%45 = xor i1 %44, true
	br i1 %45, label %L.16, label %L.17
L.17:
	%46 = load %type_TypeNode*, %type_TypeNode** %t
	%47 = icmp ne %type_TypeNode* %46, null
	br i1 %47, label %L.19, label %L.18
L.19:
	%48 = load %type_TypeNode*, %type_TypeNode** %t
	%49 = getelementptr %type_TypeNode, %type_TypeNode* %48, i32 0, i32 0
	%50 = load %type_TypeNode*, %type_TypeNode** %49
	store %type_TypeNode* %50, %type_TypeNode** %t
	br label %L.18
L.18:
	%51 = load i32, i32* %i
	%52 = add i32 %51, 1
	store i32 %52, i32* %i
	%53 = load [0 x i8]*, [0 x i8]** %fmt
	%54 = load i32, i32* %i
	%55 = getelementptr [0 x i8], [0 x i8]* %53, i32 0, i32 %54
	%56 = load i8, i8* %55
	store i8 %56, i8* %c
	br label %L.15
L.16:
	%57 = load i8, i8* %c
	%58 = zext i8 %57 to i32
	switch i32 %58, label %L.20 [
		i32 75, label %L.22
		i32 71, label %L.23
		i32 65, label %L.24
		i32 66, label %L.25
		i32 82, label %L.26
		i32 84, label %L.27
		i32 73, label %L.28
		i32 78, label %L.29
		i32 68, label %L.30
		i32 88, label %L.31
		i32 87, label %L.32
		i32 83, label %L.33
		i32 37, label %L.34
	]
L.22:
	%59 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PType(%type_TypeNode* %59)
	br label %L.21
L.23:
	%60 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PFType(%type_TypeNode* %60)
	br label %L.21
L.24:
	%61 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PAlign(%type_TypeNode* %61)
	br label %L.21
L.25:
	%62 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PWidth(%type_TypeNode* %62)
	br label %L.21
L.26:
	%63 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PDerefType(%type_TypeNode* %63)
	br label %L.21
L.27:
	%64 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeType(%ast_AstNode* %64)
	br label %L.21
L.28:
	%65 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeName(%ast_AstNode* %65)
	br label %L.21
L.29:
	%66 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeSrc(%ast_AstNode* %66)
	br label %L.21
L.30:
	%67 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeDst(%ast_AstNode* %67)
	br label %L.21
L.31:
	%68 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%69 = load %ast_AstNode*, %ast_AstNode** %node
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 7
	%71 = load i32, i32* %70
	call void @bout_BufIO_uint32(%bout_BufIO* %68, i32 %71)
	br label %L.21
L.32:
	%72 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	call void @llvm_PType(%type_TypeNode* %72)
	br label %L.21
L.33:
	%73 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %73, i8 64)
	%74 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%75 = bitcast [3 x i8]* @llvm_scon_prefix to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %74, [0 x i8]* %75)
	%76 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%77 = load %ast_AstNode*, %ast_AstNode** %node
	%78 = getelementptr %ast_AstNode, %ast_AstNode* %77, i32 0, i32 10
	%79 = load i64, i64* %78
	%80 = trunc i64 %79 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %76, i32 %80)
	br label %L.21
L.34:
	%81 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%82 = load i8, i8* %c
	call void @bout_BufIO_chr(%bout_BufIO* %81, i8 %82)
	br label %L.21
L.20:
	br label %L.21
L.21:
	br label %L.4
L.6:
	%83 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%84 = load i8, i8* %c
	call void @bout_BufIO_chr(%bout_BufIO* %83, i8 %84)
	br label %L.4
L.4:
	%85 = load i32, i32* %i
	%86 = add i32 %85, 1
	store i32 %86, i32* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
@S.878 = private unnamed_addr constant [5 x i8] c"%rv.\00"
define internal void @llvm_PRetValName(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [5 x i8], [5 x i8]* @S.878
	%2 = bitcast [5 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = load i16, i16* %n
	%5 = zext i16 %4 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %3, i32 %5)
	br label %return
return:
	ret void
}
@S.879 = private unnamed_addr constant [9 x i8] c", align \00"
define internal void @llvm_Alignment(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%n = alloca i32
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 12
	%2 = load i32, i32* %1
	store i32 %2, i32* %n
	%3 = load i32, i32* %n
	%4 = icmp uge i32 %3, 8
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = getelementptr [9 x i8], [9 x i8]* @S.879
	%7 = bitcast [9 x i8]* %6 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %7)
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = load i32, i32* %n
	%10 = udiv i32 %9, 8
	call void @bout_BufIO_uint(%bout_BufIO* %8, i32 %10)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.880 = private unnamed_addr constant [2 x i8] c",\00"
@S.881 = private unnamed_addr constant [11 x i8] c" section \22\00"
@S.882 = private unnamed_addr constant [2 x i8] c"\22\00"
define internal void @llvm_Section(%symb_SymbNode* %s$, i8 zeroext %comma$) nounwind {
L.0:
	%s = alloca %symb_SymbNode*
	store %symb_SymbNode* %s$, %symb_SymbNode** %s
	%comma = alloca i8
	store i8 %comma$, i8* %comma
	%0 = load %symb_SymbNode*, %symb_SymbNode** %s
	%1 = icmp ne %symb_SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* %comma
	%3 = icmp ne i8 %2, 0
	br i1 %3, label %L.4, label %L.3
L.4:
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%5 = getelementptr [2 x i8], [2 x i8]* @S.880
	%6 = bitcast [2 x i8]* %5 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %4, [0 x i8]* %6)
	br label %L.3
L.3:
	%7 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%8 = getelementptr [11 x i8], [11 x i8]* @S.881
	%9 = bitcast [11 x i8]* %8 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %7, [0 x i8]* %9)
	%10 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%11 = load %symb_SymbNode*, %symb_SymbNode** %s
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 23
	%13 = getelementptr [0 x i8], [0 x i8]* %12
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %10, [0 x i8]* %14)
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = getelementptr [2 x i8], [2 x i8]* @S.882
	%17 = bitcast [2 x i8]* %16 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %17)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.883 = private unnamed_addr constant [9 x i8] c" = type \00"
@S.884 = private unnamed_addr constant [2 x i8] c"i\00"
define internal void @llvm_DclType(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%s = alloca %symb_SymbNode*
	%size = alloca i32
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = icmp ne %type_TypeNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %type_TypeNode*, %type_TypeNode** %t
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 29
	%4 = load i8, i8* %3
	%5 = icmp ne i8 %4, 0
	%6 = xor i1 %5, true
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %type_TypeNode*, %type_TypeNode** %t
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 16
	%10 = load i8, i8* %9
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.5 [
		i32 5, label %L.7
		i32 6, label %L.7
		i32 8, label %L.8
		i32 7, label %L.9
	]
L.7:
	%12 = load %type_TypeNode*, %type_TypeNode** %t
	%13 = getelementptr %type_TypeNode, %type_TypeNode* %12, i32 0, i32 0
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	call void @llvm_DclType(%type_TypeNode* %14)
	br label %L.6
L.8:
	%15 = load %type_TypeNode*, %type_TypeNode** %t
	%16 = getelementptr %type_TypeNode, %type_TypeNode* %15, i32 0, i32 4
	%17 = load %symb_SymbNode*, %symb_SymbNode** %16
	%18 = getelementptr %symb_SymbNode, %symb_SymbNode* %17, i32 0, i32 3
	%19 = load %symb_SymbNode*, %symb_SymbNode** %18
	store %symb_SymbNode* %19, %symb_SymbNode** %s
	br label %L.10
L.10:
	%20 = load %symb_SymbNode*, %symb_SymbNode** %s
	%21 = icmp ne %symb_SymbNode* %20, null
	%22 = xor i1 %21, true
	br i1 %22, label %L.11, label %L.12
L.12:
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 1
	%25 = load %type_TypeNode*, %type_TypeNode** %24
	call void @llvm_DclType(%type_TypeNode* %25)
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 0
	%28 = load %symb_SymbNode*, %symb_SymbNode** %27
	store %symb_SymbNode* %28, %symb_SymbNode** %s
	br label %L.10
L.11:
	br label %L.6
L.9:
	%29 = load %type_TypeNode*, %type_TypeNode** %t
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 29
	store i8 1, i8* %30
	%31 = load %type_TypeNode*, %type_TypeNode** %t
	%32 = getelementptr %type_TypeNode, %type_TypeNode* %31, i32 0, i32 4
	%33 = load %symb_SymbNode*, %symb_SymbNode** %32
	store %symb_SymbNode* %33, %symb_SymbNode** %s
	br label %L.13
L.13:
	%34 = load %symb_SymbNode*, %symb_SymbNode** %s
	%35 = icmp ne %symb_SymbNode* %34, null
	%36 = xor i1 %35, true
	br i1 %36, label %L.14, label %L.15
L.15:
	%37 = load %symb_SymbNode*, %symb_SymbNode** %s
	%38 = getelementptr %symb_SymbNode, %symb_SymbNode* %37, i32 0, i32 1
	%39 = load %type_TypeNode*, %type_TypeNode** %38
	call void @llvm_DclType(%type_TypeNode* %39)
	%40 = load %symb_SymbNode*, %symb_SymbNode** %s
	%41 = getelementptr %symb_SymbNode, %symb_SymbNode* %40, i32 0, i32 0
	%42 = load %symb_SymbNode*, %symb_SymbNode** %41
	store %symb_SymbNode* %42, %symb_SymbNode** %s
	br label %L.13
L.14:
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PTypeName(%type_TypeNode* %43)
	%44 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%45 = getelementptr [9 x i8], [9 x i8]* @S.883
	%46 = bitcast [9 x i8]* %45 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %44, [0 x i8]* %46)
	%47 = load %type_TypeNode*, %type_TypeNode** %t
	%48 = getelementptr %type_TypeNode, %type_TypeNode* %47, i32 0, i32 24
	%49 = load i8, i8* %48
	%50 = icmp ne i8 %49, 0
	br i1 %50, label %L.17, label %L.18
L.17:
	%51 = load %type_TypeNode*, %type_TypeNode** %t
	%52 = getelementptr %type_TypeNode, %type_TypeNode* %51, i32 0, i32 10
	%53 = load i32, i32* %52
	%54 = call i32 @target_isize(i32 %53)
	store i32 %54, i32* %size
	%55 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%56 = getelementptr [2 x i8], [2 x i8]* @S.884
	%57 = bitcast [2 x i8]* %56 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %55, [0 x i8]* %57)
	%58 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%59 = load i32, i32* %size
	call void @bout_BufIO_uint(%bout_BufIO* %58, i32 %59)
	br label %L.16
L.18:
	%60 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_PRecordType(%type_TypeNode* %60)
	br label %L.16
L.16:
	%61 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %61)
	br label %L.6
L.5:
	br label %L.6
L.6:
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
@S.885 = private unnamed_addr constant [7 x i8] c"define\00"
@S.886 = private unnamed_addr constant [8 x i8] c"declare\00"
@S.887 = private unnamed_addr constant [10 x i8] c" internal\00"
@S.888 = private unnamed_addr constant [6 x i8] c" weak\00"
@S.889 = private unnamed_addr constant [10 x i8] c" external\00"
@S.890 = private unnamed_addr constant [5 x i8] c" %I(\00"
@S.891 = private unnamed_addr constant [3 x i8] c" %\00"
@S.892 = private unnamed_addr constant [3 x i8] c", \00"
@S.893 = private unnamed_addr constant [2 x i8] c")\00"
define internal void @llvm_DclProc(%ast_AstNode* %node$, i8 zeroext %isdefine$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%isdefine = alloca i8
	store i8 %isdefine$, i8* %isdefine
	%s = alloca %symb_SymbNode*
	%ps = alloca %symb_SymbNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 9
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %ps
	%3 = load i8, i8* %isdefine
	%4 = icmp ne i8 %3, 0
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = getelementptr [7 x i8], [7 x i8]* @S.885
	%7 = bitcast [7 x i8]* %6 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %7)
	br label %L.1
L.3:
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = getelementptr [8 x i8], [8 x i8]* @S.886
	%10 = bitcast [8 x i8]* %9 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %8, [0 x i8]* %10)
	br label %L.1
L.1:
	%11 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 14
	%13 = load i8, i8* %12
	%14 = zext i8 %13 to i32
	switch i32 %14, label %L.4 [
		i32 2, label %L.6
		i32 7, label %L.6
		i32 4, label %L.7
		i32 5, label %L.8
	]
L.6:
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = getelementptr [10 x i8], [10 x i8]* @S.887
	%17 = bitcast [10 x i8]* %16 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %17)
	br label %L.5
L.7:
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = getelementptr [6 x i8], [6 x i8]* @S.888
	%20 = bitcast [6 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	br label %L.5
L.8:
	%21 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%22 = getelementptr [10 x i8], [10 x i8]* @S.889
	%23 = bitcast [10 x i8]* %22 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %21, [0 x i8]* %23)
	br label %L.5
L.4:
	br label %L.5
L.5:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 4
	%26 = load %symb_SymbNode*, %symb_SymbNode** %25
	call void @llvm_PRetvType(%symb_SymbNode* %26, i8 1)
	%27 = getelementptr [5 x i8], [5 x i8]* @S.890
	%28 = bitcast [5 x i8]* %27 to [0 x i8]*
	%29 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %28, %ast_AstNode* %29)
	%30 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%31 = getelementptr %symb_SymbNode, %symb_SymbNode* %30, i32 0, i32 3
	%32 = load %symb_SymbNode*, %symb_SymbNode** %31
	store %symb_SymbNode* %32, %symb_SymbNode** %s
	br label %L.9
L.9:
	%33 = load %symb_SymbNode*, %symb_SymbNode** %s
	%34 = icmp ne %symb_SymbNode* %33, null
	%35 = xor i1 %34, true
	br i1 %35, label %L.10, label %L.11
L.11:
	%36 = load %symb_SymbNode*, %symb_SymbNode** %s
	%37 = getelementptr %symb_SymbNode, %symb_SymbNode* %36, i32 0, i32 1
	%38 = load %type_TypeNode*, %type_TypeNode** %37
	call void @llvm_PType(%type_TypeNode* %38)
	%39 = load %symb_SymbNode*, %symb_SymbNode** %s
	%40 = getelementptr %symb_SymbNode, %symb_SymbNode* %39, i32 0, i32 1
	%41 = load %type_TypeNode*, %type_TypeNode** %40
	call void @llvm_PExtend(%type_TypeNode* %41)
	%42 = load i8, i8* %isdefine
	%43 = icmp ne i8 %42, 0
	br i1 %43, label %L.13, label %L.12
L.13:
	%44 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%45 = getelementptr [3 x i8], [3 x i8]* @S.891
	%46 = bitcast [3 x i8]* %45 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %44, [0 x i8]* %46)
	%47 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%48 = load %symb_SymbNode*, %symb_SymbNode** %s
	%49 = getelementptr %symb_SymbNode, %symb_SymbNode* %48, i32 0, i32 23
	%50 = getelementptr [0 x i8], [0 x i8]* %49
	%51 = bitcast [0 x i8]* %50 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %47, [0 x i8]* %51)
	%52 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %52, i8 36)
	br label %L.12
L.12:
	%53 = load %symb_SymbNode*, %symb_SymbNode** %s
	%54 = getelementptr %symb_SymbNode, %symb_SymbNode* %53, i32 0, i32 0
	%55 = load %symb_SymbNode*, %symb_SymbNode** %54
	store %symb_SymbNode* %55, %symb_SymbNode** %s
	%56 = load %symb_SymbNode*, %symb_SymbNode** %s
	%57 = icmp eq %symb_SymbNode* %56, null
	br i1 %57, label %L.10, label %L.14
L.14:
	%58 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%59 = getelementptr [3 x i8], [3 x i8]* @S.892
	%60 = bitcast [3 x i8]* %59 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %58, [0 x i8]* %60)
	br label %L.9
L.10:
	%61 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%62 = getelementptr [2 x i8], [2 x i8]* @S.893
	%63 = bitcast [2 x i8]* %62 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %61, [0 x i8]* %63)
	br label %return
return:
	ret void
}
define internal void @llvm_PString([0 x i8]* %s$, i16 zeroext %n$, i8 zeroext %prefix$) nounwind {
L.0:
	%s = alloca [0 x i8]*
	store [0 x i8]* %s$, [0 x i8]** %s
	%n = alloca i16
	store i16 %n$, i16* %n
	%prefix = alloca i8
	store i8 %prefix$, i8* %prefix
	%i = alloca i16
	%c = alloca i8
	%0 = load i8, i8* %prefix
	%1 = icmp ne i8 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %2, i8 99)
	br label %L.1
L.1:
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %3, i8 34)
	store i16 0, i16* %i
	br label %L.3
L.3:
	%4 = load i16, i16* %i
	%5 = load i16, i16* %n
	%6 = icmp ult i16 %4, %5
	%7 = xor i1 %6, true
	br i1 %7, label %L.4, label %L.5
L.5:
	%8 = load [0 x i8]*, [0 x i8]** %s
	%9 = load i16, i16* %i
	%10 = zext i16 %9 to i32
	%11 = getelementptr [0 x i8], [0 x i8]* %8, i32 0, i32 %10
	%12 = load i8, i8* %11
	store i8 %12, i8* %c
	%13 = load i8, i8* %c
	%14 = icmp ult i8 %13, 32
	br i1 %14, label %L.11, label %L.10
L.10:
	%15 = load i8, i8* %c
	%16 = icmp uge i8 %15, 127
	br label %L.11
L.11:
	%17 = phi i1 [ true, %L.5 ], [ %16, %L.10 ]
	br i1 %17, label %L.9, label %L.8
L.8:
	%18 = load i8, i8* %c
	%19 = icmp eq i8 %18, 34
	br label %L.9
L.9:
	%20 = phi i1 [ true, %L.11 ], [ %19, %L.8 ]
	br i1 %20, label %L.7, label %L.6
L.6:
	%21 = load i8, i8* %c
	%22 = icmp eq i8 %21, 92
	br label %L.7
L.7:
	%23 = phi i1 [ true, %L.9 ], [ %22, %L.6 ]
	br i1 %23, label %L.13, label %L.14
L.13:
	%24 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %24, i8 92)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = load i8, i8* %c
	call void @bout_BufIO_hex8(%bout_BufIO* %25, i8 %26)
	br label %L.12
L.14:
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = load i8, i8* %c
	call void @bout_BufIO_chr(%bout_BufIO* %27, i8 %28)
	br label %L.12
L.12:
	%29 = load i16, i16* %i
	%30 = add i16 %29, 1
	store i16 %30, i16* %i
	br label %L.3
L.4:
	%31 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %31, i8 34)
	br label %return
return:
	ret void
}
@S.894 = private unnamed_addr constant [4 x i8] c"0.0\00"
@S.895 = private unnamed_addr constant [16 x i8] c"zeroinitializer\00"
@S.896 = private unnamed_addr constant [16 x i8] c"zeroinitializer\00"
@S.897 = private unnamed_addr constant [5 x i8] c"null\00"
define internal void @llvm_DefaultInitializer(%type_TypeNode* %t$) nounwind {
L.0:
	%t = alloca %type_TypeNode*
	store %type_TypeNode* %t$, %type_TypeNode** %t
	%0 = load %type_TypeNode*, %type_TypeNode** %t
	%1 = getelementptr %type_TypeNode, %type_TypeNode* %0, i32 0, i32 16
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 1, label %L.3
		i32 2, label %L.3
		i32 3, label %L.3
		i32 4, label %L.4
		i32 5, label %L.5
		i32 6, label %L.6
		i32 7, label %L.6
		i32 8, label %L.7
	]
L.3:
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_uint(%bout_BufIO* %4, i32 0)
	br label %L.2
L.4:
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%6 = getelementptr [4 x i8], [4 x i8]* @S.894
	%7 = bitcast [4 x i8]* %6 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %5, [0 x i8]* %7)
	br label %L.2
L.5:
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = getelementptr [16 x i8], [16 x i8]* @S.895
	%10 = bitcast [16 x i8]* %9 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %8, [0 x i8]* %10)
	br label %L.2
L.6:
	%11 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%12 = getelementptr [16 x i8], [16 x i8]* @S.896
	%13 = bitcast [16 x i8]* %12 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %11, [0 x i8]* %13)
	br label %L.2
L.7:
	%14 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%15 = getelementptr [5 x i8], [5 x i8]* @S.897
	%16 = bitcast [5 x i8]* %15 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %14, [0 x i8]* %16)
	br label %L.2
L.1:
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
@S.898 = private unnamed_addr constant [16 x i8] c"zeroinitializer\00"
@S.899 = private unnamed_addr constant [3 x i8] c"{ \00"
@S.900 = private unnamed_addr constant [2 x i8] c" \00"
@S.901 = private unnamed_addr constant [3 x i8] c", \00"
@S.902 = private unnamed_addr constant [3 x i8] c" }\00"
@S.903 = private unnamed_addr constant [3 x i8] c"[ \00"
@S.904 = private unnamed_addr constant [2 x i8] c" \00"
@S.905 = private unnamed_addr constant [3 x i8] c", \00"
@S.906 = private unnamed_addr constant [3 x i8] c" ]\00"
@S.907 = private unnamed_addr constant [14 x i8] c"bitcast( %T* \00"
@S.908 = private unnamed_addr constant [29 x i8] c"getelementptr( %T, %T* %N ) \00"
@S.909 = private unnamed_addr constant [25 x i8] c"getelementptr( %T* %N ) \00"
@S.910 = private unnamed_addr constant [9 x i8] c" to %T )\00"
@S.911 = private unnamed_addr constant [13 x i8] c"bitcast( %T \00"
@S.912 = private unnamed_addr constant [28 x i8] c"getelementptr( %R, %T %N ) \00"
@S.913 = private unnamed_addr constant [24 x i8] c"getelementptr( %T %N ) \00"
@S.914 = private unnamed_addr constant [9 x i8] c" to %T )\00"
@S.915 = private unnamed_addr constant [13 x i8] c"bitcast( %T \00"
@S.916 = private unnamed_addr constant [28 x i8] c"getelementptr( %R, %T %N ) \00"
@S.917 = private unnamed_addr constant [24 x i8] c"getelementptr( %T %N ) \00"
@S.918 = private unnamed_addr constant [9 x i8] c" to %T )\00"
define internal void @llvm_Constant(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	%t = alloca %type_TypeNode*
	%n = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	store %type_TypeNode* %2, %type_TypeNode** %t
	%3 = load %type_TypeNode*, %type_TypeNode** %t
	%4 = icmp ne %type_TypeNode* %3, null
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 0
	%7 = load i8, i8* %6
	%8 = zext i8 %7 to i32
	switch i32 %8, label %L.3 [
		i32 6, label %L.5
		i32 7, label %L.6
		i32 8, label %L.7
		i32 9, label %L.8
		i32 16, label %L.9
		i32 17, label %L.10
		i32 12, label %L.11
	]
L.5:
	%9 = load %type_TypeNode*, %type_TypeNode** %t
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 16
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	switch i32 %12, label %L.12 [
		i32 5, label %L.14
		i32 8, label %L.14
		i32 3, label %L.15
		i32 6, label %L.16
		i32 7, label %L.16
	]
L.14:
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_ConstantRef(%ast_AstNode* %13)
	br label %L.13
L.15:
	%14 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%15 = load %ast_AstNode*, %ast_AstNode** %node
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 10
	%17 = load i64, i64* %16
	call void @bout_BufIO_int64(%bout_BufIO* %14, i64 %17)
	br label %L.13
L.16:
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 24
	%20 = load i8, i8* %19
	%21 = icmp ne i8 %20, 0
	br i1 %21, label %L.18, label %L.19
L.18:
	%22 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 10
	%25 = load i64, i64* %24
	call void @bout_BufIO_uint64(%bout_BufIO* %22, i64 %25)
	br label %L.17
L.19:
	%26 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%27 = getelementptr [16 x i8], [16 x i8]* @S.898
	%28 = bitcast [16 x i8]* %27 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %26, [0 x i8]* %28)
	br label %L.17
L.17:
	br label %L.13
L.12:
	%29 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%30 = load %ast_AstNode*, %ast_AstNode** %node
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 10
	%32 = load i64, i64* %31
	call void @bout_BufIO_uint64(%bout_BufIO* %29, i64 %32)
	br label %L.13
L.13:
	br label %L.4
L.6:
	%33 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PFloat(%ast_AstNode* %33)
	br label %L.4
L.7:
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = getelementptr %type_TypeNode, %type_TypeNode* %34, i32 0, i32 28
	%36 = load i8, i8* %35
	%37 = icmp ne i8 %36, 0
	br i1 %37, label %L.21, label %L.22
L.21:
	%38 = load %ast_AstNode*, %ast_AstNode** %node
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 8
	%40 = load %type_TypeNode*, %type_TypeNode** %39
	%41 = call i32 @type_TypeNode_Span(%type_TypeNode* %40)
	%42 = trunc i32 %41 to i16
	store i16 %42, i16* %n
	br label %L.20
L.22:
	%43 = load %type_TypeNode*, %type_TypeNode** %t
	%44 = call i32 @type_TypeNode_Span(%type_TypeNode* %43)
	%45 = trunc i32 %44 to i16
	store i16 %45, i16* %n
	br label %L.20
L.20:
	%46 = load %ast_AstNode*, %ast_AstNode** %node
	%47 = getelementptr %ast_AstNode, %ast_AstNode* %46, i32 0, i32 9
	%48 = load %symb_SymbNode*, %symb_SymbNode** %47
	%49 = getelementptr %symb_SymbNode, %symb_SymbNode* %48, i32 0, i32 23
	%50 = getelementptr [0 x i8], [0 x i8]* %49
	%51 = bitcast [0 x i8]* %50 to [0 x i8]*
	%52 = load i16, i16* %n
	call void @llvm_PString([0 x i8]* %51, i16 %52, i8 1)
	br label %L.4
L.8:
	%53 = load %type_TypeNode*, %type_TypeNode** %t
	%54 = getelementptr %type_TypeNode, %type_TypeNode* %53, i32 0, i32 16
	%55 = load i8, i8* %54
	%56 = zext i8 %55 to i32
	switch i32 %56, label %L.23 [
		i32 7, label %L.25
		i32 6, label %L.26
	]
L.25:
	%57 = load %type_TypeNode*, %type_TypeNode** %t
	%58 = getelementptr %type_TypeNode, %type_TypeNode* %57, i32 0, i32 26
	%59 = load i8, i8* %58
	%60 = icmp ne i8 %59, 0
	br i1 %60, label %L.28, label %L.27
L.27:
	%61 = load %type_TypeNode*, %type_TypeNode** %t
	%62 = getelementptr %type_TypeNode, %type_TypeNode* %61, i32 0, i32 27
	%63 = load i8, i8* %62
	%64 = icmp ne i8 %63, 0
	br label %L.28
L.28:
	%65 = phi i1 [ true, %L.25 ], [ %64, %L.27 ]
	br i1 %65, label %L.30, label %L.29
L.30:
	%66 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %66, i8 60)
	br label %L.29
L.29:
	%67 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%68 = getelementptr [3 x i8], [3 x i8]* @S.899
	%69 = bitcast [3 x i8]* %68 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %67, [0 x i8]* %69)
	store i16 0, i16* %i
	br label %L.31
L.31:
	%70 = load %ast_AstNode*, %ast_AstNode** %node
	%71 = getelementptr %ast_AstNode, %ast_AstNode* %70, i32 0, i32 11
	%72 = load i16, i16* %i
	%73 = zext i16 %72 to i32
	%74 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %71, i32 0, i32 %73
	%75 = load %ast_AstNode*, %ast_AstNode** %74
	%76 = getelementptr %ast_AstNode, %ast_AstNode* %75, i32 0, i32 8
	%77 = load %type_TypeNode*, %type_TypeNode** %76
	call void @llvm_PType(%type_TypeNode* %77)
	%78 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%79 = getelementptr [2 x i8], [2 x i8]* @S.900
	%80 = bitcast [2 x i8]* %79 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %78, [0 x i8]* %80)
	%81 = load %ast_AstNode*, %ast_AstNode** %node
	%82 = getelementptr %ast_AstNode, %ast_AstNode* %81, i32 0, i32 11
	%83 = load i16, i16* %i
	%84 = zext i16 %83 to i32
	%85 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %82, i32 0, i32 %84
	%86 = load %ast_AstNode*, %ast_AstNode** %85
	call void @llvm_Constant(%ast_AstNode* %86)
	%87 = load i16, i16* %i
	%88 = add i16 %87, 1
	store i16 %88, i16* %i
	%89 = load i16, i16* %i
	%90 = load %ast_AstNode*, %ast_AstNode** %node
	%91 = getelementptr %ast_AstNode, %ast_AstNode* %90, i32 0, i32 2
	%92 = load i16, i16* %91
	%93 = icmp uge i16 %89, %92
	br i1 %93, label %L.32, label %L.33
L.33:
	%94 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%95 = getelementptr [3 x i8], [3 x i8]* @S.901
	%96 = bitcast [3 x i8]* %95 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %94, [0 x i8]* %96)
	br label %L.31
L.32:
	%97 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%98 = getelementptr [3 x i8], [3 x i8]* @S.902
	%99 = bitcast [3 x i8]* %98 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %97, [0 x i8]* %99)
	%100 = load %type_TypeNode*, %type_TypeNode** %t
	%101 = getelementptr %type_TypeNode, %type_TypeNode* %100, i32 0, i32 26
	%102 = load i8, i8* %101
	%103 = icmp ne i8 %102, 0
	br i1 %103, label %L.35, label %L.34
L.34:
	%104 = load %type_TypeNode*, %type_TypeNode** %t
	%105 = getelementptr %type_TypeNode, %type_TypeNode* %104, i32 0, i32 27
	%106 = load i8, i8* %105
	%107 = icmp ne i8 %106, 0
	br label %L.35
L.35:
	%108 = phi i1 [ true, %L.32 ], [ %107, %L.34 ]
	br i1 %108, label %L.37, label %L.36
L.37:
	%109 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %109, i8 62)
	br label %L.36
L.36:
	br label %L.24
L.26:
	%110 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%111 = getelementptr [3 x i8], [3 x i8]* @S.903
	%112 = bitcast [3 x i8]* %111 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %110, [0 x i8]* %112)
	store i16 0, i16* %i
	br label %L.38
L.38:
	%113 = load %ast_AstNode*, %ast_AstNode** %node
	%114 = getelementptr %ast_AstNode, %ast_AstNode* %113, i32 0, i32 11
	%115 = load i16, i16* %i
	%116 = zext i16 %115 to i32
	%117 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %114, i32 0, i32 %116
	%118 = load %ast_AstNode*, %ast_AstNode** %117
	%119 = getelementptr %ast_AstNode, %ast_AstNode* %118, i32 0, i32 8
	%120 = load %type_TypeNode*, %type_TypeNode** %119
	call void @llvm_PType(%type_TypeNode* %120)
	%121 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%122 = getelementptr [2 x i8], [2 x i8]* @S.904
	%123 = bitcast [2 x i8]* %122 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %121, [0 x i8]* %123)
	%124 = load %ast_AstNode*, %ast_AstNode** %node
	%125 = getelementptr %ast_AstNode, %ast_AstNode* %124, i32 0, i32 11
	%126 = load i16, i16* %i
	%127 = zext i16 %126 to i32
	%128 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %125, i32 0, i32 %127
	%129 = load %ast_AstNode*, %ast_AstNode** %128
	call void @llvm_Constant(%ast_AstNode* %129)
	%130 = load i16, i16* %i
	%131 = add i16 %130, 1
	store i16 %131, i16* %i
	%132 = load i16, i16* %i
	%133 = load %ast_AstNode*, %ast_AstNode** %node
	%134 = getelementptr %ast_AstNode, %ast_AstNode* %133, i32 0, i32 2
	%135 = load i16, i16* %134
	%136 = icmp uge i16 %132, %135
	br i1 %136, label %L.39, label %L.40
L.40:
	%137 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%138 = getelementptr [3 x i8], [3 x i8]* @S.905
	%139 = bitcast [3 x i8]* %138 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %137, [0 x i8]* %139)
	br label %L.38
L.39:
	%140 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%141 = getelementptr [3 x i8], [3 x i8]* @S.906
	%142 = bitcast [3 x i8]* %141 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %140, [0 x i8]* %142)
	br label %L.24
L.23:
	br label %L.24
L.24:
	br label %L.4
L.9:
	%143 = load %type_TypeNode*, %type_TypeNode** %t
	%144 = getelementptr %type_TypeNode, %type_TypeNode* %143, i32 0, i32 0
	%145 = load %type_TypeNode*, %type_TypeNode** %144
	%146 = getelementptr %type_TypeNode, %type_TypeNode* %145, i32 0, i32 28
	%147 = load i8, i8* %146
	%148 = icmp ne i8 %147, 0
	br i1 %148, label %L.42, label %L.41
L.42:
	%149 = getelementptr [14 x i8], [14 x i8]* @S.907
	%150 = bitcast [14 x i8]* %149 to [0 x i8]*
	%151 = load %ast_AstNode*, %ast_AstNode** %node
	%152 = getelementptr %ast_AstNode, %ast_AstNode* %151, i32 0, i32 11
	%153 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %152, i32 0, i32 0
	%154 = load %ast_AstNode*, %ast_AstNode** %153
	call void @llvm_Print([0 x i8]* %150, %ast_AstNode* %154)
	br label %L.41
L.41:
	%155 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%156 = load i8, i8* %155
	%157 = icmp ne i8 %156, 0
	br i1 %157, label %L.44, label %L.45
L.44:
	%158 = getelementptr [29 x i8], [29 x i8]* @S.908
	%159 = bitcast [29 x i8]* %158 to [0 x i8]*
	%160 = load %ast_AstNode*, %ast_AstNode** %node
	%161 = getelementptr %ast_AstNode, %ast_AstNode* %160, i32 0, i32 11
	%162 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %161, i32 0, i32 0
	%163 = load %ast_AstNode*, %ast_AstNode** %162
	call void @llvm_Print([0 x i8]* %159, %ast_AstNode* %163)
	br label %L.43
L.45:
	%164 = getelementptr [25 x i8], [25 x i8]* @S.909
	%165 = bitcast [25 x i8]* %164 to [0 x i8]*
	%166 = load %ast_AstNode*, %ast_AstNode** %node
	%167 = getelementptr %ast_AstNode, %ast_AstNode* %166, i32 0, i32 11
	%168 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %167, i32 0, i32 0
	%169 = load %ast_AstNode*, %ast_AstNode** %168
	call void @llvm_Print([0 x i8]* %165, %ast_AstNode* %169)
	br label %L.43
L.43:
	%170 = load %type_TypeNode*, %type_TypeNode** %t
	%171 = getelementptr %type_TypeNode, %type_TypeNode* %170, i32 0, i32 0
	%172 = load %type_TypeNode*, %type_TypeNode** %171
	%173 = getelementptr %type_TypeNode, %type_TypeNode* %172, i32 0, i32 28
	%174 = load i8, i8* %173
	%175 = icmp ne i8 %174, 0
	br i1 %175, label %L.47, label %L.46
L.47:
	%176 = getelementptr [9 x i8], [9 x i8]* @S.910
	%177 = bitcast [9 x i8]* %176 to [0 x i8]*
	%178 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %177, %ast_AstNode* %178)
	br label %L.46
L.46:
	br label %L.4
L.10:
	%179 = load %type_TypeNode*, %type_TypeNode** %t
	%180 = getelementptr %type_TypeNode, %type_TypeNode* %179, i32 0, i32 0
	%181 = load %type_TypeNode*, %type_TypeNode** %180
	%182 = getelementptr %type_TypeNode, %type_TypeNode* %181, i32 0, i32 28
	%183 = load i8, i8* %182
	%184 = icmp ne i8 %183, 0
	br i1 %184, label %L.49, label %L.48
L.49:
	%185 = getelementptr [13 x i8], [13 x i8]* @S.911
	%186 = bitcast [13 x i8]* %185 to [0 x i8]*
	%187 = load %ast_AstNode*, %ast_AstNode** %node
	%188 = getelementptr %ast_AstNode, %ast_AstNode* %187, i32 0, i32 11
	%189 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %188, i32 0, i32 0
	%190 = load %ast_AstNode*, %ast_AstNode** %189
	call void @llvm_Print([0 x i8]* %186, %ast_AstNode* %190)
	br label %L.48
L.48:
	%191 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%192 = load i8, i8* %191
	%193 = icmp ne i8 %192, 0
	br i1 %193, label %L.51, label %L.52
L.51:
	%194 = getelementptr [28 x i8], [28 x i8]* @S.912
	%195 = bitcast [28 x i8]* %194 to [0 x i8]*
	%196 = load %ast_AstNode*, %ast_AstNode** %node
	%197 = getelementptr %ast_AstNode, %ast_AstNode* %196, i32 0, i32 11
	%198 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %197, i32 0, i32 0
	%199 = load %ast_AstNode*, %ast_AstNode** %198
	call void @llvm_Print([0 x i8]* %195, %ast_AstNode* %199)
	br label %L.50
L.52:
	%200 = getelementptr [24 x i8], [24 x i8]* @S.913
	%201 = bitcast [24 x i8]* %200 to [0 x i8]*
	%202 = load %ast_AstNode*, %ast_AstNode** %node
	%203 = getelementptr %ast_AstNode, %ast_AstNode* %202, i32 0, i32 11
	%204 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %203, i32 0, i32 0
	%205 = load %ast_AstNode*, %ast_AstNode** %204
	call void @llvm_Print([0 x i8]* %201, %ast_AstNode* %205)
	br label %L.50
L.50:
	%206 = load %type_TypeNode*, %type_TypeNode** %t
	%207 = getelementptr %type_TypeNode, %type_TypeNode* %206, i32 0, i32 0
	%208 = load %type_TypeNode*, %type_TypeNode** %207
	%209 = getelementptr %type_TypeNode, %type_TypeNode* %208, i32 0, i32 28
	%210 = load i8, i8* %209
	%211 = icmp ne i8 %210, 0
	br i1 %211, label %L.54, label %L.53
L.54:
	%212 = getelementptr [9 x i8], [9 x i8]* @S.914
	%213 = bitcast [9 x i8]* %212 to [0 x i8]*
	%214 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %213, %ast_AstNode* %214)
	br label %L.53
L.53:
	br label %L.4
L.11:
	%215 = load %type_TypeNode*, %type_TypeNode** %t
	%216 = getelementptr %type_TypeNode, %type_TypeNode* %215, i32 0, i32 16
	%217 = load i8, i8* %216
	%218 = icmp eq i8 %217, 8
	br i1 %218, label %L.56, label %L.57
L.56:
	%219 = load %ast_AstNode*, %ast_AstNode** %node
	%220 = getelementptr %ast_AstNode, %ast_AstNode* %219, i32 0, i32 9
	%221 = load %symb_SymbNode*, %symb_SymbNode** %220
	call void @llvm_PName(%symb_SymbNode* %221)
	br label %L.55
L.57:
	%222 = load %type_TypeNode*, %type_TypeNode** %t
	%223 = getelementptr %type_TypeNode, %type_TypeNode* %222, i32 0, i32 0
	%224 = load %type_TypeNode*, %type_TypeNode** %223
	%225 = getelementptr %type_TypeNode, %type_TypeNode* %224, i32 0, i32 28
	%226 = load i8, i8* %225
	%227 = icmp ne i8 %226, 0
	br i1 %227, label %L.59, label %L.58
L.59:
	%228 = getelementptr [13 x i8], [13 x i8]* @S.915
	%229 = bitcast [13 x i8]* %228 to [0 x i8]*
	%230 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %229, %ast_AstNode* %230)
	br label %L.58
L.58:
	%231 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%232 = load i8, i8* %231
	%233 = icmp ne i8 %232, 0
	br i1 %233, label %L.61, label %L.62
L.61:
	%234 = getelementptr [28 x i8], [28 x i8]* @S.916
	%235 = bitcast [28 x i8]* %234 to [0 x i8]*
	%236 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %235, %ast_AstNode* %236)
	br label %L.60
L.62:
	%237 = getelementptr [24 x i8], [24 x i8]* @S.917
	%238 = bitcast [24 x i8]* %237 to [0 x i8]*
	%239 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %238, %ast_AstNode* %239)
	br label %L.60
L.60:
	%240 = load %type_TypeNode*, %type_TypeNode** %t
	%241 = getelementptr %type_TypeNode, %type_TypeNode* %240, i32 0, i32 0
	%242 = load %type_TypeNode*, %type_TypeNode** %241
	%243 = getelementptr %type_TypeNode, %type_TypeNode* %242, i32 0, i32 28
	%244 = load i8, i8* %243
	%245 = icmp ne i8 %244, 0
	br i1 %245, label %L.64, label %L.63
L.64:
	%246 = getelementptr [9 x i8], [9 x i8]* @S.918
	%247 = bitcast [9 x i8]* %246 to [0 x i8]*
	%248 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %247, %ast_AstNode* %248)
	br label %L.63
L.63:
	br label %L.55
L.55:
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.919 = private unnamed_addr constant [16 x i8] c"\09%I = alloca %K\00"
@S.920 = private unnamed_addr constant [8 x i8] c"\09store \00"
@S.921 = private unnamed_addr constant [9 x i8] c", %K* %D\00"
@S.922 = private unnamed_addr constant [29 x i8] c"initialized local composites\00"
@S.923 = private unnamed_addr constant [25 x i8] c"%I = internal global %K \00"
@S.924 = private unnamed_addr constant [16 x i8] c"%I = global %K \00"
@S.925 = private unnamed_addr constant [21 x i8] c"%I = weak global %K \00"
@S.926 = private unnamed_addr constant [24 x i8] c"%I = external global %K\00"
define internal void @llvm_DclVar(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%s = alloca %symb_SymbNode*
	%rhs = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 9
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %s
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 11
	%5 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %4, i32 0, i32 0
	%6 = load %ast_AstNode*, %ast_AstNode** %5
	store %ast_AstNode* %6, %ast_AstNode** %rhs
	%7 = load %symb_SymbNode*, %symb_SymbNode** %s
	%8 = icmp ne %symb_SymbNode* %7, null
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 1
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	call void @llvm_DclType(%type_TypeNode* %11)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 14
	%14 = load i8, i8* %13
	%15 = zext i8 %14 to i32
	switch i32 %15, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.6
		i32 3, label %L.7
		i32 4, label %L.8
		i32 5, label %L.9
	]
L.5:
	%16 = getelementptr [16 x i8], [16 x i8]* @S.919
	%17 = bitcast [16 x i8]* %16 to [0 x i8]*
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %17, %ast_AstNode* %18)
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 8
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 16
	%23 = load i8, i8* %22
	%24 = icmp ule i8 %23, 5
	br i1 %24, label %L.11, label %L.10
L.10:
	%25 = load %ast_AstNode*, %ast_AstNode** %node
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 8
	%27 = load %type_TypeNode*, %type_TypeNode** %26
	%28 = getelementptr %type_TypeNode, %type_TypeNode* %27, i32 0, i32 24
	%29 = load i8, i8* %28
	%30 = icmp ne i8 %29, 0
	br label %L.11
L.11:
	%31 = phi i1 [ true, %L.5 ], [ %30, %L.10 ]
	br i1 %31, label %L.13, label %L.14
L.13:
	%32 = load %ast_AstNode*, %ast_AstNode** %rhs
	%33 = icmp eq %ast_AstNode* %32, null
	br i1 %33, label %L.15, label %L.16
L.15:
	%34 = getelementptr %A.3, %A.3* @feature, i32 0, i32 9
	%35 = load i8, i8* %34
	%36 = icmp ne i8 %35, 0
	br label %L.16
L.16:
	%37 = phi i1 [ false, %L.13 ], [ %36, %L.15 ]
	br i1 %37, label %L.18, label %L.17
L.18:
	%38 = load %ast_AstNode*, %ast_AstNode** %node
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 8
	%40 = load %type_TypeNode*, %type_TypeNode** %39
	%41 = call %ast_AstNode* @ast_Const(%type_TypeNode* %40, i64 0)
	store %ast_AstNode* %41, %ast_AstNode** %rhs
	br label %L.17
L.17:
	%42 = load %ast_AstNode*, %ast_AstNode** %rhs
	%43 = icmp ne %ast_AstNode* %42, null
	br i1 %43, label %L.20, label %L.19
L.20:
	%44 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %44)
	%45 = load %ast_AstNode*, %ast_AstNode** %rhs
	%46 = call i8 @llvm_GenSub(%ast_AstNode* %45)
	%47 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%48 = getelementptr [8 x i8], [8 x i8]* @S.920
	%49 = bitcast [8 x i8]* %48 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %47, [0 x i8]* %49)
	%50 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_NodeType(%ast_AstNode* %50)
	%51 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %51, i8 32)
	%52 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_NodeSrc(%ast_AstNode* %52)
	%53 = getelementptr [9 x i8], [9 x i8]* @S.921
	%54 = bitcast [9 x i8]* %53 to [0 x i8]*
	%55 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %54, %ast_AstNode* %55)
	br label %L.19
L.19:
	br label %L.12
L.14:
	%56 = load %ast_AstNode*, %ast_AstNode** %rhs
	%57 = icmp ne %ast_AstNode* %56, null
	br i1 %57, label %L.22, label %L.21
L.22:
	%58 = getelementptr [29 x i8], [29 x i8]* @S.922
	%59 = bitcast [29 x i8]* %58 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %59)
	br label %L.21
L.21:
	br label %L.12
L.12:
	br label %L.4
L.6:
	%60 = getelementptr [25 x i8], [25 x i8]* @S.923
	%61 = bitcast [25 x i8]* %60 to [0 x i8]*
	%62 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %61, %ast_AstNode* %62)
	%63 = load %ast_AstNode*, %ast_AstNode** %rhs
	%64 = icmp ne %ast_AstNode* %63, null
	br i1 %64, label %L.24, label %L.25
L.24:
	%65 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_Constant(%ast_AstNode* %65)
	br label %L.23
L.25:
	%66 = load %ast_AstNode*, %ast_AstNode** %node
	%67 = getelementptr %ast_AstNode, %ast_AstNode* %66, i32 0, i32 8
	%68 = load %type_TypeNode*, %type_TypeNode** %67
	call void @llvm_DefaultInitializer(%type_TypeNode* %68)
	br label %L.23
L.23:
	%69 = load %symb_SymbNode*, %symb_SymbNode** %s
	%70 = getelementptr %symb_SymbNode, %symb_SymbNode* %69, i32 0, i32 1
	%71 = load %type_TypeNode*, %type_TypeNode** %70
	call void @llvm_Alignment(%type_TypeNode* %71)
	%72 = load %symb_SymbNode*, %symb_SymbNode** %s
	%73 = getelementptr %symb_SymbNode, %symb_SymbNode* %72, i32 0, i32 7
	%74 = load %symb_SymbNode*, %symb_SymbNode** %73
	call void @llvm_Section(%symb_SymbNode* %74, i8 1)
	br label %L.4
L.7:
	%75 = getelementptr [16 x i8], [16 x i8]* @S.924
	%76 = bitcast [16 x i8]* %75 to [0 x i8]*
	%77 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %76, %ast_AstNode* %77)
	%78 = load %ast_AstNode*, %ast_AstNode** %rhs
	%79 = icmp ne %ast_AstNode* %78, null
	br i1 %79, label %L.27, label %L.28
L.27:
	%80 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_Constant(%ast_AstNode* %80)
	br label %L.26
L.28:
	%81 = load %ast_AstNode*, %ast_AstNode** %node
	%82 = getelementptr %ast_AstNode, %ast_AstNode* %81, i32 0, i32 8
	%83 = load %type_TypeNode*, %type_TypeNode** %82
	call void @llvm_DefaultInitializer(%type_TypeNode* %83)
	br label %L.26
L.26:
	%84 = load %symb_SymbNode*, %symb_SymbNode** %s
	%85 = getelementptr %symb_SymbNode, %symb_SymbNode* %84, i32 0, i32 1
	%86 = load %type_TypeNode*, %type_TypeNode** %85
	call void @llvm_Alignment(%type_TypeNode* %86)
	%87 = load %symb_SymbNode*, %symb_SymbNode** %s
	%88 = getelementptr %symb_SymbNode, %symb_SymbNode* %87, i32 0, i32 7
	%89 = load %symb_SymbNode*, %symb_SymbNode** %88
	call void @llvm_Section(%symb_SymbNode* %89, i8 1)
	br label %L.4
L.8:
	%90 = getelementptr [21 x i8], [21 x i8]* @S.925
	%91 = bitcast [21 x i8]* %90 to [0 x i8]*
	%92 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %91, %ast_AstNode* %92)
	%93 = load %ast_AstNode*, %ast_AstNode** %rhs
	%94 = icmp ne %ast_AstNode* %93, null
	br i1 %94, label %L.30, label %L.31
L.30:
	%95 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_Constant(%ast_AstNode* %95)
	br label %L.29
L.31:
	%96 = load %ast_AstNode*, %ast_AstNode** %node
	%97 = getelementptr %ast_AstNode, %ast_AstNode* %96, i32 0, i32 8
	%98 = load %type_TypeNode*, %type_TypeNode** %97
	call void @llvm_DefaultInitializer(%type_TypeNode* %98)
	br label %L.29
L.29:
	%99 = load %symb_SymbNode*, %symb_SymbNode** %s
	%100 = getelementptr %symb_SymbNode, %symb_SymbNode* %99, i32 0, i32 1
	%101 = load %type_TypeNode*, %type_TypeNode** %100
	call void @llvm_Alignment(%type_TypeNode* %101)
	%102 = load %symb_SymbNode*, %symb_SymbNode** %s
	%103 = getelementptr %symb_SymbNode, %symb_SymbNode* %102, i32 0, i32 7
	%104 = load %symb_SymbNode*, %symb_SymbNode** %103
	call void @llvm_Section(%symb_SymbNode* %104, i8 1)
	br label %L.4
L.9:
	%105 = getelementptr [24 x i8], [24 x i8]* @S.926
	%106 = bitcast [24 x i8]* %105 to [0 x i8]*
	%107 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %106, %ast_AstNode* %107)
	br label %L.4
L.3:
	br label %L.4
L.4:
	%108 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%109 = load i8, i8* %108
	%110 = icmp ne i8 %109, 0
	br i1 %110, label %L.33, label %L.34
L.33:
	%111 = load %symb_SymbNode*, %symb_SymbNode** %s
	%112 = call i16 @llvmdb_DefVar(%symb_SymbNode* %111)
	br label %L.32
L.34:
	%113 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %113)
	br label %L.32
L.32:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.927 = private unnamed_addr constant [39 x i8] c"%S = private unnamed_addr constant %K \00"
define internal void @llvm_DclString(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%n = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 6
	%2 = load i16, i16* %1
	%3 = icmp ne i16 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	br label %return
L.1:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 6
	store i16 1, i16* %5
	%6 = getelementptr [39 x i8], [39 x i8]* @S.927
	%7 = bitcast [39 x i8]* %6 to [0 x i8]*
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %7, %ast_AstNode* %8)
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 8
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	%12 = icmp ne %type_TypeNode* %11, null
	br i1 %12, label %L.4, label %L.5
L.4:
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 8
	%15 = load %type_TypeNode*, %type_TypeNode** %14
	%16 = call i32 @type_TypeNode_Span(%type_TypeNode* %15)
	%17 = trunc i32 %16 to i16
	store i16 %17, i16* %n
	br label %L.3
L.5:
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 9
	%20 = load %symb_SymbNode*, %symb_SymbNode** %19
	%21 = getelementptr %symb_SymbNode, %symb_SymbNode* %20, i32 0, i32 23
	%22 = getelementptr [0 x i8], [0 x i8]* %21
	%23 = bitcast [0 x i8]* %22 to [0 x i8]*
	%24 = call i32 @zstr_len([0 x i8]* %23, i32 4095)
	%25 = trunc i32 %24 to i16
	store i16 %25, i16* %n
	br label %L.3
L.3:
	%26 = load %ast_AstNode*, %ast_AstNode** %node
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 9
	%28 = load %symb_SymbNode*, %symb_SymbNode** %27
	%29 = getelementptr %symb_SymbNode, %symb_SymbNode* %28, i32 0, i32 23
	%30 = getelementptr [0 x i8], [0 x i8]* %29
	%31 = bitcast [0 x i8]* %30 to [0 x i8]*
	%32 = load i16, i16* %n
	call void @llvm_PString([0 x i8]* %31, i16 %32, i8 1)
	%33 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %33)
	br label %return
return:
	ret void
}
@S.928 = private unnamed_addr constant [27 x i8] c"%S = internal constant %K \00"
define internal void @llvm_DclAggregate(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_ConstScan(%ast_AstNode* %0)
	%1 = getelementptr [27 x i8], [27 x i8]* @S.928
	%2 = bitcast [27 x i8]* %1 to [0 x i8]*
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %2, %ast_AstNode* %3)
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Constant(%ast_AstNode* %4)
	%5 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %5)
	br label %return
return:
	ret void
}
define internal zeroext i8 @llvm_ConstByRef(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 8, label %L.3
		i32 9, label %L.4
	]
L.3:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclString(%ast_AstNode* %4)
	store i8 1, i8* %rv.0
	br label %return
L.4:
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclAggregate(%ast_AstNode* %5)
	store i8 1, i8* %rv.0
	br label %return
L.1:
	br label %L.2
L.2:
	store i8 0, i8* %rv.0
	br label %return
return:
	%6 = load i8, i8* %rv.0
	ret i8 %6
}
define internal void @llvm_ConstScan(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 16
	br i1 %3, label %L.1, label %L.2
L.1:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 0
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	%8 = call i8 @llvm_ConstByRef(%ast_AstNode* %7)
	%9 = icmp ne i8 %8, 0
	br label %L.2
L.2:
	%10 = phi i1 [ false, %L.0 ], [ %9, %L.1 ]
	br i1 %10, label %L.4, label %L.5
L.4:
	br label %return
L.5:
	store i16 0, i16* %i
	br label %L.6
L.6:
	%11 = load i16, i16* %i
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 2
	%14 = load i16, i16* %13
	%15 = icmp ult i16 %11, %14
	%16 = xor i1 %15, true
	br i1 %16, label %L.7, label %L.8
L.8:
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 11
	%19 = load i16, i16* %i
	%20 = zext i16 %19 to i32
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %18, i32 0, i32 %20
	%22 = load %ast_AstNode*, %ast_AstNode** %21
	call void @llvm_ConstScan(%ast_AstNode* %22)
	%23 = load i16, i16* %i
	%24 = add i16 %23, 1
	store i16 %24, i16* %i
	br label %L.6
L.7:
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
@S.929 = private unnamed_addr constant [27 x i8] c"%I = internal constant %K \00"
@S.930 = private unnamed_addr constant [18 x i8] c"%I = constant %K \00"
define internal void @llvm_DclCon(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%s = alloca %symb_SymbNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 9
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %s
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = icmp ne %symb_SymbNode* %3, null
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %s
	%6 = getelementptr %symb_SymbNode, %symb_SymbNode* %5, i32 0, i32 1
	%7 = load %type_TypeNode*, %type_TypeNode** %6
	call void @llvm_DclType(%type_TypeNode* %7)
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_ConstScan(%ast_AstNode* %8)
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 14
	%11 = load i8, i8* %10
	%12 = zext i8 %11 to i32
	switch i32 %12, label %L.3 [
		i32 2, label %L.5
		i32 3, label %L.6
	]
L.5:
	%13 = getelementptr [27 x i8], [27 x i8]* @S.929
	%14 = bitcast [27 x i8]* %13 to [0 x i8]*
	%15 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %14, %ast_AstNode* %15)
	br label %L.4
L.6:
	%16 = getelementptr [18 x i8], [18 x i8]* @S.930
	%17 = bitcast [18 x i8]* %16 to [0 x i8]*
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %17, %ast_AstNode* %18)
	br label %L.4
L.3:
	br label %L.4
L.4:
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 11
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %20, i32 0, i32 0
	%22 = load %ast_AstNode*, %ast_AstNode** %21
	call void @llvm_Constant(%ast_AstNode* %22)
	%23 = load %symb_SymbNode*, %symb_SymbNode** %s
	%24 = getelementptr %symb_SymbNode, %symb_SymbNode* %23, i32 0, i32 1
	%25 = load %type_TypeNode*, %type_TypeNode** %24
	call void @llvm_Alignment(%type_TypeNode* %25)
	%26 = load %symb_SymbNode*, %symb_SymbNode** %s
	%27 = getelementptr %symb_SymbNode, %symb_SymbNode* %26, i32 0, i32 7
	%28 = load %symb_SymbNode*, %symb_SymbNode** %27
	call void @llvm_Section(%symb_SymbNode* %28, i8 1)
	br label %L.1
L.1:
	%29 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %29)
	br label %return
return:
	ret void
}
@S.931 = private unnamed_addr constant [3 x i8] c"L.\00"
define internal void @llvm_PLabel(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [3 x i8], [3 x i8]* @S.931
	%2 = bitcast [3 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%4 = load i16, i16* %n
	%5 = zext i16 %4 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %3, i32 %5)
	br label %return
return:
	ret void
}
@S.932 = private unnamed_addr constant [3 x i8] c":\0A\00"
define internal void @llvm_Label(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load i16, i16* %n
	call void @llvm_PLabel(i16 %0)
	%1 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%2 = getelementptr [3 x i8], [3 x i8]* @S.932
	%3 = bitcast [3 x i8]* %2 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %1, [0 x i8]* %3)
	%4 = load i16, i16* %n
	store i16 %4, i16* @llvm_labthis
	br label %return
return:
	ret void
}
@S.933 = private unnamed_addr constant [8 x i8] c"label %\00"
define internal void @llvm_RefLabel(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [8 x i8], [8 x i8]* @S.933
	%2 = bitcast [8 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load i16, i16* %n
	call void @llvm_PLabel(i16 %3)
	br label %return
return:
	ret void
}
@S.934 = private unnamed_addr constant [5 x i8] c"\09br \00"
define internal void @llvm_Branch(i16 zeroext %n$) nounwind {
L.0:
	%n = alloca i16
	store i16 %n$, i16* %n
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [5 x i8], [5 x i8]* @S.934
	%2 = bitcast [5 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load i16, i16* %n
	call void @llvm_RefLabel(i16 %3)
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %4)
	br label %return
return:
	ret void
}
@S.935 = private unnamed_addr constant [8 x i8] c"\09br i1 \00"
@S.936 = private unnamed_addr constant [3 x i8] c", \00"
@S.937 = private unnamed_addr constant [3 x i8] c", \00"
define internal void @llvm_BranchConditional(%ast_AstNode* %node$, i16 zeroext %ntrue$, i16 zeroext %nfalse$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%ntrue = alloca i16
	store i16 %ntrue$, i16* %ntrue
	%nfalse = alloca i16
	store i16 %nfalse$, i16* %nfalse
	%0 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%1 = getelementptr [8 x i8], [8 x i8]* @S.935
	%2 = bitcast [8 x i8]* %1 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %0, [0 x i8]* %2)
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_NodeSrc(%ast_AstNode* %3)
	%4 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%5 = getelementptr [3 x i8], [3 x i8]* @S.936
	%6 = bitcast [3 x i8]* %5 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %4, [0 x i8]* %6)
	%7 = load i16, i16* %ntrue
	call void @llvm_RefLabel(i16 %7)
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = getelementptr [3 x i8], [3 x i8]* @S.937
	%10 = bitcast [3 x i8]* %9 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %8, [0 x i8]* %10)
	%11 = load i16, i16* %nfalse
	call void @llvm_RefLabel(i16 %11)
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %12)
	br label %return
return:
	ret void
}
@S.938 = private unnamed_addr constant [24 x i8] c"\09call void @_assert(%W \00"
@S.939 = private unnamed_addr constant [20 x i8] c", [0 x i8]* %N, %W \00"
@S.940 = private unnamed_addr constant [1 x i8] c"\00"
@S.941 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvm_Assert(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = getelementptr [24 x i8], [24 x i8]* @S.938
	%6 = bitcast [24 x i8]* %5 to [0 x i8]*
	%7 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %6, %ast_AstNode* %7)
	%8 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 10
	%11 = load i64, i64* %10
	call void @bout_BufIO_uint64(%bout_BufIO* %8, i64 %11)
	%12 = getelementptr [20 x i8], [20 x i8]* @S.939
	%13 = bitcast [20 x i8]* %12 to [0 x i8]*
	%14 = load %ast_AstNode*, %ast_AstNode** %node
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 11
	%16 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %15, i32 0, i32 0
	%17 = load %ast_AstNode*, %ast_AstNode** %16
	call void @llvm_Print([0 x i8]* %13, %ast_AstNode* %17)
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = getelementptr [1 x i8], [1 x i8]* @S.940
	%20 = bitcast [1 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	%21 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%22 = load %ast_AstNode*, %ast_AstNode** %node
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 5
	%24 = load i16, i16* %23
	call void @bout_BufIO_uint16(%bout_BufIO* %21, i16 %24)
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = getelementptr [3 x i8], [3 x i8]* @S.941
	%27 = bitcast [3 x i8]* %26 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %27)
	call void @llvm_UseIntrinsic(i8 13, i32 0, %type_TypeNode* null)
	br label %return
return:
	ret void
}
define internal zeroext i8 @llvm_If(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%labend = alloca i16
	%labtrue = alloca i16
	%labfalse = alloca i16
	%term = alloca i8
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = load i16, i16* @llvm_Lseqno
	store i16 %5, i16* %labend
	%6 = load i16, i16* @llvm_Lseqno
	%7 = add i16 %6, 1
	store i16 %7, i16* @llvm_Lseqno
	%8 = load i16, i16* @llvm_Lseqno
	store i16 %8, i16* %labtrue
	%9 = load i16, i16* @llvm_Lseqno
	%10 = add i16 %9, 1
	store i16 %10, i16* @llvm_Lseqno
	%11 = load %ast_AstNode*, %ast_AstNode** %node
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 11
	%13 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %12, i32 0, i32 2
	%14 = load %ast_AstNode*, %ast_AstNode** %13
	%15 = icmp ne %ast_AstNode* %14, null
	br i1 %15, label %L.2, label %L.3
L.2:
	%16 = load i16, i16* @llvm_Lseqno
	store i16 %16, i16* %labfalse
	%17 = load i16, i16* @llvm_Lseqno
	%18 = add i16 %17, 1
	store i16 %18, i16* @llvm_Lseqno
	br label %L.1
L.3:
	%19 = load i16, i16* %labend
	store i16 %19, i16* %labfalse
	br label %L.1
L.1:
	%20 = load %ast_AstNode*, %ast_AstNode** %node
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 11
	%22 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %21, i32 0, i32 0
	%23 = load %ast_AstNode*, %ast_AstNode** %22
	%24 = load i16, i16* %labtrue
	%25 = load i16, i16* %labfalse
	call void @llvm_BranchConditional(%ast_AstNode* %23, i16 %24, i16 %25)
	%26 = load i16, i16* %labtrue
	call void @llvm_Label(i16 %26)
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 1
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	%31 = call i8 @llvm_GenSub(%ast_AstNode* %30)
	store i8 %31, i8* %term
	%32 = load i8, i8* %term
	%33 = icmp ne i8 %32, 0
	%34 = xor i1 %33, true
	br i1 %34, label %L.5, label %L.4
L.5:
	%35 = load i16, i16* %labend
	call void @llvm_Branch(i16 %35)
	br label %L.4
L.4:
	%36 = load %ast_AstNode*, %ast_AstNode** %node
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 11
	%38 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %37, i32 0, i32 2
	%39 = load %ast_AstNode*, %ast_AstNode** %38
	%40 = icmp ne %ast_AstNode* %39, null
	br i1 %40, label %L.7, label %L.6
L.7:
	%41 = load i16, i16* %labfalse
	call void @llvm_Label(i16 %41)
	%42 = load %ast_AstNode*, %ast_AstNode** %node
	%43 = getelementptr %ast_AstNode, %ast_AstNode* %42, i32 0, i32 11
	%44 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %43, i32 0, i32 2
	%45 = load %ast_AstNode*, %ast_AstNode** %44
	%46 = call i8 @llvm_GenSub(%ast_AstNode* %45)
	store i8 %46, i8* %term
	%47 = load i8, i8* %term
	%48 = icmp ne i8 %47, 0
	%49 = xor i1 %48, true
	br i1 %49, label %L.9, label %L.8
L.9:
	%50 = load i16, i16* %labend
	call void @llvm_Branch(i16 %50)
	br label %L.8
L.8:
	br label %L.6
L.6:
	%51 = load i16, i16* %labend
	call void @llvm_Label(i16 %51)
	store i8 0, i8* %rv.0
	br label %return
return:
	%52 = load i8, i8* %rv.0
	ret i8 %52
}
@S.942 = private unnamed_addr constant [16 x i8] c"\09switch %T %N, \00"
@S.943 = private unnamed_addr constant [4 x i8] c" [\0A\00"
@S.944 = private unnamed_addr constant [7 x i8] c"\09\09%0T \00"
@S.945 = private unnamed_addr constant [3 x i8] c", \00"
@S.946 = private unnamed_addr constant [4 x i8] c"\09]\0A\00"
define internal zeroext i8 @llvm_Select(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	%j = alloca i16
	%isnode = alloca %ast_AstNode*
	%selnode = alloca %ast_AstNode*
	%labend = alloca i16
	%labelse = alloca i16
	%lo = alloca i64
	%hi = alloca i64
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%5 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %3, %type_TypeNode* %4)
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 0
	store %ast_AstNode* %5, %ast_AstNode** %8
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 11
	%11 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %10, i32 0, i32 0
	%12 = load %ast_AstNode*, %ast_AstNode** %11
	%13 = call i8 @llvm_GenSub(%ast_AstNode* %12)
	%14 = load i16, i16* @llvm_Lseqno
	store i16 %14, i16* %labelse
	%15 = load i16, i16* @llvm_Lseqno
	%16 = add i16 %15, 1
	store i16 %16, i16* @llvm_Lseqno
	%17 = load i16, i16* @llvm_Lseqno
	store i16 %17, i16* %labend
	%18 = load i16, i16* @llvm_Lseqno
	%19 = add i16 %18, 1
	store i16 %19, i16* @llvm_Lseqno
	%20 = getelementptr [16 x i8], [16 x i8]* @S.942
	%21 = bitcast [16 x i8]* %20 to [0 x i8]*
	%22 = load %ast_AstNode*, %ast_AstNode** %node
	%23 = getelementptr %ast_AstNode, %ast_AstNode* %22, i32 0, i32 11
	%24 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %23, i32 0, i32 0
	%25 = load %ast_AstNode*, %ast_AstNode** %24
	call void @llvm_Print([0 x i8]* %21, %ast_AstNode* %25)
	%26 = load i16, i16* %labelse
	call void @llvm_RefLabel(i16 %26)
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = getelementptr [4 x i8], [4 x i8]* @S.943
	%29 = bitcast [4 x i8]* %28 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %27, [0 x i8]* %29)
	store i16 1, i16* %i
	br label %L.1
L.1:
	%30 = load i16, i16* %i
	%31 = load %ast_AstNode*, %ast_AstNode** %node
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 2
	%33 = load i16, i16* %32
	%34 = sub i16 %33, 1
	%35 = icmp ult i16 %30, %34
	%36 = xor i1 %35, true
	br i1 %36, label %L.2, label %L.3
L.3:
	%37 = load %ast_AstNode*, %ast_AstNode** %node
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 11
	%39 = load i16, i16* %i
	%40 = zext i16 %39 to i32
	%41 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %38, i32 0, i32 %40
	%42 = load %ast_AstNode*, %ast_AstNode** %41
	store %ast_AstNode* %42, %ast_AstNode** %isnode
	%43 = load %ast_AstNode*, %ast_AstNode** %isnode
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 0
	%45 = load i8, i8* %44
	%46 = icmp eq i8 %45, 101
	br i1 %46, label %L.5, label %L.4
L.5:
	%47 = load i16, i16* @llvm_Lseqno
	%48 = load %ast_AstNode*, %ast_AstNode** %isnode
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 6
	store i16 %47, i16* %49
	%50 = load i16, i16* @llvm_Lseqno
	%51 = add i16 %50, 1
	store i16 %51, i16* @llvm_Lseqno
	store i16 0, i16* %j
	br label %L.6
L.6:
	%52 = load i16, i16* %j
	%53 = load %ast_AstNode*, %ast_AstNode** %isnode
	%54 = getelementptr %ast_AstNode, %ast_AstNode* %53, i32 0, i32 2
	%55 = load i16, i16* %54
	%56 = sub i16 %55, 1
	%57 = icmp ult i16 %52, %56
	%58 = xor i1 %57, true
	br i1 %58, label %L.7, label %L.8
L.8:
	%59 = load %ast_AstNode*, %ast_AstNode** %isnode
	%60 = getelementptr %ast_AstNode, %ast_AstNode* %59, i32 0, i32 11
	%61 = load i16, i16* %j
	%62 = zext i16 %61 to i32
	%63 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %60, i32 0, i32 %62
	%64 = load %ast_AstNode*, %ast_AstNode** %63
	store %ast_AstNode* %64, %ast_AstNode** %selnode
	store i64 0, i64* %lo
	store i64 0, i64* %hi
	%65 = load %ast_AstNode*, %ast_AstNode** %selnode
	%66 = getelementptr %ast_AstNode, %ast_AstNode* %65, i32 0, i32 0
	%67 = load i8, i8* %66
	%68 = zext i8 %67 to i32
	switch i32 %68, label %L.9 [
		i32 6, label %L.11
		i32 10, label %L.12
	]
L.11:
	%69 = load %ast_AstNode*, %ast_AstNode** %selnode
	%70 = getelementptr %ast_AstNode, %ast_AstNode* %69, i32 0, i32 10
	%71 = load i64, i64* %70
	store i64 %71, i64* %lo
	%72 = load i64, i64* %lo
	store i64 %72, i64* %hi
	br label %L.10
L.12:
	%73 = load %ast_AstNode*, %ast_AstNode** %selnode
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 11
	%75 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %74, i32 0, i32 0
	%76 = load %ast_AstNode*, %ast_AstNode** %75
	%77 = getelementptr %ast_AstNode, %ast_AstNode* %76, i32 0, i32 0
	%78 = load i8, i8* %77
	%79 = icmp eq i8 %78, 6
	br i1 %79, label %L.13, label %L.14
L.13:
	%80 = load %ast_AstNode*, %ast_AstNode** %selnode
	%81 = getelementptr %ast_AstNode, %ast_AstNode* %80, i32 0, i32 11
	%82 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %81, i32 0, i32 1
	%83 = load %ast_AstNode*, %ast_AstNode** %82
	%84 = getelementptr %ast_AstNode, %ast_AstNode* %83, i32 0, i32 0
	%85 = load i8, i8* %84
	%86 = icmp eq i8 %85, 6
	br label %L.14
L.14:
	%87 = phi i1 [ false, %L.12 ], [ %86, %L.13 ]
	br i1 %87, label %L.16, label %L.15
L.16:
	%88 = load %ast_AstNode*, %ast_AstNode** %selnode
	%89 = getelementptr %ast_AstNode, %ast_AstNode* %88, i32 0, i32 11
	%90 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %89, i32 0, i32 0
	%91 = load %ast_AstNode*, %ast_AstNode** %90
	%92 = getelementptr %ast_AstNode, %ast_AstNode* %91, i32 0, i32 10
	%93 = load i64, i64* %92
	store i64 %93, i64* %lo
	%94 = load %ast_AstNode*, %ast_AstNode** %selnode
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 11
	%96 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %95, i32 0, i32 1
	%97 = load %ast_AstNode*, %ast_AstNode** %96
	%98 = getelementptr %ast_AstNode, %ast_AstNode* %97, i32 0, i32 10
	%99 = load i64, i64* %98
	store i64 %99, i64* %hi
	br label %L.15
L.15:
	br label %L.10
L.9:
	br label %L.10
L.10:
	br label %L.17
L.17:
	%100 = load i64, i64* %lo
	%101 = load i64, i64* %hi
	%102 = icmp ule i64 %100, %101
	%103 = xor i1 %102, true
	br i1 %103, label %L.18, label %L.19
L.19:
	%104 = getelementptr [7 x i8], [7 x i8]* @S.944
	%105 = bitcast [7 x i8]* %104 to [0 x i8]*
	%106 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %105, %ast_AstNode* %106)
	%107 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%108 = load i64, i64* %lo
	%109 = trunc i64 %108 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %107, i32 %109)
	%110 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%111 = getelementptr [3 x i8], [3 x i8]* @S.945
	%112 = bitcast [3 x i8]* %111 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %110, [0 x i8]* %112)
	%113 = load %ast_AstNode*, %ast_AstNode** %isnode
	%114 = getelementptr %ast_AstNode, %ast_AstNode* %113, i32 0, i32 6
	%115 = load i16, i16* %114
	call void @llvm_RefLabel(i16 %115)
	%116 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %116)
	%117 = load i64, i64* %lo
	%118 = add i64 %117, 1
	store i64 %118, i64* %lo
	br label %L.17
L.18:
	%119 = load i16, i16* %j
	%120 = add i16 %119, 1
	store i16 %120, i16* %j
	br label %L.6
L.7:
	br label %L.4
L.4:
	%121 = load i16, i16* %i
	%122 = add i16 %121, 1
	store i16 %122, i16* %i
	br label %L.1
L.2:
	%123 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%124 = getelementptr [4 x i8], [4 x i8]* @S.946
	%125 = bitcast [4 x i8]* %124 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %123, [0 x i8]* %125)
	store i16 1, i16* %i
	br label %L.20
L.20:
	%126 = load i16, i16* %i
	%127 = load %ast_AstNode*, %ast_AstNode** %node
	%128 = getelementptr %ast_AstNode, %ast_AstNode* %127, i32 0, i32 2
	%129 = load i16, i16* %128
	%130 = sub i16 %129, 1
	%131 = icmp ult i16 %126, %130
	%132 = xor i1 %131, true
	br i1 %132, label %L.21, label %L.22
L.22:
	%133 = load %ast_AstNode*, %ast_AstNode** %node
	%134 = getelementptr %ast_AstNode, %ast_AstNode* %133, i32 0, i32 11
	%135 = load i16, i16* %i
	%136 = zext i16 %135 to i32
	%137 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %134, i32 0, i32 %136
	%138 = load %ast_AstNode*, %ast_AstNode** %137
	store %ast_AstNode* %138, %ast_AstNode** %isnode
	%139 = load %ast_AstNode*, %ast_AstNode** %isnode
	%140 = getelementptr %ast_AstNode, %ast_AstNode* %139, i32 0, i32 6
	%141 = load i16, i16* %140
	call void @llvm_Label(i16 %141)
	%142 = load %ast_AstNode*, %ast_AstNode** %isnode
	%143 = getelementptr %ast_AstNode, %ast_AstNode* %142, i32 0, i32 11
	%144 = load %ast_AstNode*, %ast_AstNode** %isnode
	%145 = getelementptr %ast_AstNode, %ast_AstNode* %144, i32 0, i32 2
	%146 = load i16, i16* %145
	%147 = sub i16 %146, 1
	%148 = zext i16 %147 to i32
	%149 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %143, i32 0, i32 %148
	%150 = load %ast_AstNode*, %ast_AstNode** %149
	%151 = call i8 @llvm_GenSub(%ast_AstNode* %150)
	%152 = icmp ne i8 %151, 0
	%153 = xor i1 %152, true
	br i1 %153, label %L.24, label %L.23
L.24:
	%154 = load i16, i16* %labend
	call void @llvm_Branch(i16 %154)
	br label %L.23
L.23:
	%155 = load i16, i16* %i
	%156 = add i16 %155, 1
	store i16 %156, i16* %i
	br label %L.20
L.21:
	%157 = load i16, i16* %labelse
	call void @llvm_Label(i16 %157)
	%158 = load %ast_AstNode*, %ast_AstNode** %node
	%159 = getelementptr %ast_AstNode, %ast_AstNode* %158, i32 0, i32 11
	%160 = load %ast_AstNode*, %ast_AstNode** %node
	%161 = getelementptr %ast_AstNode, %ast_AstNode* %160, i32 0, i32 2
	%162 = load i16, i16* %161
	%163 = sub i16 %162, 1
	%164 = zext i16 %163 to i32
	%165 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %159, i32 0, i32 %164
	%166 = load %ast_AstNode*, %ast_AstNode** %165
	%167 = call i8 @llvm_GenSub(%ast_AstNode* %166)
	%168 = icmp ne i8 %167, 0
	%169 = xor i1 %168, true
	br i1 %169, label %L.26, label %L.25
L.26:
	%170 = load i16, i16* %labend
	call void @llvm_Branch(i16 %170)
	br label %L.25
L.25:
	%171 = load i16, i16* %labend
	call void @llvm_Label(i16 %171)
	store i8 0, i8* %rv.0
	br label %return
return:
	%172 = load i8, i8* %rv.0
	ret i8 %172
}
define internal zeroext i8 @llvm_Loop(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%loopcont = alloca i16
	%saveexit = alloca i16
	%0 = load i16, i16* @llvm_loopexit
	store i16 %0, i16* %saveexit
	%1 = load i16, i16* @llvm_Lseqno
	store i16 %1, i16* %loopcont
	%2 = load i16, i16* @llvm_Lseqno
	%3 = add i16 %2, 1
	store i16 %3, i16* @llvm_Lseqno
	%4 = load i16, i16* @llvm_Lseqno
	store i16 %4, i16* @llvm_loopexit
	%5 = load i16, i16* @llvm_Lseqno
	%6 = add i16 %5, 1
	store i16 %6, i16* @llvm_Lseqno
	%7 = load i16, i16* %loopcont
	call void @llvm_Branch(i16 %7)
	%8 = load i16, i16* %loopcont
	call void @llvm_Label(i16 %8)
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 11
	%11 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %10, i32 0, i32 0
	%12 = load %ast_AstNode*, %ast_AstNode** %11
	%13 = call i8 @llvm_GenSub(%ast_AstNode* %12)
	%14 = load i16, i16* %loopcont
	call void @llvm_Branch(i16 %14)
	%15 = load i16, i16* @llvm_loopexit
	call void @llvm_Label(i16 %15)
	%16 = load i16, i16* %saveexit
	store i16 %16, i16* @llvm_loopexit
	store i8 0, i8* %rv.0
	br label %return
return:
	%17 = load i8, i8* %rv.0
	ret i8 %17
}
define internal zeroext i8 @llvm_Exit(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%labtrue = alloca i16
	%labfalse = alloca i16
	%term = alloca i8
	%0 = load i16, i16* @llvm_Lseqno
	store i16 %0, i16* %labfalse
	%1 = load i16, i16* @llvm_Lseqno
	%2 = add i16 %1, 1
	store i16 %2, i16* @llvm_Lseqno
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 11
	%5 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %4, i32 0, i32 0
	%6 = load %ast_AstNode*, %ast_AstNode** %5
	%7 = call i8 @llvm_GenSub(%ast_AstNode* %6)
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 11
	%10 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %9, i32 0, i32 1
	%11 = load %ast_AstNode*, %ast_AstNode** %10
	%12 = icmp ne %ast_AstNode* %11, null
	br i1 %12, label %L.2, label %L.3
L.2:
	%13 = load i16, i16* @llvm_Lseqno
	store i16 %13, i16* %labtrue
	%14 = load i16, i16* @llvm_Lseqno
	%15 = add i16 %14, 1
	store i16 %15, i16* @llvm_Lseqno
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 11
	%18 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %17, i32 0, i32 0
	%19 = load %ast_AstNode*, %ast_AstNode** %18
	%20 = load i16, i16* %labtrue
	%21 = load i16, i16* %labfalse
	call void @llvm_BranchConditional(%ast_AstNode* %19, i16 %20, i16 %21)
	%22 = load i16, i16* %labtrue
	call void @llvm_Label(i16 %22)
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 1
	%26 = load %ast_AstNode*, %ast_AstNode** %25
	%27 = call i8 @llvm_GenSub(%ast_AstNode* %26)
	store i8 %27, i8* %term
	%28 = load i8, i8* %term
	%29 = icmp ne i8 %28, 0
	%30 = xor i1 %29, true
	br i1 %30, label %L.5, label %L.4
L.5:
	%31 = load i16, i16* @llvm_loopexit
	call void @llvm_Branch(i16 %31)
	br label %L.4
L.4:
	br label %L.1
L.3:
	%32 = load %ast_AstNode*, %ast_AstNode** %node
	%33 = getelementptr %ast_AstNode, %ast_AstNode* %32, i32 0, i32 11
	%34 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %33, i32 0, i32 0
	%35 = load %ast_AstNode*, %ast_AstNode** %34
	%36 = load i16, i16* @llvm_loopexit
	%37 = load i16, i16* %labfalse
	call void @llvm_BranchConditional(%ast_AstNode* %35, i16 %36, i16 %37)
	br label %L.1
L.1:
	%38 = load i16, i16* %labfalse
	call void @llvm_Label(i16 %38)
	store i8 0, i8* %rv.0
	br label %return
return:
	%39 = load i8, i8* %rv.0
	ret i8 %39
}
@S.947 = private unnamed_addr constant [16 x i8] c"\09%N = phi i1 [ \00"
@S.948 = private unnamed_addr constant [6 x i8] c"false\00"
@S.949 = private unnamed_addr constant [5 x i8] c"true\00"
@S.950 = private unnamed_addr constant [4 x i8] c", %\00"
@S.951 = private unnamed_addr constant [7 x i8] c" ], [ \00"
@S.952 = private unnamed_addr constant [4 x i8] c", %\00"
@S.953 = private unnamed_addr constant [4 x i8] c" ]\0A\00"
define internal zeroext i8 @llvm_Conditional(%ast_AstNode* %node$, i8 zeroext %isand$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%isand = alloca i8
	store i8 %isand$, i8* %isand
	%lablhs = alloca i16
	%labrhs = alloca i16
	%labend = alloca i16
	%0 = load i16, i16* @llvm_Lseqno
	store i16 %0, i16* %labrhs
	%1 = load i16, i16* @llvm_Lseqno
	%2 = add i16 %1, 1
	store i16 %2, i16* @llvm_Lseqno
	%3 = load i16, i16* @llvm_Lseqno
	store i16 %3, i16* %labend
	%4 = load i16, i16* @llvm_Lseqno
	%5 = add i16 %4, 1
	store i16 %5, i16* @llvm_Lseqno
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 0
	%9 = load %ast_AstNode*, %ast_AstNode** %8
	%10 = call i8 @llvm_GenSub(%ast_AstNode* %9)
	%11 = load i8, i8* %isand
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.2, label %L.3
L.2:
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 11
	%15 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %14, i32 0, i32 0
	%16 = load %ast_AstNode*, %ast_AstNode** %15
	%17 = load i16, i16* %labrhs
	%18 = load i16, i16* %labend
	call void @llvm_BranchConditional(%ast_AstNode* %16, i16 %17, i16 %18)
	br label %L.1
L.3:
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 11
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %20, i32 0, i32 0
	%22 = load %ast_AstNode*, %ast_AstNode** %21
	%23 = load i16, i16* %labend
	%24 = load i16, i16* %labrhs
	call void @llvm_BranchConditional(%ast_AstNode* %22, i16 %23, i16 %24)
	br label %L.1
L.1:
	%25 = load i16, i16* @llvm_labthis
	store i16 %25, i16* %lablhs
	%26 = load i16, i16* %labrhs
	call void @llvm_Label(i16 %26)
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 1
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	%31 = call i8 @llvm_GenSub(%ast_AstNode* %30)
	%32 = load i16, i16* @llvm_labthis
	store i16 %32, i16* %labrhs
	%33 = load i16, i16* %labend
	call void @llvm_Branch(i16 %33)
	%34 = load i16, i16* %labend
	call void @llvm_Label(i16 %34)
	%35 = load i16, i16* @llvm_Tseqno
	%36 = load %ast_AstNode*, %ast_AstNode** %node
	%37 = getelementptr %ast_AstNode, %ast_AstNode* %36, i32 0, i32 6
	store i16 %35, i16* %37
	%38 = load i16, i16* @llvm_Tseqno
	%39 = add i16 %38, 1
	store i16 %39, i16* @llvm_Tseqno
	%40 = getelementptr [16 x i8], [16 x i8]* @S.947
	%41 = bitcast [16 x i8]* %40 to [0 x i8]*
	%42 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %41, %ast_AstNode* %42)
	%43 = load i8, i8* %isand
	%44 = icmp ne i8 %43, 0
	br i1 %44, label %L.5, label %L.6
L.5:
	%45 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%46 = getelementptr [6 x i8], [6 x i8]* @S.948
	%47 = bitcast [6 x i8]* %46 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %45, [0 x i8]* %47)
	br label %L.4
L.6:
	%48 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%49 = getelementptr [5 x i8], [5 x i8]* @S.949
	%50 = bitcast [5 x i8]* %49 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %48, [0 x i8]* %50)
	br label %L.4
L.4:
	%51 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%52 = getelementptr [4 x i8], [4 x i8]* @S.950
	%53 = bitcast [4 x i8]* %52 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %51, [0 x i8]* %53)
	%54 = load i16, i16* %lablhs
	call void @llvm_PLabel(i16 %54)
	%55 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%56 = getelementptr [7 x i8], [7 x i8]* @S.951
	%57 = bitcast [7 x i8]* %56 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %55, [0 x i8]* %57)
	%58 = load %ast_AstNode*, %ast_AstNode** %node
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 11
	%60 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %59, i32 0, i32 1
	%61 = load %ast_AstNode*, %ast_AstNode** %60
	%62 = getelementptr %ast_AstNode, %ast_AstNode* %61, i32 0, i32 6
	%63 = load i16, i16* %62
	call void @llvm_PTempName(i16 %63)
	%64 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%65 = getelementptr [4 x i8], [4 x i8]* @S.952
	%66 = bitcast [4 x i8]* %65 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %64, [0 x i8]* %66)
	%67 = load i16, i16* %labrhs
	call void @llvm_PLabel(i16 %67)
	%68 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%69 = getelementptr [4 x i8], [4 x i8]* @S.953
	%70 = bitcast [4 x i8]* %69 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %68, [0 x i8]* %70)
	store i8 0, i8* %rv.0
	br label %return
return:
	%71 = load i8, i8* %rv.0
	ret i8 %71
}
@S.954 = private unnamed_addr constant [82 x i8] c"\09call void @llvm.memmove.p0i8.p0i8.%2T(i8* %0N, i8* %1N, %2T %2N, i32 %3N, i1 0)\0A\00"
@S.955 = private unnamed_addr constant [81 x i8] c"\09call void @llvm.memcpy.p0i8.p0i8.%2T(i8* %0N, i8* %1N, %2T %2N, i32 %3N, i1 0)\0A\00"
define internal void @llvm_Copy(%ast_AstNode* %node$, i8 zeroext %ismove$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%ismove = alloca i8
	store i8 %ismove$, i8* %ismove
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = load %type_TypeNode*, %type_TypeNode** @llvm_pbytetype
	%5 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %3, %type_TypeNode* %4)
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 0
	store %ast_AstNode* %5, %ast_AstNode** %8
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 11
	%11 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %10, i32 0, i32 1
	%12 = load %ast_AstNode*, %ast_AstNode** %11
	%13 = load %type_TypeNode*, %type_TypeNode** @llvm_pbytetype
	%14 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %12, %type_TypeNode* %13)
	%15 = load %ast_AstNode*, %ast_AstNode** %node
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 1
	store %ast_AstNode* %14, %ast_AstNode** %17
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	%19 = getelementptr %ast_AstNode, %ast_AstNode* %18, i32 0, i32 11
	%20 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %19, i32 0, i32 0
	%21 = load %ast_AstNode*, %ast_AstNode** %20
	%22 = call i8 @llvm_GenSub(%ast_AstNode* %21)
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 1
	%26 = load %ast_AstNode*, %ast_AstNode** %25
	%27 = call i8 @llvm_GenSub(%ast_AstNode* %26)
	%28 = load %ast_AstNode*, %ast_AstNode** %node
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 11
	%30 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %29, i32 0, i32 2
	%31 = load %ast_AstNode*, %ast_AstNode** %30
	%32 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%33 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %31, %type_TypeNode* %32)
	%34 = load %ast_AstNode*, %ast_AstNode** %node
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 11
	%36 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %35, i32 0, i32 2
	store %ast_AstNode* %33, %ast_AstNode** %36
	%37 = load %ast_AstNode*, %ast_AstNode** %node
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 11
	%39 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %38, i32 0, i32 2
	%40 = load %ast_AstNode*, %ast_AstNode** %39
	%41 = call i8 @llvm_GenSub(%ast_AstNode* %40)
	%42 = load i8, i8* %ismove
	%43 = icmp ne i8 %42, 0
	br i1 %43, label %L.2, label %L.3
L.2:
	%44 = getelementptr [82 x i8], [82 x i8]* @S.954
	%45 = bitcast [82 x i8]* %44 to [0 x i8]*
	%46 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %45, %ast_AstNode* %46)
	call void @llvm_UseIntrinsic(i8 1, i32 1, %type_TypeNode* null)
	br label %L.1
L.3:
	%47 = getelementptr [81 x i8], [81 x i8]* @S.955
	%48 = bitcast [81 x i8]* %47 to [0 x i8]*
	%49 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %48, %ast_AstNode* %49)
	call void @llvm_UseIntrinsic(i8 0, i32 1, %type_TypeNode* null)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.956 = private unnamed_addr constant [75 x i8] c"\09call void @llvm.memset.p0i8.%W(i8* %0N, %1T %1N, %2T %2N, i32 %3N, i1 0)\0A\00"
define internal void @llvm_Set(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = load %type_TypeNode*, %type_TypeNode** @llvm_pbytetype
	%5 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %3, %type_TypeNode* %4)
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 0
	store %ast_AstNode* %5, %ast_AstNode** %8
	%9 = load %ast_AstNode*, %ast_AstNode** %node
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 11
	%11 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %10, i32 0, i32 0
	%12 = load %ast_AstNode*, %ast_AstNode** %11
	%13 = call i8 @llvm_GenSub(%ast_AstNode* %12)
	%14 = load %ast_AstNode*, %ast_AstNode** %node
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 11
	%16 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %15, i32 0, i32 1
	%17 = load %ast_AstNode*, %ast_AstNode** %16
	%18 = call i8 @llvm_GenSub(%ast_AstNode* %17)
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 11
	%21 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %20, i32 0, i32 2
	%22 = load %ast_AstNode*, %ast_AstNode** %21
	%23 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%24 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %22, %type_TypeNode* %23)
	%25 = load %ast_AstNode*, %ast_AstNode** %node
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 11
	%27 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %26, i32 0, i32 2
	store %ast_AstNode* %24, %ast_AstNode** %27
	%28 = load %ast_AstNode*, %ast_AstNode** %node
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 11
	%30 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %29, i32 0, i32 2
	%31 = load %ast_AstNode*, %ast_AstNode** %30
	%32 = call i8 @llvm_GenSub(%ast_AstNode* %31)
	%33 = getelementptr [75 x i8], [75 x i8]* @S.956
	%34 = bitcast [75 x i8]* %33 to [0 x i8]*
	%35 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %34, %ast_AstNode* %35)
	call void @llvm_UseIntrinsic(i8 2, i32 1, %type_TypeNode* null)
	br label %return
return:
	ret void
}
define internal zeroext i8 @llvm_GetChunkSize(i32 %totsize$, i32 %elsize$, i32 %align$) nounwind {
L.0:
	%rv.0 = alloca i8
	%totsize = alloca i32
	store i32 %totsize$, i32* %totsize
	%elsize = alloca i32
	store i32 %elsize$, i32* %elsize
	%align = alloca i32
	store i32 %align$, i32* %align
	%is = alloca i8
	%ia = alloca i8
	store i8 0, i8* %ia
	%0 = load i32, i32* %align
	%1 = icmp ugt i32 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i32, i32* %align
	%3 = call i8 @target_iindex(i32 %2)
	store i8 %3, i8* %ia
	br label %L.1
L.1:
	store i8 0, i8* %is
	%4 = load i32, i32* %totsize
	%5 = icmp ugt i32 %4, 0
	br i1 %5, label %L.4, label %L.5
L.4:
	%6 = load i32, i32* %totsize
	%7 = call i8 @target_iindex(i32 %6)
	store i8 %7, i8* %is
	br label %L.6
L.6:
	%8 = load i8, i8* %is
	%9 = icmp ugt i8 %8, 0
	br i1 %9, label %L.9, label %L.10
L.9:
	%10 = load i32, i32* %totsize
	%11 = load %target_ModelT*, %target_ModelT** @target_Target
	%12 = getelementptr %target_ModelT, %target_ModelT* %11, i32 0, i32 6
	%13 = load i8, i8* %is
	%14 = zext i8 %13 to i32
	%15 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %12, i32 0, i32 %14
	%16 = getelementptr %target_SizeAlign, %target_SizeAlign* %15, i32 0, i32 0
	%17 = load i8, i8* %16
	%18 = zext i8 %17 to i32
	%19 = udiv i32 %18, 8
	%20 = urem i32 %10, %19
	%21 = icmp ne i32 %20, 0
	br label %L.10
L.10:
	%22 = phi i1 [ false, %L.6 ], [ %21, %L.9 ]
	%23 = xor i1 %22, true
	br i1 %23, label %L.7, label %L.8
L.8:
	%24 = load i8, i8* %is
	%25 = sub i8 %24, 1
	store i8 %25, i8* %is
	br label %L.6
L.7:
	br label %L.3
L.5:
	%26 = load i32, i32* %elsize
	%27 = call i8 @target_iindex(i32 %26)
	store i8 %27, i8* %is
	br label %L.11
L.11:
	%28 = load i8, i8* %is
	%29 = icmp ugt i8 %28, 0
	br i1 %29, label %L.14, label %L.15
L.14:
	%30 = load %target_ModelT*, %target_ModelT** @target_Target
	%31 = getelementptr %target_ModelT, %target_ModelT* %30, i32 0, i32 6
	%32 = load i8, i8* %is
	%33 = zext i8 %32 to i32
	%34 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %31, i32 0, i32 %33
	%35 = getelementptr %target_SizeAlign, %target_SizeAlign* %34, i32 0, i32 0
	%36 = load i8, i8* %35
	%37 = udiv i8 %36, 8
	%38 = zext i8 %37 to i32
	%39 = load i32, i32* %elsize
	%40 = urem i32 %38, %39
	%41 = icmp ne i32 %40, 0
	br label %L.15
L.15:
	%42 = phi i1 [ false, %L.11 ], [ %41, %L.14 ]
	%43 = xor i1 %42, true
	br i1 %43, label %L.12, label %L.13
L.13:
	%44 = load i8, i8* %is
	%45 = sub i8 %44, 1
	store i8 %45, i8* %is
	br label %L.11
L.12:
	br label %L.3
L.3:
	%46 = load i8, i8* %ia
	%47 = load i8, i8* %is
	%48 = icmp ult i8 %46, %47
	%49 = select i1 %48, i8 %46, i8 %47
	store i8 %49, i8* %rv.0
	br label %return
return:
	%50 = load i8, i8* %rv.0
	ret i8 %50
}
@S.957 = private unnamed_addr constant [28 x i8] c"\09%N = icmp eq %0T %0N, %1N\0A\00"
@S.958 = private unnamed_addr constant [28 x i8] c"\09%N = icmp ne %0T %0N, %1N\0A\00"
@S.959 = private unnamed_addr constant [54 x i8] c"\09%N = call i1 @memcmp%0*B(%0T %0N, %1T %1N, %2T %2N)\0A\00"
@S.960 = private unnamed_addr constant [24 x i8] c"\09%N = xor i1 %0N, true\0A\00"
define internal zeroext i8 @llvm_ArrayCompare(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%length = alloca i32
	%align = alloca i32
	%elsize = alloca i32
	%size = alloca i32
	%i = alloca i8
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 8
	%5 = load %type_TypeNode*, %type_TypeNode** %4
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 0
	%7 = load %type_TypeNode*, %type_TypeNode** %6
	%8 = getelementptr %type_TypeNode, %type_TypeNode* %7, i32 0, i32 0
	%9 = load %type_TypeNode*, %type_TypeNode** %8
	%10 = getelementptr %type_TypeNode, %type_TypeNode* %9, i32 0, i32 11
	%11 = load i32, i32* %10
	%12 = udiv i32 %11, 8
	store i32 %12, i32* %elsize
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 11
	%15 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %14, i32 0, i32 3
	%16 = load %ast_AstNode*, %ast_AstNode** %15
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 10
	%18 = load i64, i64* %17
	%19 = trunc i64 %18 to i32
	store i32 %19, i32* %align
	store i32 0, i32* %length
	%20 = load %ast_AstNode*, %ast_AstNode** %node
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 11
	%22 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %21, i32 0, i32 2
	%23 = load %ast_AstNode*, %ast_AstNode** %22
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 0
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 6
	br i1 %26, label %L.2, label %L.1
L.2:
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 2
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	%31 = getelementptr %ast_AstNode, %ast_AstNode* %30, i32 0, i32 10
	%32 = load i64, i64* %31
	%33 = trunc i64 %32 to i32
	%34 = load i32, i32* %elsize
	%35 = mul i32 %33, %34
	store i32 %35, i32* %length
	br label %L.1
L.1:
	%36 = load i32, i32* %length
	%37 = load i32, i32* %elsize
	%38 = load i32, i32* %align
	%39 = call i8 @llvm_GetChunkSize(i32 %36, i32 %37, i32 %38)
	store i8 %39, i8* %i
	%40 = load %target_ModelT*, %target_ModelT** @target_Target
	%41 = getelementptr %target_ModelT, %target_ModelT* %40, i32 0, i32 6
	%42 = load i8, i8* %i
	%43 = zext i8 %42 to i32
	%44 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %41, i32 0, i32 %43
	%45 = getelementptr %target_SizeAlign, %target_SizeAlign* %44, i32 0, i32 0
	%46 = load i8, i8* %45
	%47 = zext i8 %46 to i32
	%48 = udiv i32 %47, 8
	store i32 %48, i32* %size
	%49 = load %target_ModelT*, %target_ModelT** @target_Target
	%50 = getelementptr %target_ModelT, %target_ModelT* %49, i32 0, i32 6
	%51 = load i8, i8* %i
	%52 = zext i8 %51 to i32
	%53 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %50, i32 0, i32 %52
	%54 = getelementptr %target_SizeAlign, %target_SizeAlign* %53, i32 0, i32 1
	%55 = load i8, i8* %54
	%56 = zext i8 %55 to i32
	%57 = udiv i32 %56, 8
	store i32 %57, i32* %align
	%58 = load i32, i32* %length
	%59 = icmp ne i32 %58, 0
	br i1 %59, label %L.3, label %L.4
L.3:
	%60 = load i32, i32* %length
	%61 = load i32, i32* %size
	%62 = icmp ule i32 %60, %61
	br label %L.4
L.4:
	%63 = phi i1 [ false, %L.1 ], [ %62, %L.3 ]
	br i1 %63, label %L.6, label %L.7
L.6:
	%64 = load %ast_AstNode*, %ast_AstNode** %node
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 11
	%66 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %65, i32 0, i32 0
	%67 = load %ast_AstNode*, %ast_AstNode** %66
	%68 = load i8, i8* %i
	%69 = zext i8 %68 to i32
	%70 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %69
	%71 = load %type_TypeNode*, %type_TypeNode** %70
	%72 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %67, %type_TypeNode* %71)
	%73 = load %ast_AstNode*, %ast_AstNode** %node
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 11
	%75 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %74, i32 0, i32 0
	store %ast_AstNode* %72, %ast_AstNode** %75
	%76 = load i8, i8* %i
	%77 = zext i8 %76 to i32
	%78 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %77
	%79 = load %type_TypeNode*, %type_TypeNode** %78
	%80 = getelementptr %type_TypeNode, %type_TypeNode* %79, i32 0, i32 0
	%81 = load %type_TypeNode*, %type_TypeNode** %80
	%82 = getelementptr %type_TypeNode, %type_TypeNode* %81, i32 0, i32 11
	%83 = load i32, i32* %82
	%84 = load %ast_AstNode*, %ast_AstNode** %node
	%85 = getelementptr %ast_AstNode, %ast_AstNode* %84, i32 0, i32 11
	%86 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %85, i32 0, i32 0
	%87 = load %ast_AstNode*, %ast_AstNode** %86
	%88 = getelementptr %ast_AstNode, %ast_AstNode* %87, i32 0, i32 7
	store i32 %83, i32* %88
	%89 = load i8, i8* %i
	%90 = zext i8 %89 to i32
	%91 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %90
	%92 = load %type_TypeNode*, %type_TypeNode** %91
	%93 = getelementptr %type_TypeNode, %type_TypeNode* %92, i32 0, i32 0
	%94 = load %type_TypeNode*, %type_TypeNode** %93
	%95 = load %ast_AstNode*, %ast_AstNode** %node
	%96 = getelementptr %ast_AstNode, %ast_AstNode* %95, i32 0, i32 11
	%97 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %96, i32 0, i32 0
	%98 = load %ast_AstNode*, %ast_AstNode** %97
	%99 = call %ast_AstNode* @ast_New1(i8 27, %type_TypeNode* %94, %ast_AstNode* %98)
	%100 = load %ast_AstNode*, %ast_AstNode** %node
	%101 = getelementptr %ast_AstNode, %ast_AstNode* %100, i32 0, i32 11
	%102 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %101, i32 0, i32 0
	store %ast_AstNode* %99, %ast_AstNode** %102
	%103 = load %ast_AstNode*, %ast_AstNode** %node
	%104 = getelementptr %ast_AstNode, %ast_AstNode* %103, i32 0, i32 11
	%105 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %104, i32 0, i32 1
	%106 = load %ast_AstNode*, %ast_AstNode** %105
	%107 = load i8, i8* %i
	%108 = zext i8 %107 to i32
	%109 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %108
	%110 = load %type_TypeNode*, %type_TypeNode** %109
	%111 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %106, %type_TypeNode* %110)
	%112 = load %ast_AstNode*, %ast_AstNode** %node
	%113 = getelementptr %ast_AstNode, %ast_AstNode* %112, i32 0, i32 11
	%114 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %113, i32 0, i32 1
	store %ast_AstNode* %111, %ast_AstNode** %114
	%115 = load i8, i8* %i
	%116 = zext i8 %115 to i32
	%117 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %116
	%118 = load %type_TypeNode*, %type_TypeNode** %117
	%119 = getelementptr %type_TypeNode, %type_TypeNode* %118, i32 0, i32 0
	%120 = load %type_TypeNode*, %type_TypeNode** %119
	%121 = getelementptr %type_TypeNode, %type_TypeNode* %120, i32 0, i32 11
	%122 = load i32, i32* %121
	%123 = load %ast_AstNode*, %ast_AstNode** %node
	%124 = getelementptr %ast_AstNode, %ast_AstNode* %123, i32 0, i32 11
	%125 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %124, i32 0, i32 1
	%126 = load %ast_AstNode*, %ast_AstNode** %125
	%127 = getelementptr %ast_AstNode, %ast_AstNode* %126, i32 0, i32 7
	store i32 %122, i32* %127
	%128 = load i8, i8* %i
	%129 = zext i8 %128 to i32
	%130 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %129
	%131 = load %type_TypeNode*, %type_TypeNode** %130
	%132 = getelementptr %type_TypeNode, %type_TypeNode* %131, i32 0, i32 0
	%133 = load %type_TypeNode*, %type_TypeNode** %132
	%134 = load %ast_AstNode*, %ast_AstNode** %node
	%135 = getelementptr %ast_AstNode, %ast_AstNode* %134, i32 0, i32 11
	%136 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %135, i32 0, i32 1
	%137 = load %ast_AstNode*, %ast_AstNode** %136
	%138 = call %ast_AstNode* @ast_New1(i8 27, %type_TypeNode* %133, %ast_AstNode* %137)
	%139 = load %ast_AstNode*, %ast_AstNode** %node
	%140 = getelementptr %ast_AstNode, %ast_AstNode* %139, i32 0, i32 11
	%141 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %140, i32 0, i32 1
	store %ast_AstNode* %138, %ast_AstNode** %141
	%142 = load i32, i32* %length
	%143 = load i32, i32* %size
	%144 = icmp ult i32 %142, %143
	br i1 %144, label %L.9, label %L.8
L.9:
	%mask = alloca i64
	%145 = load %target_ModelT*, %target_ModelT** @target_Target
	%146 = getelementptr %target_ModelT, %target_ModelT* %145, i32 0, i32 0
	%147 = load i8, i8* %146
	%148 = icmp eq i8 %147, 1
	br i1 %148, label %L.11, label %L.12
L.11:
	%149 = load i32, i32* %size
	%150 = zext i32 %149 to i64
	%151 = load i32, i32* %length
	%152 = zext i32 %151 to i64
	%153 = sub i64 %150, %152
	%154 = mul i64 %153, 8
	%155 = shl i64 1, %154
	%156 = sub i64 %155, 1
	%157 = xor i64 %156, -1
	store i64 %157, i64* %mask
	br label %L.10
L.12:
	%158 = load i32, i32* %length
	%159 = zext i32 %158 to i64
	%160 = mul i64 %159, 8
	%161 = shl i64 1, %160
	%162 = sub i64 %161, 1
	store i64 %162, i64* %mask
	br label %L.10
L.10:
	%163 = load i8, i8* %i
	%164 = zext i8 %163 to i32
	%165 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %164
	%166 = load %type_TypeNode*, %type_TypeNode** %165
	%167 = getelementptr %type_TypeNode, %type_TypeNode* %166, i32 0, i32 0
	%168 = load %type_TypeNode*, %type_TypeNode** %167
	%169 = load %ast_AstNode*, %ast_AstNode** %node
	%170 = getelementptr %ast_AstNode, %ast_AstNode* %169, i32 0, i32 11
	%171 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %170, i32 0, i32 0
	%172 = load %ast_AstNode*, %ast_AstNode** %171
	%173 = load %ast_AstNode*, %ast_AstNode** %node
	%174 = getelementptr %ast_AstNode, %ast_AstNode* %173, i32 0, i32 11
	%175 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %174, i32 0, i32 1
	%176 = load %ast_AstNode*, %ast_AstNode** %175
	%177 = call %ast_AstNode* @ast_New2(i8 53, %type_TypeNode* %168, %ast_AstNode* %172, %ast_AstNode* %176)
	%178 = load %ast_AstNode*, %ast_AstNode** %node
	%179 = getelementptr %ast_AstNode, %ast_AstNode* %178, i32 0, i32 11
	%180 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %179, i32 0, i32 0
	store %ast_AstNode* %177, %ast_AstNode** %180
	%181 = load i8, i8* %i
	%182 = zext i8 %181 to i32
	%183 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %182
	%184 = load %type_TypeNode*, %type_TypeNode** %183
	%185 = getelementptr %type_TypeNode, %type_TypeNode* %184, i32 0, i32 0
	%186 = load %type_TypeNode*, %type_TypeNode** %185
	%187 = load %ast_AstNode*, %ast_AstNode** %node
	%188 = getelementptr %ast_AstNode, %ast_AstNode* %187, i32 0, i32 11
	%189 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %188, i32 0, i32 0
	%190 = load %ast_AstNode*, %ast_AstNode** %189
	%191 = load i8, i8* %i
	%192 = zext i8 %191 to i32
	%193 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %192
	%194 = load %type_TypeNode*, %type_TypeNode** %193
	%195 = getelementptr %type_TypeNode, %type_TypeNode* %194, i32 0, i32 0
	%196 = load %type_TypeNode*, %type_TypeNode** %195
	%197 = load i64, i64* %mask
	%198 = call %ast_AstNode* @ast_Const(%type_TypeNode* %196, i64 %197)
	%199 = call %ast_AstNode* @ast_New2(i8 51, %type_TypeNode* %186, %ast_AstNode* %190, %ast_AstNode* %198)
	%200 = load %ast_AstNode*, %ast_AstNode** %node
	%201 = getelementptr %ast_AstNode, %ast_AstNode* %200, i32 0, i32 11
	%202 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %201, i32 0, i32 0
	store %ast_AstNode* %199, %ast_AstNode** %202
	%203 = load i8, i8* %i
	%204 = zext i8 %203 to i32
	%205 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %204
	%206 = load %type_TypeNode*, %type_TypeNode** %205
	%207 = getelementptr %type_TypeNode, %type_TypeNode* %206, i32 0, i32 0
	%208 = load %type_TypeNode*, %type_TypeNode** %207
	%209 = call %ast_AstNode* @ast_Const(%type_TypeNode* %208, i64 0)
	%210 = load %ast_AstNode*, %ast_AstNode** %node
	%211 = getelementptr %ast_AstNode, %ast_AstNode* %210, i32 0, i32 11
	%212 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %211, i32 0, i32 1
	store %ast_AstNode* %209, %ast_AstNode** %212
	br label %L.8
L.8:
	%213 = load %ast_AstNode*, %ast_AstNode** %node
	%214 = getelementptr %ast_AstNode, %ast_AstNode* %213, i32 0, i32 11
	%215 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %214, i32 0, i32 0
	%216 = load %ast_AstNode*, %ast_AstNode** %215
	%217 = call i8 @llvm_GenSub(%ast_AstNode* %216)
	%218 = load %ast_AstNode*, %ast_AstNode** %node
	%219 = getelementptr %ast_AstNode, %ast_AstNode* %218, i32 0, i32 11
	%220 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %219, i32 0, i32 1
	%221 = load %ast_AstNode*, %ast_AstNode** %220
	%222 = call i8 @llvm_GenSub(%ast_AstNode* %221)
	%223 = load i16, i16* @llvm_Tseqno
	%224 = load %ast_AstNode*, %ast_AstNode** %node
	%225 = getelementptr %ast_AstNode, %ast_AstNode* %224, i32 0, i32 6
	store i16 %223, i16* %225
	%226 = load i16, i16* @llvm_Tseqno
	%227 = add i16 %226, 1
	store i16 %227, i16* @llvm_Tseqno
	%228 = load %ast_AstNode*, %ast_AstNode** %node
	%229 = getelementptr %ast_AstNode, %ast_AstNode* %228, i32 0, i32 7
	store i32 1, i32* %229
	%230 = load %ast_AstNode*, %ast_AstNode** %node
	%231 = getelementptr %ast_AstNode, %ast_AstNode* %230, i32 0, i32 0
	%232 = load i8, i8* %231
	%233 = icmp eq i8 %232, 24
	br i1 %233, label %L.14, label %L.15
L.14:
	%234 = getelementptr [28 x i8], [28 x i8]* @S.957
	%235 = bitcast [28 x i8]* %234 to [0 x i8]*
	%236 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %235, %ast_AstNode* %236)
	br label %L.13
L.15:
	%237 = getelementptr [28 x i8], [28 x i8]* @S.958
	%238 = bitcast [28 x i8]* %237 to [0 x i8]*
	%239 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %238, %ast_AstNode* %239)
	br label %L.13
L.13:
	store i8 1, i8* %rv.0
	br label %return
L.7:
	%240 = load %ast_AstNode*, %ast_AstNode** %node
	%241 = getelementptr %ast_AstNode, %ast_AstNode* %240, i32 0, i32 11
	%242 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %241, i32 0, i32 0
	%243 = load %ast_AstNode*, %ast_AstNode** %242
	%244 = load i8, i8* %i
	%245 = zext i8 %244 to i32
	%246 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %245
	%247 = load %type_TypeNode*, %type_TypeNode** %246
	%248 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %243, %type_TypeNode* %247)
	%249 = load %ast_AstNode*, %ast_AstNode** %node
	%250 = getelementptr %ast_AstNode, %ast_AstNode* %249, i32 0, i32 11
	%251 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %250, i32 0, i32 0
	store %ast_AstNode* %248, %ast_AstNode** %251
	%252 = load i8, i8* %i
	%253 = zext i8 %252 to i32
	%254 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %253
	%255 = load %type_TypeNode*, %type_TypeNode** %254
	%256 = getelementptr %type_TypeNode, %type_TypeNode* %255, i32 0, i32 0
	%257 = load %type_TypeNode*, %type_TypeNode** %256
	%258 = getelementptr %type_TypeNode, %type_TypeNode* %257, i32 0, i32 11
	%259 = load i32, i32* %258
	%260 = load %ast_AstNode*, %ast_AstNode** %node
	%261 = getelementptr %ast_AstNode, %ast_AstNode* %260, i32 0, i32 11
	%262 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %261, i32 0, i32 0
	%263 = load %ast_AstNode*, %ast_AstNode** %262
	%264 = getelementptr %ast_AstNode, %ast_AstNode* %263, i32 0, i32 7
	store i32 %259, i32* %264
	%265 = load %ast_AstNode*, %ast_AstNode** %node
	%266 = getelementptr %ast_AstNode, %ast_AstNode* %265, i32 0, i32 11
	%267 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %266, i32 0, i32 1
	%268 = load %ast_AstNode*, %ast_AstNode** %267
	%269 = load i8, i8* %i
	%270 = zext i8 %269 to i32
	%271 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %270
	%272 = load %type_TypeNode*, %type_TypeNode** %271
	%273 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %268, %type_TypeNode* %272)
	%274 = load %ast_AstNode*, %ast_AstNode** %node
	%275 = getelementptr %ast_AstNode, %ast_AstNode* %274, i32 0, i32 11
	%276 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %275, i32 0, i32 1
	store %ast_AstNode* %273, %ast_AstNode** %276
	%277 = load i8, i8* %i
	%278 = zext i8 %277 to i32
	%279 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %278
	%280 = load %type_TypeNode*, %type_TypeNode** %279
	%281 = getelementptr %type_TypeNode, %type_TypeNode* %280, i32 0, i32 0
	%282 = load %type_TypeNode*, %type_TypeNode** %281
	%283 = getelementptr %type_TypeNode, %type_TypeNode* %282, i32 0, i32 11
	%284 = load i32, i32* %283
	%285 = load %ast_AstNode*, %ast_AstNode** %node
	%286 = getelementptr %ast_AstNode, %ast_AstNode* %285, i32 0, i32 11
	%287 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %286, i32 0, i32 1
	%288 = load %ast_AstNode*, %ast_AstNode** %287
	%289 = getelementptr %ast_AstNode, %ast_AstNode* %288, i32 0, i32 7
	store i32 %284, i32* %289
	%290 = load %ast_AstNode*, %ast_AstNode** %node
	%291 = getelementptr %ast_AstNode, %ast_AstNode* %290, i32 0, i32 11
	%292 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %291, i32 0, i32 0
	%293 = load %ast_AstNode*, %ast_AstNode** %292
	%294 = call i8 @llvm_GenSub(%ast_AstNode* %293)
	%295 = load %ast_AstNode*, %ast_AstNode** %node
	%296 = getelementptr %ast_AstNode, %ast_AstNode* %295, i32 0, i32 11
	%297 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %296, i32 0, i32 1
	%298 = load %ast_AstNode*, %ast_AstNode** %297
	%299 = call i8 @llvm_GenSub(%ast_AstNode* %298)
	%300 = load %ast_AstNode*, %ast_AstNode** %node
	%301 = getelementptr %ast_AstNode, %ast_AstNode* %300, i32 0, i32 11
	%302 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %301, i32 0, i32 2
	%303 = load %ast_AstNode*, %ast_AstNode** %302
	%304 = load i32, i32* %elsize
	%305 = zext i32 %304 to i64
	%306 = call %ast_AstNode* @ast_ConstW(i64 %305)
	%307 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%308 = call %ast_AstNode* @ast_OpBinary(i8 56, %ast_AstNode* %303, %ast_AstNode* %306, %type_TypeNode* %307)
	%309 = load i32, i32* %size
	%310 = zext i32 %309 to i64
	%311 = call %ast_AstNode* @ast_ConstW(i64 %310)
	%312 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%313 = call %ast_AstNode* @ast_OpBinary(i8 57, %ast_AstNode* %308, %ast_AstNode* %311, %type_TypeNode* %312)
	%314 = load %ast_AstNode*, %ast_AstNode** %node
	%315 = getelementptr %ast_AstNode, %ast_AstNode* %314, i32 0, i32 11
	%316 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %315, i32 0, i32 2
	store %ast_AstNode* %313, %ast_AstNode** %316
	%317 = load %ast_AstNode*, %ast_AstNode** %node
	%318 = getelementptr %ast_AstNode, %ast_AstNode* %317, i32 0, i32 11
	%319 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %318, i32 0, i32 2
	%320 = load %ast_AstNode*, %ast_AstNode** %319
	%321 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%322 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %320, %type_TypeNode* %321)
	%323 = load %ast_AstNode*, %ast_AstNode** %node
	%324 = getelementptr %ast_AstNode, %ast_AstNode* %323, i32 0, i32 11
	%325 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %324, i32 0, i32 2
	store %ast_AstNode* %322, %ast_AstNode** %325
	%326 = load %ast_AstNode*, %ast_AstNode** %node
	%327 = getelementptr %ast_AstNode, %ast_AstNode* %326, i32 0, i32 11
	%328 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %327, i32 0, i32 2
	%329 = load %ast_AstNode*, %ast_AstNode** %328
	%330 = call i8 @llvm_GenSub(%ast_AstNode* %329)
	%331 = load i16, i16* @llvm_Tseqno
	%332 = load %ast_AstNode*, %ast_AstNode** %node
	%333 = getelementptr %ast_AstNode, %ast_AstNode* %332, i32 0, i32 6
	store i16 %331, i16* %333
	%334 = load i16, i16* @llvm_Tseqno
	%335 = add i16 %334, 1
	store i16 %335, i16* @llvm_Tseqno
	%336 = load %ast_AstNode*, %ast_AstNode** %node
	%337 = getelementptr %ast_AstNode, %ast_AstNode* %336, i32 0, i32 7
	store i32 1, i32* %337
	%338 = getelementptr [54 x i8], [54 x i8]* @S.959
	%339 = bitcast [54 x i8]* %338 to [0 x i8]*
	%340 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %339, %ast_AstNode* %340)
	%341 = load i32, i32* %size
	%342 = load i8, i8* %i
	%343 = zext i8 %342 to i32
	%344 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %343
	%345 = load %type_TypeNode*, %type_TypeNode** %344
	call void @llvm_UseIntrinsic(i8 3, i32 %341, %type_TypeNode* %345)
	%346 = load %ast_AstNode*, %ast_AstNode** %node
	%347 = getelementptr %ast_AstNode, %ast_AstNode* %346, i32 0, i32 0
	%348 = load i8, i8* %347
	%349 = icmp eq i8 %348, 25
	br i1 %349, label %L.17, label %L.16
L.17:
	%350 = load %ast_AstNode*, %ast_AstNode** %node
	%351 = getelementptr %ast_AstNode, %ast_AstNode* %350, i32 0, i32 6
	%352 = load i16, i16* %351
	%353 = load %ast_AstNode*, %ast_AstNode** %node
	%354 = getelementptr %ast_AstNode, %ast_AstNode* %353, i32 0, i32 11
	%355 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %354, i32 0, i32 0
	%356 = load %ast_AstNode*, %ast_AstNode** %355
	%357 = getelementptr %ast_AstNode, %ast_AstNode* %356, i32 0, i32 6
	store i16 %352, i16* %357
	%358 = load i16, i16* @llvm_Tseqno
	%359 = load %ast_AstNode*, %ast_AstNode** %node
	%360 = getelementptr %ast_AstNode, %ast_AstNode* %359, i32 0, i32 6
	store i16 %358, i16* %360
	%361 = load i16, i16* @llvm_Tseqno
	%362 = add i16 %361, 1
	store i16 %362, i16* @llvm_Tseqno
	%363 = getelementptr [24 x i8], [24 x i8]* @S.960
	%364 = bitcast [24 x i8]* %363 to [0 x i8]*
	%365 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %364, %ast_AstNode* %365)
	br label %L.16
L.16:
	br label %L.5
L.5:
	store i8 0, i8* %rv.0
	br label %return
return:
	%366 = load i8, i8* %rv.0
	ret i8 %366
}
@S.961 = private unnamed_addr constant [37 x i8] c"\09%N = call %T @llvm.fabs.%G(%T %0N)\0A\00"
define internal void @llvm_Abs(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%rhs = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = icmp eq i8 %4, 4
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 0
	%9 = load %ast_AstNode*, %ast_AstNode** %8
	%10 = call i8 @llvm_GenSub(%ast_AstNode* %9)
	%11 = load i16, i16* @llvm_Tseqno
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 6
	store i16 %11, i16* %13
	%14 = load i16, i16* @llvm_Tseqno
	%15 = add i16 %14, 1
	store i16 %15, i16* @llvm_Tseqno
	%16 = getelementptr [37 x i8], [37 x i8]* @S.961
	%17 = bitcast [37 x i8]* %16 to [0 x i8]*
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %17, %ast_AstNode* %18)
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 8
	%21 = load %type_TypeNode*, %type_TypeNode** %20
	%22 = getelementptr %type_TypeNode, %type_TypeNode* %21, i32 0, i32 11
	%23 = load i32, i32* %22
	%24 = load %ast_AstNode*, %ast_AstNode** %node
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 8
	%26 = load %type_TypeNode*, %type_TypeNode** %25
	call void @llvm_UseIntrinsic(i8 11, i32 %23, %type_TypeNode* %26)
	br label %L.1
L.3:
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 0
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	store %ast_AstNode* %30, %ast_AstNode** %rhs
	%31 = load %ast_AstNode*, %ast_AstNode** %rhs
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 8
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	%34 = load %ast_AstNode*, %ast_AstNode** %rhs
	%35 = call %ast_AstNode* @ast_New1(i8 39, %type_TypeNode* %33, %ast_AstNode* %34)
	store %ast_AstNode* %35, %ast_AstNode** %lhs
	%36 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%37 = load %ast_AstNode*, %ast_AstNode** %rhs
	%38 = load %ast_AstNode*, %ast_AstNode** %rhs
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 8
	%40 = load %type_TypeNode*, %type_TypeNode** %39
	%41 = call %ast_AstNode* @ast_Const(%type_TypeNode* %40, i64 0)
	%42 = call %ast_AstNode* @ast_New2(i8 75, %type_TypeNode* %36, %ast_AstNode* %37, %ast_AstNode* %41)
	%43 = load %ast_AstNode*, %ast_AstNode** %node
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 11
	%45 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %44, i32 0, i32 0
	store %ast_AstNode* %42, %ast_AstNode** %45
	%46 = load %ast_AstNode*, %ast_AstNode** %node
	%47 = load %ast_AstNode*, %ast_AstNode** %lhs
	%48 = call %ast_AstNode* @ast_Child(%ast_AstNode* %46, %ast_AstNode* %47)
	store %ast_AstNode* %48, %ast_AstNode** %node
	%49 = load %ast_AstNode*, %ast_AstNode** %node
	%50 = load %ast_AstNode*, %ast_AstNode** %rhs
	%51 = call %ast_AstNode* @ast_Child(%ast_AstNode* %49, %ast_AstNode* %50)
	store %ast_AstNode* %51, %ast_AstNode** %node
	%52 = load %ast_AstNode*, %ast_AstNode** %node
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 0
	store i8 95, i8* %53
	%54 = load %ast_AstNode*, %ast_AstNode** %node
	%55 = call i8 @llvm_GenSub(%ast_AstNode* %54)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @llvm_MinMax(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%rhs = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	%op = alloca i8
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	store %ast_AstNode* %3, %ast_AstNode** %lhs
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 1
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	store %ast_AstNode* %7, %ast_AstNode** %rhs
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 0
	%10 = load i8, i8* %9
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.1 [
		i32 61, label %L.3
		i32 62, label %L.4
		i32 59, label %L.5
		i32 60, label %L.6
		i32 90, label %L.7
		i32 91, label %L.8
	]
L.3:
	store i8 75, i8* %op
	br label %L.2
L.4:
	store i8 76, i8* %op
	br label %L.2
L.5:
	store i8 71, i8* %op
	br label %L.2
L.6:
	store i8 72, i8* %op
	br label %L.2
L.7:
	store i8 81, i8* %op
	br label %L.2
L.8:
	store i8 82, i8* %op
	br label %L.2
L.1:
	br label %L.2
L.2:
	%12 = load i8, i8* %op
	%13 = load %type_TypeNode*, %type_TypeNode** @type_booltype
	%14 = load %ast_AstNode*, %ast_AstNode** %lhs
	%15 = load %ast_AstNode*, %ast_AstNode** %rhs
	%16 = call %ast_AstNode* @ast_New2(i8 %12, %type_TypeNode* %13, %ast_AstNode* %14, %ast_AstNode* %15)
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 11
	%19 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %18, i32 0, i32 0
	store %ast_AstNode* %16, %ast_AstNode** %19
	%20 = load %ast_AstNode*, %ast_AstNode** %lhs
	%21 = load %ast_AstNode*, %ast_AstNode** %node
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 11
	%23 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %22, i32 0, i32 1
	store %ast_AstNode* %20, %ast_AstNode** %23
	%24 = load %ast_AstNode*, %ast_AstNode** %node
	%25 = load %ast_AstNode*, %ast_AstNode** %rhs
	%26 = call %ast_AstNode* @ast_Child(%ast_AstNode* %24, %ast_AstNode* %25)
	store %ast_AstNode* %26, %ast_AstNode** %node
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 0
	store i8 95, i8* %28
	%29 = load %ast_AstNode*, %ast_AstNode** %node
	%30 = call i8 @llvm_GenSub(%ast_AstNode* %29)
	br label %return
return:
	ret void
}
define internal void @llvm_Rotate(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%new = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%nlhs = alloca %ast_AstNode*
	%nrhs = alloca %ast_AstNode*
	%lop = alloca i8
	%rop = alloca i8
	%t = alloca %type_TypeNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 0
	%2 = load i8, i8* %1
	%3 = icmp eq i8 %2, 67
	br i1 %3, label %L.2, label %L.3
L.2:
	store i8 63, i8* %lop
	store i8 64, i8* %rop
	br label %L.1
L.3:
	store i8 64, i8* %lop
	store i8 63, i8* %rop
	br label %L.1
L.1:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 0
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	store %ast_AstNode* %7, %ast_AstNode** %lhs
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 11
	%10 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %9, i32 0, i32 1
	%11 = load %ast_AstNode*, %ast_AstNode** %10
	store %ast_AstNode* %11, %ast_AstNode** %rhs
	%12 = load %ast_AstNode*, %ast_AstNode** %lhs
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 8
	%14 = load %type_TypeNode*, %type_TypeNode** %13
	store %type_TypeNode* %14, %type_TypeNode** %t
	%15 = load %ast_AstNode*, %ast_AstNode** %rhs
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %15, %type_TypeNode* %16)
	store %ast_AstNode* %17, %ast_AstNode** %rhs
	%18 = load i8, i8* %lop
	%19 = load %type_TypeNode*, %type_TypeNode** %t
	%20 = load %ast_AstNode*, %ast_AstNode** %lhs
	%21 = load %ast_AstNode*, %ast_AstNode** %rhs
	%22 = call %ast_AstNode* @ast_New2(i8 %18, %type_TypeNode* %19, %ast_AstNode* %20, %ast_AstNode* %21)
	store %ast_AstNode* %22, %ast_AstNode** %nlhs
	%23 = load i8, i8* %rop
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = load %ast_AstNode*, %ast_AstNode** %lhs
	%26 = load %type_TypeNode*, %type_TypeNode** %t
	%27 = load %ast_AstNode*, %ast_AstNode** %lhs
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 8
	%29 = load %type_TypeNode*, %type_TypeNode** %28
	%30 = getelementptr %type_TypeNode, %type_TypeNode* %29, i32 0, i32 10
	%31 = load i32, i32* %30
	%32 = zext i32 %31 to i64
	%33 = call %ast_AstNode* @ast_Const(%type_TypeNode* %26, i64 %32)
	%34 = load %ast_AstNode*, %ast_AstNode** %rhs
	%35 = load %type_TypeNode*, %type_TypeNode** %t
	%36 = call %ast_AstNode* @ast_OpBinary(i8 55, %ast_AstNode* %33, %ast_AstNode* %34, %type_TypeNode* %35)
	%37 = call %ast_AstNode* @ast_New2(i8 %23, %type_TypeNode* %24, %ast_AstNode* %25, %ast_AstNode* %36)
	store %ast_AstNode* %37, %ast_AstNode** %nrhs
	%38 = load %ast_AstNode*, %ast_AstNode** %node
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 0
	store i8 52, i8* %39
	%40 = load %ast_AstNode*, %ast_AstNode** %nlhs
	%41 = load %ast_AstNode*, %ast_AstNode** %node
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 11
	%43 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %42, i32 0, i32 0
	store %ast_AstNode* %40, %ast_AstNode** %43
	%44 = load %ast_AstNode*, %ast_AstNode** %nrhs
	%45 = load %ast_AstNode*, %ast_AstNode** %node
	%46 = getelementptr %ast_AstNode, %ast_AstNode* %45, i32 0, i32 11
	%47 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %46, i32 0, i32 1
	store %ast_AstNode* %44, %ast_AstNode** %47
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	%49 = call i8 @llvm_GenSub(%ast_AstNode* %48)
	br label %return
return:
	ret void
}
@S.962 = private unnamed_addr constant [36 x i8] c"\09%N = call %T @memlen%0*A(%0T %0N)\0A\00"
define internal void @llvm_ZLen(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%align = alloca i32
	%t = alloca %type_TypeNode*
	%at = alloca %type_TypeNode*
	%bt = alloca %type_TypeNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 8
	%5 = load %type_TypeNode*, %type_TypeNode** %4
	%6 = getelementptr %type_TypeNode, %type_TypeNode* %5, i32 0, i32 0
	%7 = load %type_TypeNode*, %type_TypeNode** %6
	store %type_TypeNode* %7, %type_TypeNode** %at
	%8 = load %type_TypeNode*, %type_TypeNode** %at
	%9 = getelementptr %type_TypeNode, %type_TypeNode* %8, i32 0, i32 0
	%10 = load %type_TypeNode*, %type_TypeNode** %9
	store %type_TypeNode* %10, %type_TypeNode** %bt
	%11 = load %type_TypeNode*, %type_TypeNode** %bt
	%12 = call %type_TypeNode* @type_Clone(%type_TypeNode* %11)
	store %type_TypeNode* %12, %type_TypeNode** %t
	%13 = load %type_TypeNode*, %type_TypeNode** %at
	%14 = getelementptr %type_TypeNode, %type_TypeNode* %13, i32 0, i32 12
	%15 = load i32, i32* %14
	%16 = load %type_TypeNode*, %type_TypeNode** %t
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 12
	store i32 %15, i32* %17
	%18 = load %type_TypeNode*, %type_TypeNode** %t
	%19 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %18)
	store %type_TypeNode* %19, %type_TypeNode** %t
	%20 = load %ast_AstNode*, %ast_AstNode** %node
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 11
	%22 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %21, i32 0, i32 0
	%23 = load %ast_AstNode*, %ast_AstNode** %22
	%24 = load %type_TypeNode*, %type_TypeNode** %t
	%25 = call %ast_AstNode* @ast_Cast(%ast_AstNode* %23, %type_TypeNode* %24)
	%26 = load %ast_AstNode*, %ast_AstNode** %node
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 11
	%28 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %27, i32 0, i32 0
	store %ast_AstNode* %25, %ast_AstNode** %28
	%29 = load %ast_AstNode*, %ast_AstNode** %node
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 11
	%31 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %30, i32 0, i32 0
	%32 = load %ast_AstNode*, %ast_AstNode** %31
	%33 = call i8 @llvm_GenSub(%ast_AstNode* %32)
	%34 = load %type_TypeNode*, %type_TypeNode** %t
	%35 = load %ast_AstNode*, %ast_AstNode** %node
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 11
	%37 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %36, i32 0, i32 0
	%38 = load %ast_AstNode*, %ast_AstNode** %37
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 8
	store %type_TypeNode* %34, %type_TypeNode** %39
	%40 = load %ast_AstNode*, %ast_AstNode** %node
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 11
	%42 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %41, i32 0, i32 1
	%43 = load %ast_AstNode*, %ast_AstNode** %42
	%44 = getelementptr %ast_AstNode, %ast_AstNode* %43, i32 0, i32 10
	%45 = load i64, i64* %44
	%46 = trunc i64 %45 to i32
	store i32 %46, i32* %align
	%47 = load i16, i16* @llvm_Tseqno
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 6
	store i16 %47, i16* %49
	%50 = load i16, i16* @llvm_Tseqno
	%51 = add i16 %50, 1
	store i16 %51, i16* @llvm_Tseqno
	%52 = getelementptr [36 x i8], [36 x i8]* @S.962
	%53 = bitcast [36 x i8]* %52 to [0 x i8]*
	%54 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %53, %ast_AstNode* %54)
	%55 = load i32, i32* %align
	%56 = load %type_TypeNode*, %type_TypeNode** %t
	call void @llvm_UseIntrinsic(i8 4, i32 %55, %type_TypeNode* %56)
	br label %return
return:
	ret void
}
@S.963 = private unnamed_addr constant [22 x i8] c"\09%N = xor %0T %0N, -1\00"
@S.964 = private unnamed_addr constant [21 x i8] c"\09%N = sub %0T 0, %0N\00"
@S.965 = private unnamed_addr constant [24 x i8] c"\09%N = fsub %0T 0.0, %0N\00"
@S.966 = private unnamed_addr constant [26 x i8] c"\09%N = fpext %0T %0N to %T\00"
@S.967 = private unnamed_addr constant [28 x i8] c"\09%N = fptrunc %0T %0N to %T\00"
@S.968 = private unnamed_addr constant [27 x i8] c"\09%N = uitofp %0T %0N to %T\00"
@S.969 = private unnamed_addr constant [27 x i8] c"\09%N = sitofp %0T %0N to %T\00"
@S.970 = private unnamed_addr constant [27 x i8] c"\09%N = fptoui %0T %0N to %T\00"
@S.971 = private unnamed_addr constant [27 x i8] c"\09%N = fptosi %0T %0N to %T\00"
@S.972 = private unnamed_addr constant [37 x i8] c"\09%N = call %T @llvm.bswap.%T(%T %0N)\00"
@S.973 = private unnamed_addr constant [42 x i8] c"\09%N = call %T @llvm.bitreverse.%T(%T %0N)\00"
@S.974 = private unnamed_addr constant [47 x i8] c"\09%N = call %T @llvm.ctlz.%T(%0T %0N, i1 false)\00"
@S.975 = private unnamed_addr constant [46 x i8] c"\09%N = call %T @llvm.ctlz.%T(%0T %0N, i1 true)\00"
@S.976 = private unnamed_addr constant [47 x i8] c"\09%N = call %T @llvm.cttz.%T(%0T %0N, i1 false)\00"
@S.977 = private unnamed_addr constant [46 x i8] c"\09%N = call %T @llvm.cttz.%T(%0T %0N, i1 true)\00"
@S.978 = private unnamed_addr constant [38 x i8] c"\09%N = call %T @llvm.ctpop.%T(%0T %0N)\00"
@S.979 = private unnamed_addr constant [37 x i8] c"\09%N = call %T @llvm.sqrt.%T(%0T %0N)\00"
@S.980 = private unnamed_addr constant [32 x i8] c"\09%N = call %T @sqrti%B(%0T %0N)\00"
define internal zeroext i8 @llvm_UnaryOp(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = load i16, i16* @llvm_Tseqno
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 6
	store i16 %5, i16* %7
	%8 = load i16, i16* @llvm_Tseqno
	%9 = add i16 %8, 1
	store i16 %9, i16* @llvm_Tseqno
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 0
	%12 = load i8, i8* %11
	%13 = zext i8 %12 to i32
	switch i32 %13, label %L.1 [
		i32 40, label %L.3
		i32 39, label %L.4
		i32 44, label %L.5
		i32 45, label %L.6
		i32 46, label %L.7
		i32 47, label %L.8
		i32 48, label %L.9
		i32 49, label %L.10
		i32 50, label %L.11
		i32 32, label %L.12
		i32 33, label %L.13
		i32 34, label %L.14
		i32 35, label %L.15
		i32 36, label %L.16
		i32 37, label %L.17
		i32 38, label %L.18
		i32 42, label %L.19
	]
L.3:
	%14 = getelementptr [22 x i8], [22 x i8]* @S.963
	%15 = bitcast [22 x i8]* %14 to [0 x i8]*
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %15, %ast_AstNode* %16)
	br label %L.2
L.4:
	%17 = getelementptr [21 x i8], [21 x i8]* @S.964
	%18 = bitcast [21 x i8]* %17 to [0 x i8]*
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %18, %ast_AstNode* %19)
	br label %L.2
L.5:
	%20 = getelementptr [24 x i8], [24 x i8]* @S.965
	%21 = bitcast [24 x i8]* %20 to [0 x i8]*
	%22 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %21, %ast_AstNode* %22)
	br label %L.2
L.6:
	%23 = getelementptr [26 x i8], [26 x i8]* @S.966
	%24 = bitcast [26 x i8]* %23 to [0 x i8]*
	%25 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %24, %ast_AstNode* %25)
	br label %L.2
L.7:
	%26 = getelementptr [28 x i8], [28 x i8]* @S.967
	%27 = bitcast [28 x i8]* %26 to [0 x i8]*
	%28 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %27, %ast_AstNode* %28)
	br label %L.2
L.8:
	%29 = getelementptr [27 x i8], [27 x i8]* @S.968
	%30 = bitcast [27 x i8]* %29 to [0 x i8]*
	%31 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %30, %ast_AstNode* %31)
	br label %L.2
L.9:
	%32 = getelementptr [27 x i8], [27 x i8]* @S.969
	%33 = bitcast [27 x i8]* %32 to [0 x i8]*
	%34 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %33, %ast_AstNode* %34)
	br label %L.2
L.10:
	%35 = getelementptr [27 x i8], [27 x i8]* @S.970
	%36 = bitcast [27 x i8]* %35 to [0 x i8]*
	%37 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %36, %ast_AstNode* %37)
	br label %L.2
L.11:
	%38 = getelementptr [27 x i8], [27 x i8]* @S.971
	%39 = bitcast [27 x i8]* %38 to [0 x i8]*
	%40 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %39, %ast_AstNode* %40)
	br label %L.2
L.12:
	%41 = getelementptr [37 x i8], [37 x i8]* @S.972
	%42 = bitcast [37 x i8]* %41 to [0 x i8]*
	%43 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %42, %ast_AstNode* %43)
	%44 = load %ast_AstNode*, %ast_AstNode** %node
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 7
	%46 = load i32, i32* %45
	%47 = udiv i32 %46, 8
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 8
	%50 = load %type_TypeNode*, %type_TypeNode** %49
	call void @llvm_UseIntrinsic(i8 5, i32 %47, %type_TypeNode* %50)
	br label %L.2
L.13:
	%51 = getelementptr [42 x i8], [42 x i8]* @S.973
	%52 = bitcast [42 x i8]* %51 to [0 x i8]*
	%53 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %52, %ast_AstNode* %53)
	%54 = load %ast_AstNode*, %ast_AstNode** %node
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 7
	%56 = load i32, i32* %55
	%57 = udiv i32 %56, 8
	%58 = load %ast_AstNode*, %ast_AstNode** %node
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 8
	%60 = load %type_TypeNode*, %type_TypeNode** %59
	call void @llvm_UseIntrinsic(i8 6, i32 %57, %type_TypeNode* %60)
	br label %L.2
L.14:
	%61 = getelementptr [47 x i8], [47 x i8]* @S.974
	%62 = bitcast [47 x i8]* %61 to [0 x i8]*
	%63 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %62, %ast_AstNode* %63)
	%64 = load %ast_AstNode*, %ast_AstNode** %node
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 7
	%66 = load i32, i32* %65
	%67 = udiv i32 %66, 8
	%68 = load %ast_AstNode*, %ast_AstNode** %node
	%69 = getelementptr %ast_AstNode, %ast_AstNode* %68, i32 0, i32 8
	%70 = load %type_TypeNode*, %type_TypeNode** %69
	call void @llvm_UseIntrinsic(i8 7, i32 %67, %type_TypeNode* %70)
	br label %L.2
L.15:
	%71 = getelementptr [46 x i8], [46 x i8]* @S.975
	%72 = bitcast [46 x i8]* %71 to [0 x i8]*
	%73 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %72, %ast_AstNode* %73)
	%74 = load %ast_AstNode*, %ast_AstNode** %node
	%75 = getelementptr %ast_AstNode, %ast_AstNode* %74, i32 0, i32 7
	%76 = load i32, i32* %75
	%77 = udiv i32 %76, 8
	%78 = load %ast_AstNode*, %ast_AstNode** %node
	%79 = getelementptr %ast_AstNode, %ast_AstNode* %78, i32 0, i32 8
	%80 = load %type_TypeNode*, %type_TypeNode** %79
	call void @llvm_UseIntrinsic(i8 7, i32 %77, %type_TypeNode* %80)
	br label %L.2
L.16:
	%81 = getelementptr [47 x i8], [47 x i8]* @S.976
	%82 = bitcast [47 x i8]* %81 to [0 x i8]*
	%83 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %82, %ast_AstNode* %83)
	%84 = load %ast_AstNode*, %ast_AstNode** %node
	%85 = getelementptr %ast_AstNode, %ast_AstNode* %84, i32 0, i32 7
	%86 = load i32, i32* %85
	%87 = udiv i32 %86, 8
	%88 = load %ast_AstNode*, %ast_AstNode** %node
	%89 = getelementptr %ast_AstNode, %ast_AstNode* %88, i32 0, i32 8
	%90 = load %type_TypeNode*, %type_TypeNode** %89
	call void @llvm_UseIntrinsic(i8 8, i32 %87, %type_TypeNode* %90)
	br label %L.2
L.17:
	%91 = getelementptr [46 x i8], [46 x i8]* @S.977
	%92 = bitcast [46 x i8]* %91 to [0 x i8]*
	%93 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %92, %ast_AstNode* %93)
	%94 = load %ast_AstNode*, %ast_AstNode** %node
	%95 = getelementptr %ast_AstNode, %ast_AstNode* %94, i32 0, i32 7
	%96 = load i32, i32* %95
	%97 = udiv i32 %96, 8
	%98 = load %ast_AstNode*, %ast_AstNode** %node
	%99 = getelementptr %ast_AstNode, %ast_AstNode* %98, i32 0, i32 8
	%100 = load %type_TypeNode*, %type_TypeNode** %99
	call void @llvm_UseIntrinsic(i8 8, i32 %97, %type_TypeNode* %100)
	br label %L.2
L.18:
	%101 = getelementptr [38 x i8], [38 x i8]* @S.978
	%102 = bitcast [38 x i8]* %101 to [0 x i8]*
	%103 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %102, %ast_AstNode* %103)
	%104 = load %ast_AstNode*, %ast_AstNode** %node
	%105 = getelementptr %ast_AstNode, %ast_AstNode* %104, i32 0, i32 7
	%106 = load i32, i32* %105
	%107 = udiv i32 %106, 8
	%108 = load %ast_AstNode*, %ast_AstNode** %node
	%109 = getelementptr %ast_AstNode, %ast_AstNode* %108, i32 0, i32 8
	%110 = load %type_TypeNode*, %type_TypeNode** %109
	call void @llvm_UseIntrinsic(i8 9, i32 %107, %type_TypeNode* %110)
	br label %L.2
L.19:
	%111 = load %ast_AstNode*, %ast_AstNode** %node
	%112 = getelementptr %ast_AstNode, %ast_AstNode* %111, i32 0, i32 8
	%113 = load %type_TypeNode*, %type_TypeNode** %112
	%114 = getelementptr %type_TypeNode, %type_TypeNode* %113, i32 0, i32 16
	%115 = load i8, i8* %114
	%116 = icmp eq i8 %115, 4
	br i1 %116, label %L.21, label %L.22
L.21:
	%117 = getelementptr [37 x i8], [37 x i8]* @S.979
	%118 = bitcast [37 x i8]* %117 to [0 x i8]*
	%119 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %118, %ast_AstNode* %119)
	%120 = load %ast_AstNode*, %ast_AstNode** %node
	%121 = getelementptr %ast_AstNode, %ast_AstNode* %120, i32 0, i32 7
	%122 = load i32, i32* %121
	%123 = udiv i32 %122, 8
	%124 = load %ast_AstNode*, %ast_AstNode** %node
	%125 = getelementptr %ast_AstNode, %ast_AstNode* %124, i32 0, i32 8
	%126 = load %type_TypeNode*, %type_TypeNode** %125
	call void @llvm_UseIntrinsic(i8 10, i32 %123, %type_TypeNode* %126)
	br label %L.20
L.22:
	%127 = getelementptr [32 x i8], [32 x i8]* @S.980
	%128 = bitcast [32 x i8]* %127 to [0 x i8]*
	%129 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %128, %ast_AstNode* %129)
	%130 = load %ast_AstNode*, %ast_AstNode** %node
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 7
	%132 = load i32, i32* %131
	%133 = udiv i32 %132, 8
	%134 = load %ast_AstNode*, %ast_AstNode** %node
	%135 = getelementptr %ast_AstNode, %ast_AstNode* %134, i32 0, i32 8
	%136 = load %type_TypeNode*, %type_TypeNode** %135
	call void @llvm_UseIntrinsic(i8 12, i32 %133, %type_TypeNode* %136)
	br label %L.20
L.20:
	br label %L.2
L.1:
	br label %L.2
L.2:
	%137 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %137)
	store i8 0, i8* %rv.0
	br label %return
return:
	%138 = load i8, i8* %rv.0
	ret i8 %138
}
@S.981 = private unnamed_addr constant [3 x i8] c"\22\22\00"
define internal void @llvm_PStringCon(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%n = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = icmp eq %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%3 = getelementptr [3 x i8], [3 x i8]* @S.981
	%4 = bitcast [3 x i8]* %3 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %2, [0 x i8]* %4)
	br label %L.1
L.3:
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 9
	%7 = load %symb_SymbNode*, %symb_SymbNode** %6
	%8 = getelementptr %symb_SymbNode, %symb_SymbNode* %7, i32 0, i32 23
	%9 = getelementptr [0 x i8], [0 x i8]* %8
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = call i32 @zstr_len([0 x i8]* %10, i32 4095)
	%12 = trunc i32 %11 to i16
	store i16 %12, i16* %n
	%13 = load %ast_AstNode*, %ast_AstNode** %node
	%14 = getelementptr %ast_AstNode, %ast_AstNode* %13, i32 0, i32 9
	%15 = load %symb_SymbNode*, %symb_SymbNode** %14
	%16 = getelementptr %symb_SymbNode, %symb_SymbNode* %15, i32 0, i32 23
	%17 = getelementptr [0 x i8], [0 x i8]* %16
	%18 = bitcast [0 x i8]* %17 to [0 x i8]*
	%19 = load i16, i16* %n
	call void @llvm_PString([0 x i8]* %18, i16 %19, i8 0)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.982 = private unnamed_addr constant [20 x i8] c"\09%N = extractvalue \00"
@S.983 = private unnamed_addr constant [7 x i8] c" %0N, \00"
define internal void @llvm_GetRV(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%rs = alloca %symb_SymbNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 10
	%2 = load i64, i64* %1
	%3 = icmp eq i64 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %ast_AstNode*, %ast_AstNode** %node
	%5 = getelementptr %ast_AstNode, %ast_AstNode* %4, i32 0, i32 11
	%6 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %5, i32 0, i32 0
	%7 = load %ast_AstNode*, %ast_AstNode** %6
	%8 = call i8 @llvm_GenSub(%ast_AstNode* %7)
	br label %L.1
L.1:
	%9 = load i16, i16* @llvm_Tseqno
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 6
	store i16 %9, i16* %11
	%12 = load i16, i16* @llvm_Tseqno
	%13 = add i16 %12, 1
	store i16 %13, i16* @llvm_Tseqno
	%14 = getelementptr [20 x i8], [20 x i8]* @S.982
	%15 = bitcast [20 x i8]* %14 to [0 x i8]*
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %15, %ast_AstNode* %16)
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 11
	%19 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %18, i32 0, i32 0
	%20 = load %ast_AstNode*, %ast_AstNode** %19
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 9
	%22 = load %symb_SymbNode*, %symb_SymbNode** %21
	store %symb_SymbNode* %22, %symb_SymbNode** %rs
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 11
	%25 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %24, i32 0, i32 0
	%26 = load %ast_AstNode*, %ast_AstNode** %25
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 0
	%28 = load i8, i8* %27
	%29 = icmp ne i8 %28, 20
	br i1 %29, label %L.4, label %L.3
L.4:
	%30 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%31 = icmp ne %symb_SymbNode* %30, null
	br i1 %31, label %L.6, label %L.5
L.6:
	%32 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%33 = getelementptr %symb_SymbNode, %symb_SymbNode* %32, i32 0, i32 4
	%34 = load %symb_SymbNode*, %symb_SymbNode** %33
	store %symb_SymbNode* %34, %symb_SymbNode** %rs
	br label %L.5
L.5:
	br label %L.3
L.3:
	%35 = load %symb_SymbNode*, %symb_SymbNode** %rs
	call void @llvm_PRetvType(%symb_SymbNode* %35, i8 0)
	%36 = getelementptr [7 x i8], [7 x i8]* @S.983
	%37 = bitcast [7 x i8]* %36 to [0 x i8]*
	%38 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %37, %ast_AstNode* %38)
	%39 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%40 = load %ast_AstNode*, %ast_AstNode** %node
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 10
	%42 = load i64, i64* %41
	%43 = trunc i64 %42 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %39, i32 %43)
	%44 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %44)
	br label %return
return:
	ret void
}
@S.984 = private unnamed_addr constant [6 x i8] c"%N = \00"
@S.985 = private unnamed_addr constant [5 x i8] c"call\00"
@S.986 = private unnamed_addr constant [17 x i8] c" asm sideeffect \00"
@S.987 = private unnamed_addr constant [3 x i8] c", \00"
@S.988 = private unnamed_addr constant [3 x i8] c" (\00"
@S.989 = private unnamed_addr constant [6 x i8] c"%T %N\00"
@S.990 = private unnamed_addr constant [3 x i8] c", \00"
@S.991 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvm_Asm(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	store i16 2, i16* %i
	br label %L.1
L.1:
	%0 = load i16, i16* %i
	%1 = load %ast_AstNode*, %ast_AstNode** %node
	%2 = getelementptr %ast_AstNode, %ast_AstNode* %1, i32 0, i32 2
	%3 = load i16, i16* %2
	%4 = icmp ult i16 %0, %3
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = load i16, i16* %i
	%9 = zext i16 %8 to i32
	%10 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 %9
	%11 = load %ast_AstNode*, %ast_AstNode** %10
	%12 = call i8 @llvm_GenSub(%ast_AstNode* %11)
	%13 = load i16, i16* %i
	%14 = add i16 %13, 1
	store i16 %14, i16* %i
	br label %L.1
L.2:
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %15, i8 9)
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 9
	%18 = load %symb_SymbNode*, %symb_SymbNode** %17
	%19 = icmp ne %symb_SymbNode* %18, null
	br i1 %19, label %L.5, label %L.4
L.5:
	%20 = load i16, i16* @llvm_Tseqno
	%21 = load %ast_AstNode*, %ast_AstNode** %node
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 6
	store i16 %20, i16* %22
	%23 = load i16, i16* @llvm_Tseqno
	%24 = add i16 %23, 1
	store i16 %24, i16* @llvm_Tseqno
	%25 = getelementptr [6 x i8], [6 x i8]* @S.984
	%26 = bitcast [6 x i8]* %25 to [0 x i8]*
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %26, %ast_AstNode* %27)
	br label %L.4
L.4:
	%28 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%29 = getelementptr [5 x i8], [5 x i8]* @S.985
	%30 = bitcast [5 x i8]* %29 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %28, [0 x i8]* %30)
	%31 = load %ast_AstNode*, %ast_AstNode** %node
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 9
	%33 = load %symb_SymbNode*, %symb_SymbNode** %32
	call void @llvm_PRetvType(%symb_SymbNode* %33, i8 0)
	%34 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%35 = getelementptr [17 x i8], [17 x i8]* @S.986
	%36 = bitcast [17 x i8]* %35 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %34, [0 x i8]* %36)
	%37 = load %ast_AstNode*, %ast_AstNode** %node
	%38 = getelementptr %ast_AstNode, %ast_AstNode* %37, i32 0, i32 11
	%39 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %38, i32 0, i32 0
	%40 = load %ast_AstNode*, %ast_AstNode** %39
	call void @llvm_PStringCon(%ast_AstNode* %40)
	%41 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%42 = getelementptr [3 x i8], [3 x i8]* @S.987
	%43 = bitcast [3 x i8]* %42 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %41, [0 x i8]* %43)
	%44 = load %ast_AstNode*, %ast_AstNode** %node
	%45 = getelementptr %ast_AstNode, %ast_AstNode* %44, i32 0, i32 11
	%46 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %45, i32 0, i32 1
	%47 = load %ast_AstNode*, %ast_AstNode** %46
	call void @llvm_PStringCon(%ast_AstNode* %47)
	%48 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%49 = getelementptr [3 x i8], [3 x i8]* @S.988
	%50 = bitcast [3 x i8]* %49 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %48, [0 x i8]* %50)
	store i16 2, i16* %i
	%51 = load %ast_AstNode*, %ast_AstNode** %node
	%52 = getelementptr %ast_AstNode, %ast_AstNode* %51, i32 0, i32 2
	%53 = load i16, i16* %52
	%54 = load i16, i16* %i
	%55 = icmp ugt i16 %53, %54
	br i1 %55, label %L.7, label %L.6
L.7:
	br label %L.8
L.8:
	%56 = getelementptr [6 x i8], [6 x i8]* @S.989
	%57 = bitcast [6 x i8]* %56 to [0 x i8]*
	%58 = load %ast_AstNode*, %ast_AstNode** %node
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 11
	%60 = load i16, i16* %i
	%61 = zext i16 %60 to i32
	%62 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %59, i32 0, i32 %61
	%63 = load %ast_AstNode*, %ast_AstNode** %62
	call void @llvm_Print([0 x i8]* %57, %ast_AstNode* %63)
	%64 = load i16, i16* %i
	%65 = add i16 %64, 1
	store i16 %65, i16* %i
	%66 = load i16, i16* %i
	%67 = load %ast_AstNode*, %ast_AstNode** %node
	%68 = getelementptr %ast_AstNode, %ast_AstNode* %67, i32 0, i32 2
	%69 = load i16, i16* %68
	%70 = icmp uge i16 %66, %69
	br i1 %70, label %L.9, label %L.10
L.10:
	%71 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%72 = getelementptr [3 x i8], [3 x i8]* @S.990
	%73 = bitcast [3 x i8]* %72 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %71, [0 x i8]* %73)
	br label %L.8
L.9:
	br label %L.6
L.6:
	%74 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%75 = getelementptr [3 x i8], [3 x i8]* @S.991
	%76 = bitcast [3 x i8]* %75 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %74, [0 x i8]* %76)
	br label %return
return:
	ret void
}
define internal void @llvm_DclParmRetv(%symb_SymbNode* %ps$) nounwind {
L.0:
	%ps = alloca %symb_SymbNode*
	store %symb_SymbNode* %ps$, %symb_SymbNode** %ps
	%s = alloca %symb_SymbNode*
	%rs = alloca %symb_SymbNode*
	%0 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%1 = getelementptr %symb_SymbNode, %symb_SymbNode* %0, i32 0, i32 3
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %s
	br label %L.1
L.1:
	%3 = load %symb_SymbNode*, %symb_SymbNode** %s
	%4 = icmp ne %symb_SymbNode* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %symb_SymbNode*, %symb_SymbNode** %s
	%7 = getelementptr %symb_SymbNode, %symb_SymbNode* %6, i32 0, i32 1
	%8 = load %type_TypeNode*, %type_TypeNode** %7
	call void @llvm_DclType(%type_TypeNode* %8)
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 0
	%11 = load %symb_SymbNode*, %symb_SymbNode** %10
	store %symb_SymbNode* %11, %symb_SymbNode** %s
	br label %L.1
L.2:
	%12 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 4
	%14 = load %symb_SymbNode*, %symb_SymbNode** %13
	store %symb_SymbNode* %14, %symb_SymbNode** %rs
	br label %L.4
L.4:
	%15 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%16 = icmp ne %symb_SymbNode* %15, null
	%17 = xor i1 %16, true
	br i1 %17, label %L.5, label %L.6
L.6:
	%18 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 1
	%20 = load %type_TypeNode*, %type_TypeNode** %19
	call void @llvm_DclType(%type_TypeNode* %20)
	%21 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%22 = getelementptr %symb_SymbNode, %symb_SymbNode* %21, i32 0, i32 0
	%23 = load %symb_SymbNode*, %symb_SymbNode** %22
	store %symb_SymbNode* %23, %symb_SymbNode** %rs
	br label %L.4
L.5:
	br label %return
return:
	ret void
}
@S.992 = private unnamed_addr constant [6 x i8] c"%N = \00"
@S.993 = private unnamed_addr constant [6 x i8] c"tail \00"
@S.994 = private unnamed_addr constant [5 x i8] c"call\00"
@S.995 = private unnamed_addr constant [6 x i8] c" %0N(\00"
@S.996 = private unnamed_addr constant [5 x i8] c" %I(\00"
@S.997 = private unnamed_addr constant [6 x i8] c"%T %N\00"
@S.998 = private unnamed_addr constant [3 x i8] c", \00"
@S.999 = private unnamed_addr constant [3 x i8] c")\0A\00"
define internal void @llvm_Call(%ast_AstNode* %node$, i8 zeroext %indirect$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%indirect = alloca i8
	store i8 %indirect$, i8* %indirect
	%i = alloca i16
	store i16 0, i16* %i
	br label %L.1
L.1:
	%0 = load i16, i16* %i
	%1 = load %ast_AstNode*, %ast_AstNode** %node
	%2 = getelementptr %ast_AstNode, %ast_AstNode* %1, i32 0, i32 2
	%3 = load i16, i16* %2
	%4 = icmp ult i16 %0, %3
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = load i16, i16* %i
	%9 = zext i16 %8 to i32
	%10 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 %9
	%11 = load %ast_AstNode*, %ast_AstNode** %10
	%12 = call i8 @llvm_GenSub(%ast_AstNode* %11)
	%13 = load i16, i16* %i
	%14 = add i16 %13, 1
	store i16 %14, i16* %i
	br label %L.1
L.2:
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %15, i8 9)
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 9
	%18 = load %symb_SymbNode*, %symb_SymbNode** %17
	%19 = getelementptr %symb_SymbNode, %symb_SymbNode* %18, i32 0, i32 4
	%20 = load %symb_SymbNode*, %symb_SymbNode** %19
	%21 = icmp ne %symb_SymbNode* %20, null
	br i1 %21, label %L.5, label %L.4
L.5:
	%22 = load i16, i16* @llvm_Tseqno
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 6
	store i16 %22, i16* %24
	%25 = load i16, i16* @llvm_Tseqno
	%26 = add i16 %25, 1
	store i16 %26, i16* @llvm_Tseqno
	%27 = getelementptr [6 x i8], [6 x i8]* @S.992
	%28 = bitcast [6 x i8]* %27 to [0 x i8]*
	%29 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %28, %ast_AstNode* %29)
	br label %L.4
L.4:
	%30 = getelementptr %A.3, %A.3* @feature, i32 0, i32 5
	%31 = load i8, i8* %30
	%32 = icmp ne i8 %31, 0
	br i1 %32, label %L.7, label %L.6
L.7:
	%33 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%34 = getelementptr [6 x i8], [6 x i8]* @S.993
	%35 = bitcast [6 x i8]* %34 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %33, [0 x i8]* %35)
	br label %L.6
L.6:
	%36 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%37 = getelementptr [5 x i8], [5 x i8]* @S.994
	%38 = bitcast [5 x i8]* %37 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %36, [0 x i8]* %38)
	%39 = load %ast_AstNode*, %ast_AstNode** %node
	%40 = getelementptr %ast_AstNode, %ast_AstNode* %39, i32 0, i32 9
	%41 = load %symb_SymbNode*, %symb_SymbNode** %40
	%42 = getelementptr %symb_SymbNode, %symb_SymbNode* %41, i32 0, i32 4
	%43 = load %symb_SymbNode*, %symb_SymbNode** %42
	call void @llvm_PRetvType(%symb_SymbNode* %43, i8 0)
	%44 = load i8, i8* %indirect
	%45 = icmp ne i8 %44, 0
	br i1 %45, label %L.9, label %L.10
L.9:
	%46 = getelementptr [6 x i8], [6 x i8]* @S.995
	%47 = bitcast [6 x i8]* %46 to [0 x i8]*
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %47, %ast_AstNode* %48)
	store i16 1, i16* %i
	br label %L.8
L.10:
	%49 = getelementptr [5 x i8], [5 x i8]* @S.996
	%50 = bitcast [5 x i8]* %49 to [0 x i8]*
	%51 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %50, %ast_AstNode* %51)
	store i16 0, i16* %i
	br label %L.8
L.8:
	%52 = load %ast_AstNode*, %ast_AstNode** %node
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 2
	%54 = load i16, i16* %53
	%55 = load i16, i16* %i
	%56 = icmp ugt i16 %54, %55
	br i1 %56, label %L.12, label %L.11
L.12:
	br label %L.13
L.13:
	%57 = getelementptr [6 x i8], [6 x i8]* @S.997
	%58 = bitcast [6 x i8]* %57 to [0 x i8]*
	%59 = load %ast_AstNode*, %ast_AstNode** %node
	%60 = getelementptr %ast_AstNode, %ast_AstNode* %59, i32 0, i32 11
	%61 = load i16, i16* %i
	%62 = zext i16 %61 to i32
	%63 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %60, i32 0, i32 %62
	%64 = load %ast_AstNode*, %ast_AstNode** %63
	call void @llvm_Print([0 x i8]* %58, %ast_AstNode* %64)
	%65 = load i16, i16* %i
	%66 = add i16 %65, 1
	store i16 %66, i16* %i
	%67 = load i16, i16* %i
	%68 = load %ast_AstNode*, %ast_AstNode** %node
	%69 = getelementptr %ast_AstNode, %ast_AstNode* %68, i32 0, i32 2
	%70 = load i16, i16* %69
	%71 = icmp uge i16 %67, %70
	br i1 %71, label %L.14, label %L.15
L.15:
	%72 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%73 = getelementptr [3 x i8], [3 x i8]* @S.998
	%74 = bitcast [3 x i8]* %73 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %72, [0 x i8]* %74)
	br label %L.13
L.14:
	br label %L.11
L.11:
	%75 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%76 = getelementptr [3 x i8], [3 x i8]* @S.999
	%77 = bitcast [3 x i8]* %76 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %75, [0 x i8]* %77)
	%78 = load %ast_AstNode*, %ast_AstNode** %node
	%79 = getelementptr %ast_AstNode, %ast_AstNode* %78, i32 0, i32 9
	%80 = load %symb_SymbNode*, %symb_SymbNode** %79
	%81 = getelementptr %symb_SymbNode, %symb_SymbNode* %80, i32 0, i32 15
	%82 = load i8, i8* %81
	%83 = icmp ne i8 %82, 0
	br i1 %83, label %L.17, label %L.16
L.17:
	%84 = load %ast_AstNode*, %ast_AstNode** %node
	%85 = getelementptr %ast_AstNode, %ast_AstNode* %84, i32 0, i32 9
	%86 = load %symb_SymbNode*, %symb_SymbNode** %85
	%87 = getelementptr %symb_SymbNode, %symb_SymbNode* %86, i32 0, i32 23
	%88 = getelementptr [0 x i8], [0 x i8]* %87
	%89 = bitcast [0 x i8]* %88 to [0 x i8]*
	call void @lex_ErrorI(i8 47, [0 x i8]* %89)
	br label %L.16
L.16:
	br label %return
return:
	ret void
}
define internal void @llvm_DclProcSearch(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	%lhs = alloca %ast_AstNode*
	%rhs = alloca %ast_AstNode*
	%s = alloca %symb_SymbNode*
	%op = alloca i8
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = icmp ne %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast_AstNode*, %ast_AstNode** %node
	%3 = getelementptr %ast_AstNode, %ast_AstNode* %2, i32 0, i32 0
	%4 = load i8, i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 4, label %L.5
		i32 5, label %L.6
		i32 8, label %L.7
		i32 9, label %L.8
		i32 18, label %L.9
		i32 20, label %L.10
	]
L.5:
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 9
	%8 = load %symb_SymbNode*, %symb_SymbNode** %7
	store %symb_SymbNode* %8, %symb_SymbNode** %s
	%9 = load %symb_SymbNode*, %symb_SymbNode** %s
	%10 = getelementptr %symb_SymbNode, %symb_SymbNode* %9, i32 0, i32 1
	%11 = load %type_TypeNode*, %type_TypeNode** %10
	call void @llvm_DclType(%type_TypeNode* %11)
	%12 = load %symb_SymbNode*, %symb_SymbNode** %s
	%13 = getelementptr %symb_SymbNode, %symb_SymbNode* %12, i32 0, i32 14
	%14 = load i8, i8* %13
	%15 = icmp ne i8 %14, 1
	br i1 %15, label %L.12, label %L.11
L.12:
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclVar(%ast_AstNode* %16)
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 0
	store i8 0, i8* %18
	br label %L.11
L.11:
	br label %return
L.6:
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	%20 = getelementptr %ast_AstNode, %ast_AstNode* %19, i32 0, i32 9
	%21 = load %symb_SymbNode*, %symb_SymbNode** %20
	store %symb_SymbNode* %21, %symb_SymbNode** %s
	%22 = load %symb_SymbNode*, %symb_SymbNode** %s
	%23 = icmp ne %symb_SymbNode* %22, null
	br i1 %23, label %L.14, label %L.13
L.14:
	%24 = load %symb_SymbNode*, %symb_SymbNode** %s
	%25 = getelementptr %symb_SymbNode, %symb_SymbNode* %24, i32 0, i32 14
	store i8 2, i8* %25
	%26 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclCon(%ast_AstNode* %26)
	br label %L.13
L.13:
	%27 = load %ast_AstNode*, %ast_AstNode** %node
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 0
	store i8 0, i8* %28
	br label %return
L.7:
	%29 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclString(%ast_AstNode* %29)
	br label %return
L.8:
	%30 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclAggregate(%ast_AstNode* %30)
	br label %return
L.9:
	%ps = alloca %symb_SymbNode*
	%31 = load %ast_AstNode*, %ast_AstNode** %node
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 9
	%33 = load %symb_SymbNode*, %symb_SymbNode** %32
	store %symb_SymbNode* %33, %symb_SymbNode** %ps
	%34 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%35 = getelementptr %symb_SymbNode, %symb_SymbNode* %34, i32 0, i32 14
	%36 = load i8, i8* %35
	%37 = icmp eq i8 %36, 5
	br i1 %37, label %L.15, label %L.16
L.15:
	%38 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%39 = getelementptr %symb_SymbNode, %symb_SymbNode* %38, i32 0, i32 22
	%40 = load i8, i8* %39
	%41 = icmp ne i8 %40, 0
	%42 = xor i1 %41, true
	br label %L.16
L.16:
	%43 = phi i1 [ false, %L.9 ], [ %42, %L.15 ]
	br i1 %43, label %L.18, label %L.17
L.18:
	%44 = load %symb_SymbNode*, %symb_SymbNode** %ps
	call void @llvm_DclParmRetv(%symb_SymbNode* %44)
	%45 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclProc(%ast_AstNode* %45, i8 0)
	%46 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %46, i8 10)
	%47 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%48 = getelementptr %symb_SymbNode, %symb_SymbNode* %47, i32 0, i32 22
	store i8 1, i8* %48
	br label %L.17
L.17:
	br label %L.4
L.10:
	br label %return
L.3:
	br label %L.4
L.4:
	store i16 0, i16* %i
	br label %L.19
L.19:
	%49 = load i16, i16* %i
	%50 = load %ast_AstNode*, %ast_AstNode** %node
	%51 = getelementptr %ast_AstNode, %ast_AstNode* %50, i32 0, i32 2
	%52 = load i16, i16* %51
	%53 = icmp ult i16 %49, %52
	%54 = xor i1 %53, true
	br i1 %54, label %L.20, label %L.21
L.21:
	%55 = load %ast_AstNode*, %ast_AstNode** %node
	%56 = getelementptr %ast_AstNode, %ast_AstNode* %55, i32 0, i32 11
	%57 = load i16, i16* %i
	%58 = zext i16 %57 to i32
	%59 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %56, i32 0, i32 %58
	%60 = load %ast_AstNode*, %ast_AstNode** %59
	call void @llvm_DclProcSearch(%ast_AstNode* %60)
	%61 = load i16, i16* %i
	%62 = add i16 %61, 1
	store i16 %62, i16* %i
	br label %L.19
L.20:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.1000 = private unnamed_addr constant [14 x i8] c" alwaysinline\00"
@S.1001 = private unnamed_addr constant [10 x i8] c" noinline\00"
@S.1002 = private unnamed_addr constant [9 x i8] c" minsize\00"
@S.1003 = private unnamed_addr constant [9 x i8] c" optsize\00"
@S.1004 = private unnamed_addr constant [10 x i8] c" nounwind\00"
@S.1005 = private unnamed_addr constant [4 x i8] c" {\0A\00"
@S.1006 = private unnamed_addr constant [11 x i8] c" = alloca \00"
@S.1007 = private unnamed_addr constant [8 x i8] c"\09store \00"
@S.1008 = private unnamed_addr constant [3 x i8] c"* \00"
@S.1009 = private unnamed_addr constant [3 x i8] c"\09%\00"
@S.1010 = private unnamed_addr constant [11 x i8] c" = alloca \00"
@S.1011 = private unnamed_addr constant [8 x i8] c"\09store \00"
@S.1012 = private unnamed_addr constant [4 x i8] c"$, \00"
@S.1013 = private unnamed_addr constant [3 x i8] c"* \00"
@S.1014 = private unnamed_addr constant [18 x i8] c"\09br label %return\00"
@S.1015 = private unnamed_addr constant [9 x i8] c"return:\0A\00"
@S.1016 = private unnamed_addr constant [9 x i8] c" = load \00"
@S.1017 = private unnamed_addr constant [3 x i8] c", \00"
@S.1018 = private unnamed_addr constant [3 x i8] c"* \00"
@S.1019 = private unnamed_addr constant [6 x i8] c"\09%mrv\00"
@S.1020 = private unnamed_addr constant [15 x i8] c" = insertvalue\00"
@S.1021 = private unnamed_addr constant [7 x i8] c" undef\00"
@S.1022 = private unnamed_addr constant [6 x i8] c" %mrv\00"
@S.1023 = private unnamed_addr constant [6 x i8] c"\09ret \00"
@S.1024 = private unnamed_addr constant [6 x i8] c" %mrv\00"
@S.1025 = private unnamed_addr constant [6 x i8] c"\09ret \00"
@S.1026 = private unnamed_addr constant [10 x i8] c"\09ret void\00"
@S.1027 = private unnamed_addr constant [3 x i8] c"}\0A\00"
define internal void @llvm_Procedure(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%s = alloca %symb_SymbNode*
	%ps = alloca %symb_SymbNode*
	%rs = alloca %symb_SymbNode*
	%i = alloca i16
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 9
	%2 = load %symb_SymbNode*, %symb_SymbNode** %1
	store %symb_SymbNode* %2, %symb_SymbNode** %ps
	%3 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%4 = icmp ne %symb_SymbNode* %3, null
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %symb_SymbNode*, %symb_SymbNode** %ps
	call void @llvm_DclParmRetv(%symb_SymbNode* %5)
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 11
	%8 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %7, i32 0, i32 0
	%9 = load %ast_AstNode*, %ast_AstNode** %8
	call void @llvm_DclProcSearch(%ast_AstNode* %9)
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclProc(%ast_AstNode* %10, i8 1)
	%11 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%12 = getelementptr %symb_SymbNode, %symb_SymbNode* %11, i32 0, i32 14
	%13 = load i8, i8* %12
	%14 = zext i8 %13 to i32
	switch i32 %14, label %L.3 [
		i32 7, label %L.5
		i32 8, label %L.6
	]
L.5:
	%15 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%16 = getelementptr [14 x i8], [14 x i8]* @S.1000
	%17 = bitcast [14 x i8]* %16 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %15, [0 x i8]* %17)
	br label %L.4
L.6:
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = getelementptr [10 x i8], [10 x i8]* @S.1001
	%20 = bitcast [10 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	br label %L.4
L.3:
	br label %L.4
L.4:
	%21 = getelementptr %A.3, %A.3* @feature, i32 0, i32 0
	%22 = load i8, i8* %21
	%23 = icmp ne i8 %22, 0
	br i1 %23, label %L.8, label %L.7
L.8:
	%24 = getelementptr %A.3, %A.3* @feature, i32 0, i32 0
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 2
	br i1 %26, label %L.10, label %L.9
L.10:
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = getelementptr [9 x i8], [9 x i8]* @S.1002
	%29 = bitcast [9 x i8]* %28 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %27, [0 x i8]* %29)
	br label %L.9
L.9:
	%30 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%31 = getelementptr [9 x i8], [9 x i8]* @S.1003
	%32 = bitcast [9 x i8]* %31 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %30, [0 x i8]* %32)
	br label %L.7
L.7:
	%33 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%34 = getelementptr [10 x i8], [10 x i8]* @S.1004
	%35 = bitcast [10 x i8]* %34 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %33, [0 x i8]* %35)
	%36 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%37 = getelementptr %symb_SymbNode, %symb_SymbNode* %36, i32 0, i32 7
	%38 = load %symb_SymbNode*, %symb_SymbNode** %37
	call void @llvm_Section(%symb_SymbNode* %38, i8 0)
	%39 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%40 = getelementptr [4 x i8], [4 x i8]* @S.1005
	%41 = bitcast [4 x i8]* %40 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %39, [0 x i8]* %41)
	%42 = load i16, i16* @llvm_Pseqno
	%43 = add i16 %42, 1
	store i16 %43, i16* @llvm_Pseqno
	store i16 1, i16* @llvm_Tseqno
	store i16 0, i16* @llvm_Lseqno
	%44 = load i16, i16* @llvm_Lseqno
	call void @llvm_Label(i16 %44)
	%45 = load i16, i16* @llvm_Lseqno
	%46 = add i16 %45, 1
	store i16 %46, i16* @llvm_Lseqno
	%47 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%48 = getelementptr %symb_SymbNode, %symb_SymbNode* %47, i32 0, i32 4
	%49 = load %symb_SymbNode*, %symb_SymbNode** %48
	store %symb_SymbNode* %49, %symb_SymbNode** %rs
	store i16 0, i16* %i
	br label %L.11
L.11:
	%50 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%51 = icmp ne %symb_SymbNode* %50, null
	%52 = xor i1 %51, true
	br i1 %52, label %L.12, label %L.13
L.13:
	%53 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %53, i8 9)
	%54 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%55 = getelementptr %symb_SymbNode, %symb_SymbNode* %54, i32 0, i32 16
	%56 = load i8, i8* %55
	%57 = icmp ne i8 %56, 0
	br i1 %57, label %L.15, label %L.16
L.15:
	%58 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%59 = getelementptr %symb_SymbNode, %symb_SymbNode* %58, i32 0, i32 23
	%60 = getelementptr [0 x i8], [0 x i8]* %59
	%61 = bitcast [0 x i8]* %60 to [0 x i8]*
	call void @llvm_PLocalName([0 x i8]* %61)
	br label %L.14
L.16:
	%62 = load i16, i16* %i
	call void @llvm_PRetValName(i16 %62)
	br label %L.14
L.14:
	%63 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%64 = getelementptr [11 x i8], [11 x i8]* @S.1006
	%65 = bitcast [11 x i8]* %64 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %63, [0 x i8]* %65)
	%66 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%67 = getelementptr %symb_SymbNode, %symb_SymbNode* %66, i32 0, i32 1
	%68 = load %type_TypeNode*, %type_TypeNode** %67
	call void @llvm_PType(%type_TypeNode* %68)
	%69 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %69)
	%70 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%71 = getelementptr %symb_SymbNode, %symb_SymbNode* %70, i32 0, i32 16
	%72 = load i8, i8* %71
	%73 = icmp ne i8 %72, 0
	br i1 %73, label %L.18, label %L.17
L.18:
	%74 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%75 = getelementptr [8 x i8], [8 x i8]* @S.1007
	%76 = bitcast [8 x i8]* %75 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %74, [0 x i8]* %76)
	%77 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%78 = getelementptr %symb_SymbNode, %symb_SymbNode* %77, i32 0, i32 1
	%79 = load %type_TypeNode*, %type_TypeNode** %78
	call void @llvm_PType(%type_TypeNode* %79)
	%80 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %80, i8 32)
	%81 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%82 = getelementptr %symb_SymbNode, %symb_SymbNode* %81, i32 0, i32 1
	%83 = load %type_TypeNode*, %type_TypeNode** %82
	call void @llvm_DefaultInitializer(%type_TypeNode* %83)
	%84 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %84, i8 44)
	%85 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%86 = getelementptr %symb_SymbNode, %symb_SymbNode* %85, i32 0, i32 1
	%87 = load %type_TypeNode*, %type_TypeNode** %86
	call void @llvm_PType(%type_TypeNode* %87)
	%88 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%89 = getelementptr [3 x i8], [3 x i8]* @S.1008
	%90 = bitcast [3 x i8]* %89 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %88, [0 x i8]* %90)
	%91 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%92 = getelementptr %symb_SymbNode, %symb_SymbNode* %91, i32 0, i32 23
	%93 = getelementptr [0 x i8], [0 x i8]* %92
	%94 = bitcast [0 x i8]* %93 to [0 x i8]*
	call void @llvm_PLocalName([0 x i8]* %94)
	%95 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %95)
	br label %L.17
L.17:
	%96 = load i16, i16* %i
	%97 = add i16 %96, 1
	store i16 %97, i16* %i
	%98 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%99 = getelementptr %symb_SymbNode, %symb_SymbNode* %98, i32 0, i32 0
	%100 = load %symb_SymbNode*, %symb_SymbNode** %99
	store %symb_SymbNode* %100, %symb_SymbNode** %rs
	br label %L.11
L.12:
	%101 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%102 = getelementptr %symb_SymbNode, %symb_SymbNode* %101, i32 0, i32 3
	%103 = load %symb_SymbNode*, %symb_SymbNode** %102
	store %symb_SymbNode* %103, %symb_SymbNode** %s
	br label %L.19
L.19:
	%104 = load %symb_SymbNode*, %symb_SymbNode** %s
	%105 = icmp ne %symb_SymbNode* %104, null
	%106 = xor i1 %105, true
	br i1 %106, label %L.20, label %L.21
L.21:
	%107 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%108 = getelementptr [3 x i8], [3 x i8]* @S.1009
	%109 = bitcast [3 x i8]* %108 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %107, [0 x i8]* %109)
	%110 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%111 = load %symb_SymbNode*, %symb_SymbNode** %s
	%112 = getelementptr %symb_SymbNode, %symb_SymbNode* %111, i32 0, i32 23
	%113 = getelementptr [0 x i8], [0 x i8]* %112
	%114 = bitcast [0 x i8]* %113 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %110, [0 x i8]* %114)
	%115 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%116 = getelementptr [11 x i8], [11 x i8]* @S.1010
	%117 = bitcast [11 x i8]* %116 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %115, [0 x i8]* %117)
	%118 = load %symb_SymbNode*, %symb_SymbNode** %s
	%119 = getelementptr %symb_SymbNode, %symb_SymbNode* %118, i32 0, i32 1
	%120 = load %type_TypeNode*, %type_TypeNode** %119
	call void @llvm_PType(%type_TypeNode* %120)
	%121 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %121)
	%122 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%123 = getelementptr [8 x i8], [8 x i8]* @S.1011
	%124 = bitcast [8 x i8]* %123 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %122, [0 x i8]* %124)
	%125 = load %symb_SymbNode*, %symb_SymbNode** %s
	%126 = getelementptr %symb_SymbNode, %symb_SymbNode* %125, i32 0, i32 1
	%127 = load %type_TypeNode*, %type_TypeNode** %126
	call void @llvm_PType(%type_TypeNode* %127)
	%128 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %128, i8 32)
	%129 = load %symb_SymbNode*, %symb_SymbNode** %s
	%130 = getelementptr %symb_SymbNode, %symb_SymbNode* %129, i32 0, i32 23
	%131 = getelementptr [0 x i8], [0 x i8]* %130
	%132 = bitcast [0 x i8]* %131 to [0 x i8]*
	call void @llvm_PLocalName([0 x i8]* %132)
	%133 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%134 = getelementptr [4 x i8], [4 x i8]* @S.1012
	%135 = bitcast [4 x i8]* %134 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %133, [0 x i8]* %135)
	%136 = load %symb_SymbNode*, %symb_SymbNode** %s
	%137 = getelementptr %symb_SymbNode, %symb_SymbNode* %136, i32 0, i32 1
	%138 = load %type_TypeNode*, %type_TypeNode** %137
	call void @llvm_PType(%type_TypeNode* %138)
	%139 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%140 = getelementptr [3 x i8], [3 x i8]* @S.1013
	%141 = bitcast [3 x i8]* %140 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %139, [0 x i8]* %141)
	%142 = load %symb_SymbNode*, %symb_SymbNode** %s
	%143 = getelementptr %symb_SymbNode, %symb_SymbNode* %142, i32 0, i32 23
	%144 = getelementptr [0 x i8], [0 x i8]* %143
	%145 = bitcast [0 x i8]* %144 to [0 x i8]*
	call void @llvm_PLocalName([0 x i8]* %145)
	%146 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %146)
	%147 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%148 = load i8, i8* %147
	%149 = icmp ne i8 %148, 0
	br i1 %149, label %L.23, label %L.22
L.23:
	%150 = load %symb_SymbNode*, %symb_SymbNode** %s
	%151 = call i16 @llvmdb_DefVar(%symb_SymbNode* %150)
	br label %L.22
L.22:
	%152 = load %symb_SymbNode*, %symb_SymbNode** %s
	%153 = getelementptr %symb_SymbNode, %symb_SymbNode* %152, i32 0, i32 0
	%154 = load %symb_SymbNode*, %symb_SymbNode** %153
	store %symb_SymbNode* %154, %symb_SymbNode** %s
	br label %L.19
L.20:
	%155 = load %ast_AstNode*, %ast_AstNode** %node
	%156 = getelementptr %ast_AstNode, %ast_AstNode* %155, i32 0, i32 11
	%157 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %156, i32 0, i32 0
	%158 = load %ast_AstNode*, %ast_AstNode** %157
	%159 = call i8 @llvm_GenSub(%ast_AstNode* %158)
	%160 = icmp ne i8 %159, 0
	%161 = xor i1 %160, true
	br i1 %161, label %L.25, label %L.24
L.25:
	%162 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%163 = getelementptr [18 x i8], [18 x i8]* @S.1014
	%164 = bitcast [18 x i8]* %163 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %162, [0 x i8]* %164)
	%165 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %165)
	br label %L.24
L.24:
	%166 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%167 = getelementptr [9 x i8], [9 x i8]* @S.1015
	%168 = bitcast [9 x i8]* %167 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %166, [0 x i8]* %168)
	%169 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%170 = getelementptr %symb_SymbNode, %symb_SymbNode* %169, i32 0, i32 4
	%171 = load %symb_SymbNode*, %symb_SymbNode** %170
	store %symb_SymbNode* %171, %symb_SymbNode** %rs
	%172 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%173 = icmp ne %symb_SymbNode* %172, null
	br i1 %173, label %L.27, label %L.28
L.27:
	store i16 0, i16* %i
	br label %L.29
L.29:
	%174 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%175 = icmp ne %symb_SymbNode* %174, null
	%176 = xor i1 %175, true
	br i1 %176, label %L.30, label %L.31
L.31:
	%177 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %177, i8 9)
	%178 = load i16, i16* @llvm_Tseqno
	%179 = load i16, i16* %i
	%180 = add i16 %178, %179
	call void @llvm_PTempName(i16 %180)
	%181 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%182 = getelementptr [9 x i8], [9 x i8]* @S.1016
	%183 = bitcast [9 x i8]* %182 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %181, [0 x i8]* %183)
	%184 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%185 = load i8, i8* %184
	%186 = icmp ne i8 %185, 0
	br i1 %186, label %L.33, label %L.32
L.33:
	%187 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%188 = getelementptr %symb_SymbNode, %symb_SymbNode* %187, i32 0, i32 1
	%189 = load %type_TypeNode*, %type_TypeNode** %188
	call void @llvm_PType(%type_TypeNode* %189)
	%190 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%191 = getelementptr [3 x i8], [3 x i8]* @S.1017
	%192 = bitcast [3 x i8]* %191 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %190, [0 x i8]* %192)
	br label %L.32
L.32:
	%193 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%194 = getelementptr %symb_SymbNode, %symb_SymbNode* %193, i32 0, i32 1
	%195 = load %type_TypeNode*, %type_TypeNode** %194
	call void @llvm_PType(%type_TypeNode* %195)
	%196 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%197 = getelementptr [3 x i8], [3 x i8]* @S.1018
	%198 = bitcast [3 x i8]* %197 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %196, [0 x i8]* %198)
	%199 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%200 = getelementptr %symb_SymbNode, %symb_SymbNode* %199, i32 0, i32 23
	%201 = getelementptr [0 x i8], [0 x i8]* %200
	%202 = bitcast [0 x i8]* %201 to [0 x i8]*
	%203 = call i8 @symb_IsAnon([0 x i8]* %202)
	%204 = icmp ne i8 %203, 0
	br i1 %204, label %L.35, label %L.36
L.35:
	%205 = load i16, i16* %i
	call void @llvm_PRetValName(i16 %205)
	br label %L.34
L.36:
	%206 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%207 = getelementptr %symb_SymbNode, %symb_SymbNode* %206, i32 0, i32 23
	%208 = getelementptr [0 x i8], [0 x i8]* %207
	%209 = bitcast [0 x i8]* %208 to [0 x i8]*
	call void @llvm_PLocalName([0 x i8]* %209)
	br label %L.34
L.34:
	%210 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %210)
	%211 = load i16, i16* %i
	%212 = add i16 %211, 1
	store i16 %212, i16* %i
	%213 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%214 = getelementptr %symb_SymbNode, %symb_SymbNode* %213, i32 0, i32 0
	%215 = load %symb_SymbNode*, %symb_SymbNode** %214
	store %symb_SymbNode* %215, %symb_SymbNode** %rs
	br label %L.29
L.30:
	%216 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%217 = getelementptr %symb_SymbNode, %symb_SymbNode* %216, i32 0, i32 4
	%218 = load %symb_SymbNode*, %symb_SymbNode** %217
	store %symb_SymbNode* %218, %symb_SymbNode** %rs
	store i16 0, i16* %i
	%219 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%220 = getelementptr %symb_SymbNode, %symb_SymbNode* %219, i32 0, i32 0
	%221 = load %symb_SymbNode*, %symb_SymbNode** %220
	%222 = icmp ne %symb_SymbNode* %221, null
	br i1 %222, label %L.38, label %L.39
L.38:
	br label %L.40
L.40:
	%223 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%224 = getelementptr [6 x i8], [6 x i8]* @S.1019
	%225 = bitcast [6 x i8]* %224 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %223, [0 x i8]* %225)
	%226 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%227 = load i16, i16* %i
	%228 = zext i16 %227 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %226, i32 %228)
	%229 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%230 = getelementptr [15 x i8], [15 x i8]* @S.1020
	%231 = bitcast [15 x i8]* %230 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %229, [0 x i8]* %231)
	%232 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%233 = getelementptr %symb_SymbNode, %symb_SymbNode* %232, i32 0, i32 4
	%234 = load %symb_SymbNode*, %symb_SymbNode** %233
	call void @llvm_PRetvType(%symb_SymbNode* %234, i8 0)
	%235 = load i16, i16* %i
	%236 = icmp eq i16 %235, 0
	br i1 %236, label %L.43, label %L.44
L.43:
	%237 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%238 = getelementptr [7 x i8], [7 x i8]* @S.1021
	%239 = bitcast [7 x i8]* %238 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %237, [0 x i8]* %239)
	br label %L.42
L.44:
	%240 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%241 = getelementptr [6 x i8], [6 x i8]* @S.1022
	%242 = bitcast [6 x i8]* %241 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %240, [0 x i8]* %242)
	%243 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%244 = load i16, i16* %i
	%245 = zext i16 %244 to i32
	%246 = sub i32 %245, 1
	call void @bout_BufIO_uint(%bout_BufIO* %243, i32 %246)
	br label %L.42
L.42:
	%247 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %247, i8 44)
	%248 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%249 = getelementptr %symb_SymbNode, %symb_SymbNode* %248, i32 0, i32 1
	%250 = load %type_TypeNode*, %type_TypeNode** %249
	call void @llvm_PType(%type_TypeNode* %250)
	%251 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %251, i8 32)
	%252 = load i16, i16* @llvm_Tseqno
	%253 = load i16, i16* %i
	%254 = add i16 %252, %253
	call void @llvm_PTempName(i16 %254)
	%255 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %255, i8 44)
	%256 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%257 = load i16, i16* %i
	%258 = zext i16 %257 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %256, i32 %258)
	%259 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %259)
	%260 = load i16, i16* %i
	%261 = add i16 %260, 1
	store i16 %261, i16* %i
	%262 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%263 = getelementptr %symb_SymbNode, %symb_SymbNode* %262, i32 0, i32 0
	%264 = load %symb_SymbNode*, %symb_SymbNode** %263
	store %symb_SymbNode* %264, %symb_SymbNode** %rs
	%265 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%266 = icmp eq %symb_SymbNode* %265, null
	br i1 %266, label %L.41, label %L.45
L.45:
	br label %L.40
L.41:
	%267 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%268 = getelementptr [6 x i8], [6 x i8]* @S.1023
	%269 = bitcast [6 x i8]* %268 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %267, [0 x i8]* %269)
	%270 = load %symb_SymbNode*, %symb_SymbNode** %ps
	%271 = getelementptr %symb_SymbNode, %symb_SymbNode* %270, i32 0, i32 4
	%272 = load %symb_SymbNode*, %symb_SymbNode** %271
	call void @llvm_PRetvType(%symb_SymbNode* %272, i8 0)
	%273 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%274 = getelementptr [6 x i8], [6 x i8]* @S.1024
	%275 = bitcast [6 x i8]* %274 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %273, [0 x i8]* %275)
	%276 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%277 = load i16, i16* %i
	%278 = zext i16 %277 to i32
	%279 = sub i32 %278, 1
	call void @bout_BufIO_uint(%bout_BufIO* %276, i32 %279)
	br label %L.37
L.39:
	%280 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%281 = getelementptr [6 x i8], [6 x i8]* @S.1025
	%282 = bitcast [6 x i8]* %281 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %280, [0 x i8]* %282)
	%283 = load %symb_SymbNode*, %symb_SymbNode** %rs
	%284 = getelementptr %symb_SymbNode, %symb_SymbNode* %283, i32 0, i32 1
	%285 = load %type_TypeNode*, %type_TypeNode** %284
	call void @llvm_PType(%type_TypeNode* %285)
	%286 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %286, i8 32)
	%287 = load i16, i16* @llvm_Tseqno
	%288 = load i16, i16* %i
	%289 = add i16 %287, %288
	call void @llvm_PTempName(i16 %289)
	br label %L.37
L.37:
	br label %L.26
L.28:
	%290 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%291 = getelementptr [10 x i8], [10 x i8]* @S.1026
	%292 = bitcast [10 x i8]* %291 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %290, [0 x i8]* %292)
	br label %L.26
L.26:
	%293 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %293)
	%294 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%295 = getelementptr [3 x i8], [3 x i8]* @S.1027
	%296 = bitcast [3 x i8]* %295 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %294, [0 x i8]* %296)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.1028 = private unnamed_addr constant [7 x i8] c"\09%N = \00"
@S.1029 = private unnamed_addr constant [13 x i8] c" %T %0N, %1N\00"
define internal zeroext i8 @llvm_BinaryOp(%ast_AstNode* %node$, [0 x i8]* %op$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%op = alloca [0 x i8]*
	store [0 x i8]* %op$, [0 x i8]** %op
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 11
	%7 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %6, i32 0, i32 1
	%8 = load %ast_AstNode*, %ast_AstNode** %7
	%9 = call i8 @llvm_GenSub(%ast_AstNode* %8)
	%10 = load i16, i16* @llvm_Tseqno
	%11 = load %ast_AstNode*, %ast_AstNode** %node
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 6
	store i16 %10, i16* %12
	%13 = load i16, i16* @llvm_Tseqno
	%14 = add i16 %13, 1
	store i16 %14, i16* @llvm_Tseqno
	%15 = getelementptr [7 x i8], [7 x i8]* @S.1028
	%16 = bitcast [7 x i8]* %15 to [0 x i8]*
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %16, %ast_AstNode* %17)
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = load [0 x i8]*, [0 x i8]** %op
	%20 = bitcast [0 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	%21 = getelementptr [13 x i8], [13 x i8]* @S.1029
	%22 = bitcast [13 x i8]* %21 to [0 x i8]*
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %22, %ast_AstNode* %23)
	%24 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %24)
	store i8 0, i8* %rv.0
	br label %return
return:
	%25 = load i8, i8* %rv.0
	ret i8 %25
}
define internal zeroext i8 @llvm_SignedBinaryOp(%ast_AstNode* %node$, [0 x i8]* %uop$, [0 x i8]* %sop$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%uop = alloca [0 x i8]*
	store [0 x i8]* %uop$, [0 x i8]** %uop
	%sop = alloca [0 x i8]*
	store [0 x i8]* %sop$, [0 x i8]** %sop
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 8
	%2 = load %type_TypeNode*, %type_TypeNode** %1
	%3 = getelementptr %type_TypeNode, %type_TypeNode* %2, i32 0, i32 16
	%4 = load i8, i8* %3
	%5 = icmp eq i8 %4, 3
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = load [0 x i8]*, [0 x i8]** %sop
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	%9 = call i8 @llvm_BinaryOp(%ast_AstNode* %6, [0 x i8]* %8)
	store i8 %9, i8* %rv.0
	br label %return
L.3:
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	%11 = load [0 x i8]*, [0 x i8]** %uop
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = call i8 @llvm_BinaryOp(%ast_AstNode* %10, [0 x i8]* %12)
	store i8 %13, i8* %rv.0
	br label %return
L.1:
	br label %return
return:
	%14 = load i8, i8* %rv.0
	ret i8 %14
}
@S.1030 = private unnamed_addr constant [7 x i8] c"\09%N = \00"
@S.1031 = private unnamed_addr constant [14 x i8] c" %0T %0N, %1N\00"
define internal zeroext i8 @llvm_CompareOp(%ast_AstNode* %node$, [0 x i8]* %op$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%op = alloca [0 x i8]*
	store [0 x i8]* %op$, [0 x i8]** %op
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 11
	%7 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %6, i32 0, i32 1
	%8 = load %ast_AstNode*, %ast_AstNode** %7
	%9 = call i8 @llvm_GenSub(%ast_AstNode* %8)
	%10 = load i16, i16* @llvm_Tseqno
	%11 = load %ast_AstNode*, %ast_AstNode** %node
	%12 = getelementptr %ast_AstNode, %ast_AstNode* %11, i32 0, i32 6
	store i16 %10, i16* %12
	%13 = load i16, i16* @llvm_Tseqno
	%14 = add i16 %13, 1
	store i16 %14, i16* @llvm_Tseqno
	%15 = getelementptr [7 x i8], [7 x i8]* @S.1030
	%16 = bitcast [7 x i8]* %15 to [0 x i8]*
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %16, %ast_AstNode* %17)
	%18 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%19 = load [0 x i8]*, [0 x i8]** %op
	%20 = bitcast [0 x i8]* %19 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %18, [0 x i8]* %20)
	%21 = getelementptr [14 x i8], [14 x i8]* @S.1031
	%22 = bitcast [14 x i8]* %21 to [0 x i8]*
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %22, %ast_AstNode* %23)
	%24 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %24)
	store i8 1, i8* %rv.0
	br label %return
return:
	%25 = load i8, i8* %rv.0
	ret i8 %25
}
@S.1032 = private unnamed_addr constant [7 x i8] c"\09%N = \00"
@S.1033 = private unnamed_addr constant [15 x i8] c" %0T %0N to %T\00"
define internal void @llvm_ChangeSize(%ast_AstNode* %node$, [0 x i8]* %op$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%op = alloca [0 x i8]*
	store [0 x i8]* %op$, [0 x i8]** %op
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = load i16, i16* @llvm_Tseqno
	%6 = load %ast_AstNode*, %ast_AstNode** %node
	%7 = getelementptr %ast_AstNode, %ast_AstNode* %6, i32 0, i32 6
	store i16 %5, i16* %7
	%8 = load i16, i16* @llvm_Tseqno
	%9 = add i16 %8, 1
	store i16 %9, i16* @llvm_Tseqno
	%10 = getelementptr [7 x i8], [7 x i8]* @S.1032
	%11 = bitcast [7 x i8]* %10 to [0 x i8]*
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %11, %ast_AstNode* %12)
	%13 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%14 = load [0 x i8]*, [0 x i8]** %op
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %13, [0 x i8]* %15)
	%16 = getelementptr [15 x i8], [15 x i8]* @S.1033
	%17 = bitcast [15 x i8]* %16 to [0 x i8]*
	%18 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %17, %ast_AstNode* %18)
	%19 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %19)
	br label %return
return:
	ret void
}
define internal void @llvm_FieldExtract(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%tree = alloca %ast_AstNode*
	%mask = alloca %ast_AstNode*
	%shft = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 10
	%2 = load i64, i64* %1
	%3 = trunc i64 %2 to i32
	%4 = zext i32 %3 to i64
	%5 = shl i64 1, %4
	%6 = sub i64 %5, 1
	%7 = call %ast_AstNode* @ast_ConstW(i64 %6)
	store %ast_AstNode* %7, %ast_AstNode** %mask
	store %ast_AstNode* null, %ast_AstNode** %shft
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	store %ast_AstNode* %8, %ast_AstNode** %tree
	br label %L.1
L.1:
	%9 = load %ast_AstNode*, %ast_AstNode** %tree
	%10 = getelementptr %ast_AstNode, %ast_AstNode* %9, i32 0, i32 0
	%11 = load i8, i8* %10
	%12 = icmp eq i8 %11, 11
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = load %ast_AstNode*, %ast_AstNode** %shft
	%15 = icmp eq %ast_AstNode* %14, null
	br i1 %15, label %L.5, label %L.6
L.5:
	%16 = load %ast_AstNode*, %ast_AstNode** %tree
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 11
	%18 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %17, i32 0, i32 1
	%19 = load %ast_AstNode*, %ast_AstNode** %18
	store %ast_AstNode* %19, %ast_AstNode** %shft
	br label %L.4
L.6:
	%20 = load %ast_AstNode*, %ast_AstNode** %shft
	%21 = load %ast_AstNode*, %ast_AstNode** %tree
	%22 = getelementptr %ast_AstNode, %ast_AstNode* %21, i32 0, i32 11
	%23 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %22, i32 0, i32 1
	%24 = load %ast_AstNode*, %ast_AstNode** %23
	%25 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%26 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %20, %ast_AstNode* %24, %type_TypeNode* %25)
	store %ast_AstNode* %26, %ast_AstNode** %shft
	br label %L.4
L.4:
	%27 = load %ast_AstNode*, %ast_AstNode** %tree
	%28 = getelementptr %ast_AstNode, %ast_AstNode* %27, i32 0, i32 11
	%29 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %28, i32 0, i32 0
	%30 = load %ast_AstNode*, %ast_AstNode** %29
	store %ast_AstNode* %30, %ast_AstNode** %tree
	br label %L.1
L.2:
	%31 = load %ast_AstNode*, %ast_AstNode** %tree
	%32 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%33 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %31, %type_TypeNode* %32)
	store %ast_AstNode* %33, %ast_AstNode** %tree
	%34 = load %ast_AstNode*, %ast_AstNode** %shft
	%35 = getelementptr %ast_AstNode, %ast_AstNode* %34, i32 0, i32 0
	%36 = load i8, i8* %35
	%37 = icmp ne i8 %36, 6
	br i1 %37, label %L.8, label %L.7
L.7:
	%38 = load %ast_AstNode*, %ast_AstNode** %shft
	%39 = getelementptr %ast_AstNode, %ast_AstNode* %38, i32 0, i32 10
	%40 = load i64, i64* %39
	%41 = icmp ne i64 %40, 0
	br label %L.8
L.8:
	%42 = phi i1 [ true, %L.2 ], [ %41, %L.7 ]
	br i1 %42, label %L.10, label %L.9
L.10:
	%43 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%44 = load %ast_AstNode*, %ast_AstNode** %tree
	%45 = load %ast_AstNode*, %ast_AstNode** %shft
	%46 = call %ast_AstNode* @ast_New2(i8 64, %type_TypeNode* %43, %ast_AstNode* %44, %ast_AstNode* %45)
	store %ast_AstNode* %46, %ast_AstNode** %tree
	br label %L.9
L.9:
	%47 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%48 = load %ast_AstNode*, %ast_AstNode** %tree
	%49 = load %ast_AstNode*, %ast_AstNode** %mask
	%50 = call %ast_AstNode* @ast_New2(i8 51, %type_TypeNode* %47, %ast_AstNode* %48, %ast_AstNode* %49)
	store %ast_AstNode* %50, %ast_AstNode** %tree
	%51 = load %ast_AstNode*, %ast_AstNode** %tree
	%52 = load %ast_AstNode*, %ast_AstNode** %node
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 8
	%54 = load %type_TypeNode*, %type_TypeNode** %53
	%55 = getelementptr %type_TypeNode, %type_TypeNode* %54, i32 0, i32 11
	%56 = load i32, i32* %55
	%57 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %51, i32 %56, i8 1)
	store %ast_AstNode* %57, %ast_AstNode** %tree
	%58 = load %ast_AstNode*, %ast_AstNode** %tree
	%59 = call i8 @llvm_GenSub(%ast_AstNode* %58)
	%60 = load %ast_AstNode*, %ast_AstNode** %tree
	%61 = load %ast_AstNode*, %ast_AstNode** %node
	%62 = getelementptr %ast_AstNode, %ast_AstNode* %61, i32 0, i32 11
	%63 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %62, i32 0, i32 0
	store %ast_AstNode* %60, %ast_AstNode** %63
	%64 = load %ast_AstNode*, %ast_AstNode** %tree
	%65 = getelementptr %ast_AstNode, %ast_AstNode* %64, i32 0, i32 6
	%66 = load i16, i16* %65
	%67 = load %ast_AstNode*, %ast_AstNode** %node
	%68 = getelementptr %ast_AstNode, %ast_AstNode* %67, i32 0, i32 6
	store i16 %66, i16* %68
	br label %return
return:
	ret void
}
@S.1034 = private unnamed_addr constant [27 x i8] c"FieldInsert LOAD not found\00"
define internal { %ast_AstNode*, %ast_AstNode* } @llvm_FieldInsert(%ast_AstNode* %lhs$, %ast_AstNode* %rhs$) nounwind {
L.0:
	%rv.0 = alloca %ast_AstNode*
	%rv.1 = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	store %ast_AstNode* %lhs$, %ast_AstNode** %lhs
	%rhs = alloca %ast_AstNode*
	store %ast_AstNode* %rhs$, %ast_AstNode** %rhs
	%temp = alloca %ast_AstNode*
	%mask = alloca %ast_AstNode*
	%shft = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %lhs
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 10
	%2 = load i64, i64* %1
	%3 = trunc i64 %2 to i32
	%4 = zext i32 %3 to i64
	%5 = shl i64 1, %4
	%6 = sub i64 %5, 1
	%7 = call %ast_AstNode* @ast_ConstW(i64 %6)
	store %ast_AstNode* %7, %ast_AstNode** %mask
	store %ast_AstNode* null, %ast_AstNode** %shft
	br label %L.1
L.1:
	%8 = load %ast_AstNode*, %ast_AstNode** %lhs
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 0
	%10 = load i8, i8* %9
	%11 = icmp eq i8 %10, 11
	%12 = xor i1 %11, true
	br i1 %12, label %L.2, label %L.3
L.3:
	%13 = load %ast_AstNode*, %ast_AstNode** %shft
	%14 = icmp eq %ast_AstNode* %13, null
	br i1 %14, label %L.5, label %L.6
L.5:
	%15 = load %ast_AstNode*, %ast_AstNode** %lhs
	%16 = getelementptr %ast_AstNode, %ast_AstNode* %15, i32 0, i32 11
	%17 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %16, i32 0, i32 1
	%18 = load %ast_AstNode*, %ast_AstNode** %17
	store %ast_AstNode* %18, %ast_AstNode** %shft
	br label %L.4
L.6:
	%19 = load %ast_AstNode*, %ast_AstNode** %shft
	%20 = load %ast_AstNode*, %ast_AstNode** %lhs
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 11
	%22 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %21, i32 0, i32 1
	%23 = load %ast_AstNode*, %ast_AstNode** %22
	%24 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%25 = call %ast_AstNode* @ast_OpBinary(i8 54, %ast_AstNode* %19, %ast_AstNode* %23, %type_TypeNode* %24)
	store %ast_AstNode* %25, %ast_AstNode** %shft
	br label %L.4
L.4:
	%26 = load %ast_AstNode*, %ast_AstNode** %lhs
	%27 = getelementptr %ast_AstNode, %ast_AstNode* %26, i32 0, i32 11
	%28 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %27, i32 0, i32 0
	%29 = load %ast_AstNode*, %ast_AstNode** %28
	store %ast_AstNode* %29, %ast_AstNode** %lhs
	br label %L.1
L.2:
	%30 = load %ast_AstNode*, %ast_AstNode** %lhs
	%31 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%32 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %30, %type_TypeNode* %31)
	store %ast_AstNode* %32, %ast_AstNode** %temp
	%33 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%34 = load %ast_AstNode*, %ast_AstNode** %temp
	%35 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%36 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%37 = load %ast_AstNode*, %ast_AstNode** %mask
	%38 = load %ast_AstNode*, %ast_AstNode** %shft
	%39 = call %ast_AstNode* @ast_New2(i8 63, %type_TypeNode* %36, %ast_AstNode* %37, %ast_AstNode* %38)
	%40 = call %ast_AstNode* @ast_New1(i8 40, %type_TypeNode* %35, %ast_AstNode* %39)
	%41 = call %ast_AstNode* @ast_New2(i8 51, %type_TypeNode* %33, %ast_AstNode* %34, %ast_AstNode* %40)
	store %ast_AstNode* %41, %ast_AstNode** %temp
	%42 = load %ast_AstNode*, %ast_AstNode** %rhs
	%43 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%44 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %42, %type_TypeNode* %43)
	store %ast_AstNode* %44, %ast_AstNode** %rhs
	%45 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%46 = load %ast_AstNode*, %ast_AstNode** %rhs
	%47 = load %ast_AstNode*, %ast_AstNode** %shft
	%48 = call %ast_AstNode* @ast_New2(i8 63, %type_TypeNode* %45, %ast_AstNode* %46, %ast_AstNode* %47)
	store %ast_AstNode* %48, %ast_AstNode** %rhs
	%49 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%50 = load %ast_AstNode*, %ast_AstNode** %temp
	%51 = load %ast_AstNode*, %ast_AstNode** %rhs
	%52 = call %ast_AstNode* @ast_New2(i8 52, %type_TypeNode* %49, %ast_AstNode* %50, %ast_AstNode* %51)
	store %ast_AstNode* %52, %ast_AstNode** %rhs
	%53 = load %ast_AstNode*, %ast_AstNode** %rhs
	%54 = load %ast_AstNode*, %ast_AstNode** %lhs
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 7
	%56 = load i32, i32* %55
	%57 = call %ast_AstNode* @ast_Extend(%ast_AstNode* %53, i32 %56, i8 1)
	store %ast_AstNode* %57, %ast_AstNode** %rhs
	%58 = load %ast_AstNode*, %ast_AstNode** %lhs
	%59 = getelementptr %ast_AstNode, %ast_AstNode* %58, i32 0, i32 0
	%60 = load i8, i8* %59
	%61 = icmp eq i8 %60, 27
	br i1 %61, label %L.8, label %L.9
L.8:
	%62 = load %ast_AstNode*, %ast_AstNode** %lhs
	%63 = getelementptr %ast_AstNode, %ast_AstNode* %62, i32 0, i32 11
	%64 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %63, i32 0, i32 0
	%65 = load %ast_AstNode*, %ast_AstNode** %64
	store %ast_AstNode* %65, %ast_AstNode** %lhs
	br label %L.7
L.9:
	%66 = load %ast_AstNode*, %ast_AstNode** %lhs
	%67 = getelementptr %ast_AstNode, %ast_AstNode* %66, i32 0, i32 0
	%68 = load i8, i8* %67
	%69 = icmp eq i8 %68, 32
	br i1 %69, label %L.10, label %L.11
L.10:
	%70 = load %ast_AstNode*, %ast_AstNode** %lhs
	%71 = getelementptr %ast_AstNode, %ast_AstNode* %70, i32 0, i32 11
	%72 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %71, i32 0, i32 0
	%73 = load %ast_AstNode*, %ast_AstNode** %72
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 0
	%75 = load i8, i8* %74
	%76 = icmp eq i8 %75, 27
	br label %L.11
L.11:
	%77 = phi i1 [ false, %L.9 ], [ %76, %L.10 ]
	br i1 %77, label %L.13, label %L.14
L.13:
	%78 = load %ast_AstNode*, %ast_AstNode** %lhs
	%79 = getelementptr %ast_AstNode, %ast_AstNode* %78, i32 0, i32 11
	%80 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %79, i32 0, i32 0
	%81 = load %ast_AstNode*, %ast_AstNode** %80
	%82 = getelementptr %ast_AstNode, %ast_AstNode* %81, i32 0, i32 11
	%83 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %82, i32 0, i32 0
	%84 = load %ast_AstNode*, %ast_AstNode** %83
	store %ast_AstNode* %84, %ast_AstNode** %lhs
	%85 = load %ast_AstNode*, %ast_AstNode** %rhs
	%86 = getelementptr %ast_AstNode, %ast_AstNode* %85, i32 0, i32 8
	%87 = load %type_TypeNode*, %type_TypeNode** %86
	%88 = load %ast_AstNode*, %ast_AstNode** %rhs
	%89 = call %ast_AstNode* @ast_New1(i8 32, %type_TypeNode* %87, %ast_AstNode* %88)
	store %ast_AstNode* %89, %ast_AstNode** %rhs
	br label %L.12
L.14:
	%90 = getelementptr [27 x i8], [27 x i8]* @S.1034
	%91 = bitcast [27 x i8]* %90 to [0 x i8]*
	call void @lex_ErrorS(i8 99, [0 x i8]* %91)
	br label %L.12
L.12:
	br label %L.7
L.7:
	%92 = load %ast_AstNode*, %ast_AstNode** %lhs
	store %ast_AstNode* %92, %ast_AstNode** %rv.0
	%93 = load %ast_AstNode*, %ast_AstNode** %rhs
	store %ast_AstNode* %93, %ast_AstNode** %rv.1
	br label %return
return:
	%94 = load %ast_AstNode*, %ast_AstNode** %rv.0
	%95 = load %ast_AstNode*, %ast_AstNode** %rv.1
	%mrv0 = insertvalue { %ast_AstNode*, %ast_AstNode* } undef,%ast_AstNode* %94,0
	%mrv1 = insertvalue { %ast_AstNode*, %ast_AstNode* } %mrv0,%ast_AstNode* %95,1
	ret  { %ast_AstNode*, %ast_AstNode* } %mrv1
}
@S.1035 = private unnamed_addr constant [12 x i8] c"\09%N = load \00"
@S.1036 = private unnamed_addr constant [10 x i8] c"volatile \00"
@S.1037 = private unnamed_addr constant [3 x i8] c", \00"
@S.1038 = private unnamed_addr constant [8 x i8] c"%T* %0N\00"
@S.1039 = private unnamed_addr constant [9 x i8] c", align \00"
define internal void @llvm_Load(%ast_AstNode* %load$) nounwind {
L.0:
	%load = alloca %ast_AstNode*
	store %ast_AstNode* %load$, %ast_AstNode** %load
	%offs = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %load
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 0
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	store %ast_AstNode* %3, %ast_AstNode** %offs
	%4 = load %ast_AstNode*, %ast_AstNode** %offs
	%5 = call i8 @llvm_GenSub(%ast_AstNode* %4)
	%6 = load i16, i16* @llvm_Tseqno
	%7 = load %ast_AstNode*, %ast_AstNode** %load
	%8 = getelementptr %ast_AstNode, %ast_AstNode* %7, i32 0, i32 6
	store i16 %6, i16* %8
	%9 = load i16, i16* @llvm_Tseqno
	%10 = add i16 %9, 1
	store i16 %10, i16* @llvm_Tseqno
	%11 = getelementptr [12 x i8], [12 x i8]* @S.1035
	%12 = bitcast [12 x i8]* %11 to [0 x i8]*
	%13 = load %ast_AstNode*, %ast_AstNode** %load
	call void @llvm_Print([0 x i8]* %12, %ast_AstNode* %13)
	%14 = load %ast_AstNode*, %ast_AstNode** %offs
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 8
	%16 = load %type_TypeNode*, %type_TypeNode** %15
	%17 = getelementptr %type_TypeNode, %type_TypeNode* %16, i32 0, i32 0
	%18 = load %type_TypeNode*, %type_TypeNode** %17
	%19 = getelementptr %type_TypeNode, %type_TypeNode* %18, i32 0, i32 20
	%20 = load i8, i8* %19
	%21 = zext i8 %20 to i32
	%22 = and i32 %21, 1
	%23 = trunc i32 %22 to i8
	%24 = icmp ne i8 %23, 0
	br i1 %24, label %L.2, label %L.1
L.2:
	%25 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%26 = getelementptr [10 x i8], [10 x i8]* @S.1036
	%27 = bitcast [10 x i8]* %26 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %25, [0 x i8]* %27)
	br label %L.1
L.1:
	%28 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%29 = load i8, i8* %28
	%30 = icmp ne i8 %29, 0
	br i1 %30, label %L.4, label %L.3
L.4:
	%31 = load %ast_AstNode*, %ast_AstNode** %load
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 8
	%33 = load %type_TypeNode*, %type_TypeNode** %32
	call void @llvm_PType(%type_TypeNode* %33)
	%34 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%35 = getelementptr [3 x i8], [3 x i8]* @S.1037
	%36 = bitcast [3 x i8]* %35 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %34, [0 x i8]* %36)
	br label %L.3
L.3:
	%37 = getelementptr [8 x i8], [8 x i8]* @S.1038
	%38 = bitcast [8 x i8]* %37 to [0 x i8]*
	%39 = load %ast_AstNode*, %ast_AstNode** %load
	call void @llvm_Print([0 x i8]* %38, %ast_AstNode* %39)
	%40 = load %ast_AstNode*, %ast_AstNode** %offs
	%41 = getelementptr %ast_AstNode, %ast_AstNode* %40, i32 0, i32 8
	%42 = load %type_TypeNode*, %type_TypeNode** %41
	%43 = getelementptr %type_TypeNode, %type_TypeNode* %42, i32 0, i32 0
	%44 = load %type_TypeNode*, %type_TypeNode** %43
	%45 = getelementptr %type_TypeNode, %type_TypeNode* %44, i32 0, i32 25
	%46 = load i8, i8* %45
	%47 = icmp ne i8 %46, 0
	br i1 %47, label %L.6, label %L.5
L.6:
	%48 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%49 = getelementptr [9 x i8], [9 x i8]* @S.1039
	%50 = bitcast [9 x i8]* %49 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %48, [0 x i8]* %50)
	%51 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%52 = load %ast_AstNode*, %ast_AstNode** %offs
	%53 = getelementptr %ast_AstNode, %ast_AstNode* %52, i32 0, i32 8
	%54 = load %type_TypeNode*, %type_TypeNode** %53
	%55 = getelementptr %type_TypeNode, %type_TypeNode* %54, i32 0, i32 0
	%56 = load %type_TypeNode*, %type_TypeNode** %55
	%57 = getelementptr %type_TypeNode, %type_TypeNode* %56, i32 0, i32 12
	%58 = load i32, i32* %57
	%59 = zext i32 %58 to i64
	%60 = udiv i64 %59, 8
	call void @bout_BufIO_uint64(%bout_BufIO* %51, i64 %60)
	br label %L.5
L.5:
	%61 = load %ast_AstNode*, %ast_AstNode** %load
	call void @llvm_PEndLine(%ast_AstNode* %61)
	br label %return
return:
	ret void
}
@S.1040 = private unnamed_addr constant [7 x i8] c"store \00"
@S.1041 = private unnamed_addr constant [10 x i8] c"volatile \00"
@S.1042 = private unnamed_addr constant [8 x i8] c", %K %D\00"
@S.1043 = private unnamed_addr constant [9 x i8] c", align \00"
define internal void @llvm_Store(%ast_AstNode* %store$) nounwind {
L.0:
	%store = alloca %ast_AstNode*
	store %ast_AstNode* %store$, %ast_AstNode** %store
	%rhs = alloca %ast_AstNode*
	%lhs = alloca %ast_AstNode*
	%varb = alloca %ast_AstNode*
	%tree = alloca %ast_AstNode*
	%mask = alloca %ast_AstNode*
	%i = alloca i16
	%n = alloca i16
	store i16 0, i16* %i
	%0 = load %ast_AstNode*, %ast_AstNode** %store
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 2
	%2 = load i16, i16* %1
	%3 = udiv i16 %2, 2
	store i16 %3, i16* %n
	br label %L.1
L.1:
	%4 = load i16, i16* %i
	%5 = load i16, i16* %n
	%6 = icmp ult i16 %4, %5
	%7 = xor i1 %6, true
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load %ast_AstNode*, %ast_AstNode** %store
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 11
	%10 = load i16, i16* %i
	%11 = zext i16 %10 to i32
	%12 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %9, i32 0, i32 %11
	%13 = load %ast_AstNode*, %ast_AstNode** %12
	store %ast_AstNode* %13, %ast_AstNode** %lhs
	%14 = load %ast_AstNode*, %ast_AstNode** %store
	%15 = getelementptr %ast_AstNode, %ast_AstNode* %14, i32 0, i32 11
	%16 = load i16, i16* %n
	%17 = load i16, i16* %i
	%18 = add i16 %16, %17
	%19 = zext i16 %18 to i32
	%20 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %15, i32 0, i32 %19
	%21 = load %ast_AstNode*, %ast_AstNode** %20
	store %ast_AstNode* %21, %ast_AstNode** %rhs
	%22 = load %ast_AstNode*, %ast_AstNode** %lhs
	%23 = icmp ne %ast_AstNode* %22, null
	br i1 %23, label %L.4, label %L.5
L.4:
	%24 = load %ast_AstNode*, %ast_AstNode** %lhs
	%25 = getelementptr %ast_AstNode, %ast_AstNode* %24, i32 0, i32 0
	%26 = load i8, i8* %25
	%27 = icmp eq i8 %26, 11
	br label %L.5
L.5:
	%28 = phi i1 [ false, %L.3 ], [ %27, %L.4 ]
	br i1 %28, label %L.7, label %L.6
L.7:
	%29 = load %ast_AstNode*, %ast_AstNode** %lhs
	%30 = load %ast_AstNode*, %ast_AstNode** %rhs
	%31 = call { %ast_AstNode*, %ast_AstNode* } @llvm_FieldInsert(%ast_AstNode* %29, %ast_AstNode* %30)
	%32 = extractvalue  { %ast_AstNode*, %ast_AstNode* } %31, 0
	%33 = extractvalue  { %ast_AstNode*, %ast_AstNode* } %31, 1
	store %ast_AstNode* %32, %ast_AstNode** %lhs
	store %ast_AstNode* %33, %ast_AstNode** %rhs
	%34 = load %ast_AstNode*, %ast_AstNode** %lhs
	%35 = load %ast_AstNode*, %ast_AstNode** %store
	%36 = getelementptr %ast_AstNode, %ast_AstNode* %35, i32 0, i32 11
	%37 = load i16, i16* %i
	%38 = zext i16 %37 to i32
	%39 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %36, i32 0, i32 %38
	store %ast_AstNode* %34, %ast_AstNode** %39
	%40 = load %ast_AstNode*, %ast_AstNode** %rhs
	%41 = load %ast_AstNode*, %ast_AstNode** %store
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 11
	%43 = load i16, i16* %n
	%44 = load i16, i16* %i
	%45 = add i16 %43, %44
	%46 = zext i16 %45 to i32
	%47 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %42, i32 0, i32 %46
	store %ast_AstNode* %40, %ast_AstNode** %47
	br label %L.6
L.6:
	%48 = load %ast_AstNode*, %ast_AstNode** %rhs
	%49 = call i8 @llvm_GenSub(%ast_AstNode* %48)
	%50 = load i16, i16* %i
	%51 = add i16 %50, 1
	store i16 %51, i16* %i
	br label %L.1
L.2:
	store i16 0, i16* %i
	br label %L.8
L.8:
	%52 = load i16, i16* %i
	%53 = load i16, i16* %n
	%54 = icmp ult i16 %52, %53
	%55 = xor i1 %54, true
	br i1 %55, label %L.9, label %L.10
L.10:
	%56 = load %ast_AstNode*, %ast_AstNode** %store
	%57 = getelementptr %ast_AstNode, %ast_AstNode* %56, i32 0, i32 11
	%58 = load i16, i16* %i
	%59 = zext i16 %58 to i32
	%60 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %57, i32 0, i32 %59
	%61 = load %ast_AstNode*, %ast_AstNode** %60
	store %ast_AstNode* %61, %ast_AstNode** %lhs
	%62 = load %ast_AstNode*, %ast_AstNode** %store
	%63 = getelementptr %ast_AstNode, %ast_AstNode* %62, i32 0, i32 11
	%64 = load i16, i16* %n
	%65 = load i16, i16* %i
	%66 = add i16 %64, %65
	%67 = zext i16 %66 to i32
	%68 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %63, i32 0, i32 %67
	%69 = load %ast_AstNode*, %ast_AstNode** %68
	store %ast_AstNode* %69, %ast_AstNode** %rhs
	%70 = load %ast_AstNode*, %ast_AstNode** %lhs
	%71 = icmp ne %ast_AstNode* %70, null
	br i1 %71, label %L.12, label %L.11
L.12:
	%72 = load %ast_AstNode*, %ast_AstNode** %lhs
	%73 = call i8 @llvm_GenSub(%ast_AstNode* %72)
	%74 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %74, i8 9)
	%75 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%76 = getelementptr [7 x i8], [7 x i8]* @S.1040
	%77 = bitcast [7 x i8]* %76 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %75, [0 x i8]* %77)
	%78 = load %ast_AstNode*, %ast_AstNode** %lhs
	%79 = getelementptr %ast_AstNode, %ast_AstNode* %78, i32 0, i32 8
	%80 = load %type_TypeNode*, %type_TypeNode** %79
	%81 = getelementptr %type_TypeNode, %type_TypeNode* %80, i32 0, i32 0
	%82 = load %type_TypeNode*, %type_TypeNode** %81
	%83 = getelementptr %type_TypeNode, %type_TypeNode* %82, i32 0, i32 20
	%84 = load i8, i8* %83
	%85 = zext i8 %84 to i32
	%86 = lshr i32 %85, 1
	%87 = and i32 %86, 1
	%88 = trunc i32 %87 to i8
	%89 = icmp ne i8 %88, 0
	br i1 %89, label %L.14, label %L.13
L.14:
	%90 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%91 = getelementptr [10 x i8], [10 x i8]* @S.1041
	%92 = bitcast [10 x i8]* %91 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %90, [0 x i8]* %92)
	br label %L.13
L.13:
	%93 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_NodeType(%ast_AstNode* %93)
	%94 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %94, i8 32)
	%95 = load %ast_AstNode*, %ast_AstNode** %rhs
	call void @llvm_NodeSrc(%ast_AstNode* %95)
	%96 = getelementptr [8 x i8], [8 x i8]* @S.1042
	%97 = bitcast [8 x i8]* %96 to [0 x i8]*
	%98 = load %ast_AstNode*, %ast_AstNode** %lhs
	call void @llvm_Print([0 x i8]* %97, %ast_AstNode* %98)
	%99 = load %ast_AstNode*, %ast_AstNode** %lhs
	%100 = getelementptr %ast_AstNode, %ast_AstNode* %99, i32 0, i32 8
	%101 = load %type_TypeNode*, %type_TypeNode** %100
	%102 = getelementptr %type_TypeNode, %type_TypeNode* %101, i32 0, i32 0
	%103 = load %type_TypeNode*, %type_TypeNode** %102
	%104 = getelementptr %type_TypeNode, %type_TypeNode* %103, i32 0, i32 25
	%105 = load i8, i8* %104
	%106 = icmp ne i8 %105, 0
	br i1 %106, label %L.16, label %L.15
L.16:
	%107 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%108 = getelementptr [9 x i8], [9 x i8]* @S.1043
	%109 = bitcast [9 x i8]* %108 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %107, [0 x i8]* %109)
	%110 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%111 = load %ast_AstNode*, %ast_AstNode** %lhs
	%112 = getelementptr %ast_AstNode, %ast_AstNode* %111, i32 0, i32 8
	%113 = load %type_TypeNode*, %type_TypeNode** %112
	%114 = getelementptr %type_TypeNode, %type_TypeNode* %113, i32 0, i32 0
	%115 = load %type_TypeNode*, %type_TypeNode** %114
	%116 = getelementptr %type_TypeNode, %type_TypeNode* %115, i32 0, i32 12
	%117 = load i32, i32* %116
	%118 = zext i32 %117 to i64
	%119 = udiv i64 %118, 8
	call void @bout_BufIO_uint64(%bout_BufIO* %110, i64 %119)
	br label %L.15
L.15:
	%120 = load %ast_AstNode*, %ast_AstNode** %store
	call void @llvm_PEndLine(%ast_AstNode* %120)
	br label %L.11
L.11:
	%121 = load i16, i16* %i
	%122 = add i16 %121, 1
	store i16 %122, i16* %i
	br label %L.8
L.9:
	br label %return
return:
	ret void
}
@S.1044 = private unnamed_addr constant [19 x i8] c"\09store %T %N, %T* \00"
@S.1045 = private unnamed_addr constant [18 x i8] c"\09br label %return\00"
define internal zeroext i8 @llvm_Return(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%i = alloca i16
	%rnode = alloca %ast_AstNode*
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 2
	%2 = load i16, i16* %1
	%3 = icmp ugt i16 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	store i16 0, i16* %i
	br label %L.3
L.3:
	%4 = load i16, i16* %i
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 2
	%7 = load i16, i16* %6
	%8 = icmp ult i16 %4, %7
	%9 = xor i1 %8, true
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 11
	%12 = load i16, i16* %i
	%13 = zext i16 %12 to i32
	%14 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %11, i32 0, i32 %13
	%15 = load %ast_AstNode*, %ast_AstNode** %14
	store %ast_AstNode* %15, %ast_AstNode** %rnode
	%16 = load %ast_AstNode*, %ast_AstNode** %rnode
	%17 = call i8 @llvm_GenSub(%ast_AstNode* %16)
	%18 = getelementptr [19 x i8], [19 x i8]* @S.1044
	%19 = bitcast [19 x i8]* %18 to [0 x i8]*
	%20 = load %ast_AstNode*, %ast_AstNode** %rnode
	call void @llvm_Print([0 x i8]* %19, %ast_AstNode* %20)
	%21 = load i16, i16* %i
	call void @llvm_PRetValName(i16 %21)
	%22 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %22)
	%23 = load i16, i16* %i
	%24 = add i16 %23, 1
	store i16 %24, i16* %i
	br label %L.3
L.4:
	%25 = load %ast_AstNode*, %ast_AstNode** %node
	%26 = getelementptr %ast_AstNode, %ast_AstNode* %25, i32 0, i32 11
	%27 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %26, i32 0, i32 0
	%28 = load %ast_AstNode*, %ast_AstNode** %27
	%29 = getelementptr %ast_AstNode, %ast_AstNode* %28, i32 0, i32 6
	%30 = load i16, i16* %29
	%31 = load %ast_AstNode*, %ast_AstNode** %node
	%32 = getelementptr %ast_AstNode, %ast_AstNode* %31, i32 0, i32 6
	store i16 %30, i16* %32
	br label %L.1
L.1:
	%33 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%34 = getelementptr [18 x i8], [18 x i8]* @S.1045
	%35 = bitcast [18 x i8]* %34 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %33, [0 x i8]* %35)
	%36 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %36)
	store i8 1, i8* %rv.0
	br label %return
return:
	%37 = load i8, i8* %rv.0
	ret i8 %37
}
@S.1046 = private unnamed_addr constant [38 x i8] c"\09%N = select i1 %0N, %1T %1N, %2T %2N\00"
define internal void @llvm_IfExpr(%ast_AstNode* %node$) nounwind {
L.0:
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = getelementptr %ast_AstNode, %ast_AstNode* %0, i32 0, i32 11
	%2 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %1, i32 0, i32 1
	%3 = load %ast_AstNode*, %ast_AstNode** %2
	%4 = call i8 @llvm_GenSub(%ast_AstNode* %3)
	%5 = load %ast_AstNode*, %ast_AstNode** %node
	%6 = getelementptr %ast_AstNode, %ast_AstNode* %5, i32 0, i32 11
	%7 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %6, i32 0, i32 2
	%8 = load %ast_AstNode*, %ast_AstNode** %7
	%9 = call i8 @llvm_GenSub(%ast_AstNode* %8)
	%10 = load %ast_AstNode*, %ast_AstNode** %node
	%11 = getelementptr %ast_AstNode, %ast_AstNode* %10, i32 0, i32 11
	%12 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %11, i32 0, i32 0
	%13 = load %ast_AstNode*, %ast_AstNode** %12
	%14 = call i8 @llvm_GenSub(%ast_AstNode* %13)
	%15 = load i16, i16* @llvm_Tseqno
	%16 = load %ast_AstNode*, %ast_AstNode** %node
	%17 = getelementptr %ast_AstNode, %ast_AstNode* %16, i32 0, i32 6
	store i16 %15, i16* %17
	%18 = load i16, i16* @llvm_Tseqno
	%19 = add i16 %18, 1
	store i16 %19, i16* @llvm_Tseqno
	%20 = getelementptr [38 x i8], [38 x i8]* @S.1046
	%21 = bitcast [38 x i8]* %20 to [0 x i8]*
	%22 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %21, %ast_AstNode* %22)
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_PEndLine(%ast_AstNode* %23)
	br label %return
return:
	ret void
}
@S.1047 = private unnamed_addr constant [32 x i8] c"\09%N = getelementptr %R, %K %0N\0A\00"
@S.1048 = private unnamed_addr constant [28 x i8] c"\09%N = getelementptr %K %0N\0A\00"
@S.1049 = private unnamed_addr constant [45 x i8] c"\09%N = getelementptr %0R, %0K %0N, %W 0, i32 \00"
@S.1050 = private unnamed_addr constant [40 x i8] c"\09%N = getelementptr %0K %0N, %W 0, i32 \00"
@S.1051 = private unnamed_addr constant [49 x i8] c"\09%N = getelementptr %0R, %0K %0N, %W 0, %1T %1N\0A\00"
@S.1052 = private unnamed_addr constant [44 x i8] c"\09%N = getelementptr %0K %0N, %W 0, %1T %1N\0A\00"
@S.1053 = private unnamed_addr constant [49 x i8] c"\09%N = getelementptr %0R, %0T %0N, %W 0, %1T %1N\0A\00"
@S.1054 = private unnamed_addr constant [44 x i8] c"\09%N = getelementptr %0T %0N, %W 0, %1T %1N\0A\00"
@S.1055 = private unnamed_addr constant [27 x i8] c" = bitcast %**K* %N to %T\0A\00"
@S.1056 = private unnamed_addr constant [29 x i8] c"\09%N = bitcast %0K %0N to %K\0A\00"
@S.1057 = private unnamed_addr constant [30 x i8] c"\09%N = inttoptr %0T %0N to %T\0A\00"
@S.1058 = private unnamed_addr constant [30 x i8] c"\09%N = ptrtoint %0T %0N to %T\0A\00"
@S.1059 = private unnamed_addr constant [29 x i8] c"\09%N = bitcast %0K %0N to %K\0A\00"
@S.1060 = private unnamed_addr constant [5 x i8] c"zext\00"
@S.1061 = private unnamed_addr constant [5 x i8] c"sext\00"
@S.1062 = private unnamed_addr constant [6 x i8] c"trunc\00"
@S.1063 = private unnamed_addr constant [4 x i8] c"add\00"
@S.1064 = private unnamed_addr constant [4 x i8] c"sub\00"
@S.1065 = private unnamed_addr constant [4 x i8] c"mul\00"
@S.1066 = private unnamed_addr constant [5 x i8] c"udiv\00"
@S.1067 = private unnamed_addr constant [5 x i8] c"sdiv\00"
@S.1068 = private unnamed_addr constant [5 x i8] c"urem\00"
@S.1069 = private unnamed_addr constant [5 x i8] c"srem\00"
@S.1070 = private unnamed_addr constant [4 x i8] c"shl\00"
@S.1071 = private unnamed_addr constant [5 x i8] c"lshr\00"
@S.1072 = private unnamed_addr constant [5 x i8] c"ashr\00"
@S.1073 = private unnamed_addr constant [5 x i8] c"fadd\00"
@S.1074 = private unnamed_addr constant [5 x i8] c"fsub\00"
@S.1075 = private unnamed_addr constant [5 x i8] c"fmul\00"
@S.1076 = private unnamed_addr constant [5 x i8] c"fdiv\00"
@S.1077 = private unnamed_addr constant [5 x i8] c"frem\00"
@S.1078 = private unnamed_addr constant [8 x i8] c"icmp eq\00"
@S.1079 = private unnamed_addr constant [8 x i8] c"icmp ne\00"
@S.1080 = private unnamed_addr constant [9 x i8] c"icmp ugt\00"
@S.1081 = private unnamed_addr constant [9 x i8] c"icmp ult\00"
@S.1082 = private unnamed_addr constant [9 x i8] c"icmp uge\00"
@S.1083 = private unnamed_addr constant [9 x i8] c"icmp ule\00"
@S.1084 = private unnamed_addr constant [9 x i8] c"icmp sgt\00"
@S.1085 = private unnamed_addr constant [9 x i8] c"icmp slt\00"
@S.1086 = private unnamed_addr constant [9 x i8] c"icmp sge\00"
@S.1087 = private unnamed_addr constant [9 x i8] c"icmp sle\00"
@S.1088 = private unnamed_addr constant [9 x i8] c"fcmp oeq\00"
@S.1089 = private unnamed_addr constant [9 x i8] c"fcmp one\00"
@S.1090 = private unnamed_addr constant [9 x i8] c"fcmp ogt\00"
@S.1091 = private unnamed_addr constant [9 x i8] c"fcmp olt\00"
@S.1092 = private unnamed_addr constant [9 x i8] c"fcmp oge\00"
@S.1093 = private unnamed_addr constant [9 x i8] c"fcmp ole\00"
@S.1094 = private unnamed_addr constant [4 x i8] c"and\00"
@S.1095 = private unnamed_addr constant [3 x i8] c"or\00"
@S.1096 = private unnamed_addr constant [4 x i8] c"xor\00"
@S.1097 = private unnamed_addr constant [24 x i8] c"\09%N = xor i1 %0N, true\0A\00"
define internal zeroext i8 @llvm_GenSub(%ast_AstNode* %node$) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast_AstNode*
	store %ast_AstNode* %node$, %ast_AstNode** %node
	%term = alloca i8
	store i8 0, i8* %term
	%0 = load %ast_AstNode*, %ast_AstNode** %node
	%1 = icmp eq %ast_AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8, i8* %term
	store i8 %2, i8* %rv.0
	br label %return
L.1:
	%3 = load %ast_AstNode*, %ast_AstNode** %node
	%4 = getelementptr %ast_AstNode, %ast_AstNode* %3, i32 0, i32 6
	%5 = load i16, i16* %4
	%6 = icmp ne i16 %5, 0
	br i1 %6, label %L.4, label %L.3
L.4:
	%7 = load i8, i8* %term
	store i8 %7, i8* %rv.0
	br label %return
L.3:
	%8 = load %ast_AstNode*, %ast_AstNode** %node
	%9 = getelementptr %ast_AstNode, %ast_AstNode* %8, i32 0, i32 0
	%10 = load i8, i8* %9
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.5 [
		i32 1, label %L.7
		i32 104, label %L.8
		i32 2, label %L.9
		i32 3, label %L.10
		i32 103, label %L.11
		i32 4, label %L.12
		i32 5, label %L.13
		i32 12, label %L.14
		i32 6, label %L.14
		i32 7, label %L.14
		i32 8, label %L.14
		i32 9, label %L.14
		i32 24, label %L.15
		i32 25, label %L.15
		i32 21, label %L.16
		i32 22, label %L.17
		i32 23, label %L.18
		i32 102, label %L.19
		i32 26, label %L.20
		i32 28, label %L.21
		i32 27, label %L.22
		i32 11, label %L.23
		i32 16, label %L.24
		i32 13, label %L.25
		i32 14, label %L.26
		i32 15, label %L.27
		i32 17, label %L.28
		i32 29, label %L.29
		i32 30, label %L.30
		i32 31, label %L.31
		i32 32, label %L.32
		i32 40, label %L.32
		i32 39, label %L.32
		i32 44, label %L.32
		i32 45, label %L.32
		i32 46, label %L.32
		i32 47, label %L.32
		i32 48, label %L.32
		i32 49, label %L.32
		i32 50, label %L.32
		i32 34, label %L.33
		i32 35, label %L.33
		i32 36, label %L.33
		i32 37, label %L.33
		i32 38, label %L.33
		i32 33, label %L.33
		i32 42, label %L.33
		i32 41, label %L.34
		i32 59, label %L.35
		i32 60, label %L.35
		i32 61, label %L.35
		i32 62, label %L.35
		i32 90, label %L.35
		i32 91, label %L.35
		i32 67, label %L.36
		i32 68, label %L.36
		i32 43, label %L.37
		i32 54, label %L.38
		i32 55, label %L.39
		i32 56, label %L.40
		i32 57, label %L.41
		i32 58, label %L.42
		i32 63, label %L.43
		i32 65, label %L.43
		i32 64, label %L.44
		i32 66, label %L.45
		i32 85, label %L.46
		i32 86, label %L.47
		i32 87, label %L.48
		i32 88, label %L.49
		i32 89, label %L.50
		i32 69, label %L.51
		i32 70, label %L.52
		i32 72, label %L.53
		i32 71, label %L.54
		i32 74, label %L.55
		i32 73, label %L.56
		i32 76, label %L.57
		i32 75, label %L.58
		i32 78, label %L.59
		i32 77, label %L.60
		i32 79, label %L.61
		i32 80, label %L.62
		i32 82, label %L.63
		i32 81, label %L.64
		i32 84, label %L.65
		i32 83, label %L.66
		i32 51, label %L.67
		i32 52, label %L.68
		i32 53, label %L.69
		i32 94, label %L.70
		i32 93, label %L.71
		i32 92, label %L.72
		i32 95, label %L.73
		i32 18, label %L.74
		i32 19, label %L.75
		i32 20, label %L.76
		i32 99, label %L.77
		i32 100, label %L.78
		i32 97, label %L.79
		i32 98, label %L.80
		i32 96, label %L.81
	]
L.7:
	%12 = load %ast_AstNode*, %ast_AstNode** %node
	%13 = getelementptr %ast_AstNode, %ast_AstNode* %12, i32 0, i32 11
	%14 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %13, i32 0, i32 0
	%15 = load %ast_AstNode*, %ast_AstNode** %14
	%16 = call i8 @llvm_GenSub(%ast_AstNode* %15)
	%17 = load %ast_AstNode*, %ast_AstNode** %node
	%18 = getelementptr %ast_AstNode, %ast_AstNode* %17, i32 0, i32 11
	%19 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %18, i32 0, i32 0
	%20 = load %ast_AstNode*, %ast_AstNode** %19
	%21 = getelementptr %ast_AstNode, %ast_AstNode* %20, i32 0, i32 6
	%22 = load i16, i16* %21
	%23 = load %ast_AstNode*, %ast_AstNode** %node
	%24 = getelementptr %ast_AstNode, %ast_AstNode* %23, i32 0, i32 6
	store i16 %22, i16* %24
	br label %L.6
L.8:
	%25 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Assert(%ast_AstNode* %25)
	br label %L.6
L.9:
	%26 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%27 = load i8, i8* %26
	%28 = icmp ne i8 %27, 0
	br i1 %28, label %L.83, label %L.82
L.83:
	%29 = load %ast_AstNode*, %ast_AstNode** %node
	%30 = getelementptr %ast_AstNode, %ast_AstNode* %29, i32 0, i32 9
	%31 = load %symb_SymbNode*, %symb_SymbNode** %30
	%32 = getelementptr %symb_SymbNode, %symb_SymbNode* %31
	call void @llvmdb_FileStart(%symb_SymbNode* %32)
	br label %L.82
L.82:
	%33 = load %ast_AstNode*, %ast_AstNode** %node
	%34 = getelementptr %ast_AstNode, %ast_AstNode* %33, i32 0, i32 11
	%35 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %34, i32 0, i32 0
	%36 = load %ast_AstNode*, %ast_AstNode** %35
	%37 = call i8 @llvm_GenSub(%ast_AstNode* %36)
	%38 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%39 = load i8, i8* %38
	%40 = icmp ne i8 %39, 0
	br i1 %40, label %L.85, label %L.84
L.85:
	%41 = load %ast_AstNode*, %ast_AstNode** %node
	%42 = getelementptr %ast_AstNode, %ast_AstNode* %41, i32 0, i32 9
	%43 = load %symb_SymbNode*, %symb_SymbNode** %42
	%44 = getelementptr %symb_SymbNode, %symb_SymbNode* %43
	call void @llvmdb_FileFinish(%symb_SymbNode* %44)
	br label %L.84
L.84:
	br label %L.6
L.10:
	%45 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%46 = load i8, i8* %45
	%47 = icmp ne i8 %46, 0
	br i1 %47, label %L.87, label %L.86
L.87:
	%48 = load %ast_AstNode*, %ast_AstNode** %node
	%49 = getelementptr %ast_AstNode, %ast_AstNode* %48, i32 0, i32 9
	%50 = load %symb_SymbNode*, %symb_SymbNode** %49
	%51 = getelementptr %symb_SymbNode, %symb_SymbNode* %50, i32 0, i32 23
	%52 = getelementptr [0 x i8], [0 x i8]* %51
	%53 = bitcast [0 x i8]* %52 to [0 x i8]*
	call void @llvmdb_PackageStart([0 x i8]* %53)
	br label %L.86
L.86:
	%54 = load %ast_AstNode*, %ast_AstNode** %node
	%55 = getelementptr %ast_AstNode, %ast_AstNode* %54, i32 0, i32 11
	%56 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %55, i32 0, i32 0
	%57 = load %ast_AstNode*, %ast_AstNode** %56
	%58 = call i8 @llvm_GenSub(%ast_AstNode* %57)
	%59 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%60 = load i8, i8* %59
	%61 = icmp ne i8 %60, 0
	br i1 %61, label %L.89, label %L.88
L.89:
	call void @llvmdb_PackageEnd()
	br label %L.88
L.88:
	br label %L.6
L.11:
	%62 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%63 = load i8, i8* %62
	%64 = icmp ne i8 %63, 0
	br i1 %64, label %L.91, label %L.90
L.91:
	%65 = load %ast_AstNode*, %ast_AstNode** %node
	%66 = getelementptr %ast_AstNode, %ast_AstNode* %65, i32 0, i32 9
	%67 = load %symb_SymbNode*, %symb_SymbNode** %66
	%68 = getelementptr %symb_SymbNode, %symb_SymbNode* %67
	call void @llvmdb_ProcStart(%symb_SymbNode* %68)
	br label %L.90
L.90:
	%69 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Procedure(%ast_AstNode* %69)
	%70 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%71 = load i8, i8* %70
	%72 = icmp ne i8 %71, 0
	br i1 %72, label %L.93, label %L.92
L.93:
	%73 = load %ast_AstNode*, %ast_AstNode** %node
	%74 = getelementptr %ast_AstNode, %ast_AstNode* %73, i32 0, i32 9
	%75 = load %symb_SymbNode*, %symb_SymbNode** %74
	%76 = getelementptr %symb_SymbNode, %symb_SymbNode* %75
	call void @llvmdb_ProcFinish(%symb_SymbNode* %76)
	br label %L.92
L.92:
	%77 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_flush(%bout_BufIO* %77)
	br label %L.6
L.12:
	%78 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclVar(%ast_AstNode* %78)
	br label %L.6
L.13:
	%79 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_DclCon(%ast_AstNode* %79)
	br label %L.6
L.14:
	br label %L.6
L.15:
	%80 = load %ast_AstNode*, %ast_AstNode** %node
	%81 = call i8 @llvm_ArrayCompare(%ast_AstNode* %80)
	store i8 %81, i8* %term
	br label %L.6
L.16:
	%82 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Set(%ast_AstNode* %82)
	br label %L.6
L.17:
	%83 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Copy(%ast_AstNode* %83, i8 0)
	br label %L.6
L.18:
	%84 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Copy(%ast_AstNode* %84, i8 1)
	br label %L.6
L.19:
	%85 = load %ast_AstNode*, %ast_AstNode** %node
	%86 = call i8 @llvm_Return(%ast_AstNode* %85)
	store i8 %86, i8* %term
	br label %L.6
L.20:
	%87 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_GetRV(%ast_AstNode* %87)
	br label %L.6
L.21:
	%88 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Store(%ast_AstNode* %88)
	br label %L.6
L.22:
	%89 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Load(%ast_AstNode* %89)
	br label %L.6
L.23:
	%90 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_FieldExtract(%ast_AstNode* %90)
	br label %L.6
L.24:
	%91 = load %ast_AstNode*, %ast_AstNode** %node
	%92 = getelementptr %ast_AstNode, %ast_AstNode* %91, i32 0, i32 11
	%93 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %92, i32 0, i32 0
	%94 = load %ast_AstNode*, %ast_AstNode** %93
	%95 = call i8 @llvm_GenSub(%ast_AstNode* %94)
	%96 = load i16, i16* @llvm_Tseqno
	%97 = load %ast_AstNode*, %ast_AstNode** %node
	%98 = getelementptr %ast_AstNode, %ast_AstNode* %97, i32 0, i32 6
	store i16 %96, i16* %98
	%99 = load i16, i16* @llvm_Tseqno
	%100 = add i16 %99, 1
	store i16 %100, i16* @llvm_Tseqno
	%101 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%102 = load i8, i8* %101
	%103 = icmp ne i8 %102, 0
	br i1 %103, label %L.95, label %L.96
L.95:
	%104 = getelementptr [32 x i8], [32 x i8]* @S.1047
	%105 = bitcast [32 x i8]* %104 to [0 x i8]*
	%106 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %105, %ast_AstNode* %106)
	br label %L.94
L.96:
	%107 = getelementptr [28 x i8], [28 x i8]* @S.1048
	%108 = bitcast [28 x i8]* %107 to [0 x i8]*
	%109 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %108, %ast_AstNode* %109)
	br label %L.94
L.94:
	br label %L.6
L.25:
	%110 = load %ast_AstNode*, %ast_AstNode** %node
	%111 = getelementptr %ast_AstNode, %ast_AstNode* %110, i32 0, i32 11
	%112 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %111, i32 0, i32 0
	%113 = load %ast_AstNode*, %ast_AstNode** %112
	%114 = call i8 @llvm_GenSub(%ast_AstNode* %113)
	%115 = load i16, i16* @llvm_Tseqno
	%116 = load %ast_AstNode*, %ast_AstNode** %node
	%117 = getelementptr %ast_AstNode, %ast_AstNode* %116, i32 0, i32 6
	store i16 %115, i16* %117
	%118 = load i16, i16* @llvm_Tseqno
	%119 = add i16 %118, 1
	store i16 %119, i16* @llvm_Tseqno
	%120 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%121 = load i8, i8* %120
	%122 = icmp ne i8 %121, 0
	br i1 %122, label %L.98, label %L.99
L.98:
	%123 = getelementptr [45 x i8], [45 x i8]* @S.1049
	%124 = bitcast [45 x i8]* %123 to [0 x i8]*
	%125 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %124, %ast_AstNode* %125)
	br label %L.97
L.99:
	%126 = getelementptr [40 x i8], [40 x i8]* @S.1050
	%127 = bitcast [40 x i8]* %126 to [0 x i8]*
	%128 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %127, %ast_AstNode* %128)
	br label %L.97
L.97:
	%129 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%130 = load %ast_AstNode*, %ast_AstNode** %node
	%131 = getelementptr %ast_AstNode, %ast_AstNode* %130, i32 0, i32 10
	%132 = load i64, i64* %131
	%133 = trunc i64 %132 to i32
	call void @bout_BufIO_uint32(%bout_BufIO* %129, i32 %133)
	%134 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_nl(%bout_BufIO* %134)
	br label %L.6
L.26:
	%135 = load %ast_AstNode*, %ast_AstNode** %node
	%136 = getelementptr %ast_AstNode, %ast_AstNode* %135, i32 0, i32 11
	%137 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %136, i32 0, i32 0
	%138 = load %ast_AstNode*, %ast_AstNode** %137
	%139 = call i8 @llvm_GenSub(%ast_AstNode* %138)
	%140 = load %ast_AstNode*, %ast_AstNode** %node
	%141 = getelementptr %ast_AstNode, %ast_AstNode* %140, i32 0, i32 11
	%142 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %141, i32 0, i32 1
	%143 = load %ast_AstNode*, %ast_AstNode** %142
	%144 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%145 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %143, %type_TypeNode* %144)
	%146 = load %ast_AstNode*, %ast_AstNode** %node
	%147 = getelementptr %ast_AstNode, %ast_AstNode* %146, i32 0, i32 11
	%148 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %147, i32 0, i32 1
	store %ast_AstNode* %145, %ast_AstNode** %148
	%149 = load %ast_AstNode*, %ast_AstNode** %node
	%150 = getelementptr %ast_AstNode, %ast_AstNode* %149, i32 0, i32 11
	%151 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %150, i32 0, i32 1
	%152 = load %ast_AstNode*, %ast_AstNode** %151
	%153 = call i8 @llvm_GenSub(%ast_AstNode* %152)
	%154 = load i16, i16* @llvm_Tseqno
	%155 = load %ast_AstNode*, %ast_AstNode** %node
	%156 = getelementptr %ast_AstNode, %ast_AstNode* %155, i32 0, i32 6
	store i16 %154, i16* %156
	%157 = load i16, i16* @llvm_Tseqno
	%158 = add i16 %157, 1
	store i16 %158, i16* @llvm_Tseqno
	%159 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%160 = load i8, i8* %159
	%161 = icmp ne i8 %160, 0
	br i1 %161, label %L.101, label %L.102
L.101:
	%162 = getelementptr [49 x i8], [49 x i8]* @S.1051
	%163 = bitcast [49 x i8]* %162 to [0 x i8]*
	%164 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %163, %ast_AstNode* %164)
	br label %L.100
L.102:
	%165 = getelementptr [44 x i8], [44 x i8]* @S.1052
	%166 = bitcast [44 x i8]* %165 to [0 x i8]*
	%167 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %166, %ast_AstNode* %167)
	br label %L.100
L.100:
	br label %L.6
L.27:
	%nextseqno = alloca i16
	%168 = load %ast_AstNode*, %ast_AstNode** %node
	%169 = getelementptr %ast_AstNode, %ast_AstNode* %168, i32 0, i32 11
	%170 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %169, i32 0, i32 0
	%171 = load %ast_AstNode*, %ast_AstNode** %170
	%172 = call i8 @llvm_GenSub(%ast_AstNode* %171)
	%173 = load %ast_AstNode*, %ast_AstNode** %node
	%174 = getelementptr %ast_AstNode, %ast_AstNode* %173, i32 0, i32 11
	%175 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %174, i32 0, i32 1
	%176 = load %ast_AstNode*, %ast_AstNode** %175
	%177 = load %type_TypeNode*, %type_TypeNode** @type_wordtype
	%178 = call %ast_AstNode* @ast_ExtendT(%ast_AstNode* %176, %type_TypeNode* %177)
	%179 = load %ast_AstNode*, %ast_AstNode** %node
	%180 = getelementptr %ast_AstNode, %ast_AstNode* %179, i32 0, i32 11
	%181 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %180, i32 0, i32 1
	store %ast_AstNode* %178, %ast_AstNode** %181
	%182 = load %ast_AstNode*, %ast_AstNode** %node
	%183 = getelementptr %ast_AstNode, %ast_AstNode* %182, i32 0, i32 11
	%184 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %183, i32 0, i32 1
	%185 = load %ast_AstNode*, %ast_AstNode** %184
	%186 = call i8 @llvm_GenSub(%ast_AstNode* %185)
	%187 = load i16, i16* @llvm_Tseqno
	%188 = load %ast_AstNode*, %ast_AstNode** %node
	%189 = getelementptr %ast_AstNode, %ast_AstNode* %188, i32 0, i32 6
	store i16 %187, i16* %189
	%190 = load i16, i16* @llvm_Tseqno
	%191 = add i16 %190, 1
	store i16 %191, i16* @llvm_Tseqno
	%192 = load i16, i16* @llvm_Tseqno
	store i16 %192, i16* %nextseqno
	%193 = load i16, i16* @llvm_Tseqno
	%194 = add i16 %193, 1
	store i16 %194, i16* @llvm_Tseqno
	%195 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	%196 = load i8, i8* %195
	%197 = icmp ne i8 %196, 0
	br i1 %197, label %L.104, label %L.105
L.104:
	%198 = getelementptr [49 x i8], [49 x i8]* @S.1053
	%199 = bitcast [49 x i8]* %198 to [0 x i8]*
	%200 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %199, %ast_AstNode* %200)
	br label %L.103
L.105:
	%201 = getelementptr [44 x i8], [44 x i8]* @S.1054
	%202 = bitcast [44 x i8]* %201 to [0 x i8]*
	%203 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %202, %ast_AstNode* %203)
	br label %L.103
L.103:
	%204 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_chr(%bout_BufIO* %204, i8 9)
	%205 = load i16, i16* %nextseqno
	call void @llvm_PTempName(i16 %205)
	%206 = getelementptr [27 x i8], [27 x i8]* @S.1055
	%207 = bitcast [27 x i8]* %206 to [0 x i8]*
	%208 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %207, %ast_AstNode* %208)
	%209 = load i16, i16* %nextseqno
	%210 = load %ast_AstNode*, %ast_AstNode** %node
	%211 = getelementptr %ast_AstNode, %ast_AstNode* %210, i32 0, i32 6
	store i16 %209, i16* %211
	br label %L.6
L.28:
	%212 = load %ast_AstNode*, %ast_AstNode** %node
	%213 = getelementptr %ast_AstNode, %ast_AstNode* %212, i32 0, i32 11
	%214 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %213, i32 0, i32 0
	%215 = load %ast_AstNode*, %ast_AstNode** %214
	%216 = call i8 @llvm_GenSub(%ast_AstNode* %215)
	%217 = load i16, i16* @llvm_Tseqno
	%218 = load %ast_AstNode*, %ast_AstNode** %node
	%219 = getelementptr %ast_AstNode, %ast_AstNode* %218, i32 0, i32 6
	store i16 %217, i16* %219
	%220 = load i16, i16* @llvm_Tseqno
	%221 = add i16 %220, 1
	store i16 %221, i16* @llvm_Tseqno
	%222 = load %ast_AstNode*, %ast_AstNode** %node
	%223 = getelementptr %ast_AstNode, %ast_AstNode* %222, i32 0, i32 8
	%224 = load %type_TypeNode*, %type_TypeNode** %223
	%225 = getelementptr %type_TypeNode, %type_TypeNode* %224, i32 0, i32 16
	%226 = load i8, i8* %225
	%227 = icmp eq i8 %226, 5
	br i1 %227, label %L.107, label %L.108
L.107:
	%228 = load %ast_AstNode*, %ast_AstNode** %node
	%229 = getelementptr %ast_AstNode, %ast_AstNode* %228, i32 0, i32 11
	%230 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %229, i32 0, i32 0
	%231 = load %ast_AstNode*, %ast_AstNode** %230
	%232 = getelementptr %ast_AstNode, %ast_AstNode* %231, i32 0, i32 8
	%233 = load %type_TypeNode*, %type_TypeNode** %232
	%234 = getelementptr %type_TypeNode, %type_TypeNode* %233, i32 0, i32 16
	%235 = load i8, i8* %234
	%236 = icmp eq i8 %235, 5
	br i1 %236, label %L.110, label %L.111
L.110:
	%237 = getelementptr [29 x i8], [29 x i8]* @S.1056
	%238 = bitcast [29 x i8]* %237 to [0 x i8]*
	%239 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %238, %ast_AstNode* %239)
	br label %L.109
L.111:
	%240 = getelementptr [30 x i8], [30 x i8]* @S.1057
	%241 = bitcast [30 x i8]* %240 to [0 x i8]*
	%242 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %241, %ast_AstNode* %242)
	br label %L.109
L.109:
	br label %L.106
L.108:
	%243 = load %ast_AstNode*, %ast_AstNode** %node
	%244 = getelementptr %ast_AstNode, %ast_AstNode* %243, i32 0, i32 11
	%245 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %244, i32 0, i32 0
	%246 = load %ast_AstNode*, %ast_AstNode** %245
	%247 = getelementptr %ast_AstNode, %ast_AstNode* %246, i32 0, i32 8
	%248 = load %type_TypeNode*, %type_TypeNode** %247
	%249 = getelementptr %type_TypeNode, %type_TypeNode* %248, i32 0, i32 16
	%250 = load i8, i8* %249
	%251 = icmp eq i8 %250, 5
	br i1 %251, label %L.113, label %L.114
L.113:
	%252 = getelementptr [30 x i8], [30 x i8]* @S.1058
	%253 = bitcast [30 x i8]* %252 to [0 x i8]*
	%254 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %253, %ast_AstNode* %254)
	br label %L.112
L.114:
	%255 = getelementptr [29 x i8], [29 x i8]* @S.1059
	%256 = bitcast [29 x i8]* %255 to [0 x i8]*
	%257 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %256, %ast_AstNode* %257)
	br label %L.112
L.112:
	br label %L.106
L.106:
	br label %L.6
L.29:
	%258 = load %ast_AstNode*, %ast_AstNode** %node
	%259 = getelementptr [5 x i8], [5 x i8]* @S.1060
	%260 = bitcast [5 x i8]* %259 to [0 x i8]*
	call void @llvm_ChangeSize(%ast_AstNode* %258, [0 x i8]* %260)
	br label %L.6
L.30:
	%261 = load %ast_AstNode*, %ast_AstNode** %node
	%262 = getelementptr [5 x i8], [5 x i8]* @S.1061
	%263 = bitcast [5 x i8]* %262 to [0 x i8]*
	call void @llvm_ChangeSize(%ast_AstNode* %261, [0 x i8]* %263)
	br label %L.6
L.31:
	%264 = load %ast_AstNode*, %ast_AstNode** %node
	%265 = getelementptr [6 x i8], [6 x i8]* @S.1062
	%266 = bitcast [6 x i8]* %265 to [0 x i8]*
	call void @llvm_ChangeSize(%ast_AstNode* %264, [0 x i8]* %266)
	br label %L.6
L.32:
	%267 = load %ast_AstNode*, %ast_AstNode** %node
	%268 = call i8 @llvm_UnaryOp(%ast_AstNode* %267)
	br label %L.6
L.33:
	%269 = load %ast_AstNode*, %ast_AstNode** %node
	%270 = call i8 @llvm_UnaryOp(%ast_AstNode* %269)
	br label %L.6
L.34:
	%271 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Abs(%ast_AstNode* %271)
	br label %L.6
L.35:
	%272 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_MinMax(%ast_AstNode* %272)
	br label %L.6
L.36:
	%273 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Rotate(%ast_AstNode* %273)
	br label %L.6
L.37:
	%274 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_ZLen(%ast_AstNode* %274)
	br label %L.6
L.38:
	%275 = load %ast_AstNode*, %ast_AstNode** %node
	%276 = getelementptr [4 x i8], [4 x i8]* @S.1063
	%277 = bitcast [4 x i8]* %276 to [0 x i8]*
	%278 = call i8 @llvm_BinaryOp(%ast_AstNode* %275, [0 x i8]* %277)
	br label %L.6
L.39:
	%279 = load %ast_AstNode*, %ast_AstNode** %node
	%280 = getelementptr [4 x i8], [4 x i8]* @S.1064
	%281 = bitcast [4 x i8]* %280 to [0 x i8]*
	%282 = call i8 @llvm_BinaryOp(%ast_AstNode* %279, [0 x i8]* %281)
	br label %L.6
L.40:
	%283 = load %ast_AstNode*, %ast_AstNode** %node
	%284 = getelementptr [4 x i8], [4 x i8]* @S.1065
	%285 = bitcast [4 x i8]* %284 to [0 x i8]*
	%286 = call i8 @llvm_BinaryOp(%ast_AstNode* %283, [0 x i8]* %285)
	br label %L.6
L.41:
	%287 = load %ast_AstNode*, %ast_AstNode** %node
	%288 = getelementptr [5 x i8], [5 x i8]* @S.1066
	%289 = bitcast [5 x i8]* %288 to [0 x i8]*
	%290 = getelementptr [5 x i8], [5 x i8]* @S.1067
	%291 = bitcast [5 x i8]* %290 to [0 x i8]*
	%292 = call i8 @llvm_SignedBinaryOp(%ast_AstNode* %287, [0 x i8]* %289, [0 x i8]* %291)
	br label %L.6
L.42:
	%293 = load %ast_AstNode*, %ast_AstNode** %node
	%294 = getelementptr [5 x i8], [5 x i8]* @S.1068
	%295 = bitcast [5 x i8]* %294 to [0 x i8]*
	%296 = getelementptr [5 x i8], [5 x i8]* @S.1069
	%297 = bitcast [5 x i8]* %296 to [0 x i8]*
	%298 = call i8 @llvm_SignedBinaryOp(%ast_AstNode* %293, [0 x i8]* %295, [0 x i8]* %297)
	br label %L.6
L.43:
	%299 = load %ast_AstNode*, %ast_AstNode** %node
	%300 = getelementptr [4 x i8], [4 x i8]* @S.1070
	%301 = bitcast [4 x i8]* %300 to [0 x i8]*
	%302 = call i8 @llvm_BinaryOp(%ast_AstNode* %299, [0 x i8]* %301)
	br label %L.6
L.44:
	%303 = load %ast_AstNode*, %ast_AstNode** %node
	%304 = getelementptr [5 x i8], [5 x i8]* @S.1071
	%305 = bitcast [5 x i8]* %304 to [0 x i8]*
	%306 = call i8 @llvm_BinaryOp(%ast_AstNode* %303, [0 x i8]* %305)
	br label %L.6
L.45:
	%307 = load %ast_AstNode*, %ast_AstNode** %node
	%308 = getelementptr [5 x i8], [5 x i8]* @S.1072
	%309 = bitcast [5 x i8]* %308 to [0 x i8]*
	%310 = call i8 @llvm_BinaryOp(%ast_AstNode* %307, [0 x i8]* %309)
	br label %L.6
L.46:
	%311 = load %ast_AstNode*, %ast_AstNode** %node
	%312 = getelementptr [5 x i8], [5 x i8]* @S.1073
	%313 = bitcast [5 x i8]* %312 to [0 x i8]*
	%314 = call i8 @llvm_BinaryOp(%ast_AstNode* %311, [0 x i8]* %313)
	br label %L.6
L.47:
	%315 = load %ast_AstNode*, %ast_AstNode** %node
	%316 = getelementptr [5 x i8], [5 x i8]* @S.1074
	%317 = bitcast [5 x i8]* %316 to [0 x i8]*
	%318 = call i8 @llvm_BinaryOp(%ast_AstNode* %315, [0 x i8]* %317)
	br label %L.6
L.48:
	%319 = load %ast_AstNode*, %ast_AstNode** %node
	%320 = getelementptr [5 x i8], [5 x i8]* @S.1075
	%321 = bitcast [5 x i8]* %320 to [0 x i8]*
	%322 = call i8 @llvm_BinaryOp(%ast_AstNode* %319, [0 x i8]* %321)
	br label %L.6
L.49:
	%323 = load %ast_AstNode*, %ast_AstNode** %node
	%324 = getelementptr [5 x i8], [5 x i8]* @S.1076
	%325 = bitcast [5 x i8]* %324 to [0 x i8]*
	%326 = call i8 @llvm_BinaryOp(%ast_AstNode* %323, [0 x i8]* %325)
	br label %L.6
L.50:
	%327 = load %ast_AstNode*, %ast_AstNode** %node
	%328 = getelementptr [5 x i8], [5 x i8]* @S.1077
	%329 = bitcast [5 x i8]* %328 to [0 x i8]*
	%330 = call i8 @llvm_BinaryOp(%ast_AstNode* %327, [0 x i8]* %329)
	br label %L.6
L.51:
	%331 = load %ast_AstNode*, %ast_AstNode** %node
	%332 = getelementptr [8 x i8], [8 x i8]* @S.1078
	%333 = bitcast [8 x i8]* %332 to [0 x i8]*
	%334 = call i8 @llvm_CompareOp(%ast_AstNode* %331, [0 x i8]* %333)
	store i8 %334, i8* %term
	br label %L.6
L.52:
	%335 = load %ast_AstNode*, %ast_AstNode** %node
	%336 = getelementptr [8 x i8], [8 x i8]* @S.1079
	%337 = bitcast [8 x i8]* %336 to [0 x i8]*
	%338 = call i8 @llvm_CompareOp(%ast_AstNode* %335, [0 x i8]* %337)
	store i8 %338, i8* %term
	br label %L.6
L.53:
	%339 = load %ast_AstNode*, %ast_AstNode** %node
	%340 = getelementptr [9 x i8], [9 x i8]* @S.1080
	%341 = bitcast [9 x i8]* %340 to [0 x i8]*
	%342 = call i8 @llvm_CompareOp(%ast_AstNode* %339, [0 x i8]* %341)
	store i8 %342, i8* %term
	br label %L.6
L.54:
	%343 = load %ast_AstNode*, %ast_AstNode** %node
	%344 = getelementptr [9 x i8], [9 x i8]* @S.1081
	%345 = bitcast [9 x i8]* %344 to [0 x i8]*
	%346 = call i8 @llvm_CompareOp(%ast_AstNode* %343, [0 x i8]* %345)
	store i8 %346, i8* %term
	br label %L.6
L.55:
	%347 = load %ast_AstNode*, %ast_AstNode** %node
	%348 = getelementptr [9 x i8], [9 x i8]* @S.1082
	%349 = bitcast [9 x i8]* %348 to [0 x i8]*
	%350 = call i8 @llvm_CompareOp(%ast_AstNode* %347, [0 x i8]* %349)
	store i8 %350, i8* %term
	br label %L.6
L.56:
	%351 = load %ast_AstNode*, %ast_AstNode** %node
	%352 = getelementptr [9 x i8], [9 x i8]* @S.1083
	%353 = bitcast [9 x i8]* %352 to [0 x i8]*
	%354 = call i8 @llvm_CompareOp(%ast_AstNode* %351, [0 x i8]* %353)
	store i8 %354, i8* %term
	br label %L.6
L.57:
	%355 = load %ast_AstNode*, %ast_AstNode** %node
	%356 = getelementptr [9 x i8], [9 x i8]* @S.1084
	%357 = bitcast [9 x i8]* %356 to [0 x i8]*
	%358 = call i8 @llvm_CompareOp(%ast_AstNode* %355, [0 x i8]* %357)
	store i8 %358, i8* %term
	br label %L.6
L.58:
	%359 = load %ast_AstNode*, %ast_AstNode** %node
	%360 = getelementptr [9 x i8], [9 x i8]* @S.1085
	%361 = bitcast [9 x i8]* %360 to [0 x i8]*
	%362 = call i8 @llvm_CompareOp(%ast_AstNode* %359, [0 x i8]* %361)
	store i8 %362, i8* %term
	br label %L.6
L.59:
	%363 = load %ast_AstNode*, %ast_AstNode** %node
	%364 = getelementptr [9 x i8], [9 x i8]* @S.1086
	%365 = bitcast [9 x i8]* %364 to [0 x i8]*
	%366 = call i8 @llvm_CompareOp(%ast_AstNode* %363, [0 x i8]* %365)
	store i8 %366, i8* %term
	br label %L.6
L.60:
	%367 = load %ast_AstNode*, %ast_AstNode** %node
	%368 = getelementptr [9 x i8], [9 x i8]* @S.1087
	%369 = bitcast [9 x i8]* %368 to [0 x i8]*
	%370 = call i8 @llvm_CompareOp(%ast_AstNode* %367, [0 x i8]* %369)
	store i8 %370, i8* %term
	br label %L.6
L.61:
	%371 = load %ast_AstNode*, %ast_AstNode** %node
	%372 = getelementptr [9 x i8], [9 x i8]* @S.1088
	%373 = bitcast [9 x i8]* %372 to [0 x i8]*
	%374 = call i8 @llvm_CompareOp(%ast_AstNode* %371, [0 x i8]* %373)
	store i8 %374, i8* %term
	br label %L.6
L.62:
	%375 = load %ast_AstNode*, %ast_AstNode** %node
	%376 = getelementptr [9 x i8], [9 x i8]* @S.1089
	%377 = bitcast [9 x i8]* %376 to [0 x i8]*
	%378 = call i8 @llvm_CompareOp(%ast_AstNode* %375, [0 x i8]* %377)
	store i8 %378, i8* %term
	br label %L.6
L.63:
	%379 = load %ast_AstNode*, %ast_AstNode** %node
	%380 = getelementptr [9 x i8], [9 x i8]* @S.1090
	%381 = bitcast [9 x i8]* %380 to [0 x i8]*
	%382 = call i8 @llvm_CompareOp(%ast_AstNode* %379, [0 x i8]* %381)
	store i8 %382, i8* %term
	br label %L.6
L.64:
	%383 = load %ast_AstNode*, %ast_AstNode** %node
	%384 = getelementptr [9 x i8], [9 x i8]* @S.1091
	%385 = bitcast [9 x i8]* %384 to [0 x i8]*
	%386 = call i8 @llvm_CompareOp(%ast_AstNode* %383, [0 x i8]* %385)
	store i8 %386, i8* %term
	br label %L.6
L.65:
	%387 = load %ast_AstNode*, %ast_AstNode** %node
	%388 = getelementptr [9 x i8], [9 x i8]* @S.1092
	%389 = bitcast [9 x i8]* %388 to [0 x i8]*
	%390 = call i8 @llvm_CompareOp(%ast_AstNode* %387, [0 x i8]* %389)
	store i8 %390, i8* %term
	br label %L.6
L.66:
	%391 = load %ast_AstNode*, %ast_AstNode** %node
	%392 = getelementptr [9 x i8], [9 x i8]* @S.1093
	%393 = bitcast [9 x i8]* %392 to [0 x i8]*
	%394 = call i8 @llvm_CompareOp(%ast_AstNode* %391, [0 x i8]* %393)
	store i8 %394, i8* %term
	br label %L.6
L.67:
	%395 = load %ast_AstNode*, %ast_AstNode** %node
	%396 = getelementptr [4 x i8], [4 x i8]* @S.1094
	%397 = bitcast [4 x i8]* %396 to [0 x i8]*
	%398 = call i8 @llvm_BinaryOp(%ast_AstNode* %395, [0 x i8]* %397)
	br label %L.6
L.68:
	%399 = load %ast_AstNode*, %ast_AstNode** %node
	%400 = getelementptr [3 x i8], [3 x i8]* @S.1095
	%401 = bitcast [3 x i8]* %400 to [0 x i8]*
	%402 = call i8 @llvm_BinaryOp(%ast_AstNode* %399, [0 x i8]* %401)
	br label %L.6
L.69:
	%403 = load %ast_AstNode*, %ast_AstNode** %node
	%404 = getelementptr [4 x i8], [4 x i8]* @S.1096
	%405 = bitcast [4 x i8]* %404 to [0 x i8]*
	%406 = call i8 @llvm_BinaryOp(%ast_AstNode* %403, [0 x i8]* %405)
	br label %L.6
L.70:
	%407 = load %ast_AstNode*, %ast_AstNode** %node
	%408 = getelementptr %ast_AstNode, %ast_AstNode* %407, i32 0, i32 11
	%409 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %408, i32 0, i32 0
	%410 = load %ast_AstNode*, %ast_AstNode** %409
	%411 = call i8 @llvm_GenSub(%ast_AstNode* %410)
	%412 = load i16, i16* @llvm_Tseqno
	%413 = load %ast_AstNode*, %ast_AstNode** %node
	%414 = getelementptr %ast_AstNode, %ast_AstNode* %413, i32 0, i32 6
	store i16 %412, i16* %414
	%415 = load i16, i16* @llvm_Tseqno
	%416 = add i16 %415, 1
	store i16 %416, i16* @llvm_Tseqno
	%417 = getelementptr [24 x i8], [24 x i8]* @S.1097
	%418 = bitcast [24 x i8]* %417 to [0 x i8]*
	%419 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Print([0 x i8]* %418, %ast_AstNode* %419)
	br label %L.6
L.71:
	%420 = load %ast_AstNode*, %ast_AstNode** %node
	%421 = call i8 @llvm_Conditional(%ast_AstNode* %420, i8 0)
	store i8 %421, i8* %term
	br label %L.6
L.72:
	%422 = load %ast_AstNode*, %ast_AstNode** %node
	%423 = call i8 @llvm_Conditional(%ast_AstNode* %422, i8 1)
	store i8 %423, i8* %term
	br label %L.6
L.73:
	%424 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_IfExpr(%ast_AstNode* %424)
	br label %L.6
L.74:
	%425 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Call(%ast_AstNode* %425, i8 0)
	br label %L.6
L.75:
	%426 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Call(%ast_AstNode* %426, i8 1)
	br label %L.6
L.76:
	%427 = load %ast_AstNode*, %ast_AstNode** %node
	call void @llvm_Asm(%ast_AstNode* %427)
	br label %L.6
L.77:
	%428 = load %ast_AstNode*, %ast_AstNode** %node
	%429 = call i8 @llvm_If(%ast_AstNode* %428)
	store i8 %429, i8* %term
	br label %L.6
L.78:
	%430 = load %ast_AstNode*, %ast_AstNode** %node
	%431 = call i8 @llvm_Select(%ast_AstNode* %430)
	store i8 %431, i8* %term
	br label %L.6
L.79:
	%432 = load %ast_AstNode*, %ast_AstNode** %node
	%433 = call i8 @llvm_Loop(%ast_AstNode* %432)
	store i8 %433, i8* %term
	br label %L.6
L.80:
	%434 = load %ast_AstNode*, %ast_AstNode** %node
	%435 = call i8 @llvm_Exit(%ast_AstNode* %434)
	store i8 %435, i8* %term
	br label %L.6
L.81:
	%i = alloca i16
	store i16 0, i16* %i
	br label %L.115
L.115:
	%436 = load i16, i16* %i
	%437 = load %ast_AstNode*, %ast_AstNode** %node
	%438 = getelementptr %ast_AstNode, %ast_AstNode* %437, i32 0, i32 2
	%439 = load i16, i16* %438
	%440 = icmp ult i16 %436, %439
	%441 = xor i1 %440, true
	br i1 %441, label %L.116, label %L.117
L.117:
	%442 = load i8, i8* %term
	%443 = icmp ne i8 %442, 0
	br i1 %443, label %L.119, label %L.118
L.119:
	%444 = load i16, i16* @llvm_Lseqno
	call void @llvm_Label(i16 %444)
	%445 = load i16, i16* @llvm_Lseqno
	%446 = add i16 %445, 1
	store i16 %446, i16* @llvm_Lseqno
	store i8 0, i8* %term
	br label %L.118
L.118:
	%447 = load %ast_AstNode*, %ast_AstNode** %node
	%448 = getelementptr %ast_AstNode, %ast_AstNode* %447, i32 0, i32 11
	%449 = load i16, i16* %i
	%450 = zext i16 %449 to i32
	%451 = getelementptr [0 x %ast_AstNode*], [0 x %ast_AstNode*]* %448, i32 0, i32 %450
	%452 = load %ast_AstNode*, %ast_AstNode** %451
	%453 = call i8 @llvm_GenSub(%ast_AstNode* %452)
	store i8 %453, i8* %term
	%454 = load i16, i16* %i
	%455 = add i16 %454, 1
	store i16 %455, i16* %i
	br label %L.115
L.116:
	br label %L.6
L.5:
	br label %L.6
L.6:
	%456 = load i8, i8* %term
	store i8 %456, i8* %rv.0
	br label %return
return:
	%457 = load i8, i8* %rv.0
	ret i8 %457
}
@S.1098 = private unnamed_addr constant [22 x i8] c"target datalayout = \22\00"
@S.1099 = private unnamed_addr constant [2 x i8] c"E\00"
@S.1100 = private unnamed_addr constant [2 x i8] c"e\00"
@S.1101 = private unnamed_addr constant [4 x i8] c"-p:\00"
@S.1102 = private unnamed_addr constant [2 x i8] c":\00"
@S.1103 = private unnamed_addr constant [2 x i8] c":\00"
@S.1104 = private unnamed_addr constant [5 x i8] c"-i1:\00"
@S.1105 = private unnamed_addr constant [2 x i8] c":\00"
@S.1106 = private unnamed_addr constant [3 x i8] c"-i\00"
@S.1107 = private unnamed_addr constant [2 x i8] c":\00"
@S.1108 = private unnamed_addr constant [2 x i8] c":\00"
@S.1109 = private unnamed_addr constant [20 x i8] c"\22\0Atarget triple = \22\00"
@S.1110 = private unnamed_addr constant [3 x i8] c"\22\0A\00"
define internal void @llvm_Gen(i32 %fd$, %ast_AstNode* %tree$) nounwind {
L.0:
	%fd = alloca i32
	store i32 %fd$, i32* %fd
	%tree = alloca %ast_AstNode*
	store %ast_AstNode* %tree$, %ast_AstNode** %tree
	%i = alloca i8
	%0 = load i32, i32* %fd
	%1 = call %bout_BufIO* @bout_buffer(i32 %0, i32 4096)
	store %bout_BufIO* %1, %bout_BufIO** @llvm_f
	%2 = load %type_TypeNode*, %type_TypeNode** @type_bytetype
	%3 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %2)
	store %type_TypeNode* %3, %type_TypeNode** @llvm_pbytetype
	store i8 0, i8* %i
	br label %L.1
L.1:
	%4 = load i8, i8* %i
	%5 = load %target_ModelT*, %target_ModelT** @target_Target
	%6 = getelementptr %target_ModelT, %target_ModelT* %5, i32 0, i32 4
	%7 = load i8, i8* %6
	%8 = icmp ult i8 %4, %7
	%9 = xor i1 %8, true
	br i1 %9, label %L.2, label %L.3
L.3:
	%10 = load i8, i8* %i
	%11 = zext i8 %10 to i32
	%12 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @type_uinttypes, i32 0, i32 %11
	%13 = load %type_TypeNode*, %type_TypeNode** %12
	%14 = call %type_TypeNode* @type_MakeRef(%type_TypeNode* %13)
	%15 = load i8, i8* %i
	%16 = zext i8 %15 to i32
	%17 = getelementptr [6 x %type_TypeNode*], [6 x %type_TypeNode*]* @llvm_puinttype, i32 0, i32 %16
	store %type_TypeNode* %14, %type_TypeNode** %17
	%18 = load i8, i8* %i
	%19 = add i8 %18, 1
	store i8 %19, i8* %i
	br label %L.1
L.2:
	%20 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%21 = getelementptr [22 x i8], [22 x i8]* @S.1098
	%22 = bitcast [22 x i8]* %21 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %20, [0 x i8]* %22)
	%23 = load %target_ModelT*, %target_ModelT** @target_Target
	%24 = getelementptr %target_ModelT, %target_ModelT* %23, i32 0, i32 0
	%25 = load i8, i8* %24
	%26 = icmp eq i8 %25, 1
	br i1 %26, label %L.5, label %L.6
L.5:
	%27 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%28 = getelementptr [2 x i8], [2 x i8]* @S.1099
	%29 = bitcast [2 x i8]* %28 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %27, [0 x i8]* %29)
	br label %L.4
L.6:
	%30 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%31 = getelementptr [2 x i8], [2 x i8]* @S.1100
	%32 = bitcast [2 x i8]* %31 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %30, [0 x i8]* %32)
	br label %L.4
L.4:
	%33 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%34 = getelementptr [4 x i8], [4 x i8]* @S.1101
	%35 = bitcast [4 x i8]* %34 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %33, [0 x i8]* %35)
	%36 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%37 = load %target_ModelT*, %target_ModelT** @target_Target
	%38 = getelementptr %target_ModelT, %target_ModelT* %37, i32 0, i32 5
	%39 = getelementptr %target_SizeAlign, %target_SizeAlign* %38, i32 0, i32 0
	%40 = load i8, i8* %39
	%41 = zext i8 %40 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %36, i32 %41)
	%42 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%43 = getelementptr [2 x i8], [2 x i8]* @S.1102
	%44 = bitcast [2 x i8]* %43 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %42, [0 x i8]* %44)
	%45 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%46 = load %target_ModelT*, %target_ModelT** @target_Target
	%47 = getelementptr %target_ModelT, %target_ModelT* %46, i32 0, i32 5
	%48 = getelementptr %target_SizeAlign, %target_SizeAlign* %47, i32 0, i32 1
	%49 = load i8, i8* %48
	%50 = zext i8 %49 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %45, i32 %50)
	%51 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%52 = getelementptr [2 x i8], [2 x i8]* @S.1103
	%53 = bitcast [2 x i8]* %52 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %51, [0 x i8]* %53)
	%54 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%55 = load %target_ModelT*, %target_ModelT** @target_Target
	%56 = getelementptr %target_ModelT, %target_ModelT* %55, i32 0, i32 5
	%57 = getelementptr %target_SizeAlign, %target_SizeAlign* %56, i32 0, i32 1
	%58 = load i8, i8* %57
	%59 = zext i8 %58 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %54, i32 %59)
	%60 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%61 = getelementptr [5 x i8], [5 x i8]* @S.1104
	%62 = bitcast [5 x i8]* %61 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %60, [0 x i8]* %62)
	%63 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%64 = load %target_ModelT*, %target_ModelT** @target_Target
	%65 = getelementptr %target_ModelT, %target_ModelT* %64, i32 0, i32 6
	%66 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %65, i32 0, i32 0
	%67 = getelementptr %target_SizeAlign, %target_SizeAlign* %66, i32 0, i32 1
	%68 = load i8, i8* %67
	%69 = zext i8 %68 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %63, i32 %69)
	%70 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%71 = getelementptr [2 x i8], [2 x i8]* @S.1105
	%72 = bitcast [2 x i8]* %71 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %70, [0 x i8]* %72)
	%73 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%74 = load %target_ModelT*, %target_ModelT** @target_Target
	%75 = getelementptr %target_ModelT, %target_ModelT* %74, i32 0, i32 6
	%76 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %75, i32 0, i32 0
	%77 = getelementptr %target_SizeAlign, %target_SizeAlign* %76, i32 0, i32 1
	%78 = load i8, i8* %77
	%79 = zext i8 %78 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %73, i32 %79)
	store i8 0, i8* %i
	br label %L.7
L.7:
	%80 = load i8, i8* %i
	%81 = load %target_ModelT*, %target_ModelT** @target_Target
	%82 = getelementptr %target_ModelT, %target_ModelT* %81, i32 0, i32 4
	%83 = load i8, i8* %82
	%84 = icmp ult i8 %80, %83
	%85 = xor i1 %84, true
	br i1 %85, label %L.8, label %L.9
L.9:
	%86 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%87 = getelementptr [3 x i8], [3 x i8]* @S.1106
	%88 = bitcast [3 x i8]* %87 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %86, [0 x i8]* %88)
	%89 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%90 = load %target_ModelT*, %target_ModelT** @target_Target
	%91 = getelementptr %target_ModelT, %target_ModelT* %90, i32 0, i32 6
	%92 = load i8, i8* %i
	%93 = zext i8 %92 to i32
	%94 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %91, i32 0, i32 %93
	%95 = getelementptr %target_SizeAlign, %target_SizeAlign* %94, i32 0, i32 0
	%96 = load i8, i8* %95
	%97 = zext i8 %96 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %89, i32 %97)
	%98 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%99 = getelementptr [2 x i8], [2 x i8]* @S.1107
	%100 = bitcast [2 x i8]* %99 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %98, [0 x i8]* %100)
	%101 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%102 = load %target_ModelT*, %target_ModelT** @target_Target
	%103 = getelementptr %target_ModelT, %target_ModelT* %102, i32 0, i32 6
	%104 = load i8, i8* %i
	%105 = zext i8 %104 to i32
	%106 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %103, i32 0, i32 %105
	%107 = getelementptr %target_SizeAlign, %target_SizeAlign* %106, i32 0, i32 1
	%108 = load i8, i8* %107
	%109 = zext i8 %108 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %101, i32 %109)
	%110 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%111 = getelementptr [2 x i8], [2 x i8]* @S.1108
	%112 = bitcast [2 x i8]* %111 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %110, [0 x i8]* %112)
	%113 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%114 = load %target_ModelT*, %target_ModelT** @target_Target
	%115 = getelementptr %target_ModelT, %target_ModelT* %114, i32 0, i32 6
	%116 = load i8, i8* %i
	%117 = zext i8 %116 to i32
	%118 = getelementptr [6 x %target_SizeAlign], [6 x %target_SizeAlign]* %115, i32 0, i32 %117
	%119 = getelementptr %target_SizeAlign, %target_SizeAlign* %118, i32 0, i32 1
	%120 = load i8, i8* %119
	%121 = zext i8 %120 to i32
	call void @bout_BufIO_uint(%bout_BufIO* %113, i32 %121)
	%122 = load i8, i8* %i
	%123 = add i8 %122, 1
	store i8 %123, i8* %i
	br label %L.7
L.8:
	%124 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%125 = getelementptr [20 x i8], [20 x i8]* @S.1109
	%126 = bitcast [20 x i8]* %125 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %124, [0 x i8]* %126)
	%127 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%128 = load [0 x i8]*, [0 x i8]** @target_Triple
	%129 = bitcast [0 x i8]* %128 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %127, [0 x i8]* %129)
	%130 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	%131 = getelementptr [3 x i8], [3 x i8]* @S.1110
	%132 = bitcast [3 x i8]* %131 to [0 x i8]*
	call void @bout_BufIO_str(%bout_BufIO* %130, [0 x i8]* %132)
	%133 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%134 = load i8, i8* %133
	%135 = icmp ne i8 %134, 0
	br i1 %135, label %L.11, label %L.10
L.11:
	%136 = load %ast_AstNode*, %ast_AstNode** %tree
	%137 = getelementptr %ast_AstNode, %ast_AstNode* %136, i32 0, i32 9
	%138 = load %symb_SymbNode*, %symb_SymbNode** %137
	%139 = getelementptr %symb_SymbNode, %symb_SymbNode* %138
	call void @llvmdb_ProgStart(%symb_SymbNode* %139, i8 0)
	br label %L.10
L.10:
	%140 = load %ast_AstNode*, %ast_AstNode** %tree
	%141 = call i8 @llvm_GenSub(%ast_AstNode* %140)
	call void @llvm_DeclareIntrinsics()
	%142 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%143 = load i8, i8* %142
	%144 = icmp ne i8 %143, 0
	br i1 %144, label %L.13, label %L.12
L.13:
	call void @llvmdb_ProgFinish()
	br label %L.12
L.12:
	%145 = load %bout_BufIO*, %bout_BufIO** @llvm_f
	call void @bout_BufIO_flush(%bout_BufIO* %145)
	br label %return
return:
	ret void
}
@S.1111 = private unnamed_addr constant [5 x i8] c".esl\00"
@S.1112 = private unnamed_addr constant [5 x i8] c".o: \00"
@S.1113 = private unnamed_addr constant [35 x i8] c"Unsupported LLVM backend version: \00"
@S.1114 = private unnamed_addr constant [51 x i8] c"Debug information not supported for LLVM version: \00"
@S.1115 = private unnamed_addr constant [21 x i8] c"Unsupported target: \00"
@S.1116 = private unnamed_addr constant [28 x i8] c"Unable to open input file: \00"
@S.1117 = private unnamed_addr constant [31 x i8] c"Unable to create output file: \00"
define i32 @main(i32 %argc$, [0 x [0 x i8]*]* %argv$) nounwind {
L.0:
	%rv.0 = alloca i32
	%argc = alloca i32
	store i32 %argc$, i32* %argc
	%argv = alloca [0 x [0 x i8]*]*
	store [0 x [0 x i8]*]* %argv$, [0 x [0 x i8]*]** %argv
	%tree = alloca %ast_AstNode*
	%i = alloca i32
	%outfd = alloca i32
	%outfile = alloca [0 x i8]*
	%targetarch = alloca [0 x i8]*
	%llvmversion = alloca [0 x i8]*
	store [0 x i8]* null, [0 x i8]** %outfile
	store [0 x i8]* null, [0 x i8]** %targetarch
	store [0 x i8]* null, [0 x i8]** %llvmversion
	store i32 1, i32* %outfd
	store i32 1, i32* %i
	br label %L.1
L.1:
	%0 = load i32, i32* %i
	%1 = load i32, i32* %argc
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%4 = load i32, i32* %i
	%5 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %3, i32 0, i32 %4
	%6 = load [0 x i8]*, [0 x i8]** %5
	%7 = getelementptr [0 x i8], [0 x i8]* %6, i32 0, i32 0
	%8 = load i8, i8* %7
	%9 = icmp eq i8 %8, 45
	br label %L.5
L.5:
	%10 = phi i1 [ false, %L.1 ], [ %9, %L.4 ]
	%11 = xor i1 %10, true
	br i1 %11, label %L.2, label %L.3
L.3:
	%12 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%13 = load i32, i32* %i
	%14 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %12, i32 0, i32 %13
	%15 = load [0 x i8]*, [0 x i8]** %14
	%16 = getelementptr [0 x i8], [0 x i8]* %15, i32 0, i32 1
	%17 = load i8, i8* %16
	%18 = zext i8 %17 to i32
	switch i32 %18, label %L.6 [
		i32 68, label %L.8
		i32 109, label %L.9
		i32 73, label %L.10
		i32 111, label %L.11
		i32 79, label %L.12
		i32 70, label %L.13
		i32 77, label %L.14
		i32 103, label %L.15
		i32 76, label %L.16
		i32 65, label %L.17
	]
L.8:
	%19 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%20 = load i32, i32* %i
	%21 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %19, i32 0, i32 %20
	%22 = load [0 x i8]*, [0 x i8]** %21
	%23 = getelementptr [0 x i8], [0 x i8]* %22, i32 0, i32 2
	%24 = load i8, i8* %23
	%25 = zext i8 %24 to i32
	switch i32 %25, label %L.18 [
		i32 97, label %L.20
		i32 115, label %L.21
		i32 83, label %L.22
		i32 102, label %L.23
		i32 116, label %L.24
	]
L.20:
	%26 = getelementptr %A.2, %A.2* @debug, i32 0, i32 1
	store i8 1, i8* %26
	br label %L.19
L.21:
	%27 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%28 = getelementptr %A.1, %A.1* %27, i32 0, i32 1
	store i8 1, i8* %28
	%29 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%30 = getelementptr %A.1, %A.1* %29, i32 0, i32 2
	store i8 1, i8* %30
	%31 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%32 = getelementptr %A.1, %A.1* %31, i32 0, i32 3
	store i8 1, i8* %32
	br label %L.19
L.22:
	%33 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%34 = getelementptr %A.1, %A.1* %33, i32 0, i32 0
	store i8 1, i8* %34
	%35 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%36 = getelementptr %A.1, %A.1* %35, i32 0, i32 1
	store i8 1, i8* %36
	%37 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%38 = getelementptr %A.1, %A.1* %37, i32 0, i32 2
	store i8 1, i8* %38
	%39 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%40 = getelementptr %A.1, %A.1* %39, i32 0, i32 3
	store i8 1, i8* %40
	br label %L.19
L.23:
	%41 = getelementptr %A.2, %A.2* @debug, i32 0, i32 2
	store i8 1, i8* %41
	br label %L.19
L.24:
	%42 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%43 = load i32, i32* %i
	%44 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %42, i32 0, i32 %43
	%45 = load [0 x i8]*, [0 x i8]** %44
	%46 = getelementptr [0 x i8], [0 x i8]* %45, i32 0, i32 3
	%47 = load i8, i8* %46
	%48 = icmp uge i8 %47, 48
	br i1 %48, label %L.25, label %L.26
L.25:
	%49 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%50 = load i32, i32* %i
	%51 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %49, i32 0, i32 %50
	%52 = load [0 x i8]*, [0 x i8]** %51
	%53 = getelementptr [0 x i8], [0 x i8]* %52, i32 0, i32 3
	%54 = load i8, i8* %53
	%55 = icmp ule i8 %54, 57
	br label %L.26
L.26:
	%56 = phi i1 [ false, %L.24 ], [ %55, %L.25 ]
	br i1 %56, label %L.28, label %L.27
L.28:
	%57 = getelementptr %A.2, %A.2* @debug, i32 0, i32 3
	%58 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%59 = load i32, i32* %i
	%60 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %58, i32 0, i32 %59
	%61 = load [0 x i8]*, [0 x i8]** %60
	%62 = getelementptr [0 x i8], [0 x i8]* %61, i32 0, i32 3
	%63 = load i8, i8* %62
	%64 = zext i8 %63 to i32
	%65 = sub i32 %64, 48
	%66 = getelementptr [10 x i8], [10 x i8]* %57, i32 0, i32 %65
	store i8 1, i8* %66
	br label %L.27
L.27:
	br label %L.19
L.18:
	br label %L.19
L.19:
	br label %L.7
L.9:
	%67 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%68 = load i32, i32* %i
	%69 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %67, i32 0, i32 %68
	%70 = load [0 x i8]*, [0 x i8]** %69
	%71 = getelementptr [0 x i8], [0 x i8]* %70, i32 0, i32 2
	%72 = load i8, i8* %71
	%73 = icmp ne i8 %72, 0
	br i1 %73, label %L.30, label %L.31
L.30:
	%74 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%75 = load i32, i32* %i
	%76 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %74, i32 0, i32 %75
	%77 = load [0 x i8]*, [0 x i8]** %76
	%78 = getelementptr [0 x i8], [0 x i8]* %77, i32 0, i32 2
	%79 = bitcast i8* %78 to [0 x i8]*
	%80 = getelementptr [0 x i8], [0 x i8]* %79
	%81 = bitcast [0 x i8]* %80 to [0 x i8]*
	store [0 x i8]* %81, [0 x i8]** %targetarch
	br label %L.29
L.31:
	%82 = load i32, i32* %i
	%83 = add i32 %82, 1
	store i32 %83, i32* %i
	%84 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%85 = load i32, i32* %i
	%86 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %84, i32 0, i32 %85
	%87 = load [0 x i8]*, [0 x i8]** %86
	%88 = bitcast [0 x i8]* %87 to [0 x i8]*
	store [0 x i8]* %88, [0 x i8]** %targetarch
	br label %L.29
L.29:
	br label %L.7
L.10:
	%89 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%90 = load i32, i32* %i
	%91 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %89, i32 0, i32 %90
	%92 = load [0 x i8]*, [0 x i8]** %91
	%93 = getelementptr [0 x i8], [0 x i8]* %92, i32 0, i32 2
	%94 = bitcast i8* %93 to [0 x i8]*
	%95 = getelementptr [0 x i8], [0 x i8]* %94
	%96 = bitcast [0 x i8]* %95 to [0 x i8]*
	%97 = call %stmt_SearchPathEntry* @stmt_SearchPathAdd([0 x i8]* %96, i8 0)
	br label %L.7
L.11:
	%98 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%99 = load i32, i32* %i
	%100 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %98, i32 0, i32 %99
	%101 = load [0 x i8]*, [0 x i8]** %100
	%102 = getelementptr [0 x i8], [0 x i8]* %101, i32 0, i32 2
	%103 = load i8, i8* %102
	%104 = icmp ne i8 %103, 0
	br i1 %104, label %L.33, label %L.34
L.33:
	%105 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%106 = load i32, i32* %i
	%107 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %105, i32 0, i32 %106
	%108 = load [0 x i8]*, [0 x i8]** %107
	%109 = getelementptr [0 x i8], [0 x i8]* %108, i32 0, i32 2
	%110 = bitcast i8* %109 to [0 x i8]*
	%111 = getelementptr [0 x i8], [0 x i8]* %110
	%112 = bitcast [0 x i8]* %111 to [0 x i8]*
	store [0 x i8]* %112, [0 x i8]** %outfile
	br label %L.32
L.34:
	%113 = load i32, i32* %i
	%114 = add i32 %113, 1
	store i32 %114, i32* %i
	%115 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%116 = load i32, i32* %i
	%117 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %115, i32 0, i32 %116
	%118 = load [0 x i8]*, [0 x i8]** %117
	%119 = bitcast [0 x i8]* %118 to [0 x i8]*
	store [0 x i8]* %119, [0 x i8]** %outfile
	br label %L.32
L.32:
	br label %L.7
L.12:
	%120 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%121 = load i32, i32* %i
	%122 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %120, i32 0, i32 %121
	%123 = load [0 x i8]*, [0 x i8]** %122
	%124 = getelementptr [0 x i8], [0 x i8]* %123, i32 0, i32 2
	%125 = load i8, i8* %124
	%126 = zext i8 %125 to i32
	switch i32 %126, label %L.35 [
		i32 115, label %L.37
		i32 122, label %L.38
	]
L.37:
	%127 = getelementptr %A.3, %A.3* @feature, i32 0, i32 0
	store i8 1, i8* %127
	br label %L.36
L.38:
	%128 = getelementptr %A.3, %A.3* @feature, i32 0, i32 0
	store i8 2, i8* %128
	br label %L.36
L.35:
	br label %L.36
L.36:
	br label %L.7
L.13:
	%129 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%130 = load i32, i32* %i
	%131 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %129, i32 0, i32 %130
	%132 = load [0 x i8]*, [0 x i8]** %131
	%133 = getelementptr [0 x i8], [0 x i8]* %132, i32 0, i32 2
	%134 = load i8, i8* %133
	%135 = zext i8 %134 to i32
	switch i32 %135, label %L.39 [
		i32 117, label %L.41
		i32 116, label %L.42
		i32 99, label %L.43
		i32 97, label %L.44
		i32 114, label %L.45
	]
L.41:
	%136 = getelementptr %A.3, %A.3* @feature, i32 0, i32 1
	store i8 1, i8* %136
	br label %L.40
L.42:
	%137 = getelementptr %A.3, %A.3* @feature, i32 0, i32 4
	store i8 1, i8* %137
	br label %L.40
L.43:
	%138 = getelementptr %A.3, %A.3* @feature, i32 0, i32 5
	store i8 1, i8* %138
	br label %L.40
L.44:
	%139 = getelementptr %A.3, %A.3* @feature, i32 0, i32 6
	store i8 1, i8* %139
	br label %L.40
L.45:
	%140 = getelementptr %A.3, %A.3* @feature, i32 0, i32 8
	store i8 1, i8* %140
	br label %L.40
L.39:
	br label %L.40
L.40:
	br label %L.7
L.14:
	%141 = getelementptr %A.3, %A.3* @feature, i32 0, i32 2
	store i8 1, i8* %141
	br label %L.7
L.15:
	%142 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	store i8 1, i8* %142
	br label %L.7
L.16:
	%143 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%144 = load i32, i32* %i
	%145 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %143, i32 0, i32 %144
	%146 = load [0 x i8]*, [0 x i8]** %145
	%147 = getelementptr [0 x i8], [0 x i8]* %146, i32 0, i32 2
	%148 = load i8, i8* %147
	%149 = icmp ne i8 %148, 0
	br i1 %149, label %L.47, label %L.48
L.47:
	%150 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%151 = load i32, i32* %i
	%152 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %150, i32 0, i32 %151
	%153 = load [0 x i8]*, [0 x i8]** %152
	%154 = getelementptr [0 x i8], [0 x i8]* %153, i32 0, i32 2
	%155 = bitcast i8* %154 to [0 x i8]*
	%156 = getelementptr [0 x i8], [0 x i8]* %155
	%157 = bitcast [0 x i8]* %156 to [0 x i8]*
	store [0 x i8]* %157, [0 x i8]** %llvmversion
	br label %L.46
L.48:
	%158 = load i32, i32* %i
	%159 = add i32 %158, 1
	store i32 %159, i32* %i
	%160 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%161 = load i32, i32* %i
	%162 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %160, i32 0, i32 %161
	%163 = load [0 x i8]*, [0 x i8]** %162
	%164 = bitcast [0 x i8]* %163 to [0 x i8]*
	store [0 x i8]* %164, [0 x i8]** %llvmversion
	br label %L.46
L.46:
	br label %L.7
L.17:
	%165 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%166 = load i32, i32* %i
	%167 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %165, i32 0, i32 %166
	%168 = load [0 x i8]*, [0 x i8]** %167
	%169 = getelementptr [0 x i8], [0 x i8]* %168, i32 0, i32 2
	%170 = load i8, i8* %169
	%171 = zext i8 %170 to i32
	switch i32 %171, label %L.49 [
		i32 97, label %L.51
		i32 122, label %L.52
	]
L.51:
	%172 = getelementptr %A.3, %A.3* @feature, i32 0, i32 7
	store i8 1, i8* %172
	br label %L.50
L.52:
	%173 = getelementptr %A.3, %A.3* @feature, i32 0, i32 9
	store i8 1, i8* %173
	br label %L.50
L.49:
	br label %L.50
L.50:
	br label %L.7
L.6:
	br label %L.7
L.7:
	%174 = load i32, i32* %i
	%175 = add i32 %174, 1
	store i32 %175, i32* %i
	br label %L.1
L.2:
	%176 = load i32, i32* %i
	%177 = load i32, i32* %argc
	%178 = icmp uge i32 %176, %177
	br i1 %178, label %L.54, label %L.53
L.54:
	store i32 3, i32* %rv.0
	br label %return
L.53:
	%179 = getelementptr %A.3, %A.3* @feature, i32 0, i32 2
	%180 = load i8, i8* %179
	%181 = icmp ne i8 %180, 0
	br i1 %181, label %L.56, label %L.55
L.56:
	%n = alloca i32
	%182 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%183 = load i32, i32* %i
	%184 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %182, i32 0, i32 %183
	%185 = load [0 x i8]*, [0 x i8]** %184
	%186 = getelementptr [0 x i8], [0 x i8]* %185
	%187 = bitcast [0 x i8]* %186 to [0 x i8]*
	%188 = call i32 @zstr_len([0 x i8]* %187, i32 1024)
	store i32 %188, i32* %n
	%189 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%190 = load i32, i32* %i
	%191 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %189, i32 0, i32 %190
	%192 = load [0 x i8]*, [0 x i8]** %191
	%193 = load i32, i32* %n
	%194 = sub i32 %193, 4
	%195 = getelementptr [0 x i8], [0 x i8]* %192, i32 0, i32 %194
	%196 = bitcast i8* %195 to [4 x i8]*
	%197 = getelementptr [4 x i8], [4 x i8]* %196
	%198 = bitcast [4 x i8]* %197 to [0 x i8]*
	%199 = getelementptr [5 x i8], [5 x i8]* @S.1111
	%200 = bitcast [5 x i8]* %199 to [0 x i8]*
	%201 = call i8 @zstr_eq([0 x i8]* %198, [0 x i8]* %200, i32 1024)
	%202 = icmp ne i8 %201, 0
	br i1 %202, label %L.58, label %L.57
L.58:
	%203 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%204 = load i32, i32* %i
	%205 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %203, i32 0, i32 %204
	%206 = load [0 x i8]*, [0 x i8]** %205
	%207 = load i32, i32* %n
	%208 = sub i32 %207, 4
	%209 = getelementptr [0 x i8], [0 x i8]* %206, i32 0, i32 %208
	store i8 0, i8* %209
	%210 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%211 = load i32, i32* %i
	%212 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %210, i32 0, i32 %211
	%213 = load [0 x i8]*, [0 x i8]** %212
	%214 = getelementptr [0 x i8], [0 x i8]* %213
	%215 = bitcast [0 x i8]* %214 to [0 x i8]*
	call void @sys_fildes_str(i32 1, [0 x i8]* %215)
	%216 = getelementptr [5 x i8], [5 x i8]* @S.1112
	%217 = bitcast [5 x i8]* %216 to [0 x i8]*
	call void @sys_fildes_str(i32 1, [0 x i8]* %217)
	%218 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%219 = load i32, i32* %i
	%220 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %218, i32 0, i32 %219
	%221 = load [0 x i8]*, [0 x i8]** %220
	%222 = load i32, i32* %n
	%223 = sub i32 %222, 4
	%224 = getelementptr [0 x i8], [0 x i8]* %221, i32 0, i32 %223
	store i8 46, i8* %224
	br label %L.57
L.57:
	br label %L.55
L.55:
	%goodversion = alloca i8
	store i8 1, i8* %goodversion
	%225 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 6, i8* %225
	%226 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 1, i8* %226
	%227 = load [0 x i8]*, [0 x i8]** %llvmversion
	%228 = icmp ne [0 x i8]* %227, null
	br i1 %228, label %L.60, label %L.59
L.60:
	%229 = load [0 x i8]*, [0 x i8]** %llvmversion
	%230 = getelementptr [0 x i8], [0 x i8]* %229, i32 0, i32 0
	%231 = load i8, i8* %230
	%232 = zext i8 %231 to i32
	switch i32 %232, label %L.61 [
		i32 51, label %L.63
		i32 52, label %L.64
		i32 53, label %L.64
		i32 54, label %L.64
	]
L.63:
	%233 = load [0 x i8]*, [0 x i8]** %llvmversion
	%234 = getelementptr [0 x i8], [0 x i8]* %233, i32 0, i32 1
	%235 = load i8, i8* %234
	%236 = icmp eq i8 %235, 46
	br i1 %236, label %L.66, label %L.67
L.66:
	%237 = load [0 x i8]*, [0 x i8]** %llvmversion
	%238 = getelementptr [0 x i8], [0 x i8]* %237, i32 0, i32 2
	%239 = load i8, i8* %238
	%240 = zext i8 %239 to i32
	switch i32 %240, label %L.68 [
		i32 52, label %L.70
		i32 53, label %L.70
		i32 54, label %L.71
		i32 55, label %L.72
		i32 56, label %L.73
		i32 57, label %L.74
	]
L.70:
	%241 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 1, i8* %241
	%242 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 0, i8* %242
	br label %L.69
L.71:
	%243 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 2, i8* %243
	%244 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 0, i8* %244
	br label %L.69
L.72:
	%245 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 3, i8* %245
	%246 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 1, i8* %246
	br label %L.69
L.73:
	%247 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 4, i8* %247
	%248 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 1, i8* %248
	br label %L.69
L.74:
	%249 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 5, i8* %249
	%250 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 1, i8* %250
	br label %L.69
L.68:
	store i8 0, i8* %goodversion
	br label %L.69
L.69:
	br label %L.65
L.67:
	store i8 0, i8* %goodversion
	br label %L.65
L.65:
	br label %L.62
L.64:
	%251 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	store i8 6, i8* %251
	%252 = getelementptr %A.3, %A.3* @feature, i32 0, i32 11
	store i8 1, i8* %252
	br label %L.62
L.61:
	br label %L.62
L.62:
	br label %L.59
L.59:
	%253 = load i8, i8* %goodversion
	%254 = icmp ne i8 %253, 0
	%255 = xor i1 %254, true
	br i1 %255, label %L.76, label %L.75
L.76:
	%256 = getelementptr [35 x i8], [35 x i8]* @S.1113
	%257 = bitcast [35 x i8]* %256 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %257)
	%258 = load [0 x i8]*, [0 x i8]** %llvmversion
	%259 = bitcast [0 x i8]* %258 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %259)
	call void @sys_fildes_nl(i32 2)
	store i32 2, i32* %rv.0
	br label %return
L.75:
	%260 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	%261 = load i8, i8* %260
	%262 = icmp ne i8 %261, 0
	br i1 %262, label %L.77, label %L.78
L.77:
	%263 = getelementptr %A.3, %A.3* @feature, i32 0, i32 10
	%264 = load i8, i8* %263
	%265 = icmp ult i8 %264, 5
	br label %L.78
L.78:
	%266 = phi i1 [ false, %L.75 ], [ %265, %L.77 ]
	br i1 %266, label %L.80, label %L.79
L.80:
	%267 = getelementptr [51 x i8], [51 x i8]* @S.1114
	%268 = bitcast [51 x i8]* %267 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %268)
	%269 = load [0 x i8]*, [0 x i8]** %llvmversion
	%270 = bitcast [0 x i8]* %269 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %270)
	call void @sys_fildes_nl(i32 2)
	%271 = getelementptr %A.3, %A.3* @feature, i32 0, i32 3
	store i8 0, i8* %271
	br label %L.79
L.79:
	%272 = load [0 x i8]*, [0 x i8]** %targetarch
	%273 = bitcast [0 x i8]* %272 to [0 x i8]*
	%274 = call i8 @target_set([0 x i8]* %273)
	%275 = icmp ne i8 %274, 0
	%276 = xor i1 %275, true
	br i1 %276, label %L.82, label %L.81
L.82:
	%277 = getelementptr [21 x i8], [21 x i8]* @S.1115
	%278 = bitcast [21 x i8]* %277 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %278)
	%279 = load [0 x i8]*, [0 x i8]** %targetarch
	%280 = icmp ne [0 x i8]* %279, null
	br i1 %280, label %L.84, label %L.85
L.84:
	%281 = load [0 x i8]*, [0 x i8]** %targetarch
	%282 = bitcast [0 x i8]* %281 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %282)
	br label %L.83
L.85:
	%283 = bitcast [4 x i8]* @target_DefaultTarget to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %283)
	br label %L.83
L.83:
	call void @sys_fildes_nl(i32 2)
	call void @target_list()
	store i32 2, i32* %rv.0
	br label %return
L.81:
	%284 = getelementptr %A.2, %A.2* @debug, i32 0, i32 2
	%285 = load i8, i8* %284
	%286 = icmp ne i8 %285, 0
	br i1 %286, label %L.87, label %L.86
L.87:
	call void @stmt_SearchPathPrint()
	br label %L.86
L.86:
	%287 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%288 = load i32, i32* %i
	%289 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %287, i32 0, i32 %288
	%290 = load [0 x i8]*, [0 x i8]** %289
	%291 = getelementptr [0 x i8], [0 x i8]* %290
	%292 = bitcast [0 x i8]* %291 to [0 x i8]*
	%293 = call i8 @stmt_FileFind([0 x i8]* %292, i8 1)
	%294 = icmp ne i8 %293, 0
	%295 = xor i1 %294, true
	br i1 %295, label %L.89, label %L.88
L.89:
	%296 = getelementptr [28 x i8], [28 x i8]* @S.1116
	%297 = bitcast [28 x i8]* %296 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %297)
	%298 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%299 = load i32, i32* %i
	%300 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %298, i32 0, i32 %299
	%301 = load [0 x i8]*, [0 x i8]** %300
	%302 = getelementptr [0 x i8], [0 x i8]* %301
	%303 = bitcast [0 x i8]* %302 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %303)
	call void @sys_fildes_nl(i32 2)
	store i32 2, i32* %rv.0
	br label %return
L.88:
	%304 = load [0 x i8]*, [0 x i8]** %outfile
	%305 = icmp ne [0 x i8]* %304, null
	br i1 %305, label %L.91, label %L.90
L.91:
	%306 = load [0 x i8]*, [0 x i8]** %outfile
	%307 = bitcast [0 x i8]* %306 to [0 x i8]*
	%308 = call i32 @open([0 x i8]* %307, i32 577, i32 416)
	store i32 %308, i32* %outfd
	%309 = load i32, i32* %outfd
	%310 = icmp slt i32 %309, 0
	br i1 %310, label %L.93, label %L.92
L.93:
	%311 = getelementptr [31 x i8], [31 x i8]* @S.1117
	%312 = bitcast [31 x i8]* %311 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %312)
	%313 = load [0 x i8]*, [0 x i8]** %outfile
	%314 = getelementptr [0 x i8], [0 x i8]* %313
	%315 = bitcast [0 x i8]* %314 to [0 x i8]*
	call void @sys_fildes_str(i32 2, [0 x i8]* %315)
	call void @sys_fildes_nl(i32 2)
	store i32 2, i32* %rv.0
	br label %return
L.92:
	br label %L.90
L.90:
	call void @symb_Init()
	call void @ast_Init()
	%316 = call %symb_SymbNode* @symb_Push(%symb_SymbNode* null, %symb_SymbNode* null)
	%317 = load [0 x [0 x i8]*]*, [0 x [0 x i8]*]** %argv
	%318 = load i32, i32* %i
	%319 = getelementptr [0 x [0 x i8]*], [0 x [0 x i8]*]* %317, i32 0, i32 %318
	%320 = load [0 x i8]*, [0 x i8]** %319
	%321 = getelementptr [0 x i8], [0 x i8]* %320
	%322 = bitcast [0 x i8]* %321 to [0 x i8]*
	%323 = call %ast_AstNode* @stmt_Program([0 x i8]* %322)
	store %ast_AstNode* %323, %ast_AstNode** %tree
	%324 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%325 = getelementptr %A.1, %A.1* %324, i32 0, i32 1
	%326 = load i8, i8* %325
	%327 = icmp ne i8 %326, 0
	br i1 %327, label %L.95, label %L.94
L.95:
	call void @symb_Dump(i8 1)
	br label %L.94
L.94:
	call void @symb_Pop()
	%328 = getelementptr %A.2, %A.2* @debug, i32 0, i32 0
	%329 = getelementptr %A.1, %A.1* %328, i32 0, i32 0
	%330 = load i8, i8* %329
	%331 = icmp ne i8 %330, 0
	br i1 %331, label %L.97, label %L.96
L.97:
	call void @symb_Dump(i8 1)
	br label %L.96
L.96:
	%332 = getelementptr %A.2, %A.2* @debug, i32 0, i32 1
	%333 = load i8, i8* %332
	%334 = icmp ne i8 %333, 0
	br i1 %334, label %L.99, label %L.98
L.99:
	%335 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @ast_Dump(%ast_AstNode* %335)
	br label %L.98
L.98:
	%336 = call i8 @type_FwdCheck()
	%337 = load i8, i8* @lex_ErrorCount
	%338 = icmp eq i8 %337, 0
	br i1 %338, label %L.101, label %L.100
L.101:
	%339 = getelementptr %A.3, %A.3* @feature, i32 0, i32 2
	%340 = load i8, i8* %339
	%341 = icmp ne i8 %340, 0
	br i1 %341, label %L.103, label %L.104
L.103:
	call void @sys_fildes_nl(i32 1)
	br label %L.102
L.104:
	%342 = load i32, i32* %outfd
	%343 = load %ast_AstNode*, %ast_AstNode** %tree
	call void @llvm_Gen(i32 %342, %ast_AstNode* %343)
	br label %L.102
L.102:
	br label %L.100
L.100:
	%344 = load i8, i8* @lex_ErrorCount
	%345 = icmp ne i8 %344, 0
	br i1 %345, label %L.106, label %L.105
L.106:
	store i32 1, i32* %rv.0
	br label %return
L.105:
	store i32 0, i32* %rv.0
	br label %return
return:
	%346 = load i32, i32* %rv.0
	ret i32 %346
}
declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1) nounwind
declare void @llvm.memset.p0i8.i32(i8*, i8, i32, i32, i1) nounwind
declare i64 @llvm.ctlz.i64(i64, i1)
declare i64 @llvm.cttz.i64(i64, i1)
