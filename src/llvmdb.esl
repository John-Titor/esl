/*
 * Output the debug information as LLVM metadata.
 * The LLVM documentation is incomplete, out-of-date, or just wrong.
 * Use clang's calls to DIBuilder routines (llvm/lib/Analysis/DIBuilder.cpp)
 * in clang/lib/CodeGen/CGDebuginfo.cpp as a reference.
 *
 * Copyright (c) 2010-2017, Brian G. Lucas.  See LICENSE file.
 */

package llvmdb
{
    alias llvm.f as f;
    type DW_TAG:
    (
	Array=1,
	Class=2,
	EntryPoint=3,
	Enumeration=4,
	FormalParameter=5,
	Label=10,
	Block=11,
	Member=13,
	Pointer=15,
	Reference=16,
	CompileUnit=17,
	String=18,
	Structure=19,
	SubroutineType=21,
	Typedef=22,
	Union=23,
	Inheritance=28,
	Inlined=29,
	Subrange=33,
	BasicType=36,
	Const=38,
	Enumerator=40,
	File=41,
	Subprogram=46,
	GlobalVariable=52,
	Volatile=53,
	Restrict=55,
	Namespace=57,
	AutoVariable=256,
	ArgVariable=257,
	Expression=258,
	Vector=259
    );
    type DW_ATE:
    (	Address=1, Boolean=2, ComplexFloat=3, Float=4,
	Signed=5, SignedChar=6, Unsigned=7, UnsignedChar=8
    );
    const DWLanguage:_uint32 = 12;	// FIXME: using C99 for now
    const LLVMDebugVersion:_uint32 = 0xC_0000;
    type DIFlags:	// from llvm/include/llvm/Analysis/DebugInfo.h
    ( Private		= 1 << 0,
      Protected		= 1 << 1,
      FwdDecl		= 1 << 2,
      AppleBlock	= 1 << 3,
      BlockByrefStruct	= 1 << 4,
      Virtual		= 1 << 5,
      Artificial	= 1 << 6,
      Explicit		= 1 << 7,
      Prototyped	= 1 << 8,
      ObjcClassComplete	= 1 << 9
    );
    const meta:_byte = '!';		// metadata introducer
    type TermT: (COMMA, BRACE, PAREN, NONE);
    type seqnoT: _uint16;		// meta sequence number
    type LineT:
    {   next:   @LineT;
	tag:    seqnoT;
	lineno: _uint16;
	context:seqnoT;
    };
    type Line: @LineT;
    var seqno: seqnoT;
    var unit, file, subr, blok, expr: seqnoT;
    var nullmeta, filenamedir, globals, subprogs, retained, enums, imported: seqnoT;
    var gvhead, gvtail: Symb;	// linked list of global variables
    var lvhead, lvtail: Symb;	// linked list of local variables
    var sphead, sptail: Symb;	// linked list of subprograms
    var lnhead, lntail: Line;	// linked list of line number descriptors
    var lexblkno: _uint;	// unique id for lexical block

    proc GetLineContext(): seqnoT
    {
	return subr;
    }

    proc PTerminator(term: TermT)
    {
	if term
	is BRACE then f.str("}\n");
	is COMMA then f.str(", ");
	is PAREN then f.str(" )");
    }

    proc PSeq(n: seqnoT)
    {
	f.chr(meta);
	f.uint(n);
    }
    proc PMetaSeq(n: seqnoT)
    {
	PSeq(n);
	f.str(" = !");
    }

    proc PMetaSeqD(n: seqnoT)
    {
	PSeq(n);
	f.str(" = distinct !");
    }

    proc PStart(n: seqnoT, name: @[]_byte)
    {
        PMetaSeq(n);
        f.str(name);
        f.chr('(');
    }

    proc PStartDistinct(n: seqnoT, name: @[]_byte)
    {
        PMetaSeqD(n);
        f.str(name);
        f.chr('(');
    }

    proc PString(s: @[]_byte, term: TermT)
    {
        f.str(s);
	PTerminator(term);
    }

    proc PQString(s: @[]_byte, term: TermT)
    {
        f.chr('"');
        f.str(s);
        f.chr('"');
	PTerminator(term);
    }

    proc PStringD(s1: @[]_byte, s2: @[]_byte, delim: _byte, term: TermT)
    {
        f.chr('"');
	if s1 != 0 then
	{   f.str(s1);
	    f.chr(delim);
	}
	if s2 != 0 then f.str(s2);
	f.chr('"');
	PTerminator(term);
    }

    proc PName(s: Symb, term: TermT)
    {
	if s != 0 && !symb.IsAnon(s@.ident) then
	    PQString(s@.ident, term);
	else
	    PQString(0, term);
    }

    proc PFullName(s: Symb, term: TermT)
    {
	if s != 0 && !symb.IsAnon(s@.ident) then
	{   if s@.package != 0 then
		PStringD(s@.package@.ident, s@.ident, '_', term);
	    else
		PQString(s@.ident, term);
	}
	else
	    PQString(0, term);
    }

    proc PUint(n: _uint, term: TermT)
    {
	f.uint(n);
	PTerminator(term);
    }

    proc PMetaString(s: @[]_byte, term: TermT)
    {
	f.chr('!');
        f.chr('"');
        f.str(s);
        f.chr('"');
	PTerminator(term);
    }

    proc PMetaRef(n: seqnoT, term: TermT)
    {
	f.chr('!');
	f.uint(n);
	PTerminator(term);
    }

    proc PListStart(n: seqnoT)
    {
	PMetaSeq(n);
	f.chr('{');
    }

    proc PNull(term: TermT)
    {
	f.str("null");
	PTerminator(term);
    }

    proc PBoolean(b: boolean, term: TermT)
    {
	if b then f.str("true"); else f.str("false");
	PTerminator(term);
    }

    proc P32(v: _uint32, term: TermT)
    {
	f.str("i32 ");
	f.uint32(v);
	PTerminator(term);
    }

    proc P64(v: _uint64, term: TermT)
    {
	f.str("i64 ");
	f.uint64(v);
	PTerminator(term);
    }

    proc PNewListStart(): seqnoT
    {   var tag: seqnoT;

	seqno += 1;  tag = seqno;
	PListStart(tag);
	return tag;
    }

    proc PEmptyList(): seqnoT
    {   var tag: seqnoT;

	tag = PNewListStart();
	P32(0, BRACE);
	return tag;
    }


    proc DefType(t: Type): seqnoT;		// forward

    proc DefFormals(ps: Symb): _uint
    {   var fs: Symb;
	var n: _uint;

	n = 0;
	fs = ps@.parmlist;
	while fs != 0 do
	{   n += 1;
	    DefType(fs@.type);
	    fs = fs@.next;
	}
	return n;
    }

    proc DefRetvs(ps: Symb): _uint
    {   var tl: type.TypeList;
	var n: _uint;

	n = 0;
	tl = ps@.retvlist;
	while tl != 0 do
	{   n += 1;
	    DefType(tl@.type);
	    tl = tl@.next;
	}
	return n;
    }

    proc DefBasicType(dwtype: DW_ATE, t: type.Type): seqnoT
    {   var tagt: seqnoT;

	seqno += 1;  tagt = seqno;
	PStart(tagt, "DIBasicType");
	if t@.name != 0 then
	{   f.str("name: ");  PQString(t@.name@.ident, COMMA);
	}
	f.str("size: ");  PUint(t@.width, COMMA);
	f.str("align: ");  PUint(t@.align, COMMA);
	f.str("encoding: DW_ATE_");
	if t@.kind
	is ENUM, UINT then
	{   // FIXME: check for boolean
	    if t == type.booltype then f.str("boolean");
	    elif t@.width <= 8 then f.str("unsigned_char");
	    else f.str("unsigned");
	}
	is SINT then
	{   if t@.width <= 8 then f.str("signed_char"); else f.str("signed");
	}
	is REF then f.str("address");
	is FLOAT then f.str("float");
	f.str(")\n");
	return tagt;
    }

    proc PCompositeType(tag: seqnoT, from: seqnoT, members: seqnoT,
			dwat: @[]_byte, t:Type)
    {
	PStart(tag, "DICompositeType");
        f.str("tag: DW_TAG_");  PString(dwat, COMMA);
	if t@.name != 0 then
	{   f.str("name: ");  PName(t@.name, COMMA);
	}
	f.str("file: ");  PMetaRef(filenamedir, COMMA);
	if t@.name != 0 then
	{   f.str("line: ");  PUint(t@.name@.lineno, COMMA);
	}
	f.str("size: ");  PUint(t@.width, COMMA);
	f.str("align: ");  PUint(t@.align, NONE);
	// FIXME - more to come
	if from != 0 then
	{   f.str(", baseType: ");  PMetaRef(from, NONE);
	}
	if members != 0 then
	{   f.str(", elements: ");  PMetaRef(members, NONE);
	}
	f.str(")\n");
    }

    proc PDerivedType(tag: seqnoT, from: seqnoT, dwat: @[]_byte, t:Type)
    {
        PStart(tag, "DIDerivedType");
        f.str("tag: DW_TAG_");  PString(dwat, COMMA);
        f.str("baseType: ");  PMetaRef(from, COMMA);
        f.str("size: ");  PUint(t@.width, COMMA);
        f.str("align: ");  PUint(t@.align, NONE);
        f.str(")\n");
    }

    proc DefSubRange(t: Type, signed: boolean): seqnoT
    {   // Not sure what to do with subranges since C,C++ don't have then
	// For now just define them as a basic type

	if signed then
	    return DefBasicType(DW_ATE.Signed, t);
	else
	    return DefBasicType(DW_ATE.Unsigned, t);
    }


    proc DefSubroutine(stag: seqnoT, ps: Symb);	// forward

    proc DefRefType(t: Type): seqnoT
    {   var tagb, tagr: seqnoT;

	if t@.kind == REFPROC then
	{   seqno += 1;  tagb = seqno;
	    DefSubroutine(tagb, t@.list);
	}
	else
	    tagb = DefType(t@.base);
	seqno += 1;  tagr = seqno;
	PDerivedType(tagr, tagb, "pointer_type", t);
	return tagr;
    }

    proc DefRange(lo: _uint64, hi: _uint64): seqnoT
    {   var tagr: seqnoT;

	seqno += 1;  tagr = seqno;
	// emit Subrange
	PStart(tagr, "DISubrange");
	f.str("count: ");  PUint(hi-lo+1, NONE);
	if lo != 0 then
	{   f.str(", lowerBound: ");  PUint(lo, NONE);
	}
	f.str(")\n");
	return tagr;
    }

    proc DefEnumConst(s: Symb): seqnoT
    {   var tagc: seqnoT;

	seqno += 1;  tagc = seqno;
	PStart(tagc, "DIEnumerator");
	f.str("name: ");  PQString(s@.ident, COMMA);
	f.str("value: ");  PUint(s@.const@.valu, NONE);
	f.str(")\n");
	return tagc;
    }

    proc DefEnumerationType(t: Type): seqnoT
    {   var tag, list, tage: seqnoT;
	var s: Symb;
	var term: TermT;

	// first output all the constants
	s = t@.list;
	while s != 0 do
	{   if s@.dbtag == 0 then
		s@.dbtag = DefEnumConst(s);
	    s = s@.next;
	}
	// then the list
	list = PNewListStart();
	term = COMMA;
	s = t@.list;
	while s != 0 do
	{   tag = s@.dbtag;
	    s = s@.next;
	    if s == 0 then term = BRACE;
	    PMetaRef(tag, term);
	}
	seqno += 1;  tage = seqno;
	// emit Enumeration
	PCompositeType(tage, 0, list, "enumeration_type", t);
	return tage;
    }

    proc DefArrayType(t: Type): seqnoT
    {   var tagb, tagi, taga, tagl: seqnoT;

	tagb = DefType(t@.base);
	tagi = 0;
	if !t@.flex then
	    tagi = DefRange(t@.lo, t@.hi);
	// LLVM wants a list of indices
	tagl = 0;
	if tagi != 0 then
	{   tagl = PNewListStart();
	    PMetaRef(tagi, BRACE);
	}
	seqno += 1;  taga = seqno;
	// emit Array
	PCompositeType(taga, tagb, tagl, "array_type", t);
	return taga;
    }

    proc DefField(s: Symb, rec: seqnoT): seqnoT
    {   var tagt, tagf: seqnoT;
	var t: Type;

	t = s@.type;
	tagt = DefType(t);
	seqno += 1;  tagf = seqno;
	// emit Member
	PDerivedType(tagf, tagt, "member", t);
	return tagf;
    }

    proc DefRecordType(t: Type): seqnoT
    {   var tag, list, rec: seqnoT;
	var s: Symb;
	var term: TermT;

	// must put the record out first in case of recursion
	// (e.g. field in record points to record)
	seqno += 1;  rec = seqno;
	t@.dbtag = rec;
	seqno += 1;  list = seqno;
	// emit Structure
	PCompositeType(rec, 0, list, "structure_type", t);
	// then output all the fields and their types
	s = t@.list;
	while s != 0 do
	{   if s@.dbtag == 0 then
		s@.dbtag = DefField(s, rec);
	    s = s@.next;
	}
	// then the list of fields
	PListStart(list);
	term = COMMA;
	s = t@.list;
	while s != 0 do
	{   tag = s@.dbtag;
	    s = s@.next;
	    if s == 0 then term = BRACE;
	    PMetaRef(tag, term);
	}
	return rec;
    }

    proc DefType(t: Type): seqnoT
    {   var tag: seqnoT;

	if t == 0 then return 0;
	tag = t@.dbtag;
	if tag == 0 then
	{   if t@.kind
	    is ENUM then
	    {   if t == type.booltype then
		    tag = DefBasicType(DW_ATE.Boolean, t);
		else
		    tag = DefEnumerationType(t);
	    }
	    is UINT then
	    {   if t == type.bytetype then
		    tag = DefBasicType(DW_ATE.UnsignedChar, t);
		else if t == type.wordtype ||
			t == type.uinttypes[0] ||
			t == type.uinttypes[1] ||
			t == type.uinttypes[2] ||
			t == type.uinttypes[3] then
			    tag = DefBasicType(DW_ATE.Unsigned, t);
		else
		    tag = DefSubRange(t, false);
	    }
	    is SINT then
	    {   if t == type.swordtype ||
		   t == type.inttypes[0] ||
		   t == type.inttypes[1] ||
		   t == type.inttypes[2] ||
		   t == type.inttypes[3] then
			tag = DefBasicType(DW_ATE.Signed, t);
		else
		    tag = DefSubRange(t, true);
	    }
	    is FLOAT then
		tag = DefBasicType(DW_ATE.Float, t);
	    is REF, REFPROC then tag = DefRefType(t);
	    is ARRAY then tag = DefArrayType(t);	// FIXME - packed
	    is RECORD then tag = DefRecordType(t);      // FIXME - packed
	    t@.dbtag = tag;
	}
	return tag;
    }

    proc DefLines()
    {   var ln: Line;

	ln = lnhead;
	while ln != 0 do
	{
	    PStart(ln@.tag, "DILocation");
	    f.str("line: ");  PUint(ln@.lineno, COMMA);
	    f.str("column: ");  PUint(0, COMMA);
	    f.str("scope: ");  PMetaRef(ln@.context, NONE);
	    f.str(")\n");
	    ln = ln@.next;
	}
	lnhead = 0;
	lntail = 0;
    }

    proc PLine(lineno: _uint16)
    {   var tag: seqnoT;
	var ln: Line;

	if lntail != 0 && lntail@.lineno == lineno then
	    tag = lntail.tag;
	else
	{   seqno += 1;
	    tag = seqno;
	    ln = Line(sys.zalloc(LineT?size));
	    ln@.tag = tag;
	    ln@.lineno = lineno;
	    ln@.context = GetLineContext();
	    if lntail == 0 then
		lnhead = ln;
	    else
		lntail@.next = ln;
	    lntail = ln;
	}
	f.str(", !dbg ");
	PSeq(tag);
    }

    proc DefVar(s: Symb): seqnoT
    {   var ttag, vtag: seqnoT;

	seqno += 1;
	s@.dbtag = seqno;
	if s@.linkage
	is LOCAL, FORMAL then
	{
	    f.str("\tcall void @llvm.dbg.declare(metadata ");
	    llvm.PType(s@.type);
	    f.str("* ");
	    llvm.PName(s);
	    f.str(", metadata !");
	    f.uint(seqno);
	    f.str(", metadata !");
	    f.uint(expr);
	    f.chr(')');
	    PLine(s@.lineno);
	    f.nl();
	    if s@.linkage != FORMAL then
	    {   s@.next = 0;
		if lvtail == 0 then
		    lvhead = s;
		else
		    lvtail@.next = s;
		lvtail = s;
	    }
	}
	else
	{
	    vtag = s@.dbtag;
	    if feature.debug >= 6 then
	    {   var etag: seqnoT;
		seqno += 1;
		etag = seqno;
		if s@.linkage != FIXED then
		{   f.str(", !dbg ");  PMetaRef(etag, NONE);
		}
		f.nl();
		ttag = DefType(s@.type);
		PStart(etag, "DIGlobalVariableExpression");
		f.str("var: ");  PMetaRef(vtag, COMMA);
		f.str("expr: !DIExpression())\n");
		s@.dbtag = etag;     // replace with indirect thru GVE
	    }
	    else
	    {   f.nl();
		ttag = DefType(s@.type);
	    }
	    PStartDistinct(vtag, "DIGlobalVariable");
//	    PStart(s@.dbtag, "DIGlobalVariable");
	    f.str("name: ");  PFullName(s, COMMA);
	    f.str("scope: ");  PMetaRef(0, COMMA);
	    f.str("file: ");  PMetaRef(filenamedir, COMMA);
	    f.str("line: ");  PUint(s@.lineno, COMMA);
	    f.str("type: ");  PMetaRef(ttag, COMMA);
	    f.str("isLocal: ");  PBoolean(s@.linkage == NORMAL, COMMA);
	    f.str("isDefinition: ");  PBoolean(s@.linkage != EXTERN, NONE);
	    if feature.debug < 6 then
	    {   f.str(", variable: ");
		llvm.PType(s@.type);
		f.str("* ");
		llvm.PName(s);
	    }
	    f.str(")\n");
	    // We are re-using the next field in Symb,
	    // we are done using it, right?
	    s@.next = 0;
	    if gvtail == 0 then
	    {   gvhead = s;
		gvtail = s;
	    }
	    else
	    {   gvtail@.next = s;
		gvtail = s;
	    }
	}
	return seqno;
    }

    proc DefSubroutine(stag: seqnoT, ps: Symb)
    {   var tag, list: seqnoT;
	var s: Symb;
	var tl: type.TypeList;
	var term: TermT;

	// FIXME: what about multiple returned values?
	// define all the returned values and formals
	tl = ps@.retvlist;
	while tl != 0 do
	{   DefType(tl@.type);
	    tl = tl@.next;
	}
	s = ps@.parmlist;
	while s != 0 do
	{   DefType(s@.type);
	    s = s@.next;
	}
	// now create the list of returned values and formals
	list = PNewListStart();
	tl = ps@.retvlist;
	s = ps@.parmlist;
	term = COMMA;
	if tl == 0 then				// no return value
	{   if s == 0 then term = BRACE;
	    PNull(term);
	}
	else
	{   while tl != 0 do
	    {   tag = tl@.type@.dbtag;
		tl = tl@.next;
		if tl == 0 && s == 0 then term = BRACE;
		PMetaRef(tag, term);
	    }
	}
	term = COMMA;
	while s != 0 do
	{   tag = s@.type@.dbtag;
	    s = s@.next;
	    if s == 0 then term = BRACE;
	    PMetaRef(tag, term);
	}
	// emit SubroutineType
	PStart(stag, "DISubroutineType");
	f.str("types: ");  PMetaRef(list, NONE);
	f.str(")\n");
    }

    proc ProcStart(ps: Symb)
    {
	seqno += 1;  subr = seqno;
    }

    proc ProcFinish(ps: Symb)
    {   var s: Symb;
	var stype, stag, ttag, fvars, empty: seqnoT;
	var argno: _uint;
	var isdef: boolean;

	seqno += 1;  stype = seqno;
	// emit SubProgram
	isdef =  ps@.linkage != EXTERN;
	if isdef then
	    PStartDistinct(subr, "DISubprogram");
	else
	    PStart(subr, "DISubprogram");
	f.str("name: ");  PFullName(ps, COMMA);
	f.str("scope: ");  PMetaRef(filenamedir, COMMA);
	f.str("file: ");  PMetaRef(filenamedir, COMMA);
	f.str("line: ");  PUint(ps@.lineno, COMMA);
	f.str("type: ");  PMetaRef(stype, COMMA);
	f.str("isLocal: ");  PBoolean(ps@.linkage != GLOBAL, COMMA);
	f.str("isDefinition: ");  PBoolean(isdef, COMMA);
	f.str("scopeLine: ");  PUint(ps@.lineno+1, COMMA);
	if ps@.parmlist != 0 then
	{   f.str("flags: ");  PString("DIFlagPrototyped", COMMA);
	}
	f.str("isOptimized: ");  PBoolean(false, COMMA);
	f.str("unit: "); PMetaRef(unit, COMMA);
/*
	f.str("function: ");
	    llvm.PRetvType(ps@.retvlist, false);
	    f.str(" (");
	    s = ps@.parmlist;
	    while s != 0 do
	    {   llvm.PType(s@.type);
		s = s@.next;
		if s != 0 then f.str(", ");
	    }
	    f.str(")* ");
	    llvm.PName(ps);
	PTerminator(COMMA);
*/
	f.str("variables: ");  PMetaRef(nullmeta, NONE);
	f.str(")\n");
	ps@.dbtag = subr;	// save tag
	ps@.next = 0;		// and add to subprogram list
	if sptail == 0 then
	    sphead = ps;
	else
	    sptail@.next = ps;
	sptail = ps;

	// define all the formals and returned values
	DefFormals(ps);
	DefRetvs(ps);
	// output the subroutine type descriptor
	DefSubroutine(stype, ps);
	// output formal argument descriptors
	argno = 0;
	s = ps@.parmlist;
	while s != 0 do
	{   argno += 1;
	    ttag = DefType(s@.type);
	    stag = s@.dbtag;
	    if stag == 0 then	// FIXME: shouldn't happen
	    {   seqno += 1;
		stag = seqno;
	    }
	    PStart(stag, "DILocalVariable");
	    f.str("name: ");  PName(s, COMMA);
	    f.str("arg: ");  PUint(argno, COMMA);
	    f.str("scope: ");  PMetaRef(subr, COMMA);
	    f.str("file: ");  PMetaRef(filenamedir, COMMA);
	    f.str("line: ");  PUint(s@.lineno, COMMA);
	    f.str("type: ");  PMetaRef(ttag, NONE);
	    f.str(")\n");
	    s = s@.next;
	}
	// output local variable descriptors
	s = lvhead;
	while s != 0 do
	{   ttag = DefType(s@.type);
	    stag = s@.dbtag;
	    PStart(stag, "DILocalVariable");
	    f.str("name: ");  PName(s, COMMA);
	    f.str("scope: ");  PMetaRef(subr, COMMA);
	    f.str("file: ");  PMetaRef(filenamedir, COMMA);
	    f.str("line: ");  PUint(s@.lineno, COMMA);
	    f.str("type: ");  PMetaRef(ttag, NONE);
	    f.str(")\n");
	    s = s@.next;
	}
	// output line number descriptors
	DefLines();
	lvhead = 0;
	lvtail = 0;
	subr = 0;
	blok = 0;
    }

    proc PackageStart(name: @[]_byte)
    {
    }

    proc PackageEnd()
    {
    }

    proc PFileDir(seqno: seqnoT, fs: Symb)
    {   var i: _uint;
	var file, dir: @[]_byte;

	dir = fs@.ident;
	// need to split the name into file and directory
	i = zstr.rfind(dir, '/', lex.PathMax);
	if i == lex.PathMax then	// '/' not found
	{   file = dir;
	    dir = "";
	}
	else
	{   file = dir[i+1:];
	    dir[i] = 0;
	}
	PStart(seqno, "DIFile");
	f.str("filename: ");  PQString(file, COMMA);
	f.str("directory: ");  PQString(dir, NONE);
	f.str(")\n");
	if i < lex.PathMax then
	    dir[i] = '/';   // restore last '/'
    }

    proc FileStart(fs: Symb)
    {   var tag: seqnoT;

	tag = fs@.dbtag;
	if fs@.dbtag == 0 then
	{   seqno += 1;  tag = seqno;
	    fs@.dbtag = tag;
	}
	filenamedir = tag;	    // so others can reference it
	PFileDir(tag, fs);
    }

    proc FileFinish(fs: Symb)
    {
	fs = fs@.package;
	if fs != 0 then
	    filenamedir = fs@.dbtag;
    }

    proc ProgStart(fs: Symb, opt: boolean)
    {   var debugversion: _uint;

	unit = 0;
	seqno = 2;	// start after module flags below
	seqno += 1;  filenamedir = seqno;
	seqno += 1;  nullmeta = seqno;
//	seqno += 1;  enums = seqno;
//	seqno += 1;  retained = seqno;
	seqno += 1;  subprogs = seqno;
	seqno += 1;  globals = seqno;
//	seqno += 1;  imported = seqno;
	seqno += 1;  expr = seqno;
	// emit anchor
    	f.str("!llvm.dbg.cu = !{!"); f.uint(unit); f.str("}\n");
	f.str("!llvm.module.flags = !{!1, !2}\n");
	f.str("!1 = !{i32 2, !\"Dwarf Version\", i32 4}\n");
	f.str("!2 = !{i32 2, !\"Debug Info Version\", ");
	debugversion = 3;
	P32(debugversion, BRACE);
	// emit Compile Unit
	PStartDistinct(unit, "DICompileUnit");
	f.str("language: ");  f.str("DW_LANG_C99");     // FIXME
	f.str(", file: ");  PMetaRef(filenamedir, COMMA);
	f.str("producer: ");  PQString("ESL Compiler", COMMA);
	f.str("isOptimized: ");  PBoolean(false, COMMA);   // FIXME
	f.str("runtimeVersion: ");  PUint(0, COMMA);
	f.str("emissionKind: "); f.str("FullDebug, ");
	f.str("globals: ");  PMetaRef(globals, NONE);
	f.str(")\n");
	// file name and directory will be output later
	// but we must make sure it is tagged with the number
	// we already referenced
	fs@.dbtag = filenamedir;
//	PFileDir(filenamedir, fs);
//	filenest[0] = filenamedir;
//	fileinx = 1;
	// null meta
	PMetaSeq(nullmeta);   f.str("{}\n");
	// null expression
	PStart(expr, "DIExpression");  f.str(")\n");
    }

    proc ProgFinish()
    {   var s: Symb;
	var tag, list: seqnoT;
	var term: TermT;

	// output list of enums (NOT USED YET)
//	PMetaSeq(enums);
//	PMetaRef(empty, BRACE);

	// output list of subprograms
	PListStart(subprogs);
	s = sphead;
	if s != 0 then
	{   term = COMMA;
	    while s != 0 do
	    {   tag = s@.dbtag;
		s = s@.next;
		if s == 0 then term = BRACE;
		PMetaRef(tag, term);
	    }
	}
	else
	    PTerminator(BRACE);

	// output list of global variables
	PListStart(globals);
	s = gvhead;
	if s != 0 then
	{   term = COMMA;
	    while s != 0 do
	    {   tag = s@.dbtag;
		s = s@.next;
		if s == 0 then term = BRACE;
		PMetaRef(tag, term);
	    }
	}
	else
	    PTerminator(BRACE);
	f.str("declare void @llvm.dbg.declare(metadata, metadata, metadata) nounwind readnone\n");
    }
}
// vim: ts=8 sw=4 noet nowrap

